diff -ruN ./xv6-public-src/bio.d ./xv6-public/bio.d
--- ./xv6-public-src/bio.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/bio.d	2019-11-28 17:52:29.156496491 +0200
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files ./xv6-public-src/bio.o and ./xv6-public/bio.o differ
diff -ruN ./xv6-public-src/bootasm.d ./xv6-public/bootasm.d
--- ./xv6-public-src/bootasm.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/bootasm.d	2019-11-28 17:52:29.108467057 +0200
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files ./xv6-public-src/bootasm.o and ./xv6-public/bootasm.o differ
Binary files ./xv6-public-src/bootblock and ./xv6-public/bootblock differ
diff -ruN ./xv6-public-src/bootblock.asm ./xv6-public/bootblock.asm
--- ./xv6-public-src/bootblock.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/bootblock.asm	2019-11-28 17:52:29.124476868 +0200
@@ -0,0 +1,384 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 ee 00 00 00       	call   7d3b <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	55                   	push   %ebp
+    7c7f:	89 e5                	mov    %esp,%ebp
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c81:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c86:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c87:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8a:	3c 40                	cmp    $0x40,%al
+    7c8c:	75 f8                	jne    7c86 <waitdisk+0x8>
+    ;
+}
+    7c8e:	5d                   	pop    %ebp
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	55                   	push   %ebp
+    7c91:	89 e5                	mov    %esp,%ebp
+    7c93:	57                   	push   %edi
+    7c94:	53                   	push   %ebx
+    7c95:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c98:	e8 e1 ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7c9d:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7ca2:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca7:	ee                   	out    %al,(%dx)
+    7ca8:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cad:	89 d8                	mov    %ebx,%eax
+    7caf:	ee                   	out    %al,(%dx)
+    7cb0:	89 d8                	mov    %ebx,%eax
+    7cb2:	c1 e8 08             	shr    $0x8,%eax
+    7cb5:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cba:	ee                   	out    %al,(%dx)
+    7cbb:	89 d8                	mov    %ebx,%eax
+    7cbd:	c1 e8 10             	shr    $0x10,%eax
+    7cc0:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc5:	ee                   	out    %al,(%dx)
+    7cc6:	89 d8                	mov    %ebx,%eax
+    7cc8:	c1 e8 18             	shr    $0x18,%eax
+    7ccb:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cce:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd3:	ee                   	out    %al,(%dx)
+    7cd4:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7cd9:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cde:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+  outb(0x1F6, (offset >> 24) | 0xE0);
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7cdf:	e8 9a ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+insl(int port, void *addr, int cnt)
+{
+  asm volatile("cld; rep insl" :
+    7ce4:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ce7:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cec:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf1:	fc                   	cld    
+    7cf2:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf4:	5b                   	pop    %ebx
+    7cf5:	5f                   	pop    %edi
+    7cf6:	5d                   	pop    %ebp
+    7cf7:	c3                   	ret    
+
+00007cf8 <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cf8:	55                   	push   %ebp
+    7cf9:	89 e5                	mov    %esp,%ebp
+    7cfb:	57                   	push   %edi
+    7cfc:	56                   	push   %esi
+    7cfd:	53                   	push   %ebx
+    7cfe:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d01:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d04:	89 df                	mov    %ebx,%edi
+    7d06:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d09:	89 f0                	mov    %esi,%eax
+    7d0b:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d10:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d12:	c1 ee 09             	shr    $0x9,%esi
+    7d15:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d18:	39 df                	cmp    %ebx,%edi
+    7d1a:	76 17                	jbe    7d33 <readseg+0x3b>
+    readsect(pa, offset);
+    7d1c:	56                   	push   %esi
+    7d1d:	53                   	push   %ebx
+    7d1e:	e8 6d ff ff ff       	call   7c90 <readsect>
+  offset = (offset / SECTSIZE) + 1;
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d29:	83 c6 01             	add    $0x1,%esi
+    7d2c:	83 c4 08             	add    $0x8,%esp
+    7d2f:	39 df                	cmp    %ebx,%edi
+    7d31:	77 e9                	ja     7d1c <readseg+0x24>
+    readsect(pa, offset);
+}
+    7d33:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d36:	5b                   	pop    %ebx
+    7d37:	5e                   	pop    %esi
+    7d38:	5f                   	pop    %edi
+    7d39:	5d                   	pop    %ebp
+    7d3a:	c3                   	ret    
+
+00007d3b <bootmain>:
+
+void readseg(uchar*, uint, uint);
+
+void
+bootmain(void)
+{
+    7d3b:	55                   	push   %ebp
+    7d3c:	89 e5                	mov    %esp,%ebp
+    7d3e:	57                   	push   %edi
+    7d3f:	56                   	push   %esi
+    7d40:	53                   	push   %ebx
+    7d41:	83 ec 0c             	sub    $0xc,%esp
+  uchar* pa;
+
+  elf = (struct elfhdr*)0x10000;  // scratch space
+
+  // Read 1st page off disk
+  readseg((uchar*)elf, 4096, 0);
+    7d44:	6a 00                	push   $0x0
+    7d46:	68 00 10 00 00       	push   $0x1000
+    7d4b:	68 00 00 01 00       	push   $0x10000
+    7d50:	e8 a3 ff ff ff       	call   7cf8 <readseg>
+
+  // Is this an ELF executable?
+  if(elf->magic != ELF_MAGIC)
+    7d55:	83 c4 0c             	add    $0xc,%esp
+    7d58:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d5f:	45 4c 46 
+    7d62:	75 50                	jne    7db4 <bootmain+0x79>
+    return;  // let bootasm.S handle error
+
+  // Load each program segment (ignores ph flags).
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d64:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d69:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d6f:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d76:	c1 e6 05             	shl    $0x5,%esi
+    7d79:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d7b:	39 f3                	cmp    %esi,%ebx
+    7d7d:	73 2f                	jae    7dae <bootmain+0x73>
+    pa = (uchar*)ph->paddr;
+    7d7f:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7d82:	ff 73 04             	pushl  0x4(%ebx)
+    7d85:	ff 73 10             	pushl  0x10(%ebx)
+    7d88:	57                   	push   %edi
+    7d89:	e8 6a ff ff ff       	call   7cf8 <readseg>
+    if(ph->memsz > ph->filesz)
+    7d8e:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7d91:	8b 43 10             	mov    0x10(%ebx),%eax
+    7d94:	83 c4 0c             	add    $0xc,%esp
+    7d97:	39 c1                	cmp    %eax,%ecx
+    7d99:	76 0c                	jbe    7da7 <bootmain+0x6c>
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7d9b:	01 c7                	add    %eax,%edi
+    7d9d:	29 c1                	sub    %eax,%ecx
+    7d9f:	b8 00 00 00 00       	mov    $0x0,%eax
+    7da4:	fc                   	cld    
+    7da5:	f3 aa                	rep stos %al,%es:(%edi)
+    return;  // let bootasm.S handle error
+
+  // Load each program segment (ignores ph flags).
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+  eph = ph + elf->phnum;
+  for(; ph < eph; ph++){
+    7da7:	83 c3 20             	add    $0x20,%ebx
+    7daa:	39 de                	cmp    %ebx,%esi
+    7dac:	77 d1                	ja     7d7f <bootmain+0x44>
+  }
+
+  // Call the entry point from the ELF header.
+  // Does not return!
+  entry = (void(*)(void))(elf->entry);
+  entry();
+    7dae:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7db4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7db7:	5b                   	pop    %ebx
+    7db8:	5e                   	pop    %esi
+    7db9:	5f                   	pop    %edi
+    7dba:	5d                   	pop    %ebp
+    7dbb:	c3                   	ret    
Binary files ./xv6-public-src/bootblock.o and ./xv6-public/bootblock.o differ
Binary files ./xv6-public-src/bootblockother.o and ./xv6-public/bootblockother.o differ
diff -ruN ./xv6-public-src/bootmain.d ./xv6-public/bootmain.d
--- ./xv6-public-src/bootmain.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/bootmain.d	2019-11-28 17:52:29.096459699 +0200
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files ./xv6-public-src/bootmain.o and ./xv6-public/bootmain.o differ
Binary files ./xv6-public-src/_cat and ./xv6-public/_cat differ
diff -ruN ./xv6-public-src/cat.asm ./xv6-public/cat.asm
--- ./xv6-public-src/cat.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/cat.asm	2019-11-28 17:52:27.951754105 +0200
@@ -0,0 +1,1639 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	be 01 00 00 00       	mov    $0x1,%esi
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  21:	83 f8 01             	cmp    $0x1,%eax
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+  24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+
+  if(argc <= 1){
+  27:	7e 54                	jle    7d <main+0x7d>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 56 03 00 00       	call   392 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	89 c7                	mov    %eax,%edi
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  if(argc <= 1){
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 1e 03 00 00       	call   37a <close>
+  if(argc <= 1){
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+      exit();
+    }
+    cat(fd);
+    close(fd);
+  }
+  exit();
+  64:	e8 e9 02 00 00       	call   352 <exit>
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 f3 07 00 00       	push   $0x7f3
+  71:	6a 01                	push   $0x1
+  73:	e8 38 04 00 00       	call   4b0 <printf>
+      exit();
+  78:	e8 d5 02 00 00       	call   352 <exit>
+main(int argc, char *argv[])
+{
+  int fd, i;
+
+  if(argc <= 1){
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 c6 02 00 00       	call   352 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+
+char buf[512];
+
+void
+cat(int fd)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 75 08             	mov    0x8(%ebp),%esi
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  98:	eb 1d                	jmp    b7 <cat+0x27>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 00 0b 00 00       	push   $0xb00
+  a9:	6a 01                	push   $0x1
+  ab:	e8 c2 02 00 00       	call   372 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 c3                	cmp    %eax,%ebx
+  b5:	75 26                	jne    dd <cat+0x4d>
+void
+cat(int fd)
+{
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 00 0b 00 00       	push   $0xb00
+  c4:	56                   	push   %esi
+  c5:	e8 a0 02 00 00       	call   36a <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	83 f8 00             	cmp    $0x0,%eax
+  d0:	89 c3                	mov    %eax,%ebx
+  d2:	7f cc                	jg     a0 <cat+0x10>
+    if (write(1, buf, n) != n) {
+      printf(1, "cat: write error\n");
+      exit();
+    }
+  }
+  if(n < 0){
+  d4:	75 1b                	jne    f1 <cat+0x61>
+    printf(1, "cat: read error\n");
+    exit();
+  }
+}
+  d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d9:	5b                   	pop    %ebx
+  da:	5e                   	pop    %esi
+  db:	5d                   	pop    %ebp
+  dc:	c3                   	ret    
+{
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+    if (write(1, buf, n) != n) {
+      printf(1, "cat: write error\n");
+  dd:	83 ec 08             	sub    $0x8,%esp
+  e0:	68 d0 07 00 00       	push   $0x7d0
+  e5:	6a 01                	push   $0x1
+  e7:	e8 c4 03 00 00       	call   4b0 <printf>
+      exit();
+  ec:	e8 61 02 00 00       	call   352 <exit>
+    }
+  }
+  if(n < 0){
+    printf(1, "cat: read error\n");
+  f1:	83 ec 08             	sub    $0x8,%esp
+  f4:	68 e2 07 00 00       	push   $0x7e2
+  f9:	6a 01                	push   $0x1
+  fb:	e8 b0 03 00 00       	call   4b0 <printf>
+    exit();
+ 100:	e8 4d 02 00 00       	call   352 <exit>
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	53                   	push   %ebx
+ 114:	8b 45 08             	mov    0x8(%ebp),%eax
+ 117:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 11a:	89 c2                	mov    %eax,%edx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 120:	83 c1 01             	add    $0x1,%ecx
+ 123:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 127:	83 c2 01             	add    $0x1,%edx
+ 12a:	84 db                	test   %bl,%bl
+ 12c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 12f:	75 ef                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 131:	5b                   	pop    %ebx
+ 132:	5d                   	pop    %ebp
+ 133:	c3                   	ret    
+ 134:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 13a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	56                   	push   %esi
+ 144:	53                   	push   %ebx
+ 145:	8b 55 08             	mov    0x8(%ebp),%edx
+ 148:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 14b:	0f b6 02             	movzbl (%edx),%eax
+ 14e:	0f b6 19             	movzbl (%ecx),%ebx
+ 151:	84 c0                	test   %al,%al
+ 153:	75 1e                	jne    173 <strcmp+0x33>
+ 155:	eb 29                	jmp    180 <strcmp+0x40>
+ 157:	89 f6                	mov    %esi,%esi
+ 159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 160:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 163:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 166:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 169:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 16d:	84 c0                	test   %al,%al
+ 16f:	74 0f                	je     180 <strcmp+0x40>
+ 171:	89 f1                	mov    %esi,%ecx
+ 173:	38 d8                	cmp    %bl,%al
+ 175:	74 e9                	je     160 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 177:	29 d8                	sub    %ebx,%eax
+}
+ 179:	5b                   	pop    %ebx
+ 17a:	5e                   	pop    %esi
+ 17b:	5d                   	pop    %ebp
+ 17c:	c3                   	ret    
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 180:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5e                   	pop    %esi
+ 186:	5d                   	pop    %ebp
+ 187:	c3                   	ret    
+ 188:	90                   	nop
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 196:	80 39 00             	cmpb   $0x0,(%ecx)
+ 199:	74 12                	je     1ad <strlen+0x1d>
+ 19b:	31 d2                	xor    %edx,%edx
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+ 1a0:	83 c2 01             	add    $0x1,%edx
+ 1a3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1a7:	89 d0                	mov    %edx,%eax
+ 1a9:	75 f5                	jne    1a0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ad:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	eb 0d                	jmp    1c0 <memset>
+ 1b3:	90                   	nop
+ 1b4:	90                   	nop
+ 1b5:	90                   	nop
+ 1b6:	90                   	nop
+ 1b7:	90                   	nop
+ 1b8:	90                   	nop
+ 1b9:	90                   	nop
+ 1ba:	90                   	nop
+ 1bb:	90                   	nop
+ 1bc:	90                   	nop
+ 1bd:	90                   	nop
+ 1be:	90                   	nop
+ 1bf:	90                   	nop
+
+000001c0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1c7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1cd:	89 d7                	mov    %edx,%edi
+ 1cf:	fc                   	cld    
+ 1d0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1d2:	89 d0                	mov    %edx,%eax
+ 1d4:	5f                   	pop    %edi
+ 1d5:	5d                   	pop    %ebp
+ 1d6:	c3                   	ret    
+ 1d7:	89 f6                	mov    %esi,%esi
+ 1d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001e0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	53                   	push   %ebx
+ 1e4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ea:	0f b6 10             	movzbl (%eax),%edx
+ 1ed:	84 d2                	test   %dl,%dl
+ 1ef:	74 1d                	je     20e <strchr+0x2e>
+    if(*s == c)
+ 1f1:	38 d3                	cmp    %dl,%bl
+ 1f3:	89 d9                	mov    %ebx,%ecx
+ 1f5:	75 0d                	jne    204 <strchr+0x24>
+ 1f7:	eb 17                	jmp    210 <strchr+0x30>
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	38 ca                	cmp    %cl,%dl
+ 202:	74 0c                	je     210 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 204:	83 c0 01             	add    $0x1,%eax
+ 207:	0f b6 10             	movzbl (%eax),%edx
+ 20a:	84 d2                	test   %dl,%dl
+ 20c:	75 f2                	jne    200 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 20e:	31 c0                	xor    %eax,%eax
+}
+ 210:	5b                   	pop    %ebx
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	56                   	push   %esi
+ 225:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 226:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 228:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 22b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 22e:	eb 29                	jmp    259 <gets+0x39>
+    cc = read(0, &c, 1);
+ 230:	83 ec 04             	sub    $0x4,%esp
+ 233:	6a 01                	push   $0x1
+ 235:	57                   	push   %edi
+ 236:	6a 00                	push   $0x0
+ 238:	e8 2d 01 00 00       	call   36a <read>
+    if(cc < 1)
+ 23d:	83 c4 10             	add    $0x10,%esp
+ 240:	85 c0                	test   %eax,%eax
+ 242:	7e 1d                	jle    261 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 244:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 248:	8b 55 08             	mov    0x8(%ebp),%edx
+ 24b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 24d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 24f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 253:	74 1b                	je     270 <gets+0x50>
+ 255:	3c 0d                	cmp    $0xd,%al
+ 257:	74 17                	je     270 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 259:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 25c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 25f:	7c cf                	jl     230 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 261:	8b 45 08             	mov    0x8(%ebp),%eax
+ 264:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 268:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26b:	5b                   	pop    %ebx
+ 26c:	5e                   	pop    %esi
+ 26d:	5f                   	pop    %edi
+ 26e:	5d                   	pop    %ebp
+ 26f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 270:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 273:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 275:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 279:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 27c:	5b                   	pop    %ebx
+ 27d:	5e                   	pop    %esi
+ 27e:	5f                   	pop    %edi
+ 27f:	5d                   	pop    %ebp
+ 280:	c3                   	ret    
+ 281:	eb 0d                	jmp    290 <stat>
+ 283:	90                   	nop
+ 284:	90                   	nop
+ 285:	90                   	nop
+ 286:	90                   	nop
+ 287:	90                   	nop
+ 288:	90                   	nop
+ 289:	90                   	nop
+ 28a:	90                   	nop
+ 28b:	90                   	nop
+ 28c:	90                   	nop
+ 28d:	90                   	nop
+ 28e:	90                   	nop
+ 28f:	90                   	nop
+
+00000290 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 295:	83 ec 08             	sub    $0x8,%esp
+ 298:	6a 00                	push   $0x0
+ 29a:	ff 75 08             	pushl  0x8(%ebp)
+ 29d:	e8 f0 00 00 00       	call   392 <open>
+  if(fd < 0)
+ 2a2:	83 c4 10             	add    $0x10,%esp
+ 2a5:	85 c0                	test   %eax,%eax
+ 2a7:	78 27                	js     2d0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2a9:	83 ec 08             	sub    $0x8,%esp
+ 2ac:	ff 75 0c             	pushl  0xc(%ebp)
+ 2af:	89 c3                	mov    %eax,%ebx
+ 2b1:	50                   	push   %eax
+ 2b2:	e8 f3 00 00 00       	call   3aa <fstat>
+ 2b7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2b9:	89 1c 24             	mov    %ebx,(%esp)
+ 2bc:	e8 b9 00 00 00       	call   37a <close>
+  return r;
+ 2c1:	83 c4 10             	add    $0x10,%esp
+ 2c4:	89 f0                	mov    %esi,%eax
+}
+ 2c6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2c9:	5b                   	pop    %ebx
+ 2ca:	5e                   	pop    %esi
+ 2cb:	5d                   	pop    %ebp
+ 2cc:	c3                   	ret    
+ 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 2d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 2d5:	eb ef                	jmp    2c6 <stat+0x36>
+ 2d7:	89 f6                	mov    %esi,%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002e0 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 2e0:	55                   	push   %ebp
+ 2e1:	89 e5                	mov    %esp,%ebp
+ 2e3:	53                   	push   %ebx
+ 2e4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2e7:	0f be 11             	movsbl (%ecx),%edx
+ 2ea:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2ed:	3c 09                	cmp    $0x9,%al
+ 2ef:	b8 00 00 00 00       	mov    $0x0,%eax
+ 2f4:	77 1f                	ja     315 <atoi+0x35>
+ 2f6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 300:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 303:	83 c1 01             	add    $0x1,%ecx
+ 306:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 30a:	0f be 11             	movsbl (%ecx),%edx
+ 30d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 310:	80 fb 09             	cmp    $0x9,%bl
+ 313:	76 eb                	jbe    300 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 315:	5b                   	pop    %ebx
+ 316:	5d                   	pop    %ebp
+ 317:	c3                   	ret    
+ 318:	90                   	nop
+ 319:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000320 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	56                   	push   %esi
+ 324:	53                   	push   %ebx
+ 325:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 328:	8b 45 08             	mov    0x8(%ebp),%eax
+ 32b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 32e:	85 db                	test   %ebx,%ebx
+ 330:	7e 14                	jle    346 <memmove+0x26>
+ 332:	31 d2                	xor    %edx,%edx
+ 334:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 338:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 33c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 33f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 342:	39 da                	cmp    %ebx,%edx
+ 344:	75 f2                	jne    338 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 346:	5b                   	pop    %ebx
+ 347:	5e                   	pop    %esi
+ 348:	5d                   	pop    %ebp
+ 349:	c3                   	ret    
+
+0000034a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 34a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <exit>:
+SYSCALL(exit)
+ 352:	b8 02 00 00 00       	mov    $0x2,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <wait>:
+SYSCALL(wait)
+ 35a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <pipe>:
+SYSCALL(pipe)
+ 362:	b8 04 00 00 00       	mov    $0x4,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <read>:
+SYSCALL(read)
+ 36a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <write>:
+SYSCALL(write)
+ 372:	b8 10 00 00 00       	mov    $0x10,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <close>:
+SYSCALL(close)
+ 37a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <kill>:
+SYSCALL(kill)
+ 382:	b8 06 00 00 00       	mov    $0x6,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <exec>:
+SYSCALL(exec)
+ 38a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <open>:
+SYSCALL(open)
+ 392:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <mknod>:
+SYSCALL(mknod)
+ 39a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <unlink>:
+SYSCALL(unlink)
+ 3a2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <fstat>:
+SYSCALL(fstat)
+ 3aa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <link>:
+SYSCALL(link)
+ 3b2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <mkdir>:
+SYSCALL(mkdir)
+ 3ba:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <chdir>:
+SYSCALL(chdir)
+ 3c2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <dup>:
+SYSCALL(dup)
+ 3ca:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <getpid>:
+SYSCALL(getpid)
+ 3d2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <sbrk>:
+SYSCALL(sbrk)
+ 3da:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <sleep>:
+SYSCALL(sleep)
+ 3e2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <uptime>:
+SYSCALL(uptime)
+ 3ea:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <readcount>:
+SYSCALL(readcount)
+ 3f2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <callcount>:
+SYSCALL(callcount)
+ 3fa:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+ 402:	66 90                	xchg   %ax,%ax
+ 404:	66 90                	xchg   %ax,%ax
+ 406:	66 90                	xchg   %ax,%ax
+ 408:	66 90                	xchg   %ax,%ax
+ 40a:	66 90                	xchg   %ax,%ax
+ 40c:	66 90                	xchg   %ax,%ax
+ 40e:	66 90                	xchg   %ax,%ax
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	89 c6                	mov    %eax,%esi
+ 418:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 41b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 41e:	85 db                	test   %ebx,%ebx
+ 420:	74 7e                	je     4a0 <printint+0x90>
+ 422:	89 d0                	mov    %edx,%eax
+ 424:	c1 e8 1f             	shr    $0x1f,%eax
+ 427:	84 c0                	test   %al,%al
+ 429:	74 75                	je     4a0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 42b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 42d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 434:	f7 d8                	neg    %eax
+ 436:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 439:	31 ff                	xor    %edi,%edi
+ 43b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 43e:	89 ce                	mov    %ecx,%esi
+ 440:	eb 08                	jmp    44a <printint+0x3a>
+ 442:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 448:	89 cf                	mov    %ecx,%edi
+ 44a:	31 d2                	xor    %edx,%edx
+ 44c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 44f:	f7 f6                	div    %esi
+ 451:	0f b6 92 10 08 00 00 	movzbl 0x810(%edx),%edx
+  }while((x /= base) != 0);
+ 458:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 45a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 45d:	75 e9                	jne    448 <printint+0x38>
+  if(neg)
+ 45f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 462:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 465:	85 c0                	test   %eax,%eax
+ 467:	74 08                	je     471 <printint+0x61>
+    buf[i++] = '-';
+ 469:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 46e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 471:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 475:	8d 76 00             	lea    0x0(%esi),%esi
+ 478:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 47b:	83 ec 04             	sub    $0x4,%esp
+ 47e:	83 ef 01             	sub    $0x1,%edi
+ 481:	6a 01                	push   $0x1
+ 483:	53                   	push   %ebx
+ 484:	56                   	push   %esi
+ 485:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 488:	e8 e5 fe ff ff       	call   372 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 48d:	83 c4 10             	add    $0x10,%esp
+ 490:	39 df                	cmp    %ebx,%edi
+ 492:	75 e4                	jne    478 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 494:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 497:	5b                   	pop    %ebx
+ 498:	5e                   	pop    %esi
+ 499:	5f                   	pop    %edi
+ 49a:	5d                   	pop    %ebp
+ 49b:	c3                   	ret    
+ 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 4a0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 4a2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4a9:	eb 8b                	jmp    436 <printint+0x26>
+ 4ab:	90                   	nop
+ 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000004b0 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4b6:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4b9:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4bc:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4bf:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4c5:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c8:	83 c6 01             	add    $0x1,%esi
+ 4cb:	84 db                	test   %bl,%bl
+ 4cd:	0f 84 b0 00 00 00    	je     583 <printf+0xd3>
+ 4d3:	31 d2                	xor    %edx,%edx
+ 4d5:	eb 39                	jmp    510 <printf+0x60>
+ 4d7:	89 f6                	mov    %esi,%esi
+ 4d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4e0:	83 f8 25             	cmp    $0x25,%eax
+ 4e3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 4e6:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4eb:	74 18                	je     505 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ed:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4f0:	83 ec 04             	sub    $0x4,%esp
+ 4f3:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4f6:	6a 01                	push   $0x1
+ 4f8:	50                   	push   %eax
+ 4f9:	57                   	push   %edi
+ 4fa:	e8 73 fe ff ff       	call   372 <write>
+ 4ff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 502:	83 c4 10             	add    $0x10,%esp
+ 505:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 508:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 50c:	84 db                	test   %bl,%bl
+ 50e:	74 73                	je     583 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 510:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 512:	0f be cb             	movsbl %bl,%ecx
+ 515:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 518:	74 c6                	je     4e0 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 51a:	83 fa 25             	cmp    $0x25,%edx
+ 51d:	75 e6                	jne    505 <printf+0x55>
+      if(c == 'd'){
+ 51f:	83 f8 64             	cmp    $0x64,%eax
+ 522:	0f 84 f8 00 00 00    	je     620 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 528:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 52e:	83 f9 70             	cmp    $0x70,%ecx
+ 531:	74 5d                	je     590 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 533:	83 f8 73             	cmp    $0x73,%eax
+ 536:	0f 84 84 00 00 00    	je     5c0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 53c:	83 f8 63             	cmp    $0x63,%eax
+ 53f:	0f 84 ea 00 00 00    	je     62f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 545:	83 f8 25             	cmp    $0x25,%eax
+ 548:	0f 84 c2 00 00 00    	je     610 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 54e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 551:	83 ec 04             	sub    $0x4,%esp
+ 554:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 558:	6a 01                	push   $0x1
+ 55a:	50                   	push   %eax
+ 55b:	57                   	push   %edi
+ 55c:	e8 11 fe ff ff       	call   372 <write>
+ 561:	83 c4 0c             	add    $0xc,%esp
+ 564:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 567:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 56a:	6a 01                	push   $0x1
+ 56c:	50                   	push   %eax
+ 56d:	57                   	push   %edi
+ 56e:	83 c6 01             	add    $0x1,%esi
+ 571:	e8 fc fd ff ff       	call   372 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 576:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 57a:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 57d:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 57f:	84 db                	test   %bl,%bl
+ 581:	75 8d                	jne    510 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 583:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 586:	5b                   	pop    %ebx
+ 587:	5e                   	pop    %esi
+ 588:	5f                   	pop    %edi
+ 589:	5d                   	pop    %ebp
+ 58a:	c3                   	ret    
+ 58b:	90                   	nop
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 598:	6a 00                	push   $0x0
+ 59a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 59d:	89 f8                	mov    %edi,%eax
+ 59f:	8b 13                	mov    (%ebx),%edx
+ 5a1:	e8 6a fe ff ff       	call   410 <printint>
+        ap++;
+ 5a6:	89 d8                	mov    %ebx,%eax
+ 5a8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5ab:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 5ad:	83 c0 04             	add    $0x4,%eax
+ 5b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b3:	e9 4d ff ff ff       	jmp    505 <printf+0x55>
+ 5b8:	90                   	nop
+ 5b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 5cb:	b8 08 08 00 00       	mov    $0x808,%eax
+ 5d0:	85 db                	test   %ebx,%ebx
+ 5d2:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 5d5:	0f b6 03             	movzbl (%ebx),%eax
+ 5d8:	84 c0                	test   %al,%al
+ 5da:	74 23                	je     5ff <printf+0x14f>
+ 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5e0:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5e3:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 5e6:	83 ec 04             	sub    $0x4,%esp
+ 5e9:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 5eb:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5ee:	50                   	push   %eax
+ 5ef:	57                   	push   %edi
+ 5f0:	e8 7d fd ff ff       	call   372 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 5f5:	0f b6 03             	movzbl (%ebx),%eax
+ 5f8:	83 c4 10             	add    $0x10,%esp
+ 5fb:	84 c0                	test   %al,%al
+ 5fd:	75 e1                	jne    5e0 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 ff fe ff ff       	jmp    505 <printf+0x55>
+ 606:	8d 76 00             	lea    0x0(%esi),%esi
+ 609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+ 613:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 616:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 619:	6a 01                	push   $0x1
+ 61b:	e9 4c ff ff ff       	jmp    56c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	e9 6b ff ff ff       	jmp    59a <printf+0xea>
+ 62f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 632:	83 ec 04             	sub    $0x4,%esp
+ 635:	8b 03                	mov    (%ebx),%eax
+ 637:	6a 01                	push   $0x1
+ 639:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 63c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 63f:	50                   	push   %eax
+ 640:	57                   	push   %edi
+ 641:	e8 2c fd ff ff       	call   372 <write>
+ 646:	e9 5b ff ff ff       	jmp    5a6 <printf+0xf6>
+ 64b:	66 90                	xchg   %ax,%ax
+ 64d:	66 90                	xchg   %ax,%ax
+ 64f:	90                   	nop
+
+00000650 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 650:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 651:	a1 e0 0a 00 00       	mov    0xae0,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 656:	89 e5                	mov    %esp,%ebp
+ 658:	57                   	push   %edi
+ 659:	56                   	push   %esi
+ 65a:	53                   	push   %ebx
+ 65b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 65e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 660:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 663:	39 c8                	cmp    %ecx,%eax
+ 665:	73 19                	jae    680 <free+0x30>
+ 667:	89 f6                	mov    %esi,%esi
+ 669:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 670:	39 d1                	cmp    %edx,%ecx
+ 672:	72 1c                	jb     690 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 674:	39 d0                	cmp    %edx,%eax
+ 676:	73 18                	jae    690 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 678:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 67a:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 67c:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 67e:	72 f0                	jb     670 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 680:	39 d0                	cmp    %edx,%eax
+ 682:	72 f4                	jb     678 <free+0x28>
+ 684:	39 d1                	cmp    %edx,%ecx
+ 686:	73 f0                	jae    678 <free+0x28>
+ 688:	90                   	nop
+ 689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 690:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 693:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 696:	39 d7                	cmp    %edx,%edi
+ 698:	74 19                	je     6b3 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	74 23                	je     6ca <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6a7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6a9:	a3 e0 0a 00 00       	mov    %eax,0xae0
+}
+ 6ae:	5b                   	pop    %ebx
+ 6af:	5e                   	pop    %esi
+ 6b0:	5f                   	pop    %edi
+ 6b1:	5d                   	pop    %ebp
+ 6b2:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6b3:	03 72 04             	add    0x4(%edx),%esi
+ 6b6:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6b9:	8b 10                	mov    (%eax),%edx
+ 6bb:	8b 12                	mov    (%edx),%edx
+ 6bd:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6c0:	8b 50 04             	mov    0x4(%eax),%edx
+ 6c3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6c6:	39 f1                	cmp    %esi,%ecx
+ 6c8:	75 dd                	jne    6a7 <free+0x57>
+    p->s.size += bp->s.size;
+ 6ca:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6cd:	a3 e0 0a 00 00       	mov    %eax,0xae0
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6d2:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6d5:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6d8:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6da:	5b                   	pop    %ebx
+ 6db:	5e                   	pop    %esi
+ 6dc:	5f                   	pop    %edi
+ 6dd:	5d                   	pop    %ebp
+ 6de:	c3                   	ret    
+ 6df:	90                   	nop
+
+000006e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6e0:	55                   	push   %ebp
+ 6e1:	89 e5                	mov    %esp,%ebp
+ 6e3:	57                   	push   %edi
+ 6e4:	56                   	push   %esi
+ 6e5:	53                   	push   %ebx
+ 6e6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ec:	8b 15 e0 0a 00 00    	mov    0xae0,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6f5:	c1 ef 03             	shr    $0x3,%edi
+ 6f8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6fb:	85 d2                	test   %edx,%edx
+ 6fd:	0f 84 a3 00 00 00    	je     7a6 <malloc+0xc6>
+ 703:	8b 02                	mov    (%edx),%eax
+ 705:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 708:	39 cf                	cmp    %ecx,%edi
+ 70a:	76 74                	jbe    780 <malloc+0xa0>
+ 70c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 712:	be 00 10 00 00       	mov    $0x1000,%esi
+ 717:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 71e:	0f 43 f7             	cmovae %edi,%esi
+ 721:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 726:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 72c:	0f 46 da             	cmovbe %edx,%ebx
+ 72f:	eb 10                	jmp    741 <malloc+0x61>
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 738:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 73a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73d:	39 cf                	cmp    %ecx,%edi
+ 73f:	76 3f                	jbe    780 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 741:	39 05 e0 0a 00 00    	cmp    %eax,0xae0
+ 747:	89 c2                	mov    %eax,%edx
+ 749:	75 ed                	jne    738 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	53                   	push   %ebx
+ 74f:	e8 86 fc ff ff       	call   3da <sbrk>
+  if(p == (char*)-1)
+ 754:	83 c4 10             	add    $0x10,%esp
+ 757:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 75a:	74 1c                	je     778 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 75c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 75f:	83 ec 0c             	sub    $0xc,%esp
+ 762:	83 c0 08             	add    $0x8,%eax
+ 765:	50                   	push   %eax
+ 766:	e8 e5 fe ff ff       	call   650 <free>
+  return freep;
+ 76b:	8b 15 e0 0a 00 00    	mov    0xae0,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 771:	83 c4 10             	add    $0x10,%esp
+ 774:	85 d2                	test   %edx,%edx
+ 776:	75 c0                	jne    738 <malloc+0x58>
+        return 0;
+ 778:	31 c0                	xor    %eax,%eax
+ 77a:	eb 1c                	jmp    798 <malloc+0xb8>
+ 77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 780:	39 cf                	cmp    %ecx,%edi
+ 782:	74 1c                	je     7a0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 784:	29 f9                	sub    %edi,%ecx
+ 786:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 789:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 78c:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 78f:	89 15 e0 0a 00 00    	mov    %edx,0xae0
+      return (void*)(p + 1);
+ 795:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 798:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 79b:	5b                   	pop    %ebx
+ 79c:	5e                   	pop    %esi
+ 79d:	5f                   	pop    %edi
+ 79e:	5d                   	pop    %ebp
+ 79f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb e9                	jmp    78f <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 7a6:	c7 05 e0 0a 00 00 e4 	movl   $0xae4,0xae0
+ 7ad:	0a 00 00 
+ 7b0:	c7 05 e4 0a 00 00 e4 	movl   $0xae4,0xae4
+ 7b7:	0a 00 00 
+    base.s.size = 0;
+ 7ba:	b8 e4 0a 00 00       	mov    $0xae4,%eax
+ 7bf:	c7 05 e8 0a 00 00 00 	movl   $0x0,0xae8
+ 7c6:	00 00 00 
+ 7c9:	e9 3e ff ff ff       	jmp    70c <malloc+0x2c>
diff -ruN ./xv6-public-src/cat.d ./xv6-public/cat.d
--- ./xv6-public-src/cat.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/cat.d	2019-11-28 17:52:27.931741690 +0200
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/cat.o and ./xv6-public/cat.o differ
diff -ruN ./xv6-public-src/cat.sym ./xv6-public/cat.sym
--- ./xv6-public-src/cat.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/cat.sym	2019-11-28 17:52:27.955756588 +0200
@@ -0,0 +1,61 @@
+00000000 .text
+000007d0 .rodata
+00000824 .eh_frame
+00000ae0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000810 digits.1111
+00000000 umalloc.c
+00000ae0 freep
+00000ae4 base
+00000110 strcpy
+000004b0 printf
+00000320 memmove
+0000039a mknod
+00000220 gets
+000003d2 getpid
+00000090 cat
+000006e0 malloc
+000003e2 sleep
+000003f2 readcount
+000003fa callcount
+00000362 pipe
+00000372 write
+000003aa fstat
+00000382 kill
+000003c2 chdir
+0000038a exec
+0000035a wait
+0000036a read
+000003a2 unlink
+0000034a fork
+000003da sbrk
+000003ea uptime
+00000ae0 __bss_start
+000001c0 memset
+00000000 main
+00000140 strcmp
+000003ca dup
+00000b00 buf
+00000290 stat
+00000ae0 _edata
+00000d00 _end
+000003b2 link
+00000352 exit
+000002e0 atoi
+00000190 strlen
+00000392 open
+000001e0 strchr
+000003ba mkdir
+0000037a close
+00000650 free
diff -ruN ./xv6-public-src/console.d ./xv6-public/console.d
--- ./xv6-public-src/console.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/console.d	2019-11-28 17:52:29.236545548 +0200
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
+ x86.h
Binary files ./xv6-public-src/console.o and ./xv6-public/console.o differ
diff -ruN ./xv6-public-src/defs.h ./xv6-public/defs.h
--- ./xv6-public-src/defs.h	2019-11-27 20:42:25.950688000 +0200
+++ ./xv6-public/defs.h	2019-11-27 23:27:25.296970056 +0200
@@ -155,6 +155,11 @@
 int             fetchint(uint, int*);
 int             fetchstr(uint, char**);
 void            syscall(void);
+void            scinit(void);
+extern uint     reads;
+extern struct spinlock readslock;
+extern uint     calls[];
+extern struct spinlock callslock;
 
 // timer.c
 void            timerinit(void);
Binary files ./xv6-public-src/_echo and ./xv6-public/_echo differ
diff -ruN ./xv6-public-src/echo.asm ./xv6-public/echo.asm
--- ./xv6-public-src/echo.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/echo.asm	2019-11-28 17:52:27.995781416 +0200
@@ -0,0 +1,1488 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 08             	sub    $0x8,%esp
+  14:	8b 31                	mov    (%ecx),%esi
+  16:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  for(i = 1; i < argc; i++)
+  19:	83 fe 01             	cmp    $0x1,%esi
+  1c:	7e 41                	jle    5f <main+0x5f>
+  1e:	bb 01 00 00 00       	mov    $0x1,%ebx
+  23:	eb 1b                	jmp    40 <main+0x40>
+  25:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  28:	68 30 07 00 00       	push   $0x730
+  2d:	ff 74 9f fc          	pushl  -0x4(%edi,%ebx,4)
+  31:	68 32 07 00 00       	push   $0x732
+  36:	6a 01                	push   $0x1
+  38:	e8 d3 03 00 00       	call   410 <printf>
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	83 c3 01             	add    $0x1,%ebx
+  43:	39 de                	cmp    %ebx,%esi
+  45:	75 e1                	jne    28 <main+0x28>
+  47:	68 37 07 00 00       	push   $0x737
+  4c:	ff 74 b7 fc          	pushl  -0x4(%edi,%esi,4)
+  50:	68 32 07 00 00       	push   $0x732
+  55:	6a 01                	push   $0x1
+  57:	e8 b4 03 00 00       	call   410 <printf>
+  5c:	83 c4 10             	add    $0x10,%esp
+  exit();
+  5f:	e8 4e 02 00 00       	call   2b2 <exit>
+  64:	66 90                	xchg   %ax,%ax
+  66:	66 90                	xchg   %ax,%ax
+  68:	66 90                	xchg   %ax,%ax
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  71:	89 e5                	mov    %esp,%ebp
+  73:	53                   	push   %ebx
+  74:	8b 45 08             	mov    0x8(%ebp),%eax
+  77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7a:	89 c2                	mov    %eax,%edx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  80:	83 c1 01             	add    $0x1,%ecx
+  83:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  87:	83 c2 01             	add    $0x1,%edx
+  8a:	84 db                	test   %bl,%bl
+  8c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  8f:	75 ef                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  91:	5b                   	pop    %ebx
+  92:	5d                   	pop    %ebp
+  93:	c3                   	ret    
+  94:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  9a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	56                   	push   %esi
+  a4:	53                   	push   %ebx
+  a5:	8b 55 08             	mov    0x8(%ebp),%edx
+  a8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ab:	0f b6 02             	movzbl (%edx),%eax
+  ae:	0f b6 19             	movzbl (%ecx),%ebx
+  b1:	84 c0                	test   %al,%al
+  b3:	75 1e                	jne    d3 <strcmp+0x33>
+  b5:	eb 29                	jmp    e0 <strcmp+0x40>
+  b7:	89 f6                	mov    %esi,%esi
+  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  c0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  c3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  c6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  c9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  cd:	84 c0                	test   %al,%al
+  cf:	74 0f                	je     e0 <strcmp+0x40>
+  d1:	89 f1                	mov    %esi,%ecx
+  d3:	38 d8                	cmp    %bl,%al
+  d5:	74 e9                	je     c0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  d7:	29 d8                	sub    %ebx,%eax
+}
+  d9:	5b                   	pop    %ebx
+  da:	5e                   	pop    %esi
+  db:	5d                   	pop    %ebp
+  dc:	c3                   	ret    
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  e0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5e                   	pop    %esi
+  e6:	5d                   	pop    %ebp
+  e7:	c3                   	ret    
+  e8:	90                   	nop
+  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 39 00             	cmpb   $0x0,(%ecx)
+  f9:	74 12                	je     10d <strlen+0x1d>
+  fb:	31 d2                	xor    %edx,%edx
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c2 01             	add    $0x1,%edx
+ 103:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 107:	89 d0                	mov    %edx,%eax
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	5d                   	pop    %ebp
+ 10c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 10f:	5d                   	pop    %ebp
+ 110:	c3                   	ret    
+ 111:	eb 0d                	jmp    120 <memset>
+ 113:	90                   	nop
+ 114:	90                   	nop
+ 115:	90                   	nop
+ 116:	90                   	nop
+ 117:	90                   	nop
+ 118:	90                   	nop
+ 119:	90                   	nop
+ 11a:	90                   	nop
+ 11b:	90                   	nop
+ 11c:	90                   	nop
+ 11d:	90                   	nop
+ 11e:	90                   	nop
+ 11f:	90                   	nop
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	89 d0                	mov    %edx,%eax
+ 134:	5f                   	pop    %edi
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	74 1d                	je     16e <strchr+0x2e>
+    if(*s == c)
+ 151:	38 d3                	cmp    %dl,%bl
+ 153:	89 d9                	mov    %ebx,%ecx
+ 155:	75 0d                	jne    164 <strchr+0x24>
+ 157:	eb 17                	jmp    170 <strchr+0x30>
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 160:	38 ca                	cmp    %cl,%dl
+ 162:	74 0c                	je     170 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	0f b6 10             	movzbl (%eax),%edx
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 16e:	31 c0                	xor    %eax,%eax
+}
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 179:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+ 185:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 186:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 188:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 18b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 18e:	eb 29                	jmp    1b9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	6a 01                	push   $0x1
+ 195:	57                   	push   %edi
+ 196:	6a 00                	push   $0x0
+ 198:	e8 2d 01 00 00       	call   2ca <read>
+    if(cc < 1)
+ 19d:	83 c4 10             	add    $0x10,%esp
+ 1a0:	85 c0                	test   %eax,%eax
+ 1a2:	7e 1d                	jle    1c1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1ab:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 1ad:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 1af:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1b3:	74 1b                	je     1d0 <gets+0x50>
+ 1b5:	3c 0d                	cmp    $0xd,%al
+ 1b7:	74 17                	je     1d0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1b9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1bf:	7c cf                	jl     190 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cb:	5b                   	pop    %ebx
+ 1cc:	5e                   	pop    %esi
+ 1cd:	5f                   	pop    %edi
+ 1ce:	5d                   	pop    %ebp
+ 1cf:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1d3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1d5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1dc:	5b                   	pop    %ebx
+ 1dd:	5e                   	pop    %esi
+ 1de:	5f                   	pop    %edi
+ 1df:	5d                   	pop    %ebp
+ 1e0:	c3                   	ret    
+ 1e1:	eb 0d                	jmp    1f0 <stat>
+ 1e3:	90                   	nop
+ 1e4:	90                   	nop
+ 1e5:	90                   	nop
+ 1e6:	90                   	nop
+ 1e7:	90                   	nop
+ 1e8:	90                   	nop
+ 1e9:	90                   	nop
+ 1ea:	90                   	nop
+ 1eb:	90                   	nop
+ 1ec:	90                   	nop
+ 1ed:	90                   	nop
+ 1ee:	90                   	nop
+ 1ef:	90                   	nop
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	pushl  0x8(%ebp)
+ 1fd:	e8 f0 00 00 00       	call   2f2 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	pushl  0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f3 00 00 00       	call   30a <fstat>
+ 217:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 219:	89 1c 24             	mov    %ebx,(%esp)
+ 21c:	e8 b9 00 00 00       	call   2da <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+ 224:	89 f0                	mov    %esi,%eax
+}
+ 226:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 230:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 235:	eb ef                	jmp    226 <stat+0x36>
+ 237:	89 f6                	mov    %esi,%esi
+ 239:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000240 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 11             	movsbl (%ecx),%edx
+ 24a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 24d:	3c 09                	cmp    $0x9,%al
+ 24f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 254:	77 1f                	ja     275 <atoi+0x35>
+ 256:	8d 76 00             	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 260:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 263:	83 c1 01             	add    $0x1,%ecx
+ 266:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 11             	movsbl (%ecx),%edx
+ 26d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 275:	5b                   	pop    %ebx
+ 276:	5d                   	pop    %ebp
+ 277:	c3                   	ret    
+ 278:	90                   	nop
+ 279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+ 285:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 288:	8b 45 08             	mov    0x8(%ebp),%eax
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 db                	test   %ebx,%ebx
+ 290:	7e 14                	jle    2a6 <memmove+0x26>
+ 292:	31 d2                	xor    %edx,%edx
+ 294:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 298:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 29c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 29f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2a2:	39 da                	cmp    %ebx,%edx
+ 2a4:	75 f2                	jne    298 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 2a6:	5b                   	pop    %ebx
+ 2a7:	5e                   	pop    %esi
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+
+000002aa <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2aa:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <exit>:
+SYSCALL(exit)
+ 2b2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <wait>:
+SYSCALL(wait)
+ 2ba:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <pipe>:
+SYSCALL(pipe)
+ 2c2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <read>:
+SYSCALL(read)
+ 2ca:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <write>:
+SYSCALL(write)
+ 2d2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <close>:
+SYSCALL(close)
+ 2da:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <kill>:
+SYSCALL(kill)
+ 2e2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <exec>:
+SYSCALL(exec)
+ 2ea:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <open>:
+SYSCALL(open)
+ 2f2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <mknod>:
+SYSCALL(mknod)
+ 2fa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <unlink>:
+SYSCALL(unlink)
+ 302:	b8 12 00 00 00       	mov    $0x12,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <fstat>:
+SYSCALL(fstat)
+ 30a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <link>:
+SYSCALL(link)
+ 312:	b8 13 00 00 00       	mov    $0x13,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <mkdir>:
+SYSCALL(mkdir)
+ 31a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <chdir>:
+SYSCALL(chdir)
+ 322:	b8 09 00 00 00       	mov    $0x9,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <dup>:
+SYSCALL(dup)
+ 32a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <getpid>:
+SYSCALL(getpid)
+ 332:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <sbrk>:
+SYSCALL(sbrk)
+ 33a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <sleep>:
+SYSCALL(sleep)
+ 342:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <uptime>:
+SYSCALL(uptime)
+ 34a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <readcount>:
+SYSCALL(readcount)
+ 352:	b8 16 00 00 00       	mov    $0x16,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <callcount>:
+SYSCALL(callcount)
+ 35a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+ 362:	66 90                	xchg   %ax,%ax
+ 364:	66 90                	xchg   %ax,%ax
+ 366:	66 90                	xchg   %ax,%ax
+ 368:	66 90                	xchg   %ax,%ax
+ 36a:	66 90                	xchg   %ax,%ax
+ 36c:	66 90                	xchg   %ax,%ax
+ 36e:	66 90                	xchg   %ax,%ax
+
+00000370 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	57                   	push   %edi
+ 374:	56                   	push   %esi
+ 375:	53                   	push   %ebx
+ 376:	89 c6                	mov    %eax,%esi
+ 378:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 37b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 37e:	85 db                	test   %ebx,%ebx
+ 380:	74 7e                	je     400 <printint+0x90>
+ 382:	89 d0                	mov    %edx,%eax
+ 384:	c1 e8 1f             	shr    $0x1f,%eax
+ 387:	84 c0                	test   %al,%al
+ 389:	74 75                	je     400 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 38b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 38d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 394:	f7 d8                	neg    %eax
+ 396:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 399:	31 ff                	xor    %edi,%edi
+ 39b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 39e:	89 ce                	mov    %ecx,%esi
+ 3a0:	eb 08                	jmp    3aa <printint+0x3a>
+ 3a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3a8:	89 cf                	mov    %ecx,%edi
+ 3aa:	31 d2                	xor    %edx,%edx
+ 3ac:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 3af:	f7 f6                	div    %esi
+ 3b1:	0f b6 92 40 07 00 00 	movzbl 0x740(%edx),%edx
+  }while((x /= base) != 0);
+ 3b8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3ba:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3bd:	75 e9                	jne    3a8 <printint+0x38>
+  if(neg)
+ 3bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3c2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3c5:	85 c0                	test   %eax,%eax
+ 3c7:	74 08                	je     3d1 <printint+0x61>
+    buf[i++] = '-';
+ 3c9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3ce:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3d1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3d5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3db:	83 ec 04             	sub    $0x4,%esp
+ 3de:	83 ef 01             	sub    $0x1,%edi
+ 3e1:	6a 01                	push   $0x1
+ 3e3:	53                   	push   %ebx
+ 3e4:	56                   	push   %esi
+ 3e5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3e8:	e8 e5 fe ff ff       	call   2d2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3ed:	83 c4 10             	add    $0x10,%esp
+ 3f0:	39 df                	cmp    %ebx,%edi
+ 3f2:	75 e4                	jne    3d8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 3f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3f7:	5b                   	pop    %ebx
+ 3f8:	5e                   	pop    %esi
+ 3f9:	5f                   	pop    %edi
+ 3fa:	5d                   	pop    %ebp
+ 3fb:	c3                   	ret    
+ 3fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 400:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 402:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 409:	eb 8b                	jmp    396 <printint+0x26>
+ 40b:	90                   	nop
+ 40c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000410 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 416:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 419:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 41c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 41f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 422:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 425:	0f b6 1e             	movzbl (%esi),%ebx
+ 428:	83 c6 01             	add    $0x1,%esi
+ 42b:	84 db                	test   %bl,%bl
+ 42d:	0f 84 b0 00 00 00    	je     4e3 <printf+0xd3>
+ 433:	31 d2                	xor    %edx,%edx
+ 435:	eb 39                	jmp    470 <printf+0x60>
+ 437:	89 f6                	mov    %esi,%esi
+ 439:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 440:	83 f8 25             	cmp    $0x25,%eax
+ 443:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 446:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 44b:	74 18                	je     465 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 44d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 450:	83 ec 04             	sub    $0x4,%esp
+ 453:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 456:	6a 01                	push   $0x1
+ 458:	50                   	push   %eax
+ 459:	57                   	push   %edi
+ 45a:	e8 73 fe ff ff       	call   2d2 <write>
+ 45f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 462:	83 c4 10             	add    $0x10,%esp
+ 465:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 468:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 46c:	84 db                	test   %bl,%bl
+ 46e:	74 73                	je     4e3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 470:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 472:	0f be cb             	movsbl %bl,%ecx
+ 475:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 478:	74 c6                	je     440 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 47a:	83 fa 25             	cmp    $0x25,%edx
+ 47d:	75 e6                	jne    465 <printf+0x55>
+      if(c == 'd'){
+ 47f:	83 f8 64             	cmp    $0x64,%eax
+ 482:	0f 84 f8 00 00 00    	je     580 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 488:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 48e:	83 f9 70             	cmp    $0x70,%ecx
+ 491:	74 5d                	je     4f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 493:	83 f8 73             	cmp    $0x73,%eax
+ 496:	0f 84 84 00 00 00    	je     520 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 49c:	83 f8 63             	cmp    $0x63,%eax
+ 49f:	0f 84 ea 00 00 00    	je     58f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4a5:	83 f8 25             	cmp    $0x25,%eax
+ 4a8:	0f 84 c2 00 00 00    	je     570 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ae:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4b1:	83 ec 04             	sub    $0x4,%esp
+ 4b4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4b8:	6a 01                	push   $0x1
+ 4ba:	50                   	push   %eax
+ 4bb:	57                   	push   %edi
+ 4bc:	e8 11 fe ff ff       	call   2d2 <write>
+ 4c1:	83 c4 0c             	add    $0xc,%esp
+ 4c4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4c7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ca:	6a 01                	push   $0x1
+ 4cc:	50                   	push   %eax
+ 4cd:	57                   	push   %edi
+ 4ce:	83 c6 01             	add    $0x1,%esi
+ 4d1:	e8 fc fd ff ff       	call   2d2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4d6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4da:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4dd:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4df:	84 db                	test   %bl,%bl
+ 4e1:	75 8d                	jne    470 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e6:	5b                   	pop    %ebx
+ 4e7:	5e                   	pop    %esi
+ 4e8:	5f                   	pop    %edi
+ 4e9:	5d                   	pop    %ebp
+ 4ea:	c3                   	ret    
+ 4eb:	90                   	nop
+ 4ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4fd:	89 f8                	mov    %edi,%eax
+ 4ff:	8b 13                	mov    (%ebx),%edx
+ 501:	e8 6a fe ff ff       	call   370 <printint>
+        ap++;
+ 506:	89 d8                	mov    %ebx,%eax
+ 508:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 50b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 50d:	83 c0 04             	add    $0x4,%eax
+ 510:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 513:	e9 4d ff ff ff       	jmp    465 <printf+0x55>
+ 518:	90                   	nop
+ 519:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 520:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 523:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 525:	83 c0 04             	add    $0x4,%eax
+ 528:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 52b:	b8 39 07 00 00       	mov    $0x739,%eax
+ 530:	85 db                	test   %ebx,%ebx
+ 532:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 535:	0f b6 03             	movzbl (%ebx),%eax
+ 538:	84 c0                	test   %al,%al
+ 53a:	74 23                	je     55f <printf+0x14f>
+ 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 540:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 543:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 546:	83 ec 04             	sub    $0x4,%esp
+ 549:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 54b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 54e:	50                   	push   %eax
+ 54f:	57                   	push   %edi
+ 550:	e8 7d fd ff ff       	call   2d2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 555:	0f b6 03             	movzbl (%ebx),%eax
+ 558:	83 c4 10             	add    $0x10,%esp
+ 55b:	84 c0                	test   %al,%al
+ 55d:	75 e1                	jne    540 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 55f:	31 d2                	xor    %edx,%edx
+ 561:	e9 ff fe ff ff       	jmp    465 <printf+0x55>
+ 566:	8d 76 00             	lea    0x0(%esi),%esi
+ 569:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 570:	83 ec 04             	sub    $0x4,%esp
+ 573:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 576:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 579:	6a 01                	push   $0x1
+ 57b:	e9 4c ff ff ff       	jmp    4cc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 6b ff ff ff       	jmp    4fa <printf+0xea>
+ 58f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 592:	83 ec 04             	sub    $0x4,%esp
+ 595:	8b 03                	mov    (%ebx),%eax
+ 597:	6a 01                	push   $0x1
+ 599:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 59c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 59f:	50                   	push   %eax
+ 5a0:	57                   	push   %edi
+ 5a1:	e8 2c fd ff ff       	call   2d2 <write>
+ 5a6:	e9 5b ff ff ff       	jmp    506 <printf+0xf6>
+ 5ab:	66 90                	xchg   %ax,%ax
+ 5ad:	66 90                	xchg   %ax,%ax
+ 5af:	90                   	nop
+
+000005b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5b0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b1:	a1 e4 09 00 00       	mov    0x9e4,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5b6:	89 e5                	mov    %esp,%ebp
+ 5b8:	57                   	push   %edi
+ 5b9:	56                   	push   %esi
+ 5ba:	53                   	push   %ebx
+ 5bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5be:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5c0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c3:	39 c8                	cmp    %ecx,%eax
+ 5c5:	73 19                	jae    5e0 <free+0x30>
+ 5c7:	89 f6                	mov    %esi,%esi
+ 5c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5d0:	39 d1                	cmp    %edx,%ecx
+ 5d2:	72 1c                	jb     5f0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d4:	39 d0                	cmp    %edx,%eax
+ 5d6:	73 18                	jae    5f0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5da:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5dc:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5de:	72 f0                	jb     5d0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e0:	39 d0                	cmp    %edx,%eax
+ 5e2:	72 f4                	jb     5d8 <free+0x28>
+ 5e4:	39 d1                	cmp    %edx,%ecx
+ 5e6:	73 f0                	jae    5d8 <free+0x28>
+ 5e8:	90                   	nop
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5f3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5f6:	39 d7                	cmp    %edx,%edi
+ 5f8:	74 19                	je     613 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5fa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5fd:	8b 50 04             	mov    0x4(%eax),%edx
+ 600:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 603:	39 f1                	cmp    %esi,%ecx
+ 605:	74 23                	je     62a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 607:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 609:	a3 e4 09 00 00       	mov    %eax,0x9e4
+}
+ 60e:	5b                   	pop    %ebx
+ 60f:	5e                   	pop    %esi
+ 610:	5f                   	pop    %edi
+ 611:	5d                   	pop    %ebp
+ 612:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 613:	03 72 04             	add    0x4(%edx),%esi
+ 616:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 619:	8b 10                	mov    (%eax),%edx
+ 61b:	8b 12                	mov    (%edx),%edx
+ 61d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 620:	8b 50 04             	mov    0x4(%eax),%edx
+ 623:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 626:	39 f1                	cmp    %esi,%ecx
+ 628:	75 dd                	jne    607 <free+0x57>
+    p->s.size += bp->s.size;
+ 62a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 62d:	a3 e4 09 00 00       	mov    %eax,0x9e4
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 632:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 635:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 638:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 63a:	5b                   	pop    %ebx
+ 63b:	5e                   	pop    %esi
+ 63c:	5f                   	pop    %edi
+ 63d:	5d                   	pop    %ebp
+ 63e:	c3                   	ret    
+ 63f:	90                   	nop
+
+00000640 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 649:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 64c:	8b 15 e4 09 00 00    	mov    0x9e4,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 652:	8d 78 07             	lea    0x7(%eax),%edi
+ 655:	c1 ef 03             	shr    $0x3,%edi
+ 658:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 65b:	85 d2                	test   %edx,%edx
+ 65d:	0f 84 a3 00 00 00    	je     706 <malloc+0xc6>
+ 663:	8b 02                	mov    (%edx),%eax
+ 665:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 668:	39 cf                	cmp    %ecx,%edi
+ 66a:	76 74                	jbe    6e0 <malloc+0xa0>
+ 66c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 672:	be 00 10 00 00       	mov    $0x1000,%esi
+ 677:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 67e:	0f 43 f7             	cmovae %edi,%esi
+ 681:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 686:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 68c:	0f 46 da             	cmovbe %edx,%ebx
+ 68f:	eb 10                	jmp    6a1 <malloc+0x61>
+ 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 698:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 69a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69d:	39 cf                	cmp    %ecx,%edi
+ 69f:	76 3f                	jbe    6e0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6a1:	39 05 e4 09 00 00    	cmp    %eax,0x9e4
+ 6a7:	89 c2                	mov    %eax,%edx
+ 6a9:	75 ed                	jne    698 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 6ab:	83 ec 0c             	sub    $0xc,%esp
+ 6ae:	53                   	push   %ebx
+ 6af:	e8 86 fc ff ff       	call   33a <sbrk>
+  if(p == (char*)-1)
+ 6b4:	83 c4 10             	add    $0x10,%esp
+ 6b7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ba:	74 1c                	je     6d8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6bc:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6bf:	83 ec 0c             	sub    $0xc,%esp
+ 6c2:	83 c0 08             	add    $0x8,%eax
+ 6c5:	50                   	push   %eax
+ 6c6:	e8 e5 fe ff ff       	call   5b0 <free>
+  return freep;
+ 6cb:	8b 15 e4 09 00 00    	mov    0x9e4,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6d1:	83 c4 10             	add    $0x10,%esp
+ 6d4:	85 d2                	test   %edx,%edx
+ 6d6:	75 c0                	jne    698 <malloc+0x58>
+        return 0;
+ 6d8:	31 c0                	xor    %eax,%eax
+ 6da:	eb 1c                	jmp    6f8 <malloc+0xb8>
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6e0:	39 cf                	cmp    %ecx,%edi
+ 6e2:	74 1c                	je     700 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6e4:	29 f9                	sub    %edi,%ecx
+ 6e6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6ec:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6ef:	89 15 e4 09 00 00    	mov    %edx,0x9e4
+      return (void*)(p + 1);
+ 6f5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 6f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6fb:	5b                   	pop    %ebx
+ 6fc:	5e                   	pop    %esi
+ 6fd:	5f                   	pop    %edi
+ 6fe:	5d                   	pop    %ebp
+ 6ff:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 700:	8b 08                	mov    (%eax),%ecx
+ 702:	89 0a                	mov    %ecx,(%edx)
+ 704:	eb e9                	jmp    6ef <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 706:	c7 05 e4 09 00 00 e8 	movl   $0x9e8,0x9e4
+ 70d:	09 00 00 
+ 710:	c7 05 e8 09 00 00 e8 	movl   $0x9e8,0x9e8
+ 717:	09 00 00 
+    base.s.size = 0;
+ 71a:	b8 e8 09 00 00       	mov    $0x9e8,%eax
+ 71f:	c7 05 ec 09 00 00 00 	movl   $0x0,0x9ec
+ 726:	00 00 00 
+ 729:	e9 3e ff ff ff       	jmp    66c <malloc+0x2c>
diff -ruN ./xv6-public-src/echo.d ./xv6-public/echo.d
--- ./xv6-public-src/echo.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/echo.d	2019-11-28 17:52:27.967764036 +0200
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/echo.o and ./xv6-public/echo.o differ
diff -ruN ./xv6-public-src/echo.sym ./xv6-public/echo.sym
--- ./xv6-public-src/echo.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/echo.sym	2019-11-28 17:52:27.999783899 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000730 .rodata
+00000754 .eh_frame
+000009e4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+00000370 printint
+00000740 digits.1111
+00000000 umalloc.c
+000009e4 freep
+000009e8 base
+00000070 strcpy
+00000410 printf
+00000280 memmove
+000002fa mknod
+00000180 gets
+00000332 getpid
+00000640 malloc
+00000342 sleep
+00000352 readcount
+0000035a callcount
+000002c2 pipe
+000002d2 write
+0000030a fstat
+000002e2 kill
+00000322 chdir
+000002ea exec
+000002ba wait
+000002ca read
+00000302 unlink
+000002aa fork
+0000033a sbrk
+0000034a uptime
+000009e4 __bss_start
+00000120 memset
+00000000 main
+000000a0 strcmp
+0000032a dup
+000001f0 stat
+000009e4 _edata
+000009f0 _end
+00000312 link
+000002b2 exit
+00000240 atoi
+000000f0 strlen
+000002f2 open
+00000140 strchr
+0000031a mkdir
+000002da close
+000005b0 free
Binary files ./xv6-public-src/entry.o and ./xv6-public/entry.o differ
Binary files ./xv6-public-src/entryother and ./xv6-public/entryother differ
diff -ruN ./xv6-public-src/entryother.asm ./xv6-public/entryother.asm
--- ./xv6-public-src/entryother.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/entryother.asm	2019-11-28 17:52:47.227102197 +0200
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN ./xv6-public-src/entryother.d ./xv6-public/entryother.d
--- ./xv6-public-src/entryother.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/entryother.d	2019-11-28 17:52:47.203088662 +0200
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files ./xv6-public-src/entryother.o and ./xv6-public/entryother.o differ
diff -ruN ./xv6-public-src/exec.d ./xv6-public/exec.d
--- ./xv6-public-src/exec.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/exec.d	2019-11-28 17:52:29.284574982 +0200
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files ./xv6-public-src/exec.o and ./xv6-public/exec.o differ
diff -ruN ./xv6-public-src/file.d ./xv6-public/file.d
--- ./xv6-public-src/file.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/file.d	2019-11-28 17:52:29.328601964 +0200
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files ./xv6-public-src/file.o and ./xv6-public/file.o differ
Binary files ./xv6-public-src/_forktest and ./xv6-public/_forktest differ
diff -ruN ./xv6-public-src/forktest.asm ./xv6-public/forktest.asm
--- ./xv6-public-src/forktest.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/forktest.asm	2019-11-28 17:52:28.051815996 +0200
@@ -0,0 +1,877 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  forktest();
+  11:	e8 3a 00 00 00       	call   50 <forktest>
+  exit();
+  16:	e8 77 03 00 00       	call   392 <exit>
+  1b:	66 90                	xchg   %ax,%ax
+  1d:	66 90                	xchg   %ax,%ax
+  1f:	90                   	nop
+
+00000020 <printf>:
+
+#define N  1000
+
+void
+printf(int fd, const char *s, ...)
+{
+  20:	55                   	push   %ebp
+  21:	89 e5                	mov    %esp,%ebp
+  23:	53                   	push   %ebx
+  24:	83 ec 10             	sub    $0x10,%esp
+  27:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2a:	53                   	push   %ebx
+  2b:	e8 a0 01 00 00       	call   1d0 <strlen>
+  30:	83 c4 0c             	add    $0xc,%esp
+  33:	50                   	push   %eax
+  34:	53                   	push   %ebx
+  35:	ff 75 08             	pushl  0x8(%ebp)
+  38:	e8 75 03 00 00       	call   3b2 <write>
+}
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  43:	c9                   	leave  
+  44:	c3                   	ret    
+  45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000050 <forktest>:
+
+void
+forktest(void)
+{
+  50:	55                   	push   %ebp
+  51:	89 e5                	mov    %esp,%ebp
+  53:	53                   	push   %ebx
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<N; n++){
+  54:	31 db                	xor    %ebx,%ebx
+  write(fd, s, strlen(s));
+}
+
+void
+forktest(void)
+{
+  56:	83 ec 10             	sub    $0x10,%esp
+#define N  1000
+
+void
+printf(int fd, const char *s, ...)
+{
+  write(fd, s, strlen(s));
+  59:	68 44 04 00 00       	push   $0x444
+  5e:	e8 6d 01 00 00       	call   1d0 <strlen>
+  63:	83 c4 0c             	add    $0xc,%esp
+  66:	50                   	push   %eax
+  67:	68 44 04 00 00       	push   $0x444
+  6c:	6a 01                	push   $0x1
+  6e:	e8 3f 03 00 00       	call   3b2 <write>
+  73:	83 c4 10             	add    $0x10,%esp
+  76:	eb 19                	jmp    91 <forktest+0x41>
+  78:	90                   	nop
+  79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+  for(n=0; n<N; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+  80:	0f 84 7c 00 00 00    	je     102 <forktest+0xb2>
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<N; n++){
+  86:	83 c3 01             	add    $0x1,%ebx
+  89:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8f:	74 4f                	je     e0 <forktest+0x90>
+    pid = fork();
+  91:	e8 f4 02 00 00       	call   38a <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  if(n == N){
+    printf(1, "fork claimed to work N times!\n", N);
+    exit();
+  }
+
+  for(; n > 0; n--){
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  a0:	e8 f5 02 00 00       	call   39a <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 5e                	js     107 <forktest+0xb7>
+  if(n == N){
+    printf(1, "fork claimed to work N times!\n", N);
+    exit();
+  }
+
+  for(; n > 0; n--){
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+
+  if(wait() != -1){
+  ae:	e8 e7 02 00 00       	call   39a <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 71                	jne    129 <forktest+0xd9>
+#define N  1000
+
+void
+printf(int fd, const char *s, ...)
+{
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 76 04 00 00       	push   $0x476
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 76 04 00 00       	push   $0x476
+  ce:	6a 01                	push   $0x1
+  d0:	e8 dd 02 00 00       	call   3b2 <write>
+    printf(1, "wait got too many\n");
+    exit();
+  }
+
+  printf(1, "fork test OK\n");
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+#define N  1000
+
+void
+printf(int fd, const char *s, ...)
+{
+  write(fd, s, strlen(s));
+  e0:	83 ec 0c             	sub    $0xc,%esp
+  e3:	68 84 04 00 00       	push   $0x484
+  e8:	e8 e3 00 00 00       	call   1d0 <strlen>
+  ed:	83 c4 0c             	add    $0xc,%esp
+  f0:	50                   	push   %eax
+  f1:	68 84 04 00 00       	push   $0x484
+  f6:	6a 01                	push   $0x1
+  f8:	e8 b5 02 00 00       	call   3b2 <write>
+      exit();
+  }
+
+  if(n == N){
+    printf(1, "fork claimed to work N times!\n", N);
+    exit();
+  fd:	e8 90 02 00 00       	call   392 <exit>
+  for(n=0; n<N; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit();
+ 102:	e8 8b 02 00 00       	call   392 <exit>
+#define N  1000
+
+void
+printf(int fd, const char *s, ...)
+{
+  write(fd, s, strlen(s));
+ 107:	83 ec 0c             	sub    $0xc,%esp
+ 10a:	68 4f 04 00 00       	push   $0x44f
+ 10f:	e8 bc 00 00 00       	call   1d0 <strlen>
+ 114:	83 c4 0c             	add    $0xc,%esp
+ 117:	50                   	push   %eax
+ 118:	68 4f 04 00 00       	push   $0x44f
+ 11d:	6a 01                	push   $0x1
+ 11f:	e8 8e 02 00 00       	call   3b2 <write>
+  }
+
+  for(; n > 0; n--){
+    if(wait() < 0){
+      printf(1, "wait stopped early\n");
+      exit();
+ 124:	e8 69 02 00 00       	call   392 <exit>
+#define N  1000
+
+void
+printf(int fd, const char *s, ...)
+{
+  write(fd, s, strlen(s));
+ 129:	83 ec 0c             	sub    $0xc,%esp
+ 12c:	68 63 04 00 00       	push   $0x463
+ 131:	e8 9a 00 00 00       	call   1d0 <strlen>
+ 136:	83 c4 0c             	add    $0xc,%esp
+ 139:	50                   	push   %eax
+ 13a:	68 63 04 00 00       	push   $0x463
+ 13f:	6a 01                	push   $0x1
+ 141:	e8 6c 02 00 00       	call   3b2 <write>
+    }
+  }
+
+  if(wait() != -1){
+    printf(1, "wait got too many\n");
+    exit();
+ 146:	e8 47 02 00 00       	call   392 <exit>
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 15a:	89 c2                	mov    %eax,%edx
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 160:	83 c1 01             	add    $0x1,%ecx
+ 163:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 167:	83 c2 01             	add    $0x1,%edx
+ 16a:	84 db                	test   %bl,%bl
+ 16c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 16f:	75 ef                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 171:	5b                   	pop    %ebx
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 17a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	56                   	push   %esi
+ 184:	53                   	push   %ebx
+ 185:	8b 55 08             	mov    0x8(%ebp),%edx
+ 188:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 18b:	0f b6 02             	movzbl (%edx),%eax
+ 18e:	0f b6 19             	movzbl (%ecx),%ebx
+ 191:	84 c0                	test   %al,%al
+ 193:	75 1e                	jne    1b3 <strcmp+0x33>
+ 195:	eb 29                	jmp    1c0 <strcmp+0x40>
+ 197:	89 f6                	mov    %esi,%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1a0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1a3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1a6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1a9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1ad:	84 c0                	test   %al,%al
+ 1af:	74 0f                	je     1c0 <strcmp+0x40>
+ 1b1:	89 f1                	mov    %esi,%ecx
+ 1b3:	38 d8                	cmp    %bl,%al
+ 1b5:	74 e9                	je     1a0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1b7:	29 d8                	sub    %ebx,%eax
+}
+ 1b9:	5b                   	pop    %ebx
+ 1ba:	5e                   	pop    %esi
+ 1bb:	5d                   	pop    %ebp
+ 1bc:	c3                   	ret    
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1c0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5e                   	pop    %esi
+ 1c6:	5d                   	pop    %ebp
+ 1c7:	c3                   	ret    
+ 1c8:	90                   	nop
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1d9:	74 12                	je     1ed <strlen+0x1d>
+ 1db:	31 d2                	xor    %edx,%edx
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c2 01             	add    $0x1,%edx
+ 1e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1e7:	89 d0                	mov    %edx,%eax
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ed:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	eb 0d                	jmp    200 <memset>
+ 1f3:	90                   	nop
+ 1f4:	90                   	nop
+ 1f5:	90                   	nop
+ 1f6:	90                   	nop
+ 1f7:	90                   	nop
+ 1f8:	90                   	nop
+ 1f9:	90                   	nop
+ 1fa:	90                   	nop
+ 1fb:	90                   	nop
+ 1fc:	90                   	nop
+ 1fd:	90                   	nop
+ 1fe:	90                   	nop
+ 1ff:	90                   	nop
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	89 d0                	mov    %edx,%eax
+ 214:	5f                   	pop    %edi
+ 215:	5d                   	pop    %ebp
+ 216:	c3                   	ret    
+ 217:	89 f6                	mov    %esi,%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	53                   	push   %ebx
+ 224:	8b 45 08             	mov    0x8(%ebp),%eax
+ 227:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	74 1d                	je     24e <strchr+0x2e>
+    if(*s == c)
+ 231:	38 d3                	cmp    %dl,%bl
+ 233:	89 d9                	mov    %ebx,%ecx
+ 235:	75 0d                	jne    244 <strchr+0x24>
+ 237:	eb 17                	jmp    250 <strchr+0x30>
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 240:	38 ca                	cmp    %cl,%dl
+ 242:	74 0c                	je     250 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	0f b6 10             	movzbl (%eax),%edx
+ 24a:	84 d2                	test   %dl,%dl
+ 24c:	75 f2                	jne    240 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 24e:	31 c0                	xor    %eax,%eax
+}
+ 250:	5b                   	pop    %ebx
+ 251:	5d                   	pop    %ebp
+ 252:	c3                   	ret    
+ 253:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 259:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+ 265:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 266:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 268:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 26b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 26e:	eb 29                	jmp    299 <gets+0x39>
+    cc = read(0, &c, 1);
+ 270:	83 ec 04             	sub    $0x4,%esp
+ 273:	6a 01                	push   $0x1
+ 275:	57                   	push   %edi
+ 276:	6a 00                	push   $0x0
+ 278:	e8 2d 01 00 00       	call   3aa <read>
+    if(cc < 1)
+ 27d:	83 c4 10             	add    $0x10,%esp
+ 280:	85 c0                	test   %eax,%eax
+ 282:	7e 1d                	jle    2a1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 284:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 288:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 28d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 28f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 293:	74 1b                	je     2b0 <gets+0x50>
+ 295:	3c 0d                	cmp    $0xd,%al
+ 297:	74 17                	je     2b0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 299:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 29c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 29f:	7c cf                	jl     270 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ab:	5b                   	pop    %ebx
+ 2ac:	5e                   	pop    %esi
+ 2ad:	5f                   	pop    %edi
+ 2ae:	5d                   	pop    %ebp
+ 2af:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2b0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2b3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2b5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2bc:	5b                   	pop    %ebx
+ 2bd:	5e                   	pop    %esi
+ 2be:	5f                   	pop    %edi
+ 2bf:	5d                   	pop    %ebp
+ 2c0:	c3                   	ret    
+ 2c1:	eb 0d                	jmp    2d0 <stat>
+ 2c3:	90                   	nop
+ 2c4:	90                   	nop
+ 2c5:	90                   	nop
+ 2c6:	90                   	nop
+ 2c7:	90                   	nop
+ 2c8:	90                   	nop
+ 2c9:	90                   	nop
+ 2ca:	90                   	nop
+ 2cb:	90                   	nop
+ 2cc:	90                   	nop
+ 2cd:	90                   	nop
+ 2ce:	90                   	nop
+ 2cf:	90                   	nop
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	pushl  0x8(%ebp)
+ 2dd:	e8 f0 00 00 00       	call   3d2 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	pushl  0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f3 00 00 00       	call   3ea <fstat>
+ 2f7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2f9:	89 1c 24             	mov    %ebx,(%esp)
+ 2fc:	e8 b9 00 00 00       	call   3ba <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+ 304:	89 f0                	mov    %esi,%eax
+}
+ 306:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 310:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 315:	eb ef                	jmp    306 <stat+0x36>
+ 317:	89 f6                	mov    %esi,%esi
+ 319:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000320 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 11             	movsbl (%ecx),%edx
+ 32a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 32d:	3c 09                	cmp    $0x9,%al
+ 32f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 334:	77 1f                	ja     355 <atoi+0x35>
+ 336:	8d 76 00             	lea    0x0(%esi),%esi
+ 339:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 340:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 343:	83 c1 01             	add    $0x1,%ecx
+ 346:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 11             	movsbl (%ecx),%edx
+ 34d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 355:	5b                   	pop    %ebx
+ 356:	5d                   	pop    %ebp
+ 357:	c3                   	ret    
+ 358:	90                   	nop
+ 359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	56                   	push   %esi
+ 364:	53                   	push   %ebx
+ 365:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 368:	8b 45 08             	mov    0x8(%ebp),%eax
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	7e 14                	jle    386 <memmove+0x26>
+ 372:	31 d2                	xor    %edx,%edx
+ 374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 378:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 37c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 37f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 382:	39 da                	cmp    %ebx,%edx
+ 384:	75 f2                	jne    378 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 386:	5b                   	pop    %ebx
+ 387:	5e                   	pop    %esi
+ 388:	5d                   	pop    %ebp
+ 389:	c3                   	ret    
+
+0000038a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 38a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <exit>:
+SYSCALL(exit)
+ 392:	b8 02 00 00 00       	mov    $0x2,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <wait>:
+SYSCALL(wait)
+ 39a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <pipe>:
+SYSCALL(pipe)
+ 3a2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <read>:
+SYSCALL(read)
+ 3aa:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <write>:
+SYSCALL(write)
+ 3b2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <close>:
+SYSCALL(close)
+ 3ba:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <kill>:
+SYSCALL(kill)
+ 3c2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <exec>:
+SYSCALL(exec)
+ 3ca:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <open>:
+SYSCALL(open)
+ 3d2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <mknod>:
+SYSCALL(mknod)
+ 3da:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <unlink>:
+SYSCALL(unlink)
+ 3e2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <fstat>:
+SYSCALL(fstat)
+ 3ea:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <link>:
+SYSCALL(link)
+ 3f2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <mkdir>:
+SYSCALL(mkdir)
+ 3fa:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <chdir>:
+SYSCALL(chdir)
+ 402:	b8 09 00 00 00       	mov    $0x9,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <dup>:
+SYSCALL(dup)
+ 40a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <getpid>:
+SYSCALL(getpid)
+ 412:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <sbrk>:
+SYSCALL(sbrk)
+ 41a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <sleep>:
+SYSCALL(sleep)
+ 422:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <uptime>:
+SYSCALL(uptime)
+ 42a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <readcount>:
+SYSCALL(readcount)
+ 432:	b8 16 00 00 00       	mov    $0x16,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <callcount>:
+SYSCALL(callcount)
+ 43a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
diff -ruN ./xv6-public-src/forktest.d ./xv6-public/forktest.d
--- ./xv6-public-src/forktest.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/forktest.d	2019-11-28 17:52:28.023798723 +0200
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/forktest.o and ./xv6-public/forktest.o differ
diff -ruN ./xv6-public-src/fs.d ./xv6-public/fs.d
--- ./xv6-public-src/fs.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/fs.d	2019-11-28 17:52:29.440670644 +0200
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files ./xv6-public-src/fs.img and ./xv6-public/fs.img differ
Binary files ./xv6-public-src/fs.o and ./xv6-public/fs.o differ
Binary files ./xv6-public-src/_grep and ./xv6-public/_grep differ
diff -ruN ./xv6-public-src/grep.asm ./xv6-public/grep.asm
--- ./xv6-public-src/grep.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/grep.asm	2019-11-28 17:52:28.119857946 +0200
@@ -0,0 +1,2035 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 18             	sub    $0x18,%esp
+  14:	8b 01                	mov    (%ecx),%eax
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  19:	83 f8 01             	cmp    $0x1,%eax
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+  1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  1f:	7e 76                	jle    97 <main+0x97>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  21:	8b 43 04             	mov    0x4(%ebx),%eax
+  24:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  27:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+  2b:	be 02 00 00 00       	mov    $0x2,%esi
+
+  if(argc <= 1){
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  30:	89 45 e0             	mov    %eax,-0x20(%ebp)
+
+  if(argc <= 2){
+  33:	74 53                	je     88 <main+0x88>
+  35:	8d 76 00             	lea    0x0(%esi),%esi
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  38:	83 ec 08             	sub    $0x8,%esp
+  3b:	6a 00                	push   $0x0
+  3d:	ff 33                	pushl  (%ebx)
+  3f:	e8 5e 05 00 00       	call   5a2 <open>
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	85 c0                	test   %eax,%eax
+  49:	89 c7                	mov    %eax,%edi
+  4b:	78 27                	js     74 <main+0x74>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  4d:	83 ec 08             	sub    $0x8,%esp
+  if(argc <= 2){
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  50:	83 c6 01             	add    $0x1,%esi
+  53:	83 c3 04             	add    $0x4,%ebx
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  56:	50                   	push   %eax
+  57:	ff 75 e0             	pushl  -0x20(%ebp)
+  5a:	e8 c1 01 00 00       	call   220 <grep>
+    close(fd);
+  5f:	89 3c 24             	mov    %edi,(%esp)
+  62:	e8 23 05 00 00       	call   58a <close>
+  if(argc <= 2){
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  67:	83 c4 10             	add    $0x10,%esp
+  6a:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  6d:	7f c9                	jg     38 <main+0x38>
+      exit();
+    }
+    grep(pattern, fd);
+    close(fd);
+  }
+  exit();
+  6f:	e8 ee 04 00 00       	call   562 <exit>
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  74:	50                   	push   %eax
+  75:	ff 33                	pushl  (%ebx)
+  77:	68 00 0a 00 00       	push   $0xa00
+  7c:	6a 01                	push   $0x1
+  7e:	e8 3d 06 00 00       	call   6c0 <printf>
+      exit();
+  83:	e8 da 04 00 00       	call   562 <exit>
+    exit();
+  }
+  pattern = argv[1];
+
+  if(argc <= 2){
+    grep(pattern, 0);
+  88:	52                   	push   %edx
+  89:	52                   	push   %edx
+  8a:	6a 00                	push   $0x0
+  8c:	50                   	push   %eax
+  8d:	e8 8e 01 00 00       	call   220 <grep>
+    exit();
+  92:	e8 cb 04 00 00       	call   562 <exit>
+{
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+    printf(2, "usage: grep pattern [file ...]\n");
+  97:	51                   	push   %ecx
+  98:	51                   	push   %ecx
+  99:	68 e0 09 00 00       	push   $0x9e0
+  9e:	6a 02                	push   $0x2
+  a0:	e8 1b 06 00 00       	call   6c0 <printf>
+    exit();
+  a5:	e8 b8 04 00 00       	call   562 <exit>
+  aa:	66 90                	xchg   %ax,%ax
+  ac:	66 90                	xchg   %ax,%ax
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	57                   	push   %edi
+  b4:	56                   	push   %esi
+  b5:	53                   	push   %ebx
+  b6:	83 ec 0c             	sub    $0xc,%esp
+  b9:	8b 75 08             	mov    0x8(%ebp),%esi
+  bc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  bf:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  c8:	83 ec 08             	sub    $0x8,%esp
+  cb:	53                   	push   %ebx
+  cc:	57                   	push   %edi
+  cd:	e8 3e 00 00 00       	call   110 <matchhere>
+  d2:	83 c4 10             	add    $0x10,%esp
+  d5:	85 c0                	test   %eax,%eax
+  d7:	75 1f                	jne    f8 <matchstar+0x48>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  d9:	0f be 13             	movsbl (%ebx),%edx
+  dc:	84 d2                	test   %dl,%dl
+  de:	74 0c                	je     ec <matchstar+0x3c>
+  e0:	83 c3 01             	add    $0x1,%ebx
+  e3:	83 fe 2e             	cmp    $0x2e,%esi
+  e6:	74 e0                	je     c8 <matchstar+0x18>
+  e8:	39 f2                	cmp    %esi,%edx
+  ea:	74 dc                	je     c8 <matchstar+0x18>
+  return 0;
+}
+  ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5f                   	pop    %edi
+  f2:	5d                   	pop    %ebp
+  f3:	c3                   	ret    
+  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+      return 1;
+  fb:	b8 01 00 00 00       	mov    $0x1,%eax
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  return 0;
+}
+ 100:	5b                   	pop    %ebx
+ 101:	5e                   	pop    %esi
+ 102:	5f                   	pop    %edi
+ 103:	5d                   	pop    %ebp
+ 104:	c3                   	ret    
+ 105:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 109:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000110 <matchhere>:
+  return 0;
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	56                   	push   %esi
+ 115:	53                   	push   %ebx
+ 116:	83 ec 0c             	sub    $0xc,%esp
+ 119:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 11f:	0f b6 18             	movzbl (%eax),%ebx
+ 122:	84 db                	test   %bl,%bl
+ 124:	74 63                	je     189 <matchhere+0x79>
+    return 1;
+  if(re[1] == '*')
+ 126:	0f be 50 01          	movsbl 0x1(%eax),%edx
+ 12a:	80 fa 2a             	cmp    $0x2a,%dl
+ 12d:	74 7b                	je     1aa <matchhere+0x9a>
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+ 12f:	80 fb 24             	cmp    $0x24,%bl
+ 132:	75 08                	jne    13c <matchhere+0x2c>
+ 134:	84 d2                	test   %dl,%dl
+ 136:	0f 84 8a 00 00 00    	je     1c6 <matchhere+0xb6>
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 13c:	0f b6 37             	movzbl (%edi),%esi
+ 13f:	89 f1                	mov    %esi,%ecx
+ 141:	84 c9                	test   %cl,%cl
+ 143:	74 5b                	je     1a0 <matchhere+0x90>
+ 145:	38 cb                	cmp    %cl,%bl
+ 147:	74 05                	je     14e <matchhere+0x3e>
+ 149:	80 fb 2e             	cmp    $0x2e,%bl
+ 14c:	75 52                	jne    1a0 <matchhere+0x90>
+    return matchhere(re+1, text+1);
+ 14e:	83 c7 01             	add    $0x1,%edi
+ 151:	83 c0 01             	add    $0x1,%eax
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  if(re[0] == '\0')
+ 154:	84 d2                	test   %dl,%dl
+ 156:	74 31                	je     189 <matchhere+0x79>
+    return 1;
+  if(re[1] == '*')
+ 158:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+ 15c:	80 fb 2a             	cmp    $0x2a,%bl
+ 15f:	74 4c                	je     1ad <matchhere+0x9d>
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+ 161:	80 fa 24             	cmp    $0x24,%dl
+ 164:	75 04                	jne    16a <matchhere+0x5a>
+ 166:	84 db                	test   %bl,%bl
+ 168:	74 5c                	je     1c6 <matchhere+0xb6>
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 16a:	0f b6 37             	movzbl (%edi),%esi
+ 16d:	89 f1                	mov    %esi,%ecx
+ 16f:	84 c9                	test   %cl,%cl
+ 171:	74 2d                	je     1a0 <matchhere+0x90>
+ 173:	80 fa 2e             	cmp    $0x2e,%dl
+ 176:	74 04                	je     17c <matchhere+0x6c>
+ 178:	38 d1                	cmp    %dl,%cl
+ 17a:	75 24                	jne    1a0 <matchhere+0x90>
+ 17c:	0f be d3             	movsbl %bl,%edx
+    return matchhere(re+1, text+1);
+ 17f:	83 c7 01             	add    $0x1,%edi
+ 182:	83 c0 01             	add    $0x1,%eax
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  if(re[0] == '\0')
+ 185:	84 d2                	test   %dl,%dl
+ 187:	75 cf                	jne    158 <matchhere+0x48>
+    return 1;
+ 189:	b8 01 00 00 00       	mov    $0x1,%eax
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+    return matchhere(re+1, text+1);
+  return 0;
+}
+ 18e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 191:	5b                   	pop    %ebx
+ 192:	5e                   	pop    %esi
+ 193:	5f                   	pop    %edi
+ 194:	5d                   	pop    %ebp
+ 195:	c3                   	ret    
+ 196:	8d 76 00             	lea    0x0(%esi),%esi
+ 199:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 1a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+    return matchhere(re+1, text+1);
+  return 0;
+ 1a3:	31 c0                	xor    %eax,%eax
+}
+ 1a5:	5b                   	pop    %ebx
+ 1a6:	5e                   	pop    %esi
+ 1a7:	5f                   	pop    %edi
+ 1a8:	5d                   	pop    %ebp
+ 1a9:	c3                   	ret    
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  if(re[0] == '\0')
+    return 1;
+  if(re[1] == '*')
+ 1aa:	0f be d3             	movsbl %bl,%edx
+    return matchstar(re[0], re+2, text);
+ 1ad:	83 ec 04             	sub    $0x4,%esp
+ 1b0:	83 c0 02             	add    $0x2,%eax
+ 1b3:	57                   	push   %edi
+ 1b4:	50                   	push   %eax
+ 1b5:	52                   	push   %edx
+ 1b6:	e8 f5 fe ff ff       	call   b0 <matchstar>
+ 1bb:	83 c4 10             	add    $0x10,%esp
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+    return matchhere(re+1, text+1);
+  return 0;
+}
+ 1be:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c1:	5b                   	pop    %ebx
+ 1c2:	5e                   	pop    %esi
+ 1c3:	5f                   	pop    %edi
+ 1c4:	5d                   	pop    %ebp
+ 1c5:	c3                   	ret    
+  if(re[0] == '\0')
+    return 1;
+  if(re[1] == '*')
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+ 1c6:	31 c0                	xor    %eax,%eax
+ 1c8:	80 3f 00             	cmpb   $0x0,(%edi)
+ 1cb:	0f 94 c0             	sete   %al
+ 1ce:	eb be                	jmp    18e <matchhere+0x7e>
+
+000001d0 <match>:
+int matchhere(char*, char*);
+int matchstar(int, char*, char*);
+
+int
+match(char *re, char *text)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	56                   	push   %esi
+ 1d4:	53                   	push   %ebx
+ 1d5:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1d8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  if(re[0] == '^')
+ 1db:	80 3e 5e             	cmpb   $0x5e,(%esi)
+ 1de:	75 11                	jne    1f1 <match+0x21>
+ 1e0:	eb 2c                	jmp    20e <match+0x3e>
+ 1e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return matchhere(re+1, text);
+  do{  // must look at empty string
+    if(matchhere(re, text))
+      return 1;
+  }while(*text++ != '\0');
+ 1e8:	83 c3 01             	add    $0x1,%ebx
+ 1eb:	80 7b ff 00          	cmpb   $0x0,-0x1(%ebx)
+ 1ef:	74 16                	je     207 <match+0x37>
+match(char *re, char *text)
+{
+  if(re[0] == '^')
+    return matchhere(re+1, text);
+  do{  // must look at empty string
+    if(matchhere(re, text))
+ 1f1:	83 ec 08             	sub    $0x8,%esp
+ 1f4:	53                   	push   %ebx
+ 1f5:	56                   	push   %esi
+ 1f6:	e8 15 ff ff ff       	call   110 <matchhere>
+ 1fb:	83 c4 10             	add    $0x10,%esp
+ 1fe:	85 c0                	test   %eax,%eax
+ 200:	74 e6                	je     1e8 <match+0x18>
+      return 1;
+ 202:	b8 01 00 00 00       	mov    $0x1,%eax
+  }while(*text++ != '\0');
+  return 0;
+}
+ 207:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20a:	5b                   	pop    %ebx
+ 20b:	5e                   	pop    %esi
+ 20c:	5d                   	pop    %ebp
+ 20d:	c3                   	ret    
+
+int
+match(char *re, char *text)
+{
+  if(re[0] == '^')
+    return matchhere(re+1, text);
+ 20e:	83 c6 01             	add    $0x1,%esi
+ 211:	89 75 08             	mov    %esi,0x8(%ebp)
+  do{  // must look at empty string
+    if(matchhere(re, text))
+      return 1;
+  }while(*text++ != '\0');
+  return 0;
+}
+ 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 217:	5b                   	pop    %ebx
+ 218:	5e                   	pop    %esi
+ 219:	5d                   	pop    %ebp
+
+int
+match(char *re, char *text)
+{
+  if(re[0] == '^')
+    return matchhere(re+1, text);
+ 21a:	e9 f1 fe ff ff       	jmp    110 <matchhere>
+ 21f:	90                   	nop
+
+00000220 <grep>:
+char buf[1024];
+int match(char*, char*);
+
+void
+grep(char *pattern, int fd)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	57                   	push   %edi
+ 224:	56                   	push   %esi
+ 225:	53                   	push   %ebx
+ 226:	83 ec 1c             	sub    $0x1c,%esp
+ 229:	8b 75 08             	mov    0x8(%ebp),%esi
+  int n, m;
+  char *p, *q;
+
+  m = 0;
+ 22c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 233:	90                   	nop
+ 234:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 238:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 23b:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 240:	83 ec 04             	sub    $0x4,%esp
+ 243:	29 c8                	sub    %ecx,%eax
+ 245:	50                   	push   %eax
+ 246:	8d 81 e0 0d 00 00    	lea    0xde0(%ecx),%eax
+ 24c:	50                   	push   %eax
+ 24d:	ff 75 0c             	pushl  0xc(%ebp)
+ 250:	e8 25 03 00 00       	call   57a <read>
+ 255:	83 c4 10             	add    $0x10,%esp
+ 258:	85 c0                	test   %eax,%eax
+ 25a:	0f 8e ac 00 00 00    	jle    30c <grep+0xec>
+    m += n;
+ 260:	01 45 e4             	add    %eax,-0x1c(%ebp)
+    buf[m] = '\0';
+    p = buf;
+ 263:	bb e0 0d 00 00       	mov    $0xde0,%ebx
+  int n, m;
+  char *p, *q;
+
+  m = 0;
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+    m += n;
+ 268:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+    buf[m] = '\0';
+ 26b:	c6 82 e0 0d 00 00 00 	movb   $0x0,0xde0(%edx)
+ 272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    p = buf;
+    while((q = strchr(p, '\n')) != 0){
+ 278:	83 ec 08             	sub    $0x8,%esp
+ 27b:	6a 0a                	push   $0xa
+ 27d:	53                   	push   %ebx
+ 27e:	e8 6d 01 00 00       	call   3f0 <strchr>
+ 283:	83 c4 10             	add    $0x10,%esp
+ 286:	85 c0                	test   %eax,%eax
+ 288:	89 c7                	mov    %eax,%edi
+ 28a:	74 3c                	je     2c8 <grep+0xa8>
+      *q = 0;
+      if(match(pattern, p)){
+ 28c:	83 ec 08             	sub    $0x8,%esp
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+    m += n;
+    buf[m] = '\0';
+    p = buf;
+    while((q = strchr(p, '\n')) != 0){
+      *q = 0;
+ 28f:	c6 07 00             	movb   $0x0,(%edi)
+      if(match(pattern, p)){
+ 292:	53                   	push   %ebx
+ 293:	56                   	push   %esi
+ 294:	e8 37 ff ff ff       	call   1d0 <match>
+ 299:	83 c4 10             	add    $0x10,%esp
+ 29c:	85 c0                	test   %eax,%eax
+ 29e:	75 08                	jne    2a8 <grep+0x88>
+ 2a0:	8d 5f 01             	lea    0x1(%edi),%ebx
+ 2a3:	eb d3                	jmp    278 <grep+0x58>
+ 2a5:	8d 76 00             	lea    0x0(%esi),%esi
+        *q = '\n';
+ 2a8:	c6 07 0a             	movb   $0xa,(%edi)
+        write(1, p, q+1 - p);
+ 2ab:	83 c7 01             	add    $0x1,%edi
+ 2ae:	83 ec 04             	sub    $0x4,%esp
+ 2b1:	89 f8                	mov    %edi,%eax
+ 2b3:	29 d8                	sub    %ebx,%eax
+ 2b5:	50                   	push   %eax
+ 2b6:	53                   	push   %ebx
+ 2b7:	89 fb                	mov    %edi,%ebx
+ 2b9:	6a 01                	push   $0x1
+ 2bb:	e8 c2 02 00 00       	call   582 <write>
+ 2c0:	83 c4 10             	add    $0x10,%esp
+ 2c3:	eb b3                	jmp    278 <grep+0x58>
+ 2c5:	8d 76 00             	lea    0x0(%esi),%esi
+      }
+      p = q+1;
+    }
+    if(p == buf)
+ 2c8:	81 fb e0 0d 00 00    	cmp    $0xde0,%ebx
+ 2ce:	74 30                	je     300 <grep+0xe0>
+      m = 0;
+    if(m > 0){
+ 2d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+ 2d3:	85 c0                	test   %eax,%eax
+ 2d5:	0f 8e 5d ff ff ff    	jle    238 <grep+0x18>
+      m -= p - buf;
+ 2db:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2dd:	83 ec 04             	sub    $0x4,%esp
+      p = q+1;
+    }
+    if(p == buf)
+      m = 0;
+    if(m > 0){
+      m -= p - buf;
+ 2e0:	2d e0 0d 00 00       	sub    $0xde0,%eax
+ 2e5:	29 45 e4             	sub    %eax,-0x1c(%ebp)
+ 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+      memmove(buf, p, m);
+ 2eb:	51                   	push   %ecx
+ 2ec:	53                   	push   %ebx
+ 2ed:	68 e0 0d 00 00       	push   $0xde0
+ 2f2:	e8 39 02 00 00       	call   530 <memmove>
+ 2f7:	83 c4 10             	add    $0x10,%esp
+ 2fa:	e9 39 ff ff ff       	jmp    238 <grep+0x18>
+ 2ff:	90                   	nop
+        write(1, p, q+1 - p);
+      }
+      p = q+1;
+    }
+    if(p == buf)
+      m = 0;
+ 300:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 307:	e9 2c ff ff ff       	jmp    238 <grep+0x18>
+    if(m > 0){
+      m -= p - buf;
+      memmove(buf, p, m);
+    }
+  }
+}
+ 30c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 30f:	5b                   	pop    %ebx
+ 310:	5e                   	pop    %esi
+ 311:	5f                   	pop    %edi
+ 312:	5d                   	pop    %ebp
+ 313:	c3                   	ret    
+ 314:	66 90                	xchg   %ax,%ax
+ 316:	66 90                	xchg   %ax,%ax
+ 318:	66 90                	xchg   %ax,%ax
+ 31a:	66 90                	xchg   %ax,%ax
+ 31c:	66 90                	xchg   %ax,%ax
+ 31e:	66 90                	xchg   %ax,%ax
+
+00000320 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 45 08             	mov    0x8(%ebp),%eax
+ 327:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 32a:	89 c2                	mov    %eax,%edx
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 330:	83 c1 01             	add    $0x1,%ecx
+ 333:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 337:	83 c2 01             	add    $0x1,%edx
+ 33a:	84 db                	test   %bl,%bl
+ 33c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 33f:	75 ef                	jne    330 <strcpy+0x10>
+    ;
+  return os;
+}
+ 341:	5b                   	pop    %ebx
+ 342:	5d                   	pop    %ebp
+ 343:	c3                   	ret    
+ 344:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 34a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000350 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	56                   	push   %esi
+ 354:	53                   	push   %ebx
+ 355:	8b 55 08             	mov    0x8(%ebp),%edx
+ 358:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 35b:	0f b6 02             	movzbl (%edx),%eax
+ 35e:	0f b6 19             	movzbl (%ecx),%ebx
+ 361:	84 c0                	test   %al,%al
+ 363:	75 1e                	jne    383 <strcmp+0x33>
+ 365:	eb 29                	jmp    390 <strcmp+0x40>
+ 367:	89 f6                	mov    %esi,%esi
+ 369:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 370:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 373:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 376:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 379:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 37d:	84 c0                	test   %al,%al
+ 37f:	74 0f                	je     390 <strcmp+0x40>
+ 381:	89 f1                	mov    %esi,%ecx
+ 383:	38 d8                	cmp    %bl,%al
+ 385:	74 e9                	je     370 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 387:	29 d8                	sub    %ebx,%eax
+}
+ 389:	5b                   	pop    %ebx
+ 38a:	5e                   	pop    %esi
+ 38b:	5d                   	pop    %ebp
+ 38c:	c3                   	ret    
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 390:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 392:	29 d8                	sub    %ebx,%eax
+}
+ 394:	5b                   	pop    %ebx
+ 395:	5e                   	pop    %esi
+ 396:	5d                   	pop    %ebp
+ 397:	c3                   	ret    
+ 398:	90                   	nop
+ 399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3a6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3a9:	74 12                	je     3bd <strlen+0x1d>
+ 3ab:	31 d2                	xor    %edx,%edx
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 3b0:	83 c2 01             	add    $0x1,%edx
+ 3b3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3b7:	89 d0                	mov    %edx,%eax
+ 3b9:	75 f5                	jne    3b0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3bb:	5d                   	pop    %ebp
+ 3bc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3bd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 3bf:	5d                   	pop    %ebp
+ 3c0:	c3                   	ret    
+ 3c1:	eb 0d                	jmp    3d0 <memset>
+ 3c3:	90                   	nop
+ 3c4:	90                   	nop
+ 3c5:	90                   	nop
+ 3c6:	90                   	nop
+ 3c7:	90                   	nop
+ 3c8:	90                   	nop
+ 3c9:	90                   	nop
+ 3ca:	90                   	nop
+ 3cb:	90                   	nop
+ 3cc:	90                   	nop
+ 3cd:	90                   	nop
+ 3ce:	90                   	nop
+ 3cf:	90                   	nop
+
+000003d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3d7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3da:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3dd:	89 d7                	mov    %edx,%edi
+ 3df:	fc                   	cld    
+ 3e0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 3e2:	89 d0                	mov    %edx,%eax
+ 3e4:	5f                   	pop    %edi
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	89 f6                	mov    %esi,%esi
+ 3e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000003f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	53                   	push   %ebx
+ 3f4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 3f7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 3fa:	0f b6 10             	movzbl (%eax),%edx
+ 3fd:	84 d2                	test   %dl,%dl
+ 3ff:	74 1d                	je     41e <strchr+0x2e>
+    if(*s == c)
+ 401:	38 d3                	cmp    %dl,%bl
+ 403:	89 d9                	mov    %ebx,%ecx
+ 405:	75 0d                	jne    414 <strchr+0x24>
+ 407:	eb 17                	jmp    420 <strchr+0x30>
+ 409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 410:	38 ca                	cmp    %cl,%dl
+ 412:	74 0c                	je     420 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 414:	83 c0 01             	add    $0x1,%eax
+ 417:	0f b6 10             	movzbl (%eax),%edx
+ 41a:	84 d2                	test   %dl,%dl
+ 41c:	75 f2                	jne    410 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 41e:	31 c0                	xor    %eax,%eax
+}
+ 420:	5b                   	pop    %ebx
+ 421:	5d                   	pop    %ebp
+ 422:	c3                   	ret    
+ 423:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000430 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 436:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 438:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 43b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 43e:	eb 29                	jmp    469 <gets+0x39>
+    cc = read(0, &c, 1);
+ 440:	83 ec 04             	sub    $0x4,%esp
+ 443:	6a 01                	push   $0x1
+ 445:	57                   	push   %edi
+ 446:	6a 00                	push   $0x0
+ 448:	e8 2d 01 00 00       	call   57a <read>
+    if(cc < 1)
+ 44d:	83 c4 10             	add    $0x10,%esp
+ 450:	85 c0                	test   %eax,%eax
+ 452:	7e 1d                	jle    471 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 454:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 458:	8b 55 08             	mov    0x8(%ebp),%edx
+ 45b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 45d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 45f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 463:	74 1b                	je     480 <gets+0x50>
+ 465:	3c 0d                	cmp    $0xd,%al
+ 467:	74 17                	je     480 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 46c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 46f:	7c cf                	jl     440 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 471:	8b 45 08             	mov    0x8(%ebp),%eax
+ 474:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 478:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 47b:	5b                   	pop    %ebx
+ 47c:	5e                   	pop    %esi
+ 47d:	5f                   	pop    %edi
+ 47e:	5d                   	pop    %ebp
+ 47f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 480:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 483:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 485:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 489:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 48c:	5b                   	pop    %ebx
+ 48d:	5e                   	pop    %esi
+ 48e:	5f                   	pop    %edi
+ 48f:	5d                   	pop    %ebp
+ 490:	c3                   	ret    
+ 491:	eb 0d                	jmp    4a0 <stat>
+ 493:	90                   	nop
+ 494:	90                   	nop
+ 495:	90                   	nop
+ 496:	90                   	nop
+ 497:	90                   	nop
+ 498:	90                   	nop
+ 499:	90                   	nop
+ 49a:	90                   	nop
+ 49b:	90                   	nop
+ 49c:	90                   	nop
+ 49d:	90                   	nop
+ 49e:	90                   	nop
+ 49f:	90                   	nop
+
+000004a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	56                   	push   %esi
+ 4a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4a5:	83 ec 08             	sub    $0x8,%esp
+ 4a8:	6a 00                	push   $0x0
+ 4aa:	ff 75 08             	pushl  0x8(%ebp)
+ 4ad:	e8 f0 00 00 00       	call   5a2 <open>
+  if(fd < 0)
+ 4b2:	83 c4 10             	add    $0x10,%esp
+ 4b5:	85 c0                	test   %eax,%eax
+ 4b7:	78 27                	js     4e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4b9:	83 ec 08             	sub    $0x8,%esp
+ 4bc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4bf:	89 c3                	mov    %eax,%ebx
+ 4c1:	50                   	push   %eax
+ 4c2:	e8 f3 00 00 00       	call   5ba <fstat>
+ 4c7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4c9:	89 1c 24             	mov    %ebx,(%esp)
+ 4cc:	e8 b9 00 00 00       	call   58a <close>
+  return r;
+ 4d1:	83 c4 10             	add    $0x10,%esp
+ 4d4:	89 f0                	mov    %esi,%eax
+}
+ 4d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4d9:	5b                   	pop    %ebx
+ 4da:	5e                   	pop    %esi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 4e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 4e5:	eb ef                	jmp    4d6 <stat+0x36>
+ 4e7:	89 f6                	mov    %esi,%esi
+ 4e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000004f0 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 4f0:	55                   	push   %ebp
+ 4f1:	89 e5                	mov    %esp,%ebp
+ 4f3:	53                   	push   %ebx
+ 4f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 4f7:	0f be 11             	movsbl (%ecx),%edx
+ 4fa:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 4fd:	3c 09                	cmp    $0x9,%al
+ 4ff:	b8 00 00 00 00       	mov    $0x0,%eax
+ 504:	77 1f                	ja     525 <atoi+0x35>
+ 506:	8d 76 00             	lea    0x0(%esi),%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 510:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 513:	83 c1 01             	add    $0x1,%ecx
+ 516:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 51a:	0f be 11             	movsbl (%ecx),%edx
+ 51d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 520:	80 fb 09             	cmp    $0x9,%bl
+ 523:	76 eb                	jbe    510 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 525:	5b                   	pop    %ebx
+ 526:	5d                   	pop    %ebp
+ 527:	c3                   	ret    
+ 528:	90                   	nop
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000530 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 530:	55                   	push   %ebp
+ 531:	89 e5                	mov    %esp,%ebp
+ 533:	56                   	push   %esi
+ 534:	53                   	push   %ebx
+ 535:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 538:	8b 45 08             	mov    0x8(%ebp),%eax
+ 53b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 53e:	85 db                	test   %ebx,%ebx
+ 540:	7e 14                	jle    556 <memmove+0x26>
+ 542:	31 d2                	xor    %edx,%edx
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 548:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 54c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 54f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 552:	39 da                	cmp    %ebx,%edx
+ 554:	75 f2                	jne    548 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 556:	5b                   	pop    %ebx
+ 557:	5e                   	pop    %esi
+ 558:	5d                   	pop    %ebp
+ 559:	c3                   	ret    
+
+0000055a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 55a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 55f:	cd 40                	int    $0x40
+ 561:	c3                   	ret    
+
+00000562 <exit>:
+SYSCALL(exit)
+ 562:	b8 02 00 00 00       	mov    $0x2,%eax
+ 567:	cd 40                	int    $0x40
+ 569:	c3                   	ret    
+
+0000056a <wait>:
+SYSCALL(wait)
+ 56a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 56f:	cd 40                	int    $0x40
+ 571:	c3                   	ret    
+
+00000572 <pipe>:
+SYSCALL(pipe)
+ 572:	b8 04 00 00 00       	mov    $0x4,%eax
+ 577:	cd 40                	int    $0x40
+ 579:	c3                   	ret    
+
+0000057a <read>:
+SYSCALL(read)
+ 57a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <write>:
+SYSCALL(write)
+ 582:	b8 10 00 00 00       	mov    $0x10,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <close>:
+SYSCALL(close)
+ 58a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <kill>:
+SYSCALL(kill)
+ 592:	b8 06 00 00 00       	mov    $0x6,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <exec>:
+SYSCALL(exec)
+ 59a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <open>:
+SYSCALL(open)
+ 5a2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <mknod>:
+SYSCALL(mknod)
+ 5aa:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <unlink>:
+SYSCALL(unlink)
+ 5b2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <fstat>:
+SYSCALL(fstat)
+ 5ba:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <link>:
+SYSCALL(link)
+ 5c2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mkdir>:
+SYSCALL(mkdir)
+ 5ca:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <chdir>:
+SYSCALL(chdir)
+ 5d2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <dup>:
+SYSCALL(dup)
+ 5da:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <getpid>:
+SYSCALL(getpid)
+ 5e2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <sbrk>:
+SYSCALL(sbrk)
+ 5ea:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <sleep>:
+SYSCALL(sleep)
+ 5f2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <uptime>:
+SYSCALL(uptime)
+ 5fa:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <readcount>:
+SYSCALL(readcount)
+ 602:	b8 16 00 00 00       	mov    $0x16,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <callcount>:
+SYSCALL(callcount)
+ 60a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+ 612:	66 90                	xchg   %ax,%ax
+ 614:	66 90                	xchg   %ax,%ax
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 620:	55                   	push   %ebp
+ 621:	89 e5                	mov    %esp,%ebp
+ 623:	57                   	push   %edi
+ 624:	56                   	push   %esi
+ 625:	53                   	push   %ebx
+ 626:	89 c6                	mov    %eax,%esi
+ 628:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 62b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 62e:	85 db                	test   %ebx,%ebx
+ 630:	74 7e                	je     6b0 <printint+0x90>
+ 632:	89 d0                	mov    %edx,%eax
+ 634:	c1 e8 1f             	shr    $0x1f,%eax
+ 637:	84 c0                	test   %al,%al
+ 639:	74 75                	je     6b0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 63b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 63d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 644:	f7 d8                	neg    %eax
+ 646:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 649:	31 ff                	xor    %edi,%edi
+ 64b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 64e:	89 ce                	mov    %ecx,%esi
+ 650:	eb 08                	jmp    65a <printint+0x3a>
+ 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 658:	89 cf                	mov    %ecx,%edi
+ 65a:	31 d2                	xor    %edx,%edx
+ 65c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 65f:	f7 f6                	div    %esi
+ 661:	0f b6 92 20 0a 00 00 	movzbl 0xa20(%edx),%edx
+  }while((x /= base) != 0);
+ 668:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 66a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 66d:	75 e9                	jne    658 <printint+0x38>
+  if(neg)
+ 66f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 672:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 675:	85 c0                	test   %eax,%eax
+ 677:	74 08                	je     681 <printint+0x61>
+    buf[i++] = '-';
+ 679:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 67e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 681:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 685:	8d 76 00             	lea    0x0(%esi),%esi
+ 688:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 68b:	83 ec 04             	sub    $0x4,%esp
+ 68e:	83 ef 01             	sub    $0x1,%edi
+ 691:	6a 01                	push   $0x1
+ 693:	53                   	push   %ebx
+ 694:	56                   	push   %esi
+ 695:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 698:	e8 e5 fe ff ff       	call   582 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 69d:	83 c4 10             	add    $0x10,%esp
+ 6a0:	39 df                	cmp    %ebx,%edi
+ 6a2:	75 e4                	jne    688 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 6a4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 6b0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 6b2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6b9:	eb 8b                	jmp    646 <printint+0x26>
+ 6bb:	90                   	nop
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
+ 6c5:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6c6:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6c9:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6cc:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6cf:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6d5:	0f b6 1e             	movzbl (%esi),%ebx
+ 6d8:	83 c6 01             	add    $0x1,%esi
+ 6db:	84 db                	test   %bl,%bl
+ 6dd:	0f 84 b0 00 00 00    	je     793 <printf+0xd3>
+ 6e3:	31 d2                	xor    %edx,%edx
+ 6e5:	eb 39                	jmp    720 <printf+0x60>
+ 6e7:	89 f6                	mov    %esi,%esi
+ 6e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 6f0:	83 f8 25             	cmp    $0x25,%eax
+ 6f3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 6f6:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 6fb:	74 18                	je     715 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 6fd:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 700:	83 ec 04             	sub    $0x4,%esp
+ 703:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 706:	6a 01                	push   $0x1
+ 708:	50                   	push   %eax
+ 709:	57                   	push   %edi
+ 70a:	e8 73 fe ff ff       	call   582 <write>
+ 70f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 712:	83 c4 10             	add    $0x10,%esp
+ 715:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 718:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 71c:	84 db                	test   %bl,%bl
+ 71e:	74 73                	je     793 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 720:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 722:	0f be cb             	movsbl %bl,%ecx
+ 725:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 728:	74 c6                	je     6f0 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 72a:	83 fa 25             	cmp    $0x25,%edx
+ 72d:	75 e6                	jne    715 <printf+0x55>
+      if(c == 'd'){
+ 72f:	83 f8 64             	cmp    $0x64,%eax
+ 732:	0f 84 f8 00 00 00    	je     830 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 738:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 73e:	83 f9 70             	cmp    $0x70,%ecx
+ 741:	74 5d                	je     7a0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 743:	83 f8 73             	cmp    $0x73,%eax
+ 746:	0f 84 84 00 00 00    	je     7d0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 74c:	83 f8 63             	cmp    $0x63,%eax
+ 74f:	0f 84 ea 00 00 00    	je     83f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 755:	83 f8 25             	cmp    $0x25,%eax
+ 758:	0f 84 c2 00 00 00    	je     820 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 75e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 761:	83 ec 04             	sub    $0x4,%esp
+ 764:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 768:	6a 01                	push   $0x1
+ 76a:	50                   	push   %eax
+ 76b:	57                   	push   %edi
+ 76c:	e8 11 fe ff ff       	call   582 <write>
+ 771:	83 c4 0c             	add    $0xc,%esp
+ 774:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 777:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 77a:	6a 01                	push   $0x1
+ 77c:	50                   	push   %eax
+ 77d:	57                   	push   %edi
+ 77e:	83 c6 01             	add    $0x1,%esi
+ 781:	e8 fc fd ff ff       	call   582 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 786:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 78a:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 78d:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 78f:	84 db                	test   %bl,%bl
+ 791:	75 8d                	jne    720 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 793:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 796:	5b                   	pop    %ebx
+ 797:	5e                   	pop    %esi
+ 798:	5f                   	pop    %edi
+ 799:	5d                   	pop    %ebp
+ 79a:	c3                   	ret    
+ 79b:	90                   	nop
+ 79c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 7a0:	83 ec 0c             	sub    $0xc,%esp
+ 7a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7a8:	6a 00                	push   $0x0
+ 7aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7ad:	89 f8                	mov    %edi,%eax
+ 7af:	8b 13                	mov    (%ebx),%edx
+ 7b1:	e8 6a fe ff ff       	call   620 <printint>
+        ap++;
+ 7b6:	89 d8                	mov    %ebx,%eax
+ 7b8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7bb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 7bd:	83 c0 04             	add    $0x4,%eax
+ 7c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 7c3:	e9 4d ff ff ff       	jmp    715 <printf+0x55>
+ 7c8:	90                   	nop
+ 7c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 7d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 7d5:	83 c0 04             	add    $0x4,%eax
+ 7d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 7db:	b8 16 0a 00 00       	mov    $0xa16,%eax
+ 7e0:	85 db                	test   %ebx,%ebx
+ 7e2:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 7e5:	0f b6 03             	movzbl (%ebx),%eax
+ 7e8:	84 c0                	test   %al,%al
+ 7ea:	74 23                	je     80f <printf+0x14f>
+ 7ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7f0:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 7f3:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 7f6:	83 ec 04             	sub    $0x4,%esp
+ 7f9:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 7fb:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 7fe:	50                   	push   %eax
+ 7ff:	57                   	push   %edi
+ 800:	e8 7d fd ff ff       	call   582 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 805:	0f b6 03             	movzbl (%ebx),%eax
+ 808:	83 c4 10             	add    $0x10,%esp
+ 80b:	84 c0                	test   %al,%al
+ 80d:	75 e1                	jne    7f0 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 80f:	31 d2                	xor    %edx,%edx
+ 811:	e9 ff fe ff ff       	jmp    715 <printf+0x55>
+ 816:	8d 76 00             	lea    0x0(%esi),%esi
+ 819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 820:	83 ec 04             	sub    $0x4,%esp
+ 823:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 826:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 829:	6a 01                	push   $0x1
+ 82b:	e9 4c ff ff ff       	jmp    77c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 838:	6a 01                	push   $0x1
+ 83a:	e9 6b ff ff ff       	jmp    7aa <printf+0xea>
+ 83f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 842:	83 ec 04             	sub    $0x4,%esp
+ 845:	8b 03                	mov    (%ebx),%eax
+ 847:	6a 01                	push   $0x1
+ 849:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 84c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 84f:	50                   	push   %eax
+ 850:	57                   	push   %edi
+ 851:	e8 2c fd ff ff       	call   582 <write>
+ 856:	e9 5b ff ff ff       	jmp    7b6 <printf+0xf6>
+ 85b:	66 90                	xchg   %ax,%ax
+ 85d:	66 90                	xchg   %ax,%ax
+ 85f:	90                   	nop
+
+00000860 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 860:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 861:	a1 c0 0d 00 00       	mov    0xdc0,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 866:	89 e5                	mov    %esp,%ebp
+ 868:	57                   	push   %edi
+ 869:	56                   	push   %esi
+ 86a:	53                   	push   %ebx
+ 86b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 86e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 870:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 873:	39 c8                	cmp    %ecx,%eax
+ 875:	73 19                	jae    890 <free+0x30>
+ 877:	89 f6                	mov    %esi,%esi
+ 879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 880:	39 d1                	cmp    %edx,%ecx
+ 882:	72 1c                	jb     8a0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 884:	39 d0                	cmp    %edx,%eax
+ 886:	73 18                	jae    8a0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 888:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 88a:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 88c:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 88e:	72 f0                	jb     880 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 890:	39 d0                	cmp    %edx,%eax
+ 892:	72 f4                	jb     888 <free+0x28>
+ 894:	39 d1                	cmp    %edx,%ecx
+ 896:	73 f0                	jae    888 <free+0x28>
+ 898:	90                   	nop
+ 899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8a0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8a3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8a6:	39 d7                	cmp    %edx,%edi
+ 8a8:	74 19                	je     8c3 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 8aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 8b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8b3:	39 f1                	cmp    %esi,%ecx
+ 8b5:	74 23                	je     8da <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 8b7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 8b9:	a3 c0 0d 00 00       	mov    %eax,0xdc0
+}
+ 8be:	5b                   	pop    %ebx
+ 8bf:	5e                   	pop    %esi
+ 8c0:	5f                   	pop    %edi
+ 8c1:	5d                   	pop    %ebp
+ 8c2:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 8c3:	03 72 04             	add    0x4(%edx),%esi
+ 8c6:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8c9:	8b 10                	mov    (%eax),%edx
+ 8cb:	8b 12                	mov    (%edx),%edx
+ 8cd:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 8d0:	8b 50 04             	mov    0x4(%eax),%edx
+ 8d3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8d6:	39 f1                	cmp    %esi,%ecx
+ 8d8:	75 dd                	jne    8b7 <free+0x57>
+    p->s.size += bp->s.size;
+ 8da:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 8dd:	a3 c0 0d 00 00       	mov    %eax,0xdc0
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 8e2:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 8e5:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 8e8:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 8ea:	5b                   	pop    %ebx
+ 8eb:	5e                   	pop    %esi
+ 8ec:	5f                   	pop    %edi
+ 8ed:	5d                   	pop    %ebp
+ 8ee:	c3                   	ret    
+ 8ef:	90                   	nop
+
+000008f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 8f0:	55                   	push   %ebp
+ 8f1:	89 e5                	mov    %esp,%ebp
+ 8f3:	57                   	push   %edi
+ 8f4:	56                   	push   %esi
+ 8f5:	53                   	push   %ebx
+ 8f6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 8fc:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 902:	8d 78 07             	lea    0x7(%eax),%edi
+ 905:	c1 ef 03             	shr    $0x3,%edi
+ 908:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 90b:	85 d2                	test   %edx,%edx
+ 90d:	0f 84 a3 00 00 00    	je     9b6 <malloc+0xc6>
+ 913:	8b 02                	mov    (%edx),%eax
+ 915:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 918:	39 cf                	cmp    %ecx,%edi
+ 91a:	76 74                	jbe    990 <malloc+0xa0>
+ 91c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 922:	be 00 10 00 00       	mov    $0x1000,%esi
+ 927:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 92e:	0f 43 f7             	cmovae %edi,%esi
+ 931:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 936:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 93c:	0f 46 da             	cmovbe %edx,%ebx
+ 93f:	eb 10                	jmp    951 <malloc+0x61>
+ 941:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 948:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 94a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 94d:	39 cf                	cmp    %ecx,%edi
+ 94f:	76 3f                	jbe    990 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 951:	39 05 c0 0d 00 00    	cmp    %eax,0xdc0
+ 957:	89 c2                	mov    %eax,%edx
+ 959:	75 ed                	jne    948 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 95b:	83 ec 0c             	sub    $0xc,%esp
+ 95e:	53                   	push   %ebx
+ 95f:	e8 86 fc ff ff       	call   5ea <sbrk>
+  if(p == (char*)-1)
+ 964:	83 c4 10             	add    $0x10,%esp
+ 967:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 96a:	74 1c                	je     988 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 96c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 96f:	83 ec 0c             	sub    $0xc,%esp
+ 972:	83 c0 08             	add    $0x8,%eax
+ 975:	50                   	push   %eax
+ 976:	e8 e5 fe ff ff       	call   860 <free>
+  return freep;
+ 97b:	8b 15 c0 0d 00 00    	mov    0xdc0,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 981:	83 c4 10             	add    $0x10,%esp
+ 984:	85 d2                	test   %edx,%edx
+ 986:	75 c0                	jne    948 <malloc+0x58>
+        return 0;
+ 988:	31 c0                	xor    %eax,%eax
+ 98a:	eb 1c                	jmp    9a8 <malloc+0xb8>
+ 98c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 990:	39 cf                	cmp    %ecx,%edi
+ 992:	74 1c                	je     9b0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 994:	29 f9                	sub    %edi,%ecx
+ 996:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 999:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 99c:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 99f:	89 15 c0 0d 00 00    	mov    %edx,0xdc0
+      return (void*)(p + 1);
+ 9a5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 9a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9ab:	5b                   	pop    %ebx
+ 9ac:	5e                   	pop    %esi
+ 9ad:	5f                   	pop    %edi
+ 9ae:	5d                   	pop    %ebp
+ 9af:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 9b0:	8b 08                	mov    (%eax),%ecx
+ 9b2:	89 0a                	mov    %ecx,(%edx)
+ 9b4:	eb e9                	jmp    99f <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 9b6:	c7 05 c0 0d 00 00 c4 	movl   $0xdc4,0xdc0
+ 9bd:	0d 00 00 
+ 9c0:	c7 05 c4 0d 00 00 c4 	movl   $0xdc4,0xdc4
+ 9c7:	0d 00 00 
+    base.s.size = 0;
+ 9ca:	b8 c4 0d 00 00       	mov    $0xdc4,%eax
+ 9cf:	c7 05 c8 0d 00 00 00 	movl   $0x0,0xdc8
+ 9d6:	00 00 00 
+ 9d9:	e9 3e ff ff ff       	jmp    91c <malloc+0x2c>
diff -ruN ./xv6-public-src/grep.d ./xv6-public/grep.d
--- ./xv6-public-src/grep.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/grep.d	2019-11-28 17:52:28.095843140 +0200
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/grep.o and ./xv6-public/grep.o differ
diff -ruN ./xv6-public-src/grep.sym ./xv6-public/grep.sym
--- ./xv6-public-src/grep.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/grep.sym	2019-11-28 17:52:28.119857946 +0200
@@ -0,0 +1,64 @@
+00000000 .text
+000009e0 .rodata
+00000a34 .eh_frame
+00000dc0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000620 printint
+00000a20 digits.1111
+00000000 umalloc.c
+00000dc0 freep
+00000dc4 base
+00000320 strcpy
+000006c0 printf
+00000530 memmove
+00000110 matchhere
+000005aa mknod
+00000430 gets
+000005e2 getpid
+00000220 grep
+000008f0 malloc
+000005f2 sleep
+00000602 readcount
+0000060a callcount
+00000572 pipe
+00000582 write
+000005ba fstat
+00000592 kill
+000005d2 chdir
+0000059a exec
+0000056a wait
+0000057a read
+000005b2 unlink
+0000055a fork
+000005ea sbrk
+000005fa uptime
+00000dac __bss_start
+000003d0 memset
+00000000 main
+000000b0 matchstar
+00000350 strcmp
+000005da dup
+00000de0 buf
+000004a0 stat
+00000dac _edata
+000011e0 _end
+000001d0 match
+000005c2 link
+00000562 exit
+000004f0 atoi
+000003a0 strlen
+000005a2 open
+000003f0 strchr
+000005ca mkdir
+0000058a close
+00000860 free
diff -ruN ./xv6-public-src/ide.d ./xv6-public/ide.d
--- ./xv6-public-src/ide.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ide.d	2019-11-28 17:52:29.492702531 +0200
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files ./xv6-public-src/ide.o and ./xv6-public/ide.o differ
Binary files ./xv6-public-src/_init and ./xv6-public/_init differ
diff -ruN ./xv6-public-src/init.asm ./xv6-public/init.asm
--- ./xv6-public-src/init.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/init.asm	2019-11-28 17:52:28.159882622 +0200
@@ -0,0 +1,1568 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 02                	push   $0x2
+  14:	68 b0 07 00 00       	push   $0x7b0
+  19:	e8 54 03 00 00       	call   372 <open>
+  1e:	83 c4 10             	add    $0x10,%esp
+  21:	85 c0                	test   %eax,%eax
+  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  29:	83 ec 0c             	sub    $0xc,%esp
+  2c:	6a 00                	push   $0x0
+  2e:	e8 77 03 00 00       	call   3aa <dup>
+  dup(0);  // stderr
+  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3a:	e8 6b 03 00 00       	call   3aa <dup>
+  3f:	83 c4 10             	add    $0x10,%esp
+  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  48:	83 ec 08             	sub    $0x8,%esp
+  4b:	68 b8 07 00 00       	push   $0x7b8
+  50:	6a 01                	push   $0x1
+  52:	e8 39 04 00 00       	call   490 <printf>
+    pid = fork();
+  57:	e8 ce 02 00 00       	call   32a <fork>
+    if(pid < 0){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	85 c0                	test   %eax,%eax
+  dup(0);  // stdout
+  dup(0);  // stderr
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+    pid = fork();
+  61:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  63:	78 2c                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  65:	74 3d                	je     a4 <main+0xa4>
+  67:	89 f6                	mov    %esi,%esi
+  69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 c5 02 00 00       	call   33a <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 cf                	js     48 <main+0x48>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 cb                	je     48 <main+0x48>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 f7 07 00 00       	push   $0x7f7
+  85:	6a 01                	push   $0x1
+  87:	e8 04 04 00 00       	call   490 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+    pid = fork();
+    if(pid < 0){
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 cb 07 00 00       	push   $0x7cb
+  98:	6a 01                	push   $0x1
+  9a:	e8 f1 03 00 00       	call   490 <printf>
+      exit();
+  9f:	e8 8e 02 00 00       	call   332 <exit>
+    }
+    if(pid == 0){
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 a4 0a 00 00       	push   $0xaa4
+  ab:	68 de 07 00 00       	push   $0x7de
+  b0:	e8 b5 02 00 00       	call   36a <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 e1 07 00 00       	push   $0x7e1
+  bc:	6a 01                	push   $0x1
+  be:	e8 cd 03 00 00       	call   490 <printf>
+      exit();
+  c3:	e8 6a 02 00 00       	call   332 <exit>
+main(void)
+{
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 b0 07 00 00       	push   $0x7b0
+  d2:	e8 a3 02 00 00       	call   37a <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 b0 07 00 00       	push   $0x7b0
+  e0:	e8 8d 02 00 00       	call   372 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	53                   	push   %ebx
+  f4:	8b 45 08             	mov    0x8(%ebp),%eax
+  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  fa:	89 c2                	mov    %eax,%edx
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 100:	83 c1 01             	add    $0x1,%ecx
+ 103:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 107:	83 c2 01             	add    $0x1,%edx
+ 10a:	84 db                	test   %bl,%bl
+ 10c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 10f:	75 ef                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 111:	5b                   	pop    %ebx
+ 112:	5d                   	pop    %ebp
+ 113:	c3                   	ret    
+ 114:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 11a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	56                   	push   %esi
+ 124:	53                   	push   %ebx
+ 125:	8b 55 08             	mov    0x8(%ebp),%edx
+ 128:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 12b:	0f b6 02             	movzbl (%edx),%eax
+ 12e:	0f b6 19             	movzbl (%ecx),%ebx
+ 131:	84 c0                	test   %al,%al
+ 133:	75 1e                	jne    153 <strcmp+0x33>
+ 135:	eb 29                	jmp    160 <strcmp+0x40>
+ 137:	89 f6                	mov    %esi,%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 140:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 143:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 146:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 149:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 14d:	84 c0                	test   %al,%al
+ 14f:	74 0f                	je     160 <strcmp+0x40>
+ 151:	89 f1                	mov    %esi,%ecx
+ 153:	38 d8                	cmp    %bl,%al
+ 155:	74 e9                	je     140 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 157:	29 d8                	sub    %ebx,%eax
+}
+ 159:	5b                   	pop    %ebx
+ 15a:	5e                   	pop    %esi
+ 15b:	5d                   	pop    %ebp
+ 15c:	c3                   	ret    
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 160:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5e                   	pop    %esi
+ 166:	5d                   	pop    %ebp
+ 167:	c3                   	ret    
+ 168:	90                   	nop
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 176:	80 39 00             	cmpb   $0x0,(%ecx)
+ 179:	74 12                	je     18d <strlen+0x1d>
+ 17b:	31 d2                	xor    %edx,%edx
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+ 180:	83 c2 01             	add    $0x1,%edx
+ 183:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 187:	89 d0                	mov    %edx,%eax
+ 189:	75 f5                	jne    180 <strlen+0x10>
+    ;
+  return n;
+}
+ 18b:	5d                   	pop    %ebp
+ 18c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 18d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	eb 0d                	jmp    1a0 <memset>
+ 193:	90                   	nop
+ 194:	90                   	nop
+ 195:	90                   	nop
+ 196:	90                   	nop
+ 197:	90                   	nop
+ 198:	90                   	nop
+ 199:	90                   	nop
+ 19a:	90                   	nop
+ 19b:	90                   	nop
+ 19c:	90                   	nop
+ 19d:	90                   	nop
+ 19e:	90                   	nop
+ 19f:	90                   	nop
+
+000001a0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1a7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1aa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ad:	89 d7                	mov    %edx,%edi
+ 1af:	fc                   	cld    
+ 1b0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1b2:	89 d0                	mov    %edx,%eax
+ 1b4:	5f                   	pop    %edi
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	89 f6                	mov    %esi,%esi
+ 1b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000001c0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	53                   	push   %ebx
+ 1c4:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 1ca:	0f b6 10             	movzbl (%eax),%edx
+ 1cd:	84 d2                	test   %dl,%dl
+ 1cf:	74 1d                	je     1ee <strchr+0x2e>
+    if(*s == c)
+ 1d1:	38 d3                	cmp    %dl,%bl
+ 1d3:	89 d9                	mov    %ebx,%ecx
+ 1d5:	75 0d                	jne    1e4 <strchr+0x24>
+ 1d7:	eb 17                	jmp    1f0 <strchr+0x30>
+ 1d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e0:	38 ca                	cmp    %cl,%dl
+ 1e2:	74 0c                	je     1f0 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 1e4:	83 c0 01             	add    $0x1,%eax
+ 1e7:	0f b6 10             	movzbl (%eax),%edx
+ 1ea:	84 d2                	test   %dl,%dl
+ 1ec:	75 f2                	jne    1e0 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 1ee:	31 c0                	xor    %eax,%eax
+}
+ 1f0:	5b                   	pop    %ebx
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	56                   	push   %esi
+ 205:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 206:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 208:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 20b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 20e:	eb 29                	jmp    239 <gets+0x39>
+    cc = read(0, &c, 1);
+ 210:	83 ec 04             	sub    $0x4,%esp
+ 213:	6a 01                	push   $0x1
+ 215:	57                   	push   %edi
+ 216:	6a 00                	push   $0x0
+ 218:	e8 2d 01 00 00       	call   34a <read>
+    if(cc < 1)
+ 21d:	83 c4 10             	add    $0x10,%esp
+ 220:	85 c0                	test   %eax,%eax
+ 222:	7e 1d                	jle    241 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 224:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+ 22b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 22d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 22f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 233:	74 1b                	je     250 <gets+0x50>
+ 235:	3c 0d                	cmp    $0xd,%al
+ 237:	74 17                	je     250 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 239:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 23c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 23f:	7c cf                	jl     210 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 241:	8b 45 08             	mov    0x8(%ebp),%eax
+ 244:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 248:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 24b:	5b                   	pop    %ebx
+ 24c:	5e                   	pop    %esi
+ 24d:	5f                   	pop    %edi
+ 24e:	5d                   	pop    %ebp
+ 24f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 250:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 253:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 255:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 259:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 25c:	5b                   	pop    %ebx
+ 25d:	5e                   	pop    %esi
+ 25e:	5f                   	pop    %edi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	eb 0d                	jmp    270 <stat>
+ 263:	90                   	nop
+ 264:	90                   	nop
+ 265:	90                   	nop
+ 266:	90                   	nop
+ 267:	90                   	nop
+ 268:	90                   	nop
+ 269:	90                   	nop
+ 26a:	90                   	nop
+ 26b:	90                   	nop
+ 26c:	90                   	nop
+ 26d:	90                   	nop
+ 26e:	90                   	nop
+ 26f:	90                   	nop
+
+00000270 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 275:	83 ec 08             	sub    $0x8,%esp
+ 278:	6a 00                	push   $0x0
+ 27a:	ff 75 08             	pushl  0x8(%ebp)
+ 27d:	e8 f0 00 00 00       	call   372 <open>
+  if(fd < 0)
+ 282:	83 c4 10             	add    $0x10,%esp
+ 285:	85 c0                	test   %eax,%eax
+ 287:	78 27                	js     2b0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 289:	83 ec 08             	sub    $0x8,%esp
+ 28c:	ff 75 0c             	pushl  0xc(%ebp)
+ 28f:	89 c3                	mov    %eax,%ebx
+ 291:	50                   	push   %eax
+ 292:	e8 f3 00 00 00       	call   38a <fstat>
+ 297:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 299:	89 1c 24             	mov    %ebx,(%esp)
+ 29c:	e8 b9 00 00 00       	call   35a <close>
+  return r;
+ 2a1:	83 c4 10             	add    $0x10,%esp
+ 2a4:	89 f0                	mov    %esi,%eax
+}
+ 2a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2a9:	5b                   	pop    %ebx
+ 2aa:	5e                   	pop    %esi
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 2b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 2b5:	eb ef                	jmp    2a6 <stat+0x36>
+ 2b7:	89 f6                	mov    %esi,%esi
+ 2b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000002c0 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	53                   	push   %ebx
+ 2c4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2c7:	0f be 11             	movsbl (%ecx),%edx
+ 2ca:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 2cd:	3c 09                	cmp    $0x9,%al
+ 2cf:	b8 00 00 00 00       	mov    $0x0,%eax
+ 2d4:	77 1f                	ja     2f5 <atoi+0x35>
+ 2d6:	8d 76 00             	lea    0x0(%esi),%esi
+ 2d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 2e0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 2e3:	83 c1 01             	add    $0x1,%ecx
+ 2e6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2ea:	0f be 11             	movsbl (%ecx),%edx
+ 2ed:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 2f0:	80 fb 09             	cmp    $0x9,%bl
+ 2f3:	76 eb                	jbe    2e0 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 2f5:	5b                   	pop    %ebx
+ 2f6:	5d                   	pop    %ebp
+ 2f7:	c3                   	ret    
+ 2f8:	90                   	nop
+ 2f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000300 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 300:	55                   	push   %ebp
+ 301:	89 e5                	mov    %esp,%ebp
+ 303:	56                   	push   %esi
+ 304:	53                   	push   %ebx
+ 305:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 308:	8b 45 08             	mov    0x8(%ebp),%eax
+ 30b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 30e:	85 db                	test   %ebx,%ebx
+ 310:	7e 14                	jle    326 <memmove+0x26>
+ 312:	31 d2                	xor    %edx,%edx
+ 314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 318:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 31c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 31f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 322:	39 da                	cmp    %ebx,%edx
+ 324:	75 f2                	jne    318 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 326:	5b                   	pop    %ebx
+ 327:	5e                   	pop    %esi
+ 328:	5d                   	pop    %ebp
+ 329:	c3                   	ret    
+
+0000032a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 32a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <exit>:
+SYSCALL(exit)
+ 332:	b8 02 00 00 00       	mov    $0x2,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <wait>:
+SYSCALL(wait)
+ 33a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <pipe>:
+SYSCALL(pipe)
+ 342:	b8 04 00 00 00       	mov    $0x4,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <read>:
+SYSCALL(read)
+ 34a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <write>:
+SYSCALL(write)
+ 352:	b8 10 00 00 00       	mov    $0x10,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <close>:
+SYSCALL(close)
+ 35a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <kill>:
+SYSCALL(kill)
+ 362:	b8 06 00 00 00       	mov    $0x6,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <exec>:
+SYSCALL(exec)
+ 36a:	b8 07 00 00 00       	mov    $0x7,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+
+00000372 <open>:
+SYSCALL(open)
+ 372:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 377:	cd 40                	int    $0x40
+ 379:	c3                   	ret    
+
+0000037a <mknod>:
+SYSCALL(mknod)
+ 37a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <unlink>:
+SYSCALL(unlink)
+ 382:	b8 12 00 00 00       	mov    $0x12,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <fstat>:
+SYSCALL(fstat)
+ 38a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <link>:
+SYSCALL(link)
+ 392:	b8 13 00 00 00       	mov    $0x13,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <mkdir>:
+SYSCALL(mkdir)
+ 39a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <chdir>:
+SYSCALL(chdir)
+ 3a2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <dup>:
+SYSCALL(dup)
+ 3aa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <getpid>:
+SYSCALL(getpid)
+ 3b2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <sbrk>:
+SYSCALL(sbrk)
+ 3ba:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <sleep>:
+SYSCALL(sleep)
+ 3c2:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <uptime>:
+SYSCALL(uptime)
+ 3ca:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <readcount>:
+SYSCALL(readcount)
+ 3d2:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <callcount>:
+SYSCALL(callcount)
+ 3da:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+ 3e2:	66 90                	xchg   %ax,%ax
+ 3e4:	66 90                	xchg   %ax,%ax
+ 3e6:	66 90                	xchg   %ax,%ax
+ 3e8:	66 90                	xchg   %ax,%ax
+ 3ea:	66 90                	xchg   %ax,%ax
+ 3ec:	66 90                	xchg   %ax,%ax
+ 3ee:	66 90                	xchg   %ax,%ax
+
+000003f0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	56                   	push   %esi
+ 3f5:	53                   	push   %ebx
+ 3f6:	89 c6                	mov    %eax,%esi
+ 3f8:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 3fe:	85 db                	test   %ebx,%ebx
+ 400:	74 7e                	je     480 <printint+0x90>
+ 402:	89 d0                	mov    %edx,%eax
+ 404:	c1 e8 1f             	shr    $0x1f,%eax
+ 407:	84 c0                	test   %al,%al
+ 409:	74 75                	je     480 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 40b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 40d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 414:	f7 d8                	neg    %eax
+ 416:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 419:	31 ff                	xor    %edi,%edi
+ 41b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 41e:	89 ce                	mov    %ecx,%esi
+ 420:	eb 08                	jmp    42a <printint+0x3a>
+ 422:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 428:	89 cf                	mov    %ecx,%edi
+ 42a:	31 d2                	xor    %edx,%edx
+ 42c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 42f:	f7 f6                	div    %esi
+ 431:	0f b6 92 08 08 00 00 	movzbl 0x808(%edx),%edx
+  }while((x /= base) != 0);
+ 438:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 43a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 43d:	75 e9                	jne    428 <printint+0x38>
+  if(neg)
+ 43f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 442:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 445:	85 c0                	test   %eax,%eax
+ 447:	74 08                	je     451 <printint+0x61>
+    buf[i++] = '-';
+ 449:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 44e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 451:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 455:	8d 76 00             	lea    0x0(%esi),%esi
+ 458:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 45b:	83 ec 04             	sub    $0x4,%esp
+ 45e:	83 ef 01             	sub    $0x1,%edi
+ 461:	6a 01                	push   $0x1
+ 463:	53                   	push   %ebx
+ 464:	56                   	push   %esi
+ 465:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 468:	e8 e5 fe ff ff       	call   352 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 46d:	83 c4 10             	add    $0x10,%esp
+ 470:	39 df                	cmp    %ebx,%edi
+ 472:	75 e4                	jne    458 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 474:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 477:	5b                   	pop    %ebx
+ 478:	5e                   	pop    %esi
+ 479:	5f                   	pop    %edi
+ 47a:	5d                   	pop    %ebp
+ 47b:	c3                   	ret    
+ 47c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 480:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 482:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 489:	eb 8b                	jmp    416 <printint+0x26>
+ 48b:	90                   	nop
+ 48c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000490 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+ 495:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 496:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 499:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 49c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 49f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4a5:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a8:	83 c6 01             	add    $0x1,%esi
+ 4ab:	84 db                	test   %bl,%bl
+ 4ad:	0f 84 b0 00 00 00    	je     563 <printf+0xd3>
+ 4b3:	31 d2                	xor    %edx,%edx
+ 4b5:	eb 39                	jmp    4f0 <printf+0x60>
+ 4b7:	89 f6                	mov    %esi,%esi
+ 4b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4c0:	83 f8 25             	cmp    $0x25,%eax
+ 4c3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 4c6:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 4cb:	74 18                	je     4e5 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4cd:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 4d0:	83 ec 04             	sub    $0x4,%esp
+ 4d3:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 4d6:	6a 01                	push   $0x1
+ 4d8:	50                   	push   %eax
+ 4d9:	57                   	push   %edi
+ 4da:	e8 73 fe ff ff       	call   352 <write>
+ 4df:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 4e2:	83 c4 10             	add    $0x10,%esp
+ 4e5:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4e8:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 4ec:	84 db                	test   %bl,%bl
+ 4ee:	74 73                	je     563 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 4f0:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 4f2:	0f be cb             	movsbl %bl,%ecx
+ 4f5:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4f8:	74 c6                	je     4c0 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 4fa:	83 fa 25             	cmp    $0x25,%edx
+ 4fd:	75 e6                	jne    4e5 <printf+0x55>
+      if(c == 'd'){
+ 4ff:	83 f8 64             	cmp    $0x64,%eax
+ 502:	0f 84 f8 00 00 00    	je     600 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 508:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 50e:	83 f9 70             	cmp    $0x70,%ecx
+ 511:	74 5d                	je     570 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 513:	83 f8 73             	cmp    $0x73,%eax
+ 516:	0f 84 84 00 00 00    	je     5a0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 51c:	83 f8 63             	cmp    $0x63,%eax
+ 51f:	0f 84 ea 00 00 00    	je     60f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 525:	83 f8 25             	cmp    $0x25,%eax
+ 528:	0f 84 c2 00 00 00    	je     5f0 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 52e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 531:	83 ec 04             	sub    $0x4,%esp
+ 534:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 538:	6a 01                	push   $0x1
+ 53a:	50                   	push   %eax
+ 53b:	57                   	push   %edi
+ 53c:	e8 11 fe ff ff       	call   352 <write>
+ 541:	83 c4 0c             	add    $0xc,%esp
+ 544:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 547:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 54a:	6a 01                	push   $0x1
+ 54c:	50                   	push   %eax
+ 54d:	57                   	push   %edi
+ 54e:	83 c6 01             	add    $0x1,%esi
+ 551:	e8 fc fd ff ff       	call   352 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 556:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 55a:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 55d:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 55f:	84 db                	test   %bl,%bl
+ 561:	75 8d                	jne    4f0 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 563:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 566:	5b                   	pop    %ebx
+ 567:	5e                   	pop    %esi
+ 568:	5f                   	pop    %edi
+ 569:	5d                   	pop    %ebp
+ 56a:	c3                   	ret    
+ 56b:	90                   	nop
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 578:	6a 00                	push   $0x0
+ 57a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 57d:	89 f8                	mov    %edi,%eax
+ 57f:	8b 13                	mov    (%ebx),%edx
+ 581:	e8 6a fe ff ff       	call   3f0 <printint>
+        ap++;
+ 586:	89 d8                	mov    %ebx,%eax
+ 588:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 58b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 58d:	83 c0 04             	add    $0x4,%eax
+ 590:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 593:	e9 4d ff ff ff       	jmp    4e5 <printf+0x55>
+ 598:	90                   	nop
+ 599:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 5ab:	b8 00 08 00 00       	mov    $0x800,%eax
+ 5b0:	85 db                	test   %ebx,%ebx
+ 5b2:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 5b5:	0f b6 03             	movzbl (%ebx),%eax
+ 5b8:	84 c0                	test   %al,%al
+ 5ba:	74 23                	je     5df <printf+0x14f>
+ 5bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5c0:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5c3:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 5c6:	83 ec 04             	sub    $0x4,%esp
+ 5c9:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 5cb:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5ce:	50                   	push   %eax
+ 5cf:	57                   	push   %edi
+ 5d0:	e8 7d fd ff ff       	call   352 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 5d5:	0f b6 03             	movzbl (%ebx),%eax
+ 5d8:	83 c4 10             	add    $0x10,%esp
+ 5db:	84 c0                	test   %al,%al
+ 5dd:	75 e1                	jne    5c0 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5df:	31 d2                	xor    %edx,%edx
+ 5e1:	e9 ff fe ff ff       	jmp    4e5 <printf+0x55>
+ 5e6:	8d 76 00             	lea    0x0(%esi),%esi
+ 5e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+ 5f3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 5f6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	e9 4c ff ff ff       	jmp    54c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	e9 6b ff ff ff       	jmp    57a <printf+0xea>
+ 60f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 612:	83 ec 04             	sub    $0x4,%esp
+ 615:	8b 03                	mov    (%ebx),%eax
+ 617:	6a 01                	push   $0x1
+ 619:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 61c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 61f:	50                   	push   %eax
+ 620:	57                   	push   %edi
+ 621:	e8 2c fd ff ff       	call   352 <write>
+ 626:	e9 5b ff ff ff       	jmp    586 <printf+0xf6>
+ 62b:	66 90                	xchg   %ax,%ax
+ 62d:	66 90                	xchg   %ax,%ax
+ 62f:	90                   	nop
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 631:	a1 ac 0a 00 00       	mov    0xaac,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 636:	89 e5                	mov    %esp,%ebp
+ 638:	57                   	push   %edi
+ 639:	56                   	push   %esi
+ 63a:	53                   	push   %ebx
+ 63b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 63e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 640:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 643:	39 c8                	cmp    %ecx,%eax
+ 645:	73 19                	jae    660 <free+0x30>
+ 647:	89 f6                	mov    %esi,%esi
+ 649:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 1c                	jb     670 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 18                	jae    670 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 658:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 65c:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+ 668:	90                   	nop
+ 669:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 670:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 673:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 676:	39 d7                	cmp    %edx,%edi
+ 678:	74 19                	je     693 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	74 23                	je     6aa <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 687:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 689:	a3 ac 0a 00 00       	mov    %eax,0xaac
+}
+ 68e:	5b                   	pop    %ebx
+ 68f:	5e                   	pop    %esi
+ 690:	5f                   	pop    %edi
+ 691:	5d                   	pop    %ebp
+ 692:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 693:	03 72 04             	add    0x4(%edx),%esi
+ 696:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 699:	8b 10                	mov    (%eax),%edx
+ 69b:	8b 12                	mov    (%edx),%edx
+ 69d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6a0:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a6:	39 f1                	cmp    %esi,%ecx
+ 6a8:	75 dd                	jne    687 <free+0x57>
+    p->s.size += bp->s.size;
+ 6aa:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6ad:	a3 ac 0a 00 00       	mov    %eax,0xaac
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 6b2:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b5:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b8:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6ba:	5b                   	pop    %ebx
+ 6bb:	5e                   	pop    %esi
+ 6bc:	5f                   	pop    %edi
+ 6bd:	5d                   	pop    %ebp
+ 6be:	c3                   	ret    
+ 6bf:	90                   	nop
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	55                   	push   %ebp
+ 6c1:	89 e5                	mov    %esp,%ebp
+ 6c3:	57                   	push   %edi
+ 6c4:	56                   	push   %esi
+ 6c5:	53                   	push   %ebx
+ 6c6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6cc:	8b 15 ac 0a 00 00    	mov    0xaac,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d2:	8d 78 07             	lea    0x7(%eax),%edi
+ 6d5:	c1 ef 03             	shr    $0x3,%edi
+ 6d8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 6db:	85 d2                	test   %edx,%edx
+ 6dd:	0f 84 a3 00 00 00    	je     786 <malloc+0xc6>
+ 6e3:	8b 02                	mov    (%edx),%eax
+ 6e5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 6e8:	39 cf                	cmp    %ecx,%edi
+ 6ea:	76 74                	jbe    760 <malloc+0xa0>
+ 6ec:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 6f2:	be 00 10 00 00       	mov    $0x1000,%esi
+ 6f7:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 6fe:	0f 43 f7             	cmovae %edi,%esi
+ 701:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 706:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 70c:	0f 46 da             	cmovbe %edx,%ebx
+ 70f:	eb 10                	jmp    721 <malloc+0x61>
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 718:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 71a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 71d:	39 cf                	cmp    %ecx,%edi
+ 71f:	76 3f                	jbe    760 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 05 ac 0a 00 00    	cmp    %eax,0xaac
+ 727:	89 c2                	mov    %eax,%edx
+ 729:	75 ed                	jne    718 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	53                   	push   %ebx
+ 72f:	e8 86 fc ff ff       	call   3ba <sbrk>
+  if(p == (char*)-1)
+ 734:	83 c4 10             	add    $0x10,%esp
+ 737:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 73a:	74 1c                	je     758 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 73c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 73f:	83 ec 0c             	sub    $0xc,%esp
+ 742:	83 c0 08             	add    $0x8,%eax
+ 745:	50                   	push   %eax
+ 746:	e8 e5 fe ff ff       	call   630 <free>
+  return freep;
+ 74b:	8b 15 ac 0a 00 00    	mov    0xaac,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 751:	83 c4 10             	add    $0x10,%esp
+ 754:	85 d2                	test   %edx,%edx
+ 756:	75 c0                	jne    718 <malloc+0x58>
+        return 0;
+ 758:	31 c0                	xor    %eax,%eax
+ 75a:	eb 1c                	jmp    778 <malloc+0xb8>
+ 75c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 760:	39 cf                	cmp    %ecx,%edi
+ 762:	74 1c                	je     780 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 764:	29 f9                	sub    %edi,%ecx
+ 766:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 769:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 76c:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 76f:	89 15 ac 0a 00 00    	mov    %edx,0xaac
+      return (void*)(p + 1);
+ 775:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 778:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 77b:	5b                   	pop    %ebx
+ 77c:	5e                   	pop    %esi
+ 77d:	5f                   	pop    %edi
+ 77e:	5d                   	pop    %ebp
+ 77f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 780:	8b 08                	mov    (%eax),%ecx
+ 782:	89 0a                	mov    %ecx,(%edx)
+ 784:	eb e9                	jmp    76f <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 786:	c7 05 ac 0a 00 00 b0 	movl   $0xab0,0xaac
+ 78d:	0a 00 00 
+ 790:	c7 05 b0 0a 00 00 b0 	movl   $0xab0,0xab0
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	b8 b0 0a 00 00       	mov    $0xab0,%eax
+ 79f:	c7 05 b4 0a 00 00 00 	movl   $0x0,0xab4
+ 7a6:	00 00 00 
+ 7a9:	e9 3e ff ff ff       	jmp    6ec <malloc+0x2c>
Binary files ./xv6-public-src/initcode and ./xv6-public/initcode differ
diff -ruN ./xv6-public-src/initcode.asm ./xv6-public/initcode.asm
--- ./xv6-public-src/initcode.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/initcode.asm	2019-11-28 17:52:47.259120244 +0200
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN ./xv6-public-src/initcode.d ./xv6-public/initcode.d
--- ./xv6-public-src/initcode.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/initcode.d	2019-11-28 17:52:47.235106709 +0200
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files ./xv6-public-src/initcode.o and ./xv6-public/initcode.o differ
Binary files ./xv6-public-src/initcode.out and ./xv6-public/initcode.out differ
diff -ruN ./xv6-public-src/init.d ./xv6-public/init.d
--- ./xv6-public-src/init.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/init.d	2019-11-28 17:52:28.139870284 +0200
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files ./xv6-public-src/init.o and ./xv6-public/init.o differ
diff -ruN ./xv6-public-src/init.sym ./xv6-public/init.sym
--- ./xv6-public-src/init.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/init.sym	2019-11-28 17:52:28.163885090 +0200
@@ -0,0 +1,61 @@
+00000000 .text
+000007b0 .rodata
+0000081c .eh_frame
+00000aa4 .data
+00000aac .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+000003f0 printint
+00000808 digits.1111
+00000000 umalloc.c
+00000aac freep
+00000ab0 base
+000000f0 strcpy
+00000490 printf
+00000aa4 argv
+00000300 memmove
+0000037a mknod
+00000200 gets
+000003b2 getpid
+000006c0 malloc
+000003c2 sleep
+000003d2 readcount
+000003da callcount
+00000342 pipe
+00000352 write
+0000038a fstat
+00000362 kill
+000003a2 chdir
+0000036a exec
+0000033a wait
+0000034a read
+00000382 unlink
+0000032a fork
+000003ba sbrk
+000003ca uptime
+00000aac __bss_start
+000001a0 memset
+00000000 main
+00000120 strcmp
+000003aa dup
+00000270 stat
+00000aac _edata
+00000ab8 _end
+00000392 link
+00000332 exit
+000002c0 atoi
+00000170 strlen
+00000372 open
+000001c0 strchr
+0000039a mkdir
+0000035a close
+00000630 free
diff -ruN ./xv6-public-src/ioapic.d ./xv6-public/ioapic.d
--- ./xv6-public-src/ioapic.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ioapic.d	2019-11-28 17:52:29.524722153 +0200
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files ./xv6-public-src/ioapic.o and ./xv6-public/ioapic.o differ
diff -ruN ./xv6-public-src/kalloc.d ./xv6-public/kalloc.d
--- ./xv6-public-src/kalloc.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kalloc.d	2019-11-28 17:52:29.560744229 +0200
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files ./xv6-public-src/kalloc.o and ./xv6-public/kalloc.o differ
diff -ruN ./xv6-public-src/kbd.d ./xv6-public/kbd.d
--- ./xv6-public-src/kbd.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kbd.d	2019-11-28 17:52:29.600768758 +0200
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files ./xv6-public-src/kbd.o and ./xv6-public/kbd.o differ
Binary files ./xv6-public-src/kernel and ./xv6-public/kernel differ
diff -ruN ./xv6-public-src/kernel.asm ./xv6-public/kernel.asm
--- ./xv6-public-src/kernel.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kernel.asm	2019-11-28 18:00:21.500981470 +0200
@@ -0,0 +1,21362 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 50 2e 10 80       	mov    $0x80102e50,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	55                   	push   %ebp
+80100041:	89 e5                	mov    %esp,%ebp
+80100043:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100044:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100049:	83 ec 0c             	sub    $0xc,%esp
+  struct buf *b;
+
+  initlock(&bcache.lock, "bcache");
+8010004c:	68 20 70 10 80       	push   $0x80107020
+80100051:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100056:	e8 55 41 00 00       	call   801041b0 <initlock>
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+8010005b:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
+80100062:	fc 10 80 
+  bcache.head.next = &bcache.head;
+80100065:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
+8010006c:	fc 10 80 
+8010006f:	83 c4 10             	add    $0x10,%esp
+80100072:	ba bc fc 10 80       	mov    $0x8010fcbc,%edx
+80100077:	eb 09                	jmp    80100082 <binit+0x42>
+80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100080:	89 c3                	mov    %eax,%ebx
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100082:	8d 43 0c             	lea    0xc(%ebx),%eax
+80100085:	83 ec 08             	sub    $0x8,%esp
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    b->next = bcache.head.next;
+80100088:	89 53 54             	mov    %edx,0x54(%ebx)
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 27 70 10 80       	push   $0x80107027
+80100097:	50                   	push   %eax
+80100098:	e8 e3 3f 00 00       	call   80104080 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a2:	83 c4 10             	add    $0x10,%esp
+801000a5:	89 da                	mov    %ebx,%edx
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+    bcache.head.next->prev = b;
+801000a7:	89 58 50             	mov    %ebx,0x50(%eax)
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000aa:	8d 83 5c 02 00 00    	lea    0x25c(%ebx),%eax
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	3d bc fc 10 80       	cmp    $0x8010fcbc,%eax
+801000bb:	75 c3                	jne    80100080 <binit+0x40>
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+  }
+}
+801000bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c0:	c9                   	leave  
+801000c1:	c3                   	ret    
+801000c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	55                   	push   %ebp
+801000d1:	89 e5                	mov    %esp,%ebp
+801000d3:	57                   	push   %edi
+801000d4:	56                   	push   %esi
+801000d5:	53                   	push   %ebx
+801000d6:	83 ec 18             	sub    $0x18,%esp
+801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+static struct buf*
+bget(uint dev, uint blockno)
+{
+  struct buf *b;
+
+  acquire(&bcache.lock);
+801000df:	68 c0 b5 10 80       	push   $0x8010b5c0
+801000e4:	e8 27 42 00 00       	call   80104310 <acquire>
+
+  // Is the block already cached?
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000e9:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
+801000ef:	83 c4 10             	add    $0x10,%esp
+801000f2:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+801000f8:	75 11                	jne    8010010b <bread+0x3b>
+801000fa:	eb 24                	jmp    80100120 <bread+0x50>
+801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 7b 08             	cmp    0x8(%ebx),%edi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	90                   	nop
+8010011c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  }
+
+  // Not cached; recycle an unused buffer.
+  // Even if refcnt==0, B_DIRTY indicates a buffer is in use
+  // because log.c has modified it but not yet committed it.
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
+80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 60                	jmp    80100190 <bread+0xc0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
+80100139:	74 55                	je     80100190 <bread+0xc0>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 73 04             	mov    %esi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 7b 08             	mov    %edi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100162:	e8 59 42 00 00       	call   801043c0 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 4e 3f 00 00       	call   801040c0 <acquiresleep>
+80100172:	83 c4 10             	add    $0x10,%esp
+bread(uint dev, uint blockno)
+{
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	75 0c                	jne    80100186 <bread+0xb6>
+    iderw(b);
+8010017a:	83 ec 0c             	sub    $0xc,%esp
+8010017d:	53                   	push   %ebx
+8010017e:	e8 5d 1f 00 00       	call   801020e0 <iderw>
+80100183:	83 c4 10             	add    $0x10,%esp
+  }
+  return b;
+}
+80100186:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100189:	89 d8                	mov    %ebx,%eax
+8010018b:	5b                   	pop    %ebx
+8010018c:	5e                   	pop    %esi
+8010018d:	5f                   	pop    %edi
+8010018e:	5d                   	pop    %ebp
+8010018f:	c3                   	ret    
+      release(&bcache.lock);
+      acquiresleep(&b->lock);
+      return b;
+    }
+  }
+  panic("bget: no buffers");
+80100190:	83 ec 0c             	sub    $0xc,%esp
+80100193:	68 2e 70 10 80       	push   $0x8010702e
+80100198:	e8 d3 01 00 00       	call   80100370 <panic>
+8010019d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001a0 <bwrite>:
+}
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001a0:	55                   	push   %ebp
+801001a1:	89 e5                	mov    %esp,%ebp
+801001a3:	53                   	push   %ebx
+801001a4:	83 ec 10             	sub    $0x10,%esp
+801001a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001aa:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001ad:	50                   	push   %eax
+801001ae:	e8 ad 3f 00 00       	call   80104160 <holdingsleep>
+801001b3:	83 c4 10             	add    $0x10,%esp
+801001b6:	85 c0                	test   %eax,%eax
+801001b8:	74 0f                	je     801001c9 <bwrite+0x29>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ba:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001bd:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001c3:	c9                   	leave  
+bwrite(struct buf *b)
+{
+  if(!holdingsleep(&b->lock))
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+  iderw(b);
+801001c4:	e9 17 1f 00 00       	jmp    801020e0 <iderw>
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+  if(!holdingsleep(&b->lock))
+    panic("bwrite");
+801001c9:	83 ec 0c             	sub    $0xc,%esp
+801001cc:	68 3f 70 10 80       	push   $0x8010703f
+801001d1:	e8 9a 01 00 00       	call   80100370 <panic>
+801001d6:	8d 76 00             	lea    0x0(%esi),%esi
+801001d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801001e0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001e0:	55                   	push   %ebp
+801001e1:	89 e5                	mov    %esp,%ebp
+801001e3:	56                   	push   %esi
+801001e4:	53                   	push   %ebx
+801001e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001e8:	83 ec 0c             	sub    $0xc,%esp
+801001eb:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001ee:	56                   	push   %esi
+801001ef:	e8 6c 3f 00 00       	call   80104160 <holdingsleep>
+801001f4:	83 c4 10             	add    $0x10,%esp
+801001f7:	85 c0                	test   %eax,%eax
+801001f9:	74 66                	je     80100261 <brelse+0x81>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+801001fb:	83 ec 0c             	sub    $0xc,%esp
+801001fe:	56                   	push   %esi
+801001ff:	e8 1c 3f 00 00       	call   80104120 <releasesleep>
+
+  acquire(&bcache.lock);
+80100204:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
+8010020b:	e8 00 41 00 00       	call   80104310 <acquire>
+  b->refcnt--;
+80100210:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100213:	83 c4 10             	add    $0x10,%esp
+    panic("brelse");
+
+  releasesleep(&b->lock);
+
+  acquire(&bcache.lock);
+  b->refcnt--;
+80100216:	83 e8 01             	sub    $0x1,%eax
+  if (b->refcnt == 0) {
+80100219:	85 c0                	test   %eax,%eax
+    panic("brelse");
+
+  releasesleep(&b->lock);
+
+  acquire(&bcache.lock);
+  b->refcnt--;
+8010021b:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+8010021e:	75 2f                	jne    8010024f <brelse+0x6f>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100220:	8b 43 54             	mov    0x54(%ebx),%eax
+80100223:	8b 53 50             	mov    0x50(%ebx),%edx
+80100226:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+80100229:	8b 43 50             	mov    0x50(%ebx),%eax
+8010022c:	8b 53 54             	mov    0x54(%ebx),%edx
+8010022f:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100232:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+    b->prev = &bcache.head;
+80100237:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
+  b->refcnt--;
+  if (b->refcnt == 0) {
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+    b->prev->next = b->next;
+    b->next = bcache.head.next;
+8010023e:	89 43 54             	mov    %eax,0x54(%ebx)
+    b->prev = &bcache.head;
+    bcache.head.next->prev = b;
+80100241:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
+80100246:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+80100249:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
+  }
+  
+  release(&bcache.lock);
+8010024f:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
+}
+80100256:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80100259:	5b                   	pop    %ebx
+8010025a:	5e                   	pop    %esi
+8010025b:	5d                   	pop    %ebp
+    b->prev = &bcache.head;
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+  }
+  
+  release(&bcache.lock);
+8010025c:	e9 5f 41 00 00       	jmp    801043c0 <release>
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+  if(!holdingsleep(&b->lock))
+    panic("brelse");
+80100261:	83 ec 0c             	sub    $0xc,%esp
+80100264:	68 46 70 10 80       	push   $0x80107046
+80100269:	e8 02 01 00 00       	call   80100370 <panic>
+8010026e:	66 90                	xchg   %ax,%ax
+
+80100270 <consoleread>:
+  }
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100270:	55                   	push   %ebp
+80100271:	89 e5                	mov    %esp,%ebp
+80100273:	57                   	push   %edi
+80100274:	56                   	push   %esi
+80100275:	53                   	push   %ebx
+80100276:	83 ec 28             	sub    $0x28,%esp
+80100279:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010027c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  uint target;
+  int c;
+
+  iunlock(ip);
+8010027f:	57                   	push   %edi
+80100280:	e8 bb 14 00 00       	call   80101740 <iunlock>
+  target = n;
+  acquire(&cons.lock);
+80100285:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010028c:	e8 7f 40 00 00       	call   80104310 <acquire>
+  while(n > 0){
+80100291:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80100294:	83 c4 10             	add    $0x10,%esp
+80100297:	31 c0                	xor    %eax,%eax
+80100299:	85 db                	test   %ebx,%ebx
+8010029b:	0f 8e 9a 00 00 00    	jle    8010033b <consoleread+0xcb>
+    while(input.r == input.w){
+801002a1:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801002a6:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002ac:	74 24                	je     801002d2 <consoleread+0x62>
+801002ae:	eb 58                	jmp    80100308 <consoleread+0x98>
+      if(myproc()->killed){
+        release(&cons.lock);
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &cons.lock);
+801002b0:	83 ec 08             	sub    $0x8,%esp
+801002b3:	68 20 a5 10 80       	push   $0x8010a520
+801002b8:	68 a0 ff 10 80       	push   $0x8010ffa0
+801002bd:	e8 5e 3a 00 00       	call   80103d20 <sleep>
+
+  iunlock(ip);
+  target = n;
+  acquire(&cons.lock);
+  while(n > 0){
+    while(input.r == input.w){
+801002c2:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801002c7:	83 c4 10             	add    $0x10,%esp
+801002ca:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+801002d0:	75 36                	jne    80100308 <consoleread+0x98>
+      if(myproc()->killed){
+801002d2:	e8 99 34 00 00       	call   80103770 <myproc>
+801002d7:	8b 40 24             	mov    0x24(%eax),%eax
+801002da:	85 c0                	test   %eax,%eax
+801002dc:	74 d2                	je     801002b0 <consoleread+0x40>
+        release(&cons.lock);
+801002de:	83 ec 0c             	sub    $0xc,%esp
+801002e1:	68 20 a5 10 80       	push   $0x8010a520
+801002e6:	e8 d5 40 00 00       	call   801043c0 <release>
+        ilock(ip);
+801002eb:	89 3c 24             	mov    %edi,(%esp)
+801002ee:	e8 6d 13 00 00       	call   80101660 <ilock>
+        return -1;
+801002f3:	83 c4 10             	add    $0x10,%esp
+801002f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+801002fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801002fe:	5b                   	pop    %ebx
+801002ff:	5e                   	pop    %esi
+80100300:	5f                   	pop    %edi
+80100301:	5d                   	pop    %ebp
+80100302:	c3                   	ret    
+80100303:	90                   	nop
+80100304:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        ilock(ip);
+        return -1;
+      }
+      sleep(&input.r, &cons.lock);
+    }
+    c = input.buf[input.r++ % INPUT_BUF];
+80100308:	8d 50 01             	lea    0x1(%eax),%edx
+8010030b:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
+80100311:	89 c2                	mov    %eax,%edx
+80100313:	83 e2 7f             	and    $0x7f,%edx
+80100316:	0f be 92 20 ff 10 80 	movsbl -0x7fef00e0(%edx),%edx
+    if(c == C('D')){  // EOF
+8010031d:	83 fa 04             	cmp    $0x4,%edx
+80100320:	74 39                	je     8010035b <consoleread+0xeb>
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+    }
+    *dst++ = c;
+80100322:	83 c6 01             	add    $0x1,%esi
+    --n;
+80100325:	83 eb 01             	sub    $0x1,%ebx
+    if(c == '\n')
+80100328:	83 fa 0a             	cmp    $0xa,%edx
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+    }
+    *dst++ = c;
+8010032b:	88 56 ff             	mov    %dl,-0x1(%esi)
+    --n;
+    if(c == '\n')
+8010032e:	74 35                	je     80100365 <consoleread+0xf5>
+  int c;
+
+  iunlock(ip);
+  target = n;
+  acquire(&cons.lock);
+  while(n > 0){
+80100330:	85 db                	test   %ebx,%ebx
+80100332:	0f 85 69 ff ff ff    	jne    801002a1 <consoleread+0x31>
+80100338:	8b 45 10             	mov    0x10(%ebp),%eax
+    *dst++ = c;
+    --n;
+    if(c == '\n')
+      break;
+  }
+  release(&cons.lock);
+8010033b:	83 ec 0c             	sub    $0xc,%esp
+8010033e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100341:	68 20 a5 10 80       	push   $0x8010a520
+80100346:	e8 75 40 00 00       	call   801043c0 <release>
+  ilock(ip);
+8010034b:	89 3c 24             	mov    %edi,(%esp)
+8010034e:	e8 0d 13 00 00       	call   80101660 <ilock>
+
+  return target - n;
+80100353:	83 c4 10             	add    $0x10,%esp
+80100356:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100359:	eb a0                	jmp    801002fb <consoleread+0x8b>
+      }
+      sleep(&input.r, &cons.lock);
+    }
+    c = input.buf[input.r++ % INPUT_BUF];
+    if(c == C('D')){  // EOF
+      if(n < target){
+8010035b:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010035e:	76 05                	jbe    80100365 <consoleread+0xf5>
+        // Save ^D for next time, to make sure
+        // caller gets a 0-byte result.
+        input.r--;
+80100360:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
+80100365:	8b 45 10             	mov    0x10(%ebp),%eax
+80100368:	29 d8                	sub    %ebx,%eax
+8010036a:	eb cf                	jmp    8010033b <consoleread+0xcb>
+8010036c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100370 <panic>:
+    release(&cons.lock);
+}
+
+void
+panic(char *s)
+{
+80100370:	55                   	push   %ebp
+80100371:	89 e5                	mov    %esp,%ebp
+80100373:	56                   	push   %esi
+80100374:	53                   	push   %ebx
+80100375:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+80100378:	fa                   	cli    
+  int i;
+  uint pcs[10];
+
+  cli();
+  cons.locking = 0;
+80100379:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
+80100380:	00 00 00 
+  // use lapiccpunum so that we can call panic from mycpu()
+  cprintf("lapicid %d: panic: ", lapicid());
+  cprintf(s);
+  cprintf("\n");
+  getcallerpcs(&s, pcs);
+80100383:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+80100386:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  uint pcs[10];
+
+  cli();
+  cons.locking = 0;
+  // use lapiccpunum so that we can call panic from mycpu()
+  cprintf("lapicid %d: panic: ", lapicid());
+80100389:	e8 52 23 00 00       	call   801026e0 <lapicid>
+8010038e:	83 ec 08             	sub    $0x8,%esp
+80100391:	50                   	push   %eax
+80100392:	68 4d 70 10 80       	push   $0x8010704d
+80100397:	e8 c4 02 00 00       	call   80100660 <cprintf>
+  cprintf(s);
+8010039c:	58                   	pop    %eax
+8010039d:	ff 75 08             	pushl  0x8(%ebp)
+801003a0:	e8 bb 02 00 00       	call   80100660 <cprintf>
+  cprintf("\n");
+801003a5:	c7 04 24 9b 79 10 80 	movl   $0x8010799b,(%esp)
+801003ac:	e8 af 02 00 00       	call   80100660 <cprintf>
+  getcallerpcs(&s, pcs);
+801003b1:	5a                   	pop    %edx
+801003b2:	8d 45 08             	lea    0x8(%ebp),%eax
+801003b5:	59                   	pop    %ecx
+801003b6:	53                   	push   %ebx
+801003b7:	50                   	push   %eax
+801003b8:	e8 13 3e 00 00       	call   801041d0 <getcallerpcs>
+801003bd:	83 c4 10             	add    $0x10,%esp
+  for(i=0; i<10; i++)
+    cprintf(" %p", pcs[i]);
+801003c0:	83 ec 08             	sub    $0x8,%esp
+801003c3:	ff 33                	pushl  (%ebx)
+801003c5:	83 c3 04             	add    $0x4,%ebx
+801003c8:	68 61 70 10 80       	push   $0x80107061
+801003cd:	e8 8e 02 00 00       	call   80100660 <cprintf>
+  // use lapiccpunum so that we can call panic from mycpu()
+  cprintf("lapicid %d: panic: ", lapicid());
+  cprintf(s);
+  cprintf("\n");
+  getcallerpcs(&s, pcs);
+  for(i=0; i<10; i++)
+801003d2:	83 c4 10             	add    $0x10,%esp
+801003d5:	39 f3                	cmp    %esi,%ebx
+801003d7:	75 e7                	jne    801003c0 <panic+0x50>
+    cprintf(" %p", pcs[i]);
+  panicked = 1; // freeze other CPU
+801003d9:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
+801003e0:	00 00 00 
+801003e3:	eb fe                	jmp    801003e3 <panic+0x73>
+801003e5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801003e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801003f0 <consputc>:
+}
+
+void
+consputc(int c)
+{
+  if(panicked){
+801003f0:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+801003f6:	85 d2                	test   %edx,%edx
+801003f8:	74 06                	je     80100400 <consputc+0x10>
+801003fa:	fa                   	cli    
+801003fb:	eb fe                	jmp    801003fb <consputc+0xb>
+801003fd:	8d 76 00             	lea    0x0(%esi),%esi
+  crt[pos] = ' ' | 0x0700;
+}
+
+void
+consputc(int c)
+{
+80100400:	55                   	push   %ebp
+80100401:	89 e5                	mov    %esp,%ebp
+80100403:	57                   	push   %edi
+80100404:	56                   	push   %esi
+80100405:	53                   	push   %ebx
+80100406:	89 c3                	mov    %eax,%ebx
+80100408:	83 ec 0c             	sub    $0xc,%esp
+    cli();
+    for(;;)
+      ;
+  }
+
+  if(c == BACKSPACE){
+8010040b:	3d 00 01 00 00       	cmp    $0x100,%eax
+80100410:	0f 84 b8 00 00 00    	je     801004ce <consputc+0xde>
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+  } else
+    uartputc(c);
+80100416:	83 ec 0c             	sub    $0xc,%esp
+80100419:	50                   	push   %eax
+8010041a:	e8 c1 57 00 00       	call   80105be0 <uartputc>
+8010041f:	83 c4 10             	add    $0x10,%esp
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100422:	bf d4 03 00 00       	mov    $0x3d4,%edi
+80100427:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010042c:	89 fa                	mov    %edi,%edx
+8010042e:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010042f:	be d5 03 00 00       	mov    $0x3d5,%esi
+80100434:	89 f2                	mov    %esi,%edx
+80100436:	ec                   	in     (%dx),%al
+{
+  int pos;
+
+  // Cursor position: col + 80*row.
+  outb(CRTPORT, 14);
+  pos = inb(CRTPORT+1) << 8;
+80100437:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010043a:	89 fa                	mov    %edi,%edx
+8010043c:	c1 e0 08             	shl    $0x8,%eax
+8010043f:	89 c1                	mov    %eax,%ecx
+80100441:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100446:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100447:	89 f2                	mov    %esi,%edx
+80100449:	ec                   	in     (%dx),%al
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);
+8010044a:	0f b6 c0             	movzbl %al,%eax
+8010044d:	09 c8                	or     %ecx,%eax
+
+  if(c == '\n')
+8010044f:	83 fb 0a             	cmp    $0xa,%ebx
+80100452:	0f 84 0b 01 00 00    	je     80100563 <consputc+0x173>
+    pos += 80 - pos%80;
+  else if(c == BACKSPACE){
+80100458:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
+8010045e:	0f 84 e6 00 00 00    	je     8010054a <consputc+0x15a>
+    if(pos > 0) --pos;
+  } else
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+80100464:	0f b6 d3             	movzbl %bl,%edx
+80100467:	8d 78 01             	lea    0x1(%eax),%edi
+8010046a:	80 ce 07             	or     $0x7,%dh
+8010046d:	66 89 94 00 00 80 0b 	mov    %dx,-0x7ff48000(%eax,%eax,1)
+80100474:	80 
+
+  if(pos < 0 || pos > 25*80)
+80100475:	81 ff d0 07 00 00    	cmp    $0x7d0,%edi
+8010047b:	0f 8f bc 00 00 00    	jg     8010053d <consputc+0x14d>
+    panic("pos under/overflow");
+
+  if((pos/80) >= 24){  // Scroll up.
+80100481:	81 ff 7f 07 00 00    	cmp    $0x77f,%edi
+80100487:	7f 6f                	jg     801004f8 <consputc+0x108>
+80100489:	89 f8                	mov    %edi,%eax
+8010048b:	8d 8c 3f 00 80 0b 80 	lea    -0x7ff48000(%edi,%edi,1),%ecx
+80100492:	89 fb                	mov    %edi,%ebx
+80100494:	c1 e8 08             	shr    $0x8,%eax
+80100497:	89 c6                	mov    %eax,%esi
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100499:	bf d4 03 00 00       	mov    $0x3d4,%edi
+8010049e:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004a3:	89 fa                	mov    %edi,%edx
+801004a5:	ee                   	out    %al,(%dx)
+801004a6:	ba d5 03 00 00       	mov    $0x3d5,%edx
+801004ab:	89 f0                	mov    %esi,%eax
+801004ad:	ee                   	out    %al,(%dx)
+801004ae:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004b3:	89 fa                	mov    %edi,%edx
+801004b5:	ee                   	out    %al,(%dx)
+801004b6:	ba d5 03 00 00       	mov    $0x3d5,%edx
+801004bb:	89 d8                	mov    %ebx,%eax
+801004bd:	ee                   	out    %al,(%dx)
+
+  outb(CRTPORT, 14);
+  outb(CRTPORT+1, pos>>8);
+  outb(CRTPORT, 15);
+  outb(CRTPORT+1, pos);
+  crt[pos] = ' ' | 0x0700;
+801004be:	b8 20 07 00 00       	mov    $0x720,%eax
+801004c3:	66 89 01             	mov    %ax,(%ecx)
+  if(c == BACKSPACE){
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+  } else
+    uartputc(c);
+  cgaputc(c);
+}
+801004c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004c9:	5b                   	pop    %ebx
+801004ca:	5e                   	pop    %esi
+801004cb:	5f                   	pop    %edi
+801004cc:	5d                   	pop    %ebp
+801004cd:	c3                   	ret    
+    for(;;)
+      ;
+  }
+
+  if(c == BACKSPACE){
+    uartputc('\b'); uartputc(' '); uartputc('\b');
+801004ce:	83 ec 0c             	sub    $0xc,%esp
+801004d1:	6a 08                	push   $0x8
+801004d3:	e8 08 57 00 00       	call   80105be0 <uartputc>
+801004d8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+801004df:	e8 fc 56 00 00       	call   80105be0 <uartputc>
+801004e4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+801004eb:	e8 f0 56 00 00       	call   80105be0 <uartputc>
+801004f0:	83 c4 10             	add    $0x10,%esp
+801004f3:	e9 2a ff ff ff       	jmp    80100422 <consputc+0x32>
+
+  if(pos < 0 || pos > 25*80)
+    panic("pos under/overflow");
+
+  if((pos/80) >= 24){  // Scroll up.
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+801004f8:	83 ec 04             	sub    $0x4,%esp
+    pos -= 80;
+801004fb:	8d 5f b0             	lea    -0x50(%edi),%ebx
+
+  if(pos < 0 || pos > 25*80)
+    panic("pos under/overflow");
+
+  if((pos/80) >= 24){  // Scroll up.
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+801004fe:	68 60 0e 00 00       	push   $0xe60
+80100503:	68 a0 80 0b 80       	push   $0x800b80a0
+80100508:	68 00 80 0b 80       	push   $0x800b8000
+    pos -= 80;
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+8010050d:	8d b4 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%esi
+
+  if(pos < 0 || pos > 25*80)
+    panic("pos under/overflow");
+
+  if((pos/80) >= 24){  // Scroll up.
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100514:	e8 a7 3f 00 00       	call   801044c0 <memmove>
+    pos -= 80;
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100519:	b8 80 07 00 00       	mov    $0x780,%eax
+8010051e:	83 c4 0c             	add    $0xc,%esp
+80100521:	29 d8                	sub    %ebx,%eax
+80100523:	01 c0                	add    %eax,%eax
+80100525:	50                   	push   %eax
+80100526:	6a 00                	push   $0x0
+80100528:	56                   	push   %esi
+80100529:	e8 e2 3e 00 00       	call   80104410 <memset>
+8010052e:	89 f1                	mov    %esi,%ecx
+80100530:	83 c4 10             	add    $0x10,%esp
+80100533:	be 07 00 00 00       	mov    $0x7,%esi
+80100538:	e9 5c ff ff ff       	jmp    80100499 <consputc+0xa9>
+    if(pos > 0) --pos;
+  } else
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+
+  if(pos < 0 || pos > 25*80)
+    panic("pos under/overflow");
+8010053d:	83 ec 0c             	sub    $0xc,%esp
+80100540:	68 65 70 10 80       	push   $0x80107065
+80100545:	e8 26 fe ff ff       	call   80100370 <panic>
+  pos |= inb(CRTPORT+1);
+
+  if(c == '\n')
+    pos += 80 - pos%80;
+  else if(c == BACKSPACE){
+    if(pos > 0) --pos;
+8010054a:	85 c0                	test   %eax,%eax
+8010054c:	8d 78 ff             	lea    -0x1(%eax),%edi
+8010054f:	0f 85 20 ff ff ff    	jne    80100475 <consputc+0x85>
+80100555:	b9 00 80 0b 80       	mov    $0x800b8000,%ecx
+8010055a:	31 db                	xor    %ebx,%ebx
+8010055c:	31 f6                	xor    %esi,%esi
+8010055e:	e9 36 ff ff ff       	jmp    80100499 <consputc+0xa9>
+  pos = inb(CRTPORT+1) << 8;
+  outb(CRTPORT, 15);
+  pos |= inb(CRTPORT+1);
+
+  if(c == '\n')
+    pos += 80 - pos%80;
+80100563:	ba 67 66 66 66       	mov    $0x66666667,%edx
+80100568:	f7 ea                	imul   %edx
+8010056a:	89 d0                	mov    %edx,%eax
+8010056c:	c1 e8 05             	shr    $0x5,%eax
+8010056f:	8d 04 80             	lea    (%eax,%eax,4),%eax
+80100572:	c1 e0 04             	shl    $0x4,%eax
+80100575:	8d 78 50             	lea    0x50(%eax),%edi
+80100578:	e9 f8 fe ff ff       	jmp    80100475 <consputc+0x85>
+8010057d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100580 <printint>:
+  int locking;
+} cons;
+
+static void
+printint(int xx, int base, int sign)
+{
+80100580:	55                   	push   %ebp
+80100581:	89 e5                	mov    %esp,%ebp
+80100583:	57                   	push   %edi
+80100584:	56                   	push   %esi
+80100585:	53                   	push   %ebx
+80100586:	89 d6                	mov    %edx,%esi
+80100588:	83 ec 2c             	sub    $0x2c,%esp
+  static char digits[] = "0123456789abcdef";
+  char buf[16];
+  int i;
+  uint x;
+
+  if(sign && (sign = xx < 0))
+8010058b:	85 c9                	test   %ecx,%ecx
+  int locking;
+} cons;
+
+static void
+printint(int xx, int base, int sign)
+{
+8010058d:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  static char digits[] = "0123456789abcdef";
+  char buf[16];
+  int i;
+  uint x;
+
+  if(sign && (sign = xx < 0))
+80100590:	74 0c                	je     8010059e <printint+0x1e>
+80100592:	89 c7                	mov    %eax,%edi
+80100594:	c1 ef 1f             	shr    $0x1f,%edi
+80100597:	85 c0                	test   %eax,%eax
+80100599:	89 7d d4             	mov    %edi,-0x2c(%ebp)
+8010059c:	78 51                	js     801005ef <printint+0x6f>
+    x = -xx;
+  else
+    x = xx;
+
+  i = 0;
+8010059e:	31 ff                	xor    %edi,%edi
+801005a0:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+801005a3:	eb 05                	jmp    801005aa <printint+0x2a>
+801005a5:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+801005a8:	89 cf                	mov    %ecx,%edi
+801005aa:	31 d2                	xor    %edx,%edx
+801005ac:	8d 4f 01             	lea    0x1(%edi),%ecx
+801005af:	f7 f6                	div    %esi
+801005b1:	0f b6 92 90 70 10 80 	movzbl -0x7fef8f70(%edx),%edx
+  }while((x /= base) != 0);
+801005b8:	85 c0                	test   %eax,%eax
+  else
+    x = xx;
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+801005ba:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+801005bd:	75 e9                	jne    801005a8 <printint+0x28>
+
+  if(sign)
+801005bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+801005c2:	85 c0                	test   %eax,%eax
+801005c4:	74 08                	je     801005ce <printint+0x4e>
+    buf[i++] = '-';
+801005c6:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+801005cb:	8d 4f 02             	lea    0x2(%edi),%ecx
+801005ce:	8d 74 0d d7          	lea    -0x29(%ebp,%ecx,1),%esi
+801005d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  while(--i >= 0)
+    consputc(buf[i]);
+801005d8:	0f be 06             	movsbl (%esi),%eax
+801005db:	83 ee 01             	sub    $0x1,%esi
+801005de:	e8 0d fe ff ff       	call   801003f0 <consputc>
+  }while((x /= base) != 0);
+
+  if(sign)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+801005e3:	39 de                	cmp    %ebx,%esi
+801005e5:	75 f1                	jne    801005d8 <printint+0x58>
+    consputc(buf[i]);
+}
+801005e7:	83 c4 2c             	add    $0x2c,%esp
+801005ea:	5b                   	pop    %ebx
+801005eb:	5e                   	pop    %esi
+801005ec:	5f                   	pop    %edi
+801005ed:	5d                   	pop    %ebp
+801005ee:	c3                   	ret    
+  char buf[16];
+  int i;
+  uint x;
+
+  if(sign && (sign = xx < 0))
+    x = -xx;
+801005ef:	f7 d8                	neg    %eax
+801005f1:	eb ab                	jmp    8010059e <printint+0x1e>
+801005f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801005f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100600 <consolewrite>:
+  return target - n;
+}
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100600:	55                   	push   %ebp
+80100601:	89 e5                	mov    %esp,%ebp
+80100603:	57                   	push   %edi
+80100604:	56                   	push   %esi
+80100605:	53                   	push   %ebx
+80100606:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  iunlock(ip);
+80100609:	ff 75 08             	pushl  0x8(%ebp)
+  return target - n;
+}
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+8010060c:	8b 75 10             	mov    0x10(%ebp),%esi
+  int i;
+
+  iunlock(ip);
+8010060f:	e8 2c 11 00 00       	call   80101740 <iunlock>
+  acquire(&cons.lock);
+80100614:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010061b:	e8 f0 3c 00 00       	call   80104310 <acquire>
+80100620:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  for(i = 0; i < n; i++)
+80100623:	83 c4 10             	add    $0x10,%esp
+80100626:	85 f6                	test   %esi,%esi
+80100628:	8d 1c 37             	lea    (%edi,%esi,1),%ebx
+8010062b:	7e 12                	jle    8010063f <consolewrite+0x3f>
+8010062d:	8d 76 00             	lea    0x0(%esi),%esi
+    consputc(buf[i] & 0xff);
+80100630:	0f b6 07             	movzbl (%edi),%eax
+80100633:	83 c7 01             	add    $0x1,%edi
+80100636:	e8 b5 fd ff ff       	call   801003f0 <consputc>
+{
+  int i;
+
+  iunlock(ip);
+  acquire(&cons.lock);
+  for(i = 0; i < n; i++)
+8010063b:	39 df                	cmp    %ebx,%edi
+8010063d:	75 f1                	jne    80100630 <consolewrite+0x30>
+    consputc(buf[i] & 0xff);
+  release(&cons.lock);
+8010063f:	83 ec 0c             	sub    $0xc,%esp
+80100642:	68 20 a5 10 80       	push   $0x8010a520
+80100647:	e8 74 3d 00 00       	call   801043c0 <release>
+  ilock(ip);
+8010064c:	58                   	pop    %eax
+8010064d:	ff 75 08             	pushl  0x8(%ebp)
+80100650:	e8 0b 10 00 00       	call   80101660 <ilock>
+
+  return n;
+}
+80100655:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100658:	89 f0                	mov    %esi,%eax
+8010065a:	5b                   	pop    %ebx
+8010065b:	5e                   	pop    %esi
+8010065c:	5f                   	pop    %edi
+8010065d:	5d                   	pop    %ebp
+8010065e:	c3                   	ret    
+8010065f:	90                   	nop
+
+80100660 <cprintf>:
+//PAGEBREAK: 50
+
+// Print to the console. only understands %d, %x, %p, %s.
+void
+cprintf(char *fmt, ...)
+{
+80100660:	55                   	push   %ebp
+80100661:	89 e5                	mov    %esp,%ebp
+80100663:	57                   	push   %edi
+80100664:	56                   	push   %esi
+80100665:	53                   	push   %ebx
+80100666:	83 ec 1c             	sub    $0x1c,%esp
+  int i, c, locking;
+  uint *argp;
+  char *s;
+
+  locking = cons.locking;
+80100669:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+  if(locking)
+8010066e:	85 c0                	test   %eax,%eax
+{
+  int i, c, locking;
+  uint *argp;
+  char *s;
+
+  locking = cons.locking;
+80100670:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(locking)
+80100673:	0f 85 47 01 00 00    	jne    801007c0 <cprintf+0x160>
+    acquire(&cons.lock);
+
+  if (fmt == 0)
+80100679:	8b 45 08             	mov    0x8(%ebp),%eax
+8010067c:	85 c0                	test   %eax,%eax
+8010067e:	89 c1                	mov    %eax,%ecx
+80100680:	0f 84 4f 01 00 00    	je     801007d5 <cprintf+0x175>
+    panic("null fmt");
+
+  argp = (uint*)(void*)(&fmt + 1);
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100686:	0f b6 00             	movzbl (%eax),%eax
+80100689:	31 db                	xor    %ebx,%ebx
+8010068b:	8d 75 0c             	lea    0xc(%ebp),%esi
+8010068e:	89 cf                	mov    %ecx,%edi
+80100690:	85 c0                	test   %eax,%eax
+80100692:	75 55                	jne    801006e9 <cprintf+0x89>
+80100694:	eb 68                	jmp    801006fe <cprintf+0x9e>
+80100696:	8d 76 00             	lea    0x0(%esi),%esi
+80100699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(c != '%'){
+      consputc(c);
+      continue;
+    }
+    c = fmt[++i] & 0xff;
+801006a0:	83 c3 01             	add    $0x1,%ebx
+801006a3:	0f b6 14 1f          	movzbl (%edi,%ebx,1),%edx
+    if(c == 0)
+801006a7:	85 d2                	test   %edx,%edx
+801006a9:	74 53                	je     801006fe <cprintf+0x9e>
+      break;
+    switch(c){
+801006ab:	83 fa 70             	cmp    $0x70,%edx
+801006ae:	74 7a                	je     8010072a <cprintf+0xca>
+801006b0:	7f 6e                	jg     80100720 <cprintf+0xc0>
+801006b2:	83 fa 25             	cmp    $0x25,%edx
+801006b5:	0f 84 ad 00 00 00    	je     80100768 <cprintf+0x108>
+801006bb:	83 fa 64             	cmp    $0x64,%edx
+801006be:	0f 85 84 00 00 00    	jne    80100748 <cprintf+0xe8>
+    case 'd':
+      printint(*argp++, 10, 1);
+801006c4:	8d 46 04             	lea    0x4(%esi),%eax
+801006c7:	b9 01 00 00 00       	mov    $0x1,%ecx
+801006cc:	ba 0a 00 00 00       	mov    $0xa,%edx
+801006d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801006d4:	8b 06                	mov    (%esi),%eax
+801006d6:	e8 a5 fe ff ff       	call   80100580 <printint>
+801006db:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+
+  if (fmt == 0)
+    panic("null fmt");
+
+  argp = (uint*)(void*)(&fmt + 1);
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006de:	83 c3 01             	add    $0x1,%ebx
+801006e1:	0f b6 04 1f          	movzbl (%edi,%ebx,1),%eax
+801006e5:	85 c0                	test   %eax,%eax
+801006e7:	74 15                	je     801006fe <cprintf+0x9e>
+    if(c != '%'){
+801006e9:	83 f8 25             	cmp    $0x25,%eax
+801006ec:	74 b2                	je     801006a0 <cprintf+0x40>
+        s = "(null)";
+      for(; *s; s++)
+        consputc(*s);
+      break;
+    case '%':
+      consputc('%');
+801006ee:	e8 fd fc ff ff       	call   801003f0 <consputc>
+
+  if (fmt == 0)
+    panic("null fmt");
+
+  argp = (uint*)(void*)(&fmt + 1);
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+801006f3:	83 c3 01             	add    $0x1,%ebx
+801006f6:	0f b6 04 1f          	movzbl (%edi,%ebx,1),%eax
+801006fa:	85 c0                	test   %eax,%eax
+801006fc:	75 eb                	jne    801006e9 <cprintf+0x89>
+      consputc(c);
+      break;
+    }
+  }
+
+  if(locking)
+801006fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80100701:	85 c0                	test   %eax,%eax
+80100703:	74 10                	je     80100715 <cprintf+0xb5>
+    release(&cons.lock);
+80100705:	83 ec 0c             	sub    $0xc,%esp
+80100708:	68 20 a5 10 80       	push   $0x8010a520
+8010070d:	e8 ae 3c 00 00       	call   801043c0 <release>
+80100712:	83 c4 10             	add    $0x10,%esp
+}
+80100715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100718:	5b                   	pop    %ebx
+80100719:	5e                   	pop    %esi
+8010071a:	5f                   	pop    %edi
+8010071b:	5d                   	pop    %ebp
+8010071c:	c3                   	ret    
+8010071d:	8d 76 00             	lea    0x0(%esi),%esi
+      continue;
+    }
+    c = fmt[++i] & 0xff;
+    if(c == 0)
+      break;
+    switch(c){
+80100720:	83 fa 73             	cmp    $0x73,%edx
+80100723:	74 5b                	je     80100780 <cprintf+0x120>
+80100725:	83 fa 78             	cmp    $0x78,%edx
+80100728:	75 1e                	jne    80100748 <cprintf+0xe8>
+    case 'd':
+      printint(*argp++, 10, 1);
+      break;
+    case 'x':
+    case 'p':
+      printint(*argp++, 16, 0);
+8010072a:	8d 46 04             	lea    0x4(%esi),%eax
+8010072d:	31 c9                	xor    %ecx,%ecx
+8010072f:	ba 10 00 00 00       	mov    $0x10,%edx
+80100734:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100737:	8b 06                	mov    (%esi),%eax
+80100739:	e8 42 fe ff ff       	call   80100580 <printint>
+8010073e:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+      break;
+80100741:	eb 9b                	jmp    801006de <cprintf+0x7e>
+80100743:	90                   	nop
+80100744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    case '%':
+      consputc('%');
+      break;
+    default:
+      // Print unknown % sequence to draw attention.
+      consputc('%');
+80100748:	b8 25 00 00 00       	mov    $0x25,%eax
+8010074d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80100750:	e8 9b fc ff ff       	call   801003f0 <consputc>
+      consputc(c);
+80100755:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80100758:	89 d0                	mov    %edx,%eax
+8010075a:	e8 91 fc ff ff       	call   801003f0 <consputc>
+      break;
+8010075f:	e9 7a ff ff ff       	jmp    801006de <cprintf+0x7e>
+80100764:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = "(null)";
+      for(; *s; s++)
+        consputc(*s);
+      break;
+    case '%':
+      consputc('%');
+80100768:	b8 25 00 00 00       	mov    $0x25,%eax
+8010076d:	e8 7e fc ff ff       	call   801003f0 <consputc>
+80100772:	e9 7c ff ff ff       	jmp    801006f3 <cprintf+0x93>
+80100777:	89 f6                	mov    %esi,%esi
+80100779:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    case 'x':
+    case 'p':
+      printint(*argp++, 16, 0);
+      break;
+    case 's':
+      if((s = (char*)*argp++) == 0)
+80100780:	8d 46 04             	lea    0x4(%esi),%eax
+80100783:	8b 36                	mov    (%esi),%esi
+80100785:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+        s = "(null)";
+80100788:	b8 78 70 10 80       	mov    $0x80107078,%eax
+8010078d:	85 f6                	test   %esi,%esi
+8010078f:	0f 44 f0             	cmove  %eax,%esi
+      for(; *s; s++)
+80100792:	0f be 06             	movsbl (%esi),%eax
+80100795:	84 c0                	test   %al,%al
+80100797:	74 16                	je     801007af <cprintf+0x14f>
+80100799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801007a0:	83 c6 01             	add    $0x1,%esi
+        consputc(*s);
+801007a3:	e8 48 fc ff ff       	call   801003f0 <consputc>
+      printint(*argp++, 16, 0);
+      break;
+    case 's':
+      if((s = (char*)*argp++) == 0)
+        s = "(null)";
+      for(; *s; s++)
+801007a8:	0f be 06             	movsbl (%esi),%eax
+801007ab:	84 c0                	test   %al,%al
+801007ad:	75 f1                	jne    801007a0 <cprintf+0x140>
+    case 'x':
+    case 'p':
+      printint(*argp++, 16, 0);
+      break;
+    case 's':
+      if((s = (char*)*argp++) == 0)
+801007af:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+801007b2:	e9 27 ff ff ff       	jmp    801006de <cprintf+0x7e>
+801007b7:	89 f6                	mov    %esi,%esi
+801007b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  uint *argp;
+  char *s;
+
+  locking = cons.locking;
+  if(locking)
+    acquire(&cons.lock);
+801007c0:	83 ec 0c             	sub    $0xc,%esp
+801007c3:	68 20 a5 10 80       	push   $0x8010a520
+801007c8:	e8 43 3b 00 00       	call   80104310 <acquire>
+801007cd:	83 c4 10             	add    $0x10,%esp
+801007d0:	e9 a4 fe ff ff       	jmp    80100679 <cprintf+0x19>
+
+  if (fmt == 0)
+    panic("null fmt");
+801007d5:	83 ec 0c             	sub    $0xc,%esp
+801007d8:	68 7f 70 10 80       	push   $0x8010707f
+801007dd:	e8 8e fb ff ff       	call   80100370 <panic>
+801007e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801007e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801007f0 <consoleintr>:
+
+#define C(x)  ((x)-'@')  // Control-x
+
+void
+consoleintr(int (*getc)(void))
+{
+801007f0:	55                   	push   %ebp
+801007f1:	89 e5                	mov    %esp,%ebp
+801007f3:	57                   	push   %edi
+801007f4:	56                   	push   %esi
+801007f5:	53                   	push   %ebx
+  int c, doprocdump = 0;
+801007f6:	31 f6                	xor    %esi,%esi
+
+#define C(x)  ((x)-'@')  // Control-x
+
+void
+consoleintr(int (*getc)(void))
+{
+801007f8:	83 ec 18             	sub    $0x18,%esp
+801007fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int c, doprocdump = 0;
+
+  acquire(&cons.lock);
+801007fe:	68 20 a5 10 80       	push   $0x8010a520
+80100803:	e8 08 3b 00 00       	call   80104310 <acquire>
+  while((c = getc()) >= 0){
+80100808:	83 c4 10             	add    $0x10,%esp
+8010080b:	90                   	nop
+8010080c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100810:	ff d3                	call   *%ebx
+80100812:	85 c0                	test   %eax,%eax
+80100814:	89 c7                	mov    %eax,%edi
+80100816:	78 48                	js     80100860 <consoleintr+0x70>
+    switch(c){
+80100818:	83 ff 10             	cmp    $0x10,%edi
+8010081b:	0f 84 3f 01 00 00    	je     80100960 <consoleintr+0x170>
+80100821:	7e 5d                	jle    80100880 <consoleintr+0x90>
+80100823:	83 ff 15             	cmp    $0x15,%edi
+80100826:	0f 84 dc 00 00 00    	je     80100908 <consoleintr+0x118>
+8010082c:	83 ff 7f             	cmp    $0x7f,%edi
+8010082f:	75 54                	jne    80100885 <consoleintr+0x95>
+        input.e--;
+        consputc(BACKSPACE);
+      }
+      break;
+    case C('H'): case '\x7f':  // Backspace
+      if(input.e != input.w){
+80100831:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100836:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010083c:	74 d2                	je     80100810 <consoleintr+0x20>
+        input.e--;
+8010083e:	83 e8 01             	sub    $0x1,%eax
+80100841:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+        consputc(BACKSPACE);
+80100846:	b8 00 01 00 00       	mov    $0x100,%eax
+8010084b:	e8 a0 fb ff ff       	call   801003f0 <consputc>
+consoleintr(int (*getc)(void))
+{
+  int c, doprocdump = 0;
+
+  acquire(&cons.lock);
+  while((c = getc()) >= 0){
+80100850:	ff d3                	call   *%ebx
+80100852:	85 c0                	test   %eax,%eax
+80100854:	89 c7                	mov    %eax,%edi
+80100856:	79 c0                	jns    80100818 <consoleintr+0x28>
+80100858:	90                   	nop
+80100859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        }
+      }
+      break;
+    }
+  }
+  release(&cons.lock);
+80100860:	83 ec 0c             	sub    $0xc,%esp
+80100863:	68 20 a5 10 80       	push   $0x8010a520
+80100868:	e8 53 3b 00 00       	call   801043c0 <release>
+  if(doprocdump) {
+8010086d:	83 c4 10             	add    $0x10,%esp
+80100870:	85 f6                	test   %esi,%esi
+80100872:	0f 85 f8 00 00 00    	jne    80100970 <consoleintr+0x180>
+    procdump();  // now call procdump() wo. cons.lock held
+  }
+}
+80100878:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010087b:	5b                   	pop    %ebx
+8010087c:	5e                   	pop    %esi
+8010087d:	5f                   	pop    %edi
+8010087e:	5d                   	pop    %ebp
+8010087f:	c3                   	ret    
+{
+  int c, doprocdump = 0;
+
+  acquire(&cons.lock);
+  while((c = getc()) >= 0){
+    switch(c){
+80100880:	83 ff 08             	cmp    $0x8,%edi
+80100883:	74 ac                	je     80100831 <consoleintr+0x41>
+        input.e--;
+        consputc(BACKSPACE);
+      }
+      break;
+    default:
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+80100885:	85 ff                	test   %edi,%edi
+80100887:	74 87                	je     80100810 <consoleintr+0x20>
+80100889:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+8010088e:	89 c2                	mov    %eax,%edx
+80100890:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+80100896:	83 fa 7f             	cmp    $0x7f,%edx
+80100899:	0f 87 71 ff ff ff    	ja     80100810 <consoleintr+0x20>
+        c = (c == '\r') ? '\n' : c;
+        input.buf[input.e++ % INPUT_BUF] = c;
+8010089f:	8d 50 01             	lea    0x1(%eax),%edx
+801008a2:	83 e0 7f             	and    $0x7f,%eax
+        consputc(BACKSPACE);
+      }
+      break;
+    default:
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+        c = (c == '\r') ? '\n' : c;
+801008a5:	83 ff 0d             	cmp    $0xd,%edi
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008a8:	89 15 a8 ff 10 80    	mov    %edx,0x8010ffa8
+        consputc(BACKSPACE);
+      }
+      break;
+    default:
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+        c = (c == '\r') ? '\n' : c;
+801008ae:	0f 84 c8 00 00 00    	je     8010097c <consoleintr+0x18c>
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008b4:	89 f9                	mov    %edi,%ecx
+801008b6:	88 88 20 ff 10 80    	mov    %cl,-0x7fef00e0(%eax)
+        consputc(c);
+801008bc:	89 f8                	mov    %edi,%eax
+801008be:	e8 2d fb ff ff       	call   801003f0 <consputc>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+801008c3:	83 ff 0a             	cmp    $0xa,%edi
+801008c6:	0f 84 c1 00 00 00    	je     8010098d <consoleintr+0x19d>
+801008cc:	83 ff 04             	cmp    $0x4,%edi
+801008cf:	0f 84 b8 00 00 00    	je     8010098d <consoleintr+0x19d>
+801008d5:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801008da:	83 e8 80             	sub    $0xffffff80,%eax
+801008dd:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+801008e3:	0f 85 27 ff ff ff    	jne    80100810 <consoleintr+0x20>
+          input.w = input.e;
+          wakeup(&input.r);
+801008e9:	83 ec 0c             	sub    $0xc,%esp
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+        c = (c == '\r') ? '\n' : c;
+        input.buf[input.e++ % INPUT_BUF] = c;
+        consputc(c);
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+          input.w = input.e;
+801008ec:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+          wakeup(&input.r);
+801008f1:	68 a0 ff 10 80       	push   $0x8010ffa0
+801008f6:	e8 d5 35 00 00       	call   80103ed0 <wakeup>
+801008fb:	83 c4 10             	add    $0x10,%esp
+801008fe:	e9 0d ff ff ff       	jmp    80100810 <consoleintr+0x20>
+80100903:	90                   	nop
+80100904:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    case C('P'):  // Process listing.
+      // procdump() locks cons.lock indirectly; invoke later
+      doprocdump = 1;
+      break;
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+80100908:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+8010090d:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+80100913:	75 2b                	jne    80100940 <consoleintr+0x150>
+80100915:	e9 f6 fe ff ff       	jmp    80100810 <consoleintr+0x20>
+8010091a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+        input.e--;
+80100920:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
+        consputc(BACKSPACE);
+80100925:	b8 00 01 00 00       	mov    $0x100,%eax
+8010092a:	e8 c1 fa ff ff       	call   801003f0 <consputc>
+    case C('P'):  // Process listing.
+      // procdump() locks cons.lock indirectly; invoke later
+      doprocdump = 1;
+      break;
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+8010092f:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100934:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010093a:	0f 84 d0 fe ff ff    	je     80100810 <consoleintr+0x20>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+80100940:	83 e8 01             	sub    $0x1,%eax
+80100943:	89 c2                	mov    %eax,%edx
+80100945:	83 e2 7f             	and    $0x7f,%edx
+    case C('P'):  // Process listing.
+      // procdump() locks cons.lock indirectly; invoke later
+      doprocdump = 1;
+      break;
+    case C('U'):  // Kill line.
+      while(input.e != input.w &&
+80100948:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+8010094f:	75 cf                	jne    80100920 <consoleintr+0x130>
+80100951:	e9 ba fe ff ff       	jmp    80100810 <consoleintr+0x20>
+80100956:	8d 76 00             	lea    0x0(%esi),%esi
+80100959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  acquire(&cons.lock);
+  while((c = getc()) >= 0){
+    switch(c){
+    case C('P'):  // Process listing.
+      // procdump() locks cons.lock indirectly; invoke later
+      doprocdump = 1;
+80100960:	be 01 00 00 00       	mov    $0x1,%esi
+80100965:	e9 a6 fe ff ff       	jmp    80100810 <consoleintr+0x20>
+8010096a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }
+  release(&cons.lock);
+  if(doprocdump) {
+    procdump();  // now call procdump() wo. cons.lock held
+  }
+}
+80100970:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100973:	5b                   	pop    %ebx
+80100974:	5e                   	pop    %esi
+80100975:	5f                   	pop    %edi
+80100976:	5d                   	pop    %ebp
+      break;
+    }
+  }
+  release(&cons.lock);
+  if(doprocdump) {
+    procdump();  // now call procdump() wo. cons.lock held
+80100977:	e9 44 36 00 00       	jmp    80103fc0 <procdump>
+      }
+      break;
+    default:
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+        c = (c == '\r') ? '\n' : c;
+        input.buf[input.e++ % INPUT_BUF] = c;
+8010097c:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
+        consputc(c);
+80100983:	b8 0a 00 00 00       	mov    $0xa,%eax
+80100988:	e8 63 fa ff ff       	call   801003f0 <consputc>
+8010098d:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100992:	e9 52 ff ff ff       	jmp    801008e9 <consoleintr+0xf9>
+80100997:	89 f6                	mov    %esi,%esi
+80100999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801009a0 <consoleinit>:
+  return n;
+}
+
+void
+consoleinit(void)
+{
+801009a0:	55                   	push   %ebp
+801009a1:	89 e5                	mov    %esp,%ebp
+801009a3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+801009a6:	68 88 70 10 80       	push   $0x80107088
+801009ab:	68 20 a5 10 80       	push   $0x8010a520
+801009b0:	e8 fb 37 00 00       	call   801041b0 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+801009b5:	58                   	pop    %eax
+801009b6:	5a                   	pop    %edx
+801009b7:	6a 00                	push   $0x0
+801009b9:	6a 01                	push   $0x1
+void
+consoleinit(void)
+{
+  initlock(&cons.lock, "console");
+
+  devsw[CONSOLE].write = consolewrite;
+801009bb:	c7 05 6c 09 11 80 00 	movl   $0x80100600,0x8011096c
+801009c2:	06 10 80 
+  devsw[CONSOLE].read = consoleread;
+801009c5:	c7 05 68 09 11 80 70 	movl   $0x80100270,0x80110968
+801009cc:	02 10 80 
+  cons.locking = 1;
+801009cf:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+801009d6:	00 00 00 
+
+  ioapicenable(IRQ_KBD, 0);
+801009d9:	e8 b2 18 00 00       	call   80102290 <ioapicenable>
+}
+801009de:	83 c4 10             	add    $0x10,%esp
+801009e1:	c9                   	leave  
+801009e2:	c3                   	ret    
+801009e3:	66 90                	xchg   %ax,%ax
+801009e5:	66 90                	xchg   %ax,%ax
+801009e7:	66 90                	xchg   %ax,%ax
+801009e9:	66 90                	xchg   %ax,%ax
+801009eb:	66 90                	xchg   %ax,%ax
+801009ed:	66 90                	xchg   %ax,%ax
+801009ef:	90                   	nop
+
+801009f0 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+801009f0:	55                   	push   %ebp
+801009f1:	89 e5                	mov    %esp,%ebp
+801009f3:	57                   	push   %edi
+801009f4:	56                   	push   %esi
+801009f5:	53                   	push   %ebx
+801009f6:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+801009fc:	e8 6f 2d 00 00       	call   80103770 <myproc>
+80100a01:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+
+  begin_op();
+80100a07:	e8 34 21 00 00       	call   80102b40 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80100a0c:	83 ec 0c             	sub    $0xc,%esp
+80100a0f:	ff 75 08             	pushl  0x8(%ebp)
+80100a12:	e8 99 14 00 00       	call   80101eb0 <namei>
+80100a17:	83 c4 10             	add    $0x10,%esp
+80100a1a:	85 c0                	test   %eax,%eax
+80100a1c:	0f 84 9c 01 00 00    	je     80100bbe <exec+0x1ce>
+    end_op();
+    cprintf("exec: fail\n");
+    return -1;
+  }
+  ilock(ip);
+80100a22:	83 ec 0c             	sub    $0xc,%esp
+80100a25:	89 c3                	mov    %eax,%ebx
+80100a27:	50                   	push   %eax
+80100a28:	e8 33 0c 00 00       	call   80101660 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+80100a2d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100a33:	6a 34                	push   $0x34
+80100a35:	6a 00                	push   $0x0
+80100a37:	50                   	push   %eax
+80100a38:	53                   	push   %ebx
+80100a39:	e8 02 0f 00 00       	call   80101940 <readi>
+80100a3e:	83 c4 20             	add    $0x20,%esp
+80100a41:	83 f8 34             	cmp    $0x34,%eax
+80100a44:	74 22                	je     80100a68 <exec+0x78>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+80100a46:	83 ec 0c             	sub    $0xc,%esp
+80100a49:	53                   	push   %ebx
+80100a4a:	e8 a1 0e 00 00       	call   801018f0 <iunlockput>
+    end_op();
+80100a4f:	e8 5c 21 00 00       	call   80102bb0 <end_op>
+80100a54:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+80100a57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100a5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100a5f:	5b                   	pop    %ebx
+80100a60:	5e                   	pop    %esi
+80100a61:	5f                   	pop    %edi
+80100a62:	5d                   	pop    %ebp
+80100a63:	c3                   	ret    
+80100a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+    goto bad;
+  if(elf.magic != ELF_MAGIC)
+80100a68:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100a6f:	45 4c 46 
+80100a72:	75 d2                	jne    80100a46 <exec+0x56>
+    goto bad;
+
+  if((pgdir = setupkvm()) == 0)
+80100a74:	e8 f7 62 00 00       	call   80106d70 <setupkvm>
+80100a79:	85 c0                	test   %eax,%eax
+80100a7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100a81:	74 c3                	je     80100a46 <exec+0x56>
+    goto bad;
+
+  // Load program into memory.
+  sz = 0;
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80100a83:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100a8a:	00 
+80100a8b:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80100a91:	c7 85 ec fe ff ff 00 	movl   $0x0,-0x114(%ebp)
+80100a98:	00 00 00 
+80100a9b:	0f 84 c5 00 00 00    	je     80100b66 <exec+0x176>
+80100aa1:	31 ff                	xor    %edi,%edi
+80100aa3:	eb 18                	jmp    80100abd <exec+0xcd>
+80100aa5:	8d 76 00             	lea    0x0(%esi),%esi
+80100aa8:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100aaf:	83 c7 01             	add    $0x1,%edi
+80100ab2:	83 c6 20             	add    $0x20,%esi
+80100ab5:	39 f8                	cmp    %edi,%eax
+80100ab7:	0f 8e a9 00 00 00    	jle    80100b66 <exec+0x176>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+80100abd:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100ac3:	6a 20                	push   $0x20
+80100ac5:	56                   	push   %esi
+80100ac6:	50                   	push   %eax
+80100ac7:	53                   	push   %ebx
+80100ac8:	e8 73 0e 00 00       	call   80101940 <readi>
+80100acd:	83 c4 10             	add    $0x10,%esp
+80100ad0:	83 f8 20             	cmp    $0x20,%eax
+80100ad3:	75 7b                	jne    80100b50 <exec+0x160>
+      goto bad;
+    if(ph.type != ELF_PROG_LOAD)
+80100ad5:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100adc:	75 ca                	jne    80100aa8 <exec+0xb8>
+      continue;
+    if(ph.memsz < ph.filesz)
+80100ade:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100ae4:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100aea:	72 64                	jb     80100b50 <exec+0x160>
+      goto bad;
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+80100aec:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100af2:	72 5c                	jb     80100b50 <exec+0x160>
+      goto bad;
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80100af4:	83 ec 04             	sub    $0x4,%esp
+80100af7:	50                   	push   %eax
+80100af8:	ff b5 ec fe ff ff    	pushl  -0x114(%ebp)
+80100afe:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b04:	e8 b7 60 00 00       	call   80106bc0 <allocuvm>
+80100b09:	83 c4 10             	add    $0x10,%esp
+80100b0c:	85 c0                	test   %eax,%eax
+80100b0e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+80100b14:	74 3a                	je     80100b50 <exec+0x160>
+      goto bad;
+    if(ph.vaddr % PGSIZE != 0)
+80100b16:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100b1c:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100b21:	75 2d                	jne    80100b50 <exec+0x160>
+      goto bad;
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80100b23:	83 ec 0c             	sub    $0xc,%esp
+80100b26:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+80100b2c:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80100b32:	53                   	push   %ebx
+80100b33:	50                   	push   %eax
+80100b34:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b3a:	e8 c1 5f 00 00       	call   80106b00 <loaduvm>
+80100b3f:	83 c4 20             	add    $0x20,%esp
+80100b42:	85 c0                	test   %eax,%eax
+80100b44:	0f 89 5e ff ff ff    	jns    80100aa8 <exec+0xb8>
+80100b4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  freevm(oldpgdir);
+  return 0;
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+80100b50:	83 ec 0c             	sub    $0xc,%esp
+80100b53:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b59:	e8 92 61 00 00       	call   80106cf0 <freevm>
+80100b5e:	83 c4 10             	add    $0x10,%esp
+80100b61:	e9 e0 fe ff ff       	jmp    80100a46 <exec+0x56>
+    if(ph.vaddr % PGSIZE != 0)
+      goto bad;
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+      goto bad;
+  }
+  iunlockput(ip);
+80100b66:	83 ec 0c             	sub    $0xc,%esp
+80100b69:	53                   	push   %ebx
+80100b6a:	e8 81 0d 00 00       	call   801018f0 <iunlockput>
+  end_op();
+80100b6f:	e8 3c 20 00 00       	call   80102bb0 <end_op>
+  ip = 0;
+
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+80100b74:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100b7a:	83 c4 0c             	add    $0xc,%esp
+  end_op();
+  ip = 0;
+
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+80100b7d:	05 ff 0f 00 00       	add    $0xfff,%eax
+80100b82:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80100b87:	8d 90 00 20 00 00    	lea    0x2000(%eax),%edx
+80100b8d:	52                   	push   %edx
+80100b8e:	50                   	push   %eax
+80100b8f:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b95:	e8 26 60 00 00       	call   80106bc0 <allocuvm>
+80100b9a:	83 c4 10             	add    $0x10,%esp
+80100b9d:	85 c0                	test   %eax,%eax
+80100b9f:	89 c6                	mov    %eax,%esi
+80100ba1:	75 3a                	jne    80100bdd <exec+0x1ed>
+  freevm(oldpgdir);
+  return 0;
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+80100ba3:	83 ec 0c             	sub    $0xc,%esp
+80100ba6:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100bac:	e8 3f 61 00 00       	call   80106cf0 <freevm>
+80100bb1:	83 c4 10             	add    $0x10,%esp
+  if(ip){
+    iunlockput(ip);
+    end_op();
+  }
+  return -1;
+80100bb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100bb9:	e9 9e fe ff ff       	jmp    80100a5c <exec+0x6c>
+  struct proc *curproc = myproc();
+
+  begin_op();
+
+  if((ip = namei(path)) == 0){
+    end_op();
+80100bbe:	e8 ed 1f 00 00       	call   80102bb0 <end_op>
+    cprintf("exec: fail\n");
+80100bc3:	83 ec 0c             	sub    $0xc,%esp
+80100bc6:	68 a1 70 10 80       	push   $0x801070a1
+80100bcb:	e8 90 fa ff ff       	call   80100660 <cprintf>
+    return -1;
+80100bd0:	83 c4 10             	add    $0x10,%esp
+80100bd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100bd8:	e9 7f fe ff ff       	jmp    80100a5c <exec+0x6c>
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100bdd:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+80100be3:	83 ec 08             	sub    $0x8,%esp
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100be6:	31 ff                	xor    %edi,%edi
+80100be8:	89 f3                	mov    %esi,%ebx
+  // Allocate two pages at the next page boundary.
+  // Make the first inaccessible.  Use the second as the user stack.
+  sz = PGROUNDUP(sz);
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80100bea:	50                   	push   %eax
+80100beb:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100bf1:	e8 1a 62 00 00       	call   80106e10 <clearpteu>
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100bf9:	83 c4 10             	add    $0x10,%esp
+80100bfc:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c02:	8b 00                	mov    (%eax),%eax
+80100c04:	85 c0                	test   %eax,%eax
+80100c06:	74 79                	je     80100c81 <exec+0x291>
+80100c08:	89 b5 ec fe ff ff    	mov    %esi,-0x114(%ebp)
+80100c0e:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+80100c14:	eb 13                	jmp    80100c29 <exec+0x239>
+80100c16:	8d 76 00             	lea    0x0(%esi),%esi
+80100c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(argc >= MAXARG)
+80100c20:	83 ff 20             	cmp    $0x20,%edi
+80100c23:	0f 84 7a ff ff ff    	je     80100ba3 <exec+0x1b3>
+      goto bad;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c29:	83 ec 0c             	sub    $0xc,%esp
+80100c2c:	50                   	push   %eax
+80100c2d:	e8 1e 3a 00 00       	call   80104650 <strlen>
+80100c32:	f7 d0                	not    %eax
+80100c34:	01 c3                	add    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100c36:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c39:	5a                   	pop    %edx
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+    if(argc >= MAXARG)
+      goto bad;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+80100c3a:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+80100c3d:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100c40:	e8 0b 3a 00 00       	call   80104650 <strlen>
+80100c45:	83 c0 01             	add    $0x1,%eax
+80100c48:	50                   	push   %eax
+80100c49:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c4c:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100c4f:	53                   	push   %ebx
+80100c50:	56                   	push   %esi
+80100c51:	e8 2a 63 00 00       	call   80106f80 <copyout>
+80100c56:	83 c4 20             	add    $0x20,%esp
+80100c59:	85 c0                	test   %eax,%eax
+80100c5b:	0f 88 42 ff ff ff    	js     80100ba3 <exec+0x1b3>
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100c61:	8b 45 0c             	mov    0xc(%ebp),%eax
+    if(argc >= MAXARG)
+      goto bad;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+    ustack[3+argc] = sp;
+80100c64:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100c6b:	83 c7 01             	add    $0x1,%edi
+    if(argc >= MAXARG)
+      goto bad;
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+    ustack[3+argc] = sp;
+80100c6e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+    goto bad;
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+  sp = sz;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+80100c74:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100c77:	85 c0                	test   %eax,%eax
+80100c79:	75 a5                	jne    80100c20 <exec+0x230>
+80100c7b:	8b b5 ec fe ff ff    	mov    -0x114(%ebp),%esi
+  }
+  ustack[3+argc] = 0;
+
+  ustack[0] = 0xffffffff;  // fake return PC
+  ustack[1] = argc;
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100c81:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100c88:	89 d9                	mov    %ebx,%ecx
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+    ustack[3+argc] = sp;
+  }
+  ustack[3+argc] = 0;
+80100c8a:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100c91:	00 00 00 00 
+
+  ustack[0] = 0xffffffff;  // fake return PC
+80100c95:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100c9c:	ff ff ff 
+  ustack[1] = argc;
+80100c9f:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100ca5:	29 c1                	sub    %eax,%ecx
+
+  sp -= (3+argc+1) * 4;
+80100ca7:	83 c0 0c             	add    $0xc,%eax
+80100caa:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100cac:	50                   	push   %eax
+80100cad:	52                   	push   %edx
+80100cae:	53                   	push   %ebx
+80100caf:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+  }
+  ustack[3+argc] = 0;
+
+  ustack[0] = 0xffffffff;  // fake return PC
+  ustack[1] = argc;
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+80100cb5:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+
+  sp -= (3+argc+1) * 4;
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80100cbb:	e8 c0 62 00 00       	call   80106f80 <copyout>
+80100cc0:	83 c4 10             	add    $0x10,%esp
+80100cc3:	85 c0                	test   %eax,%eax
+80100cc5:	0f 88 d8 fe ff ff    	js     80100ba3 <exec+0x1b3>
+    goto bad;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+80100ccb:	8b 45 08             	mov    0x8(%ebp),%eax
+80100cce:	0f b6 10             	movzbl (%eax),%edx
+80100cd1:	84 d2                	test   %dl,%dl
+80100cd3:	74 19                	je     80100cee <exec+0x2fe>
+80100cd5:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80100cd8:	83 c0 01             	add    $0x1,%eax
+    if(*s == '/')
+      last = s+1;
+80100cdb:	80 fa 2f             	cmp    $0x2f,%dl
+  sp -= (3+argc+1) * 4;
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+    goto bad;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+80100cde:	0f b6 10             	movzbl (%eax),%edx
+    if(*s == '/')
+      last = s+1;
+80100ce1:	0f 44 c8             	cmove  %eax,%ecx
+80100ce4:	83 c0 01             	add    $0x1,%eax
+  sp -= (3+argc+1) * 4;
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+    goto bad;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+80100ce7:	84 d2                	test   %dl,%dl
+80100ce9:	75 f0                	jne    80100cdb <exec+0x2eb>
+80100ceb:	89 4d 08             	mov    %ecx,0x8(%ebp)
+    if(*s == '/')
+      last = s+1;
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+80100cee:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100cf4:	50                   	push   %eax
+80100cf5:	6a 10                	push   $0x10
+80100cf7:	ff 75 08             	pushl  0x8(%ebp)
+80100cfa:	89 f8                	mov    %edi,%eax
+80100cfc:	83 c0 6c             	add    $0x6c,%eax
+80100cff:	50                   	push   %eax
+80100d00:	e8 0b 39 00 00       	call   80104610 <safestrcpy>
+
+  // Commit to the user image.
+  oldpgdir = curproc->pgdir;
+  curproc->pgdir = pgdir;
+80100d05:	8b 8d f0 fe ff ff    	mov    -0x110(%ebp),%ecx
+    if(*s == '/')
+      last = s+1;
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+
+  // Commit to the user image.
+  oldpgdir = curproc->pgdir;
+80100d0b:	89 f8                	mov    %edi,%eax
+80100d0d:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->pgdir = pgdir;
+  curproc->sz = sz;
+80100d10:	89 30                	mov    %esi,(%eax)
+      last = s+1;
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+
+  // Commit to the user image.
+  oldpgdir = curproc->pgdir;
+  curproc->pgdir = pgdir;
+80100d12:	89 48 04             	mov    %ecx,0x4(%eax)
+  curproc->sz = sz;
+  curproc->tf->eip = elf.entry;  // main
+80100d15:	89 c1                	mov    %eax,%ecx
+80100d17:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100d1d:	8b 40 18             	mov    0x18(%eax),%eax
+80100d20:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80100d23:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d26:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+80100d29:	89 0c 24             	mov    %ecx,(%esp)
+80100d2c:	e8 3f 5c 00 00       	call   80106970 <switchuvm>
+  freevm(oldpgdir);
+80100d31:	89 3c 24             	mov    %edi,(%esp)
+80100d34:	e8 b7 5f 00 00       	call   80106cf0 <freevm>
+  return 0;
+80100d39:	83 c4 10             	add    $0x10,%esp
+80100d3c:	31 c0                	xor    %eax,%eax
+80100d3e:	e9 19 fd ff ff       	jmp    80100a5c <exec+0x6c>
+80100d43:	66 90                	xchg   %ax,%ax
+80100d45:	66 90                	xchg   %ax,%ax
+80100d47:	66 90                	xchg   %ax,%ax
+80100d49:	66 90                	xchg   %ax,%ax
+80100d4b:	66 90                	xchg   %ax,%ax
+80100d4d:	66 90                	xchg   %ax,%ax
+80100d4f:	90                   	nop
+
+80100d50 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+80100d50:	55                   	push   %ebp
+80100d51:	89 e5                	mov    %esp,%ebp
+80100d53:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+80100d56:	68 ad 70 10 80       	push   $0x801070ad
+80100d5b:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100d60:	e8 4b 34 00 00       	call   801041b0 <initlock>
+}
+80100d65:	83 c4 10             	add    $0x10,%esp
+80100d68:	c9                   	leave  
+80100d69:	c3                   	ret    
+80100d6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100d70 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100d70:	55                   	push   %ebp
+80100d71:	89 e5                	mov    %esp,%ebp
+80100d73:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100d74:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
+}
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+80100d79:	83 ec 10             	sub    $0x10,%esp
+  struct file *f;
+
+  acquire(&ftable.lock);
+80100d7c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100d81:	e8 8a 35 00 00       	call   80104310 <acquire>
+80100d86:	83 c4 10             	add    $0x10,%esp
+80100d89:	eb 10                	jmp    80100d9b <filealloc+0x2b>
+80100d8b:	90                   	nop
+80100d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80100d90:	83 c3 18             	add    $0x18,%ebx
+80100d93:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100d99:	74 25                	je     80100dc0 <filealloc+0x50>
+    if(f->ref == 0){
+80100d9b:	8b 43 04             	mov    0x4(%ebx),%eax
+80100d9e:	85 c0                	test   %eax,%eax
+80100da0:	75 ee                	jne    80100d90 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80100da2:	83 ec 0c             	sub    $0xc,%esp
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    if(f->ref == 0){
+      f->ref = 1;
+80100da5:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+80100dac:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100db1:	e8 0a 36 00 00       	call   801043c0 <release>
+      return f;
+80100db6:	89 d8                	mov    %ebx,%eax
+80100db8:	83 c4 10             	add    $0x10,%esp
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80100dbb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100dbe:	c9                   	leave  
+80100dbf:	c3                   	ret    
+      f->ref = 1;
+      release(&ftable.lock);
+      return f;
+    }
+  }
+  release(&ftable.lock);
+80100dc0:	83 ec 0c             	sub    $0xc,%esp
+80100dc3:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100dc8:	e8 f3 35 00 00       	call   801043c0 <release>
+  return 0;
+80100dcd:	83 c4 10             	add    $0x10,%esp
+80100dd0:	31 c0                	xor    %eax,%eax
+}
+80100dd2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100dd5:	c9                   	leave  
+80100dd6:	c3                   	ret    
+80100dd7:	89 f6                	mov    %esi,%esi
+80100dd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100de0 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80100de0:	55                   	push   %ebp
+80100de1:	89 e5                	mov    %esp,%ebp
+80100de3:	53                   	push   %ebx
+80100de4:	83 ec 10             	sub    $0x10,%esp
+80100de7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+80100dea:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100def:	e8 1c 35 00 00       	call   80104310 <acquire>
+  if(f->ref < 1)
+80100df4:	8b 43 04             	mov    0x4(%ebx),%eax
+80100df7:	83 c4 10             	add    $0x10,%esp
+80100dfa:	85 c0                	test   %eax,%eax
+80100dfc:	7e 1a                	jle    80100e18 <filedup+0x38>
+    panic("filedup");
+  f->ref++;
+80100dfe:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80100e01:	83 ec 0c             	sub    $0xc,%esp
+filedup(struct file *f)
+{
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("filedup");
+  f->ref++;
+80100e04:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+80100e07:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e0c:	e8 af 35 00 00       	call   801043c0 <release>
+  return f;
+}
+80100e11:	89 d8                	mov    %ebx,%eax
+80100e13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e16:	c9                   	leave  
+80100e17:	c3                   	ret    
+struct file*
+filedup(struct file *f)
+{
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("filedup");
+80100e18:	83 ec 0c             	sub    $0xc,%esp
+80100e1b:	68 b4 70 10 80       	push   $0x801070b4
+80100e20:	e8 4b f5 ff ff       	call   80100370 <panic>
+80100e25:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100e29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80100e30 <fileclose>:
+}
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+80100e30:	55                   	push   %ebp
+80100e31:	89 e5                	mov    %esp,%ebp
+80100e33:	57                   	push   %edi
+80100e34:	56                   	push   %esi
+80100e35:	53                   	push   %ebx
+80100e36:	83 ec 28             	sub    $0x28,%esp
+80100e39:	8b 7d 08             	mov    0x8(%ebp),%edi
+  struct file ff;
+
+  acquire(&ftable.lock);
+80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e41:	e8 ca 34 00 00       	call   80104310 <acquire>
+  if(f->ref < 1)
+80100e46:	8b 47 04             	mov    0x4(%edi),%eax
+80100e49:	83 c4 10             	add    $0x10,%esp
+80100e4c:	85 c0                	test   %eax,%eax
+80100e4e:	0f 8e 9b 00 00 00    	jle    80100eef <fileclose+0xbf>
+    panic("fileclose");
+  if(--f->ref > 0){
+80100e54:	83 e8 01             	sub    $0x1,%eax
+80100e57:	85 c0                	test   %eax,%eax
+80100e59:	89 47 04             	mov    %eax,0x4(%edi)
+80100e5c:	74 1a                	je     80100e78 <fileclose+0x48>
+    release(&ftable.lock);
+80100e5e:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
+  else if(ff.type == FD_INODE){
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80100e65:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100e68:	5b                   	pop    %ebx
+80100e69:	5e                   	pop    %esi
+80100e6a:	5f                   	pop    %edi
+80100e6b:	5d                   	pop    %ebp
+
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("fileclose");
+  if(--f->ref > 0){
+    release(&ftable.lock);
+80100e6c:	e9 4f 35 00 00       	jmp    801043c0 <release>
+80100e71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return;
+  }
+  ff = *f;
+80100e78:	0f b6 47 09          	movzbl 0x9(%edi),%eax
+80100e7c:	8b 1f                	mov    (%edi),%ebx
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+80100e7e:	83 ec 0c             	sub    $0xc,%esp
+    panic("fileclose");
+  if(--f->ref > 0){
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+80100e81:	8b 77 0c             	mov    0xc(%edi),%esi
+  f->ref = 0;
+  f->type = FD_NONE;
+80100e84:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
+    panic("fileclose");
+  if(--f->ref > 0){
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+80100e8a:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100e8d:	8b 47 10             	mov    0x10(%edi),%eax
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+80100e90:	68 c0 ff 10 80       	push   $0x8010ffc0
+    panic("fileclose");
+  if(--f->ref > 0){
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+80100e95:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+80100e98:	e8 23 35 00 00       	call   801043c0 <release>
+
+  if(ff.type == FD_PIPE)
+80100e9d:	83 c4 10             	add    $0x10,%esp
+80100ea0:	83 fb 01             	cmp    $0x1,%ebx
+80100ea3:	74 13                	je     80100eb8 <fileclose+0x88>
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+80100ea5:	83 fb 02             	cmp    $0x2,%ebx
+80100ea8:	74 26                	je     80100ed0 <fileclose+0xa0>
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80100eaa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100ead:	5b                   	pop    %ebx
+80100eae:	5e                   	pop    %esi
+80100eaf:	5f                   	pop    %edi
+80100eb0:	5d                   	pop    %ebp
+80100eb1:	c3                   	ret    
+80100eb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+
+  if(ff.type == FD_PIPE)
+    pipeclose(ff.pipe, ff.writable);
+80100eb8:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100ebc:	83 ec 08             	sub    $0x8,%esp
+80100ebf:	53                   	push   %ebx
+80100ec0:	56                   	push   %esi
+80100ec1:	e8 1a 24 00 00       	call   801032e0 <pipeclose>
+80100ec6:	83 c4 10             	add    $0x10,%esp
+80100ec9:	eb df                	jmp    80100eaa <fileclose+0x7a>
+80100ecb:	90                   	nop
+80100ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  else if(ff.type == FD_INODE){
+    begin_op();
+80100ed0:	e8 6b 1c 00 00       	call   80102b40 <begin_op>
+    iput(ff.ip);
+80100ed5:	83 ec 0c             	sub    $0xc,%esp
+80100ed8:	ff 75 e0             	pushl  -0x20(%ebp)
+80100edb:	e8 b0 08 00 00       	call   80101790 <iput>
+    end_op();
+80100ee0:	83 c4 10             	add    $0x10,%esp
+  }
+}
+80100ee3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100ee6:	5b                   	pop    %ebx
+80100ee7:	5e                   	pop    %esi
+80100ee8:	5f                   	pop    %edi
+80100ee9:	5d                   	pop    %ebp
+  if(ff.type == FD_PIPE)
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+    begin_op();
+    iput(ff.ip);
+    end_op();
+80100eea:	e9 c1 1c 00 00       	jmp    80102bb0 <end_op>
+{
+  struct file ff;
+
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("fileclose");
+80100eef:	83 ec 0c             	sub    $0xc,%esp
+80100ef2:	68 bc 70 10 80       	push   $0x801070bc
+80100ef7:	e8 74 f4 ff ff       	call   80100370 <panic>
+80100efc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100f00 <filestat>:
+}
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80100f00:	55                   	push   %ebp
+80100f01:	89 e5                	mov    %esp,%ebp
+80100f03:	53                   	push   %ebx
+80100f04:	83 ec 04             	sub    $0x4,%esp
+80100f07:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+80100f0a:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100f0d:	75 31                	jne    80100f40 <filestat+0x40>
+    ilock(f->ip);
+80100f0f:	83 ec 0c             	sub    $0xc,%esp
+80100f12:	ff 73 10             	pushl  0x10(%ebx)
+80100f15:	e8 46 07 00 00       	call   80101660 <ilock>
+    stati(f->ip, st);
+80100f1a:	58                   	pop    %eax
+80100f1b:	5a                   	pop    %edx
+80100f1c:	ff 75 0c             	pushl  0xc(%ebp)
+80100f1f:	ff 73 10             	pushl  0x10(%ebx)
+80100f22:	e8 e9 09 00 00       	call   80101910 <stati>
+    iunlock(f->ip);
+80100f27:	59                   	pop    %ecx
+80100f28:	ff 73 10             	pushl  0x10(%ebx)
+80100f2b:	e8 10 08 00 00       	call   80101740 <iunlock>
+    return 0;
+80100f30:	83 c4 10             	add    $0x10,%esp
+80100f33:	31 c0                	xor    %eax,%eax
+  }
+  return -1;
+}
+80100f35:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100f38:	c9                   	leave  
+80100f39:	c3                   	ret    
+80100f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    ilock(f->ip);
+    stati(f->ip, st);
+    iunlock(f->ip);
+    return 0;
+  }
+  return -1;
+80100f40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100f45:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100f48:	c9                   	leave  
+80100f49:	c3                   	ret    
+80100f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80100f50 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+80100f50:	55                   	push   %ebp
+80100f51:	89 e5                	mov    %esp,%ebp
+80100f53:	57                   	push   %edi
+80100f54:	56                   	push   %esi
+80100f55:	53                   	push   %ebx
+80100f56:	83 ec 0c             	sub    $0xc,%esp
+80100f59:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100f5c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80100f5f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+80100f62:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+80100f66:	74 60                	je     80100fc8 <fileread+0x78>
+    return -1;
+  if(f->type == FD_PIPE)
+80100f68:	8b 03                	mov    (%ebx),%eax
+80100f6a:	83 f8 01             	cmp    $0x1,%eax
+80100f6d:	74 41                	je     80100fb0 <fileread+0x60>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80100f6f:	83 f8 02             	cmp    $0x2,%eax
+80100f72:	75 5b                	jne    80100fcf <fileread+0x7f>
+    ilock(f->ip);
+80100f74:	83 ec 0c             	sub    $0xc,%esp
+80100f77:	ff 73 10             	pushl  0x10(%ebx)
+80100f7a:	e8 e1 06 00 00       	call   80101660 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+80100f7f:	57                   	push   %edi
+80100f80:	ff 73 14             	pushl  0x14(%ebx)
+80100f83:	56                   	push   %esi
+80100f84:	ff 73 10             	pushl  0x10(%ebx)
+80100f87:	e8 b4 09 00 00       	call   80101940 <readi>
+80100f8c:	83 c4 20             	add    $0x20,%esp
+80100f8f:	85 c0                	test   %eax,%eax
+80100f91:	89 c6                	mov    %eax,%esi
+80100f93:	7e 03                	jle    80100f98 <fileread+0x48>
+      f->off += r;
+80100f95:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80100f98:	83 ec 0c             	sub    $0xc,%esp
+80100f9b:	ff 73 10             	pushl  0x10(%ebx)
+80100f9e:	e8 9d 07 00 00       	call   80101740 <iunlock>
+    return r;
+80100fa3:	83 c4 10             	add    $0x10,%esp
+    return -1;
+  if(f->type == FD_PIPE)
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+    ilock(f->ip);
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+80100fa6:	89 f0                	mov    %esi,%eax
+      f->off += r;
+    iunlock(f->ip);
+    return r;
+  }
+  panic("fileread");
+}
+80100fa8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fab:	5b                   	pop    %ebx
+80100fac:	5e                   	pop    %esi
+80100fad:	5f                   	pop    %edi
+80100fae:	5d                   	pop    %ebp
+80100faf:	c3                   	ret    
+  int r;
+
+  if(f->readable == 0)
+    return -1;
+  if(f->type == FD_PIPE)
+    return piperead(f->pipe, addr, n);
+80100fb0:	8b 43 0c             	mov    0xc(%ebx),%eax
+80100fb3:	89 45 08             	mov    %eax,0x8(%ebp)
+      f->off += r;
+    iunlock(f->ip);
+    return r;
+  }
+  panic("fileread");
+}
+80100fb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100fb9:	5b                   	pop    %ebx
+80100fba:	5e                   	pop    %esi
+80100fbb:	5f                   	pop    %edi
+80100fbc:	5d                   	pop    %ebp
+  int r;
+
+  if(f->readable == 0)
+    return -1;
+  if(f->type == FD_PIPE)
+    return piperead(f->pipe, addr, n);
+80100fbd:	e9 be 24 00 00       	jmp    80103480 <piperead>
+80100fc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+fileread(struct file *f, char *addr, int n)
+{
+  int r;
+
+  if(f->readable == 0)
+    return -1;
+80100fc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100fcd:	eb d9                	jmp    80100fa8 <fileread+0x58>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+      f->off += r;
+    iunlock(f->ip);
+    return r;
+  }
+  panic("fileread");
+80100fcf:	83 ec 0c             	sub    $0xc,%esp
+80100fd2:	68 c6 70 10 80       	push   $0x801070c6
+80100fd7:	e8 94 f3 ff ff       	call   80100370 <panic>
+80100fdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100fe0 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80100fe0:	55                   	push   %ebp
+80100fe1:	89 e5                	mov    %esp,%ebp
+80100fe3:	57                   	push   %edi
+80100fe4:	56                   	push   %esi
+80100fe5:	53                   	push   %ebx
+80100fe6:	83 ec 1c             	sub    $0x1c,%esp
+80100fe9:	8b 75 08             	mov    0x8(%ebp),%esi
+80100fec:	8b 45 0c             	mov    0xc(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+80100fef:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80100ff3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80100ff6:	8b 45 10             	mov    0x10(%ebp),%eax
+80100ff9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int r;
+
+  if(f->writable == 0)
+80100ffc:	0f 84 aa 00 00 00    	je     801010ac <filewrite+0xcc>
+    return -1;
+  if(f->type == FD_PIPE)
+80101002:	8b 06                	mov    (%esi),%eax
+80101004:	83 f8 01             	cmp    $0x1,%eax
+80101007:	0f 84 c2 00 00 00    	je     801010cf <filewrite+0xef>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+8010100d:	83 f8 02             	cmp    $0x2,%eax
+80101010:	0f 85 d8 00 00 00    	jne    801010ee <filewrite+0x10e>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+80101016:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101019:	31 ff                	xor    %edi,%edi
+8010101b:	85 c0                	test   %eax,%eax
+8010101d:	7f 34                	jg     80101053 <filewrite+0x73>
+8010101f:	e9 9c 00 00 00       	jmp    801010c0 <filewrite+0xe0>
+80101024:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+80101028:	01 46 14             	add    %eax,0x14(%esi)
+      iunlock(f->ip);
+8010102b:	83 ec 0c             	sub    $0xc,%esp
+8010102e:	ff 76 10             	pushl  0x10(%esi)
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+80101031:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+80101034:	e8 07 07 00 00       	call   80101740 <iunlock>
+      end_op();
+80101039:	e8 72 1b 00 00       	call   80102bb0 <end_op>
+8010103e:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101041:	83 c4 10             	add    $0x10,%esp
+
+      if(r < 0)
+        break;
+      if(r != n1)
+80101044:	39 d8                	cmp    %ebx,%eax
+80101046:	0f 85 95 00 00 00    	jne    801010e1 <filewrite+0x101>
+        panic("short filewrite");
+      i += r;
+8010104c:	01 c7                	add    %eax,%edi
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+8010104e:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101051:	7e 6d                	jle    801010c0 <filewrite+0xe0>
+      int n1 = n - i;
+80101053:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101056:	b8 00 06 00 00       	mov    $0x600,%eax
+8010105b:	29 fb                	sub    %edi,%ebx
+8010105d:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101063:	0f 4f d8             	cmovg  %eax,%ebx
+      if(n1 > max)
+        n1 = max;
+
+      begin_op();
+80101066:	e8 d5 1a 00 00       	call   80102b40 <begin_op>
+      ilock(f->ip);
+8010106b:	83 ec 0c             	sub    $0xc,%esp
+8010106e:	ff 76 10             	pushl  0x10(%esi)
+80101071:	e8 ea 05 00 00       	call   80101660 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+80101076:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101079:	53                   	push   %ebx
+8010107a:	ff 76 14             	pushl  0x14(%esi)
+8010107d:	01 f8                	add    %edi,%eax
+8010107f:	50                   	push   %eax
+80101080:	ff 76 10             	pushl  0x10(%esi)
+80101083:	e8 b8 09 00 00       	call   80101a40 <writei>
+80101088:	83 c4 20             	add    $0x20,%esp
+8010108b:	85 c0                	test   %eax,%eax
+8010108d:	7f 99                	jg     80101028 <filewrite+0x48>
+        f->off += r;
+      iunlock(f->ip);
+8010108f:	83 ec 0c             	sub    $0xc,%esp
+80101092:	ff 76 10             	pushl  0x10(%esi)
+80101095:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101098:	e8 a3 06 00 00       	call   80101740 <iunlock>
+      end_op();
+8010109d:	e8 0e 1b 00 00       	call   80102bb0 <end_op>
+
+      if(r < 0)
+801010a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010a5:	83 c4 10             	add    $0x10,%esp
+801010a8:	85 c0                	test   %eax,%eax
+801010aa:	74 98                	je     80101044 <filewrite+0x64>
+      i += r;
+    }
+    return i == n ? n : -1;
+  }
+  panic("filewrite");
+}
+801010ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        break;
+      if(r != n1)
+        panic("short filewrite");
+      i += r;
+    }
+    return i == n ? n : -1;
+801010af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  panic("filewrite");
+}
+801010b4:	5b                   	pop    %ebx
+801010b5:	5e                   	pop    %esi
+801010b6:	5f                   	pop    %edi
+801010b7:	5d                   	pop    %ebp
+801010b8:	c3                   	ret    
+801010b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        break;
+      if(r != n1)
+        panic("short filewrite");
+      i += r;
+    }
+    return i == n ? n : -1;
+801010c0:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+801010c3:	75 e7                	jne    801010ac <filewrite+0xcc>
+  }
+  panic("filewrite");
+}
+801010c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801010c8:	89 f8                	mov    %edi,%eax
+801010ca:	5b                   	pop    %ebx
+801010cb:	5e                   	pop    %esi
+801010cc:	5f                   	pop    %edi
+801010cd:	5d                   	pop    %ebp
+801010ce:	c3                   	ret    
+  int r;
+
+  if(f->writable == 0)
+    return -1;
+  if(f->type == FD_PIPE)
+    return pipewrite(f->pipe, addr, n);
+801010cf:	8b 46 0c             	mov    0xc(%esi),%eax
+801010d2:	89 45 08             	mov    %eax,0x8(%ebp)
+      i += r;
+    }
+    return i == n ? n : -1;
+  }
+  panic("filewrite");
+}
+801010d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801010d8:	5b                   	pop    %ebx
+801010d9:	5e                   	pop    %esi
+801010da:	5f                   	pop    %edi
+801010db:	5d                   	pop    %ebp
+  int r;
+
+  if(f->writable == 0)
+    return -1;
+  if(f->type == FD_PIPE)
+    return pipewrite(f->pipe, addr, n);
+801010dc:	e9 9f 22 00 00       	jmp    80103380 <pipewrite>
+      end_op();
+
+      if(r < 0)
+        break;
+      if(r != n1)
+        panic("short filewrite");
+801010e1:	83 ec 0c             	sub    $0xc,%esp
+801010e4:	68 cf 70 10 80       	push   $0x801070cf
+801010e9:	e8 82 f2 ff ff       	call   80100370 <panic>
+      i += r;
+    }
+    return i == n ? n : -1;
+  }
+  panic("filewrite");
+801010ee:	83 ec 0c             	sub    $0xc,%esp
+801010f1:	68 d5 70 10 80       	push   $0x801070d5
+801010f6:	e8 75 f2 ff ff       	call   80100370 <panic>
+801010fb:	66 90                	xchg   %ax,%ax
+801010fd:	66 90                	xchg   %ax,%ax
+801010ff:	90                   	nop
+
+80101100 <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+80101100:	55                   	push   %ebp
+80101101:	89 e5                	mov    %esp,%ebp
+80101103:	56                   	push   %esi
+80101104:	53                   	push   %ebx
+80101105:	89 d3                	mov    %edx,%ebx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+80101107:	c1 ea 0c             	shr    $0xc,%edx
+8010110a:	03 15 d8 09 11 80    	add    0x801109d8,%edx
+80101110:	83 ec 08             	sub    $0x8,%esp
+80101113:	52                   	push   %edx
+80101114:	50                   	push   %eax
+80101115:	e8 b6 ef ff ff       	call   801000d0 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+8010111a:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+8010111c:	81 e3 ff 0f 00 00    	and    $0xfff,%ebx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+80101122:	ba 01 00 00 00       	mov    $0x1,%edx
+80101127:	83 e1 07             	and    $0x7,%ecx
+  if((bp->data[bi/8] & m) == 0)
+8010112a:	c1 fb 03             	sar    $0x3,%ebx
+8010112d:	83 c4 10             	add    $0x10,%esp
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+80101130:	d3 e2                	shl    %cl,%edx
+  if((bp->data[bi/8] & m) == 0)
+80101132:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+80101137:	85 d1                	test   %edx,%ecx
+80101139:	74 27                	je     80101162 <bfree+0x62>
+8010113b:	89 c6                	mov    %eax,%esi
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+8010113d:	f7 d2                	not    %edx
+8010113f:	89 c8                	mov    %ecx,%eax
+  log_write(bp);
+80101141:	83 ec 0c             	sub    $0xc,%esp
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+80101144:	21 d0                	and    %edx,%eax
+80101146:	88 44 1e 5c          	mov    %al,0x5c(%esi,%ebx,1)
+  log_write(bp);
+8010114a:	56                   	push   %esi
+8010114b:	e8 d0 1b 00 00       	call   80102d20 <log_write>
+  brelse(bp);
+80101150:	89 34 24             	mov    %esi,(%esp)
+80101153:	e8 88 f0 ff ff       	call   801001e0 <brelse>
+}
+80101158:	83 c4 10             	add    $0x10,%esp
+8010115b:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010115e:	5b                   	pop    %ebx
+8010115f:	5e                   	pop    %esi
+80101160:	5d                   	pop    %ebp
+80101161:	c3                   	ret    
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+80101162:	83 ec 0c             	sub    $0xc,%esp
+80101165:	68 df 70 10 80       	push   $0x801070df
+8010116a:	e8 01 f2 ff ff       	call   80100370 <panic>
+8010116f:	90                   	nop
+
+80101170 <balloc>:
+// Blocks.
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+80101170:	55                   	push   %ebp
+80101171:	89 e5                	mov    %esp,%ebp
+80101173:	57                   	push   %edi
+80101174:	56                   	push   %esi
+80101175:	53                   	push   %ebx
+80101176:	83 ec 1c             	sub    $0x1c,%esp
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+80101179:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
+// Blocks.
+
+// Allocate a zeroed disk block.
+static uint
+balloc(uint dev)
+{
+8010117f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+80101182:	85 c9                	test   %ecx,%ecx
+80101184:	0f 84 85 00 00 00    	je     8010120f <balloc+0x9f>
+8010118a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+80101191:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101194:	83 ec 08             	sub    $0x8,%esp
+80101197:	89 f0                	mov    %esi,%eax
+80101199:	c1 f8 0c             	sar    $0xc,%eax
+8010119c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+801011a2:	50                   	push   %eax
+801011a3:	ff 75 d8             	pushl  -0x28(%ebp)
+801011a6:	e8 25 ef ff ff       	call   801000d0 <bread>
+801011ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801011ae:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+801011b3:	83 c4 10             	add    $0x10,%esp
+801011b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+801011b9:	31 c0                	xor    %eax,%eax
+801011bb:	eb 2d                	jmp    801011ea <balloc+0x7a>
+801011bd:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+801011c0:	89 c1                	mov    %eax,%ecx
+801011c2:	ba 01 00 00 00       	mov    $0x1,%edx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+801011c7:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+801011ca:	83 e1 07             	and    $0x7,%ecx
+801011cd:	d3 e2                	shl    %cl,%edx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+801011cf:	89 c1                	mov    %eax,%ecx
+801011d1:	c1 f9 03             	sar    $0x3,%ecx
+801011d4:	0f b6 7c 0b 5c       	movzbl 0x5c(%ebx,%ecx,1),%edi
+801011d9:	85 d7                	test   %edx,%edi
+801011db:	74 43                	je     80101220 <balloc+0xb0>
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+801011dd:	83 c0 01             	add    $0x1,%eax
+801011e0:	83 c6 01             	add    $0x1,%esi
+801011e3:	3d 00 10 00 00       	cmp    $0x1000,%eax
+801011e8:	74 05                	je     801011ef <balloc+0x7f>
+801011ea:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+801011ed:	72 d1                	jb     801011c0 <balloc+0x50>
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+801011ef:	83 ec 0c             	sub    $0xc,%esp
+801011f2:	ff 75 e4             	pushl  -0x1c(%ebp)
+801011f5:	e8 e6 ef ff ff       	call   801001e0 <brelse>
+{
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+801011fa:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+80101201:	83 c4 10             	add    $0x10,%esp
+80101204:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101207:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+8010120d:	77 82                	ja     80101191 <balloc+0x21>
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+8010120f:	83 ec 0c             	sub    $0xc,%esp
+80101212:	68 f2 70 10 80       	push   $0x801070f2
+80101217:	e8 54 f1 ff ff       	call   80100370 <panic>
+8010121c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101220:	09 fa                	or     %edi,%edx
+80101222:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+80101225:	83 ec 0c             	sub    $0xc,%esp
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101228:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+8010122c:	57                   	push   %edi
+8010122d:	e8 ee 1a 00 00       	call   80102d20 <log_write>
+        brelse(bp);
+80101232:	89 3c 24             	mov    %edi,(%esp)
+80101235:	e8 a6 ef ff ff       	call   801001e0 <brelse>
+static void
+bzero(int dev, int bno)
+{
+  struct buf *bp;
+
+  bp = bread(dev, bno);
+8010123a:	58                   	pop    %eax
+8010123b:	5a                   	pop    %edx
+8010123c:	56                   	push   %esi
+8010123d:	ff 75 d8             	pushl  -0x28(%ebp)
+80101240:	e8 8b ee ff ff       	call   801000d0 <bread>
+80101245:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+80101247:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010124a:	83 c4 0c             	add    $0xc,%esp
+8010124d:	68 00 02 00 00       	push   $0x200
+80101252:	6a 00                	push   $0x0
+80101254:	50                   	push   %eax
+80101255:	e8 b6 31 00 00       	call   80104410 <memset>
+  log_write(bp);
+8010125a:	89 1c 24             	mov    %ebx,(%esp)
+8010125d:	e8 be 1a 00 00       	call   80102d20 <log_write>
+  brelse(bp);
+80101262:	89 1c 24             	mov    %ebx,(%esp)
+80101265:	e8 76 ef ff ff       	call   801001e0 <brelse>
+      }
+    }
+    brelse(bp);
+  }
+  panic("balloc: out of blocks");
+}
+8010126a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010126d:	89 f0                	mov    %esi,%eax
+8010126f:	5b                   	pop    %ebx
+80101270:	5e                   	pop    %esi
+80101271:	5f                   	pop    %edi
+80101272:	5d                   	pop    %ebp
+80101273:	c3                   	ret    
+80101274:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010127a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101280 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101280:	55                   	push   %ebp
+80101281:	89 e5                	mov    %esp,%ebp
+80101283:	57                   	push   %edi
+80101284:	56                   	push   %esi
+80101285:	53                   	push   %ebx
+80101286:	89 c7                	mov    %eax,%edi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101288:	31 f6                	xor    %esi,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+8010128a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+8010128f:	83 ec 28             	sub    $0x28,%esp
+80101292:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+80101295:	68 e0 09 11 80       	push   $0x801109e0
+8010129a:	e8 71 30 00 00       	call   80104310 <acquire>
+8010129f:	83 c4 10             	add    $0x10,%esp
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801012a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801012a5:	eb 1b                	jmp    801012c2 <iget+0x42>
+801012a7:	89 f6                	mov    %esi,%esi
+801012a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+801012b0:	85 f6                	test   %esi,%esi
+801012b2:	74 44                	je     801012f8 <iget+0x78>
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801012b4:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801012ba:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+801012c0:	74 4e                	je     80101310 <iget+0x90>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+801012c2:	8b 4b 08             	mov    0x8(%ebx),%ecx
+801012c5:	85 c9                	test   %ecx,%ecx
+801012c7:	7e e7                	jle    801012b0 <iget+0x30>
+801012c9:	39 3b                	cmp    %edi,(%ebx)
+801012cb:	75 e3                	jne    801012b0 <iget+0x30>
+801012cd:	39 53 04             	cmp    %edx,0x4(%ebx)
+801012d0:	75 de                	jne    801012b0 <iget+0x30>
+      ip->ref++;
+      release(&icache.lock);
+801012d2:	83 ec 0c             	sub    $0xc,%esp
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+801012d5:	83 c1 01             	add    $0x1,%ecx
+      release(&icache.lock);
+      return ip;
+801012d8:	89 de                	mov    %ebx,%esi
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+801012da:	68 e0 09 11 80       	push   $0x801109e0
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+801012df:	89 4b 08             	mov    %ecx,0x8(%ebx)
+      release(&icache.lock);
+801012e2:	e8 d9 30 00 00       	call   801043c0 <release>
+      return ip;
+801012e7:	83 c4 10             	add    $0x10,%esp
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+
+  return ip;
+}
+801012ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801012ed:	89 f0                	mov    %esi,%eax
+801012ef:	5b                   	pop    %ebx
+801012f0:	5e                   	pop    %esi
+801012f1:	5f                   	pop    %edi
+801012f2:	5d                   	pop    %ebp
+801012f3:	c3                   	ret    
+801012f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+801012f8:	85 c9                	test   %ecx,%ecx
+801012fa:	0f 44 f3             	cmove  %ebx,%esi
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+801012fd:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101303:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101309:	75 b7                	jne    801012c2 <iget+0x42>
+8010130b:	90                   	nop
+8010130c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+80101310:	85 f6                	test   %esi,%esi
+80101312:	74 2d                	je     80101341 <iget+0xc1>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+80101314:	83 ec 0c             	sub    $0xc,%esp
+  // Recycle an inode cache entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+
+  ip = empty;
+  ip->dev = dev;
+80101317:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+80101319:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+8010131c:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+80101323:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+8010132a:	68 e0 09 11 80       	push   $0x801109e0
+8010132f:	e8 8c 30 00 00       	call   801043c0 <release>
+
+  return ip;
+80101334:	83 c4 10             	add    $0x10,%esp
+}
+80101337:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010133a:	89 f0                	mov    %esi,%eax
+8010133c:	5b                   	pop    %ebx
+8010133d:	5e                   	pop    %esi
+8010133e:	5f                   	pop    %edi
+8010133f:	5d                   	pop    %ebp
+80101340:	c3                   	ret    
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+80101341:	83 ec 0c             	sub    $0xc,%esp
+80101344:	68 08 71 10 80       	push   $0x80107108
+80101349:	e8 22 f0 ff ff       	call   80100370 <panic>
+8010134e:	66 90                	xchg   %ax,%ax
+
+80101350 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101350:	55                   	push   %ebp
+80101351:	89 e5                	mov    %esp,%ebp
+80101353:	57                   	push   %edi
+80101354:	56                   	push   %esi
+80101355:	53                   	push   %ebx
+80101356:	89 c6                	mov    %eax,%esi
+80101358:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+8010135b:	83 fa 0b             	cmp    $0xb,%edx
+8010135e:	77 18                	ja     80101378 <bmap+0x28>
+80101360:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+    if((addr = ip->addrs[bn]) == 0)
+80101363:	8b 43 5c             	mov    0x5c(%ebx),%eax
+80101366:	85 c0                	test   %eax,%eax
+80101368:	74 76                	je     801013e0 <bmap+0x90>
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+8010136a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010136d:	5b                   	pop    %ebx
+8010136e:	5e                   	pop    %esi
+8010136f:	5f                   	pop    %edi
+80101370:	5d                   	pop    %ebp
+80101371:	c3                   	ret    
+80101372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+80101378:	8d 5a f4             	lea    -0xc(%edx),%ebx
+
+  if(bn < NINDIRECT){
+8010137b:	83 fb 7f             	cmp    $0x7f,%ebx
+8010137e:	0f 87 83 00 00 00    	ja     80101407 <bmap+0xb7>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101384:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+8010138a:	85 c0                	test   %eax,%eax
+8010138c:	74 6a                	je     801013f8 <bmap+0xa8>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+8010138e:	83 ec 08             	sub    $0x8,%esp
+80101391:	50                   	push   %eax
+80101392:	ff 36                	pushl  (%esi)
+80101394:	e8 37 ed ff ff       	call   801000d0 <bread>
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+80101399:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+8010139d:	83 c4 10             	add    $0x10,%esp
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+801013a0:	89 c7                	mov    %eax,%edi
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+801013a2:	8b 1a                	mov    (%edx),%ebx
+801013a4:	85 db                	test   %ebx,%ebx
+801013a6:	75 1d                	jne    801013c5 <bmap+0x75>
+      a[bn] = addr = balloc(ip->dev);
+801013a8:	8b 06                	mov    (%esi),%eax
+801013aa:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+801013ad:	e8 be fd ff ff       	call   80101170 <balloc>
+801013b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      log_write(bp);
+801013b5:	83 ec 0c             	sub    $0xc,%esp
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+801013b8:	89 c3                	mov    %eax,%ebx
+801013ba:	89 02                	mov    %eax,(%edx)
+      log_write(bp);
+801013bc:	57                   	push   %edi
+801013bd:	e8 5e 19 00 00       	call   80102d20 <log_write>
+801013c2:	83 c4 10             	add    $0x10,%esp
+    }
+    brelse(bp);
+801013c5:	83 ec 0c             	sub    $0xc,%esp
+801013c8:	57                   	push   %edi
+801013c9:	e8 12 ee ff ff       	call   801001e0 <brelse>
+801013ce:	83 c4 10             	add    $0x10,%esp
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+801013d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+801013d4:	89 d8                	mov    %ebx,%eax
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+801013d6:	5b                   	pop    %ebx
+801013d7:	5e                   	pop    %esi
+801013d8:	5f                   	pop    %edi
+801013d9:	5d                   	pop    %ebp
+801013da:	c3                   	ret    
+801013db:	90                   	nop
+801013dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+801013e0:	8b 06                	mov    (%esi),%eax
+801013e2:	e8 89 fd ff ff       	call   80101170 <balloc>
+801013e7:	89 43 5c             	mov    %eax,0x5c(%ebx)
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+801013ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013ed:	5b                   	pop    %ebx
+801013ee:	5e                   	pop    %esi
+801013ef:	5f                   	pop    %edi
+801013f0:	5d                   	pop    %ebp
+801013f1:	c3                   	ret    
+801013f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  bn -= NDIRECT;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+801013f8:	8b 06                	mov    (%esi),%eax
+801013fa:	e8 71 fd ff ff       	call   80101170 <balloc>
+801013ff:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+80101405:	eb 87                	jmp    8010138e <bmap+0x3e>
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+80101407:	83 ec 0c             	sub    $0xc,%esp
+8010140a:	68 18 71 10 80       	push   $0x80107118
+8010140f:	e8 5c ef ff ff       	call   80100370 <panic>
+80101414:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010141a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101420 <readsb>:
+struct superblock sb; 
+
+// Read the super block.
+void
+readsb(int dev, struct superblock *sb)
+{
+80101420:	55                   	push   %ebp
+80101421:	89 e5                	mov    %esp,%ebp
+80101423:	56                   	push   %esi
+80101424:	53                   	push   %ebx
+80101425:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct buf *bp;
+
+  bp = bread(dev, 1);
+80101428:	83 ec 08             	sub    $0x8,%esp
+8010142b:	6a 01                	push   $0x1
+8010142d:	ff 75 08             	pushl  0x8(%ebp)
+80101430:	e8 9b ec ff ff       	call   801000d0 <bread>
+80101435:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+80101437:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010143a:	83 c4 0c             	add    $0xc,%esp
+8010143d:	6a 1c                	push   $0x1c
+8010143f:	50                   	push   %eax
+80101440:	56                   	push   %esi
+80101441:	e8 7a 30 00 00       	call   801044c0 <memmove>
+  brelse(bp);
+80101446:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101449:	83 c4 10             	add    $0x10,%esp
+}
+8010144c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010144f:	5b                   	pop    %ebx
+80101450:	5e                   	pop    %esi
+80101451:	5d                   	pop    %ebp
+{
+  struct buf *bp;
+
+  bp = bread(dev, 1);
+  memmove(sb, bp->data, sizeof(*sb));
+  brelse(bp);
+80101452:	e9 89 ed ff ff       	jmp    801001e0 <brelse>
+80101457:	89 f6                	mov    %esi,%esi
+80101459:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101460 <iinit>:
+  struct inode inode[NINODE];
+} icache;
+
+void
+iinit(int dev)
+{
+80101460:	55                   	push   %ebp
+80101461:	89 e5                	mov    %esp,%ebp
+80101463:	53                   	push   %ebx
+80101464:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+80101469:	83 ec 0c             	sub    $0xc,%esp
+  int i = 0;
+  
+  initlock(&icache.lock, "icache");
+8010146c:	68 2b 71 10 80       	push   $0x8010712b
+80101471:	68 e0 09 11 80       	push   $0x801109e0
+80101476:	e8 35 2d 00 00       	call   801041b0 <initlock>
+8010147b:	83 c4 10             	add    $0x10,%esp
+8010147e:	66 90                	xchg   %ax,%ax
+  for(i = 0; i < NINODE; i++) {
+    initsleeplock(&icache.inode[i].lock, "inode");
+80101480:	83 ec 08             	sub    $0x8,%esp
+80101483:	68 32 71 10 80       	push   $0x80107132
+80101488:	53                   	push   %ebx
+80101489:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010148f:	e8 ec 2b 00 00       	call   80104080 <initsleeplock>
+iinit(int dev)
+{
+  int i = 0;
+  
+  initlock(&icache.lock, "icache");
+  for(i = 0; i < NINODE; i++) {
+80101494:	83 c4 10             	add    $0x10,%esp
+80101497:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+8010149d:	75 e1                	jne    80101480 <iinit+0x20>
+    initsleeplock(&icache.inode[i].lock, "inode");
+  }
+
+  readsb(dev, &sb);
+8010149f:	83 ec 08             	sub    $0x8,%esp
+801014a2:	68 c0 09 11 80       	push   $0x801109c0
+801014a7:	ff 75 08             	pushl  0x8(%ebp)
+801014aa:	e8 71 ff ff ff       	call   80101420 <readsb>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+801014af:	ff 35 d8 09 11 80    	pushl  0x801109d8
+801014b5:	ff 35 d4 09 11 80    	pushl  0x801109d4
+801014bb:	ff 35 d0 09 11 80    	pushl  0x801109d0
+801014c1:	ff 35 cc 09 11 80    	pushl  0x801109cc
+801014c7:	ff 35 c8 09 11 80    	pushl  0x801109c8
+801014cd:	ff 35 c4 09 11 80    	pushl  0x801109c4
+801014d3:	ff 35 c0 09 11 80    	pushl  0x801109c0
+801014d9:	68 98 71 10 80       	push   $0x80107198
+801014de:	e8 7d f1 ff ff       	call   80100660 <cprintf>
+ inodestart %d bmap start %d\n", sb.size, sb.nblocks,
+          sb.ninodes, sb.nlog, sb.logstart, sb.inodestart,
+          sb.bmapstart);
+}
+801014e3:	83 c4 30             	add    $0x30,%esp
+801014e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801014e9:	c9                   	leave  
+801014ea:	c3                   	ret    
+801014eb:	90                   	nop
+801014ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801014f0 <ialloc>:
+// Allocate an inode on device dev.
+// Mark it as allocated by  giving it type type.
+// Returns an unlocked but allocated and referenced inode.
+struct inode*
+ialloc(uint dev, short type)
+{
+801014f0:	55                   	push   %ebp
+801014f1:	89 e5                	mov    %esp,%ebp
+801014f3:	57                   	push   %edi
+801014f4:	56                   	push   %esi
+801014f5:	53                   	push   %ebx
+801014f6:	83 ec 1c             	sub    $0x1c,%esp
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+801014f9:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
+// Allocate an inode on device dev.
+// Mark it as allocated by  giving it type type.
+// Returns an unlocked but allocated and referenced inode.
+struct inode*
+ialloc(uint dev, short type)
+{
+80101500:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101503:	8b 75 08             	mov    0x8(%ebp),%esi
+80101506:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101509:	0f 86 91 00 00 00    	jbe    801015a0 <ialloc+0xb0>
+8010150f:	bb 01 00 00 00       	mov    $0x1,%ebx
+80101514:	eb 21                	jmp    80101537 <ialloc+0x47>
+80101516:	8d 76 00             	lea    0x0(%esi),%esi
+80101519:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+80101520:	83 ec 0c             	sub    $0xc,%esp
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101523:	83 c3 01             	add    $0x1,%ebx
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+80101526:	57                   	push   %edi
+80101527:	e8 b4 ec ff ff       	call   801001e0 <brelse>
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010152c:	83 c4 10             	add    $0x10,%esp
+8010152f:	39 1d c8 09 11 80    	cmp    %ebx,0x801109c8
+80101535:	76 69                	jbe    801015a0 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+80101537:	89 d8                	mov    %ebx,%eax
+80101539:	83 ec 08             	sub    $0x8,%esp
+8010153c:	c1 e8 03             	shr    $0x3,%eax
+8010153f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+80101545:	50                   	push   %eax
+80101546:	56                   	push   %esi
+80101547:	e8 84 eb ff ff       	call   801000d0 <bread>
+8010154c:	89 c7                	mov    %eax,%edi
+    dip = (struct dinode*)bp->data + inum%IPB;
+8010154e:	89 d8                	mov    %ebx,%eax
+    if(dip->type == 0){  // a free inode
+80101550:	83 c4 10             	add    $0x10,%esp
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum, sb));
+    dip = (struct dinode*)bp->data + inum%IPB;
+80101553:	83 e0 07             	and    $0x7,%eax
+80101556:	c1 e0 06             	shl    $0x6,%eax
+80101559:	8d 4c 07 5c          	lea    0x5c(%edi,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010155d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101561:	75 bd                	jne    80101520 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80101563:	83 ec 04             	sub    $0x4,%esp
+80101566:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101569:	6a 40                	push   $0x40
+8010156b:	6a 00                	push   $0x0
+8010156d:	51                   	push   %ecx
+8010156e:	e8 9d 2e 00 00       	call   80104410 <memset>
+      dip->type = type;
+80101573:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80101577:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010157a:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+8010157d:	89 3c 24             	mov    %edi,(%esp)
+80101580:	e8 9b 17 00 00       	call   80102d20 <log_write>
+      brelse(bp);
+80101585:	89 3c 24             	mov    %edi,(%esp)
+80101588:	e8 53 ec ff ff       	call   801001e0 <brelse>
+      return iget(dev, inum);
+8010158d:	83 c4 10             	add    $0x10,%esp
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+}
+80101590:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+80101593:	89 da                	mov    %ebx,%edx
+80101595:	89 f0                	mov    %esi,%eax
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+}
+80101597:	5b                   	pop    %ebx
+80101598:	5e                   	pop    %esi
+80101599:	5f                   	pop    %edi
+8010159a:	5d                   	pop    %ebp
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+8010159b:	e9 e0 fc ff ff       	jmp    80101280 <iget>
+    }
+    brelse(bp);
+  }
+  panic("ialloc: no inodes");
+801015a0:	83 ec 0c             	sub    $0xc,%esp
+801015a3:	68 38 71 10 80       	push   $0x80107138
+801015a8:	e8 c3 ed ff ff       	call   80100370 <panic>
+801015ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801015b0 <iupdate>:
+// Must be called after every change to an ip->xxx field
+// that lives on disk, since i-node cache is write-through.
+// Caller must hold ip->lock.
+void
+iupdate(struct inode *ip)
+{
+801015b0:	55                   	push   %ebp
+801015b1:	89 e5                	mov    %esp,%ebp
+801015b3:	56                   	push   %esi
+801015b4:	53                   	push   %ebx
+801015b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801015b8:	83 ec 08             	sub    $0x8,%esp
+801015bb:	8b 43 04             	mov    0x4(%ebx),%eax
+  dip->type = ip->type;
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801015be:	83 c3 5c             	add    $0x5c,%ebx
+iupdate(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801015c1:	c1 e8 03             	shr    $0x3,%eax
+801015c4:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801015ca:	50                   	push   %eax
+801015cb:	ff 73 a4             	pushl  -0x5c(%ebx)
+801015ce:	e8 fd ea ff ff       	call   801000d0 <bread>
+801015d3:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801015d5:	8b 43 a8             	mov    -0x58(%ebx),%eax
+  dip->type = ip->type;
+801015d8:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801015dc:	83 c4 0c             	add    $0xc,%esp
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801015df:	83 e0 07             	and    $0x7,%eax
+801015e2:	c1 e0 06             	shl    $0x6,%eax
+801015e5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+801015e9:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+801015ec:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801015f0:	83 c0 0c             	add    $0xc,%eax
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+  dip->type = ip->type;
+  dip->major = ip->major;
+801015f3:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+801015f7:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+801015fb:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+801015ff:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+80101603:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+80101607:	8b 53 fc             	mov    -0x4(%ebx),%edx
+8010160a:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010160d:	6a 34                	push   $0x34
+8010160f:	53                   	push   %ebx
+80101610:	50                   	push   %eax
+80101611:	e8 aa 2e 00 00       	call   801044c0 <memmove>
+  log_write(bp);
+80101616:	89 34 24             	mov    %esi,(%esp)
+80101619:	e8 02 17 00 00       	call   80102d20 <log_write>
+  brelse(bp);
+8010161e:	89 75 08             	mov    %esi,0x8(%ebp)
+80101621:	83 c4 10             	add    $0x10,%esp
+}
+80101624:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101627:	5b                   	pop    %ebx
+80101628:	5e                   	pop    %esi
+80101629:	5d                   	pop    %ebp
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+  log_write(bp);
+  brelse(bp);
+8010162a:	e9 b1 eb ff ff       	jmp    801001e0 <brelse>
+8010162f:	90                   	nop
+
+80101630 <idup>:
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+80101630:	55                   	push   %ebp
+80101631:	89 e5                	mov    %esp,%ebp
+80101633:	53                   	push   %ebx
+80101634:	83 ec 10             	sub    $0x10,%esp
+80101637:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+8010163a:	68 e0 09 11 80       	push   $0x801109e0
+8010163f:	e8 cc 2c 00 00       	call   80104310 <acquire>
+  ip->ref++;
+80101644:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+80101648:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+8010164f:	e8 6c 2d 00 00       	call   801043c0 <release>
+  return ip;
+}
+80101654:	89 d8                	mov    %ebx,%eax
+80101656:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101659:	c9                   	leave  
+8010165a:	c3                   	ret    
+8010165b:	90                   	nop
+8010165c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101660 <ilock>:
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+80101660:	55                   	push   %ebp
+80101661:	89 e5                	mov    %esp,%ebp
+80101663:	56                   	push   %esi
+80101664:	53                   	push   %ebx
+80101665:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+80101668:	85 db                	test   %ebx,%ebx
+8010166a:	0f 84 b7 00 00 00    	je     80101727 <ilock+0xc7>
+80101670:	8b 53 08             	mov    0x8(%ebx),%edx
+80101673:	85 d2                	test   %edx,%edx
+80101675:	0f 8e ac 00 00 00    	jle    80101727 <ilock+0xc7>
+    panic("ilock");
+
+  acquiresleep(&ip->lock);
+8010167b:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010167e:	83 ec 0c             	sub    $0xc,%esp
+80101681:	50                   	push   %eax
+80101682:	e8 39 2a 00 00       	call   801040c0 <acquiresleep>
+
+  if(ip->valid == 0){
+80101687:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010168a:	83 c4 10             	add    $0x10,%esp
+8010168d:	85 c0                	test   %eax,%eax
+8010168f:	74 0f                	je     801016a0 <ilock+0x40>
+    brelse(bp);
+    ip->valid = 1;
+    if(ip->type == 0)
+      panic("ilock: no type");
+  }
+}
+80101691:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101694:	5b                   	pop    %ebx
+80101695:	5e                   	pop    %esi
+80101696:	5d                   	pop    %ebp
+80101697:	c3                   	ret    
+80101698:	90                   	nop
+80101699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    panic("ilock");
+
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801016a0:	8b 43 04             	mov    0x4(%ebx),%eax
+801016a3:	83 ec 08             	sub    $0x8,%esp
+801016a6:	c1 e8 03             	shr    $0x3,%eax
+801016a9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016af:	50                   	push   %eax
+801016b0:	ff 33                	pushl  (%ebx)
+801016b2:	e8 19 ea ff ff       	call   801000d0 <bread>
+801016b7:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016b9:	8b 43 04             	mov    0x4(%ebx),%eax
+    ip->type = dip->type;
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016bc:	83 c4 0c             	add    $0xc,%esp
+
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801016bf:	83 e0 07             	and    $0x7,%eax
+801016c2:	c1 e0 06             	shl    $0x6,%eax
+801016c5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+801016c9:	0f b7 10             	movzwl (%eax),%edx
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016cc:	83 c0 0c             	add    $0xc,%eax
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    ip->type = dip->type;
+801016cf:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+801016d3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801016d7:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+801016db:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801016df:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+801016e3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+801016e7:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+801016eb:	8b 50 fc             	mov    -0x4(%eax),%edx
+801016ee:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801016f1:	6a 34                	push   $0x34
+801016f3:	50                   	push   %eax
+801016f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801016f7:	50                   	push   %eax
+801016f8:	e8 c3 2d 00 00       	call   801044c0 <memmove>
+    brelse(bp);
+801016fd:	89 34 24             	mov    %esi,(%esp)
+80101700:	e8 db ea ff ff       	call   801001e0 <brelse>
+    ip->valid = 1;
+    if(ip->type == 0)
+80101705:	83 c4 10             	add    $0x10,%esp
+80101708:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    brelse(bp);
+    ip->valid = 1;
+8010170d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+80101714:	0f 85 77 ff ff ff    	jne    80101691 <ilock+0x31>
+      panic("ilock: no type");
+8010171a:	83 ec 0c             	sub    $0xc,%esp
+8010171d:	68 50 71 10 80       	push   $0x80107150
+80101722:	e8 49 ec ff ff       	call   80100370 <panic>
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+80101727:	83 ec 0c             	sub    $0xc,%esp
+8010172a:	68 4a 71 10 80       	push   $0x8010714a
+8010172f:	e8 3c ec ff ff       	call   80100370 <panic>
+80101734:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010173a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101740 <iunlock>:
+}
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+80101740:	55                   	push   %ebp
+80101741:	89 e5                	mov    %esp,%ebp
+80101743:	56                   	push   %esi
+80101744:	53                   	push   %ebx
+80101745:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+80101748:	85 db                	test   %ebx,%ebx
+8010174a:	74 28                	je     80101774 <iunlock+0x34>
+8010174c:	8d 73 0c             	lea    0xc(%ebx),%esi
+8010174f:	83 ec 0c             	sub    $0xc,%esp
+80101752:	56                   	push   %esi
+80101753:	e8 08 2a 00 00       	call   80104160 <holdingsleep>
+80101758:	83 c4 10             	add    $0x10,%esp
+8010175b:	85 c0                	test   %eax,%eax
+8010175d:	74 15                	je     80101774 <iunlock+0x34>
+8010175f:	8b 43 08             	mov    0x8(%ebx),%eax
+80101762:	85 c0                	test   %eax,%eax
+80101764:	7e 0e                	jle    80101774 <iunlock+0x34>
+    panic("iunlock");
+
+  releasesleep(&ip->lock);
+80101766:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80101769:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010176c:	5b                   	pop    %ebx
+8010176d:	5e                   	pop    %esi
+8010176e:	5d                   	pop    %ebp
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    panic("iunlock");
+
+  releasesleep(&ip->lock);
+8010176f:	e9 ac 29 00 00       	jmp    80104120 <releasesleep>
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    panic("iunlock");
+80101774:	83 ec 0c             	sub    $0xc,%esp
+80101777:	68 5f 71 10 80       	push   $0x8010715f
+8010177c:	e8 ef eb ff ff       	call   80100370 <panic>
+80101781:	eb 0d                	jmp    80101790 <iput>
+80101783:	90                   	nop
+80101784:	90                   	nop
+80101785:	90                   	nop
+80101786:	90                   	nop
+80101787:	90                   	nop
+80101788:	90                   	nop
+80101789:	90                   	nop
+8010178a:	90                   	nop
+8010178b:	90                   	nop
+8010178c:	90                   	nop
+8010178d:	90                   	nop
+8010178e:	90                   	nop
+8010178f:	90                   	nop
+
+80101790 <iput>:
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+80101790:	55                   	push   %ebp
+80101791:	89 e5                	mov    %esp,%ebp
+80101793:	57                   	push   %edi
+80101794:	56                   	push   %esi
+80101795:	53                   	push   %ebx
+80101796:	83 ec 28             	sub    $0x28,%esp
+80101799:	8b 75 08             	mov    0x8(%ebp),%esi
+  acquiresleep(&ip->lock);
+8010179c:	8d 7e 0c             	lea    0xc(%esi),%edi
+8010179f:	57                   	push   %edi
+801017a0:	e8 1b 29 00 00       	call   801040c0 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+801017a5:	8b 56 4c             	mov    0x4c(%esi),%edx
+801017a8:	83 c4 10             	add    $0x10,%esp
+801017ab:	85 d2                	test   %edx,%edx
+801017ad:	74 07                	je     801017b6 <iput+0x26>
+801017af:	66 83 7e 56 00       	cmpw   $0x0,0x56(%esi)
+801017b4:	74 32                	je     801017e8 <iput+0x58>
+      ip->type = 0;
+      iupdate(ip);
+      ip->valid = 0;
+    }
+  }
+  releasesleep(&ip->lock);
+801017b6:	83 ec 0c             	sub    $0xc,%esp
+801017b9:	57                   	push   %edi
+801017ba:	e8 61 29 00 00       	call   80104120 <releasesleep>
+
+  acquire(&icache.lock);
+801017bf:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+801017c6:	e8 45 2b 00 00       	call   80104310 <acquire>
+  ip->ref--;
+801017cb:	83 6e 08 01          	subl   $0x1,0x8(%esi)
+  release(&icache.lock);
+801017cf:	83 c4 10             	add    $0x10,%esp
+801017d2:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
+}
+801017d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801017dc:	5b                   	pop    %ebx
+801017dd:	5e                   	pop    %esi
+801017de:	5f                   	pop    %edi
+801017df:	5d                   	pop    %ebp
+  }
+  releasesleep(&ip->lock);
+
+  acquire(&icache.lock);
+  ip->ref--;
+  release(&icache.lock);
+801017e0:	e9 db 2b 00 00       	jmp    801043c0 <release>
+801017e5:	8d 76 00             	lea    0x0(%esi),%esi
+void
+iput(struct inode *ip)
+{
+  acquiresleep(&ip->lock);
+  if(ip->valid && ip->nlink == 0){
+    acquire(&icache.lock);
+801017e8:	83 ec 0c             	sub    $0xc,%esp
+801017eb:	68 e0 09 11 80       	push   $0x801109e0
+801017f0:	e8 1b 2b 00 00       	call   80104310 <acquire>
+    int r = ip->ref;
+801017f5:	8b 5e 08             	mov    0x8(%esi),%ebx
+    release(&icache.lock);
+801017f8:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+801017ff:	e8 bc 2b 00 00       	call   801043c0 <release>
+    if(r == 1){
+80101804:	83 c4 10             	add    $0x10,%esp
+80101807:	83 fb 01             	cmp    $0x1,%ebx
+8010180a:	75 aa                	jne    801017b6 <iput+0x26>
+8010180c:	8d 8e 8c 00 00 00    	lea    0x8c(%esi),%ecx
+80101812:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80101815:	8d 5e 5c             	lea    0x5c(%esi),%ebx
+80101818:	89 cf                	mov    %ecx,%edi
+8010181a:	eb 0b                	jmp    80101827 <iput+0x97>
+8010181c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101820:	83 c3 04             	add    $0x4,%ebx
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80101823:	39 fb                	cmp    %edi,%ebx
+80101825:	74 19                	je     80101840 <iput+0xb0>
+    if(ip->addrs[i]){
+80101827:	8b 13                	mov    (%ebx),%edx
+80101829:	85 d2                	test   %edx,%edx
+8010182b:	74 f3                	je     80101820 <iput+0x90>
+      bfree(ip->dev, ip->addrs[i]);
+8010182d:	8b 06                	mov    (%esi),%eax
+8010182f:	e8 cc f8 ff ff       	call   80101100 <bfree>
+      ip->addrs[i] = 0;
+80101834:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010183a:	eb e4                	jmp    80101820 <iput+0x90>
+8010183c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+80101840:	8b 86 8c 00 00 00    	mov    0x8c(%esi),%eax
+80101846:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101849:	85 c0                	test   %eax,%eax
+8010184b:	75 33                	jne    80101880 <iput+0xf0>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+8010184d:	83 ec 0c             	sub    $0xc,%esp
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+80101850:	c7 46 58 00 00 00 00 	movl   $0x0,0x58(%esi)
+  iupdate(ip);
+80101857:	56                   	push   %esi
+80101858:	e8 53 fd ff ff       	call   801015b0 <iupdate>
+    int r = ip->ref;
+    release(&icache.lock);
+    if(r == 1){
+      // inode has no links and no other references: truncate and free.
+      itrunc(ip);
+      ip->type = 0;
+8010185d:	31 c0                	xor    %eax,%eax
+8010185f:	66 89 46 50          	mov    %ax,0x50(%esi)
+      iupdate(ip);
+80101863:	89 34 24             	mov    %esi,(%esp)
+80101866:	e8 45 fd ff ff       	call   801015b0 <iupdate>
+      ip->valid = 0;
+8010186b:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+80101872:	83 c4 10             	add    $0x10,%esp
+80101875:	e9 3c ff ff ff       	jmp    801017b6 <iput+0x26>
+8010187a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      ip->addrs[i] = 0;
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+80101880:	83 ec 08             	sub    $0x8,%esp
+80101883:	50                   	push   %eax
+80101884:	ff 36                	pushl  (%esi)
+80101886:	e8 45 e8 ff ff       	call   801000d0 <bread>
+8010188b:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+80101891:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101894:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    a = (uint*)bp->data;
+80101897:	8d 58 5c             	lea    0x5c(%eax),%ebx
+8010189a:	83 c4 10             	add    $0x10,%esp
+8010189d:	89 cf                	mov    %ecx,%edi
+8010189f:	eb 0e                	jmp    801018af <iput+0x11f>
+801018a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018a8:	83 c3 04             	add    $0x4,%ebx
+    for(j = 0; j < NINDIRECT; j++){
+801018ab:	39 fb                	cmp    %edi,%ebx
+801018ad:	74 0f                	je     801018be <iput+0x12e>
+      if(a[j])
+801018af:	8b 13                	mov    (%ebx),%edx
+801018b1:	85 d2                	test   %edx,%edx
+801018b3:	74 f3                	je     801018a8 <iput+0x118>
+        bfree(ip->dev, a[j]);
+801018b5:	8b 06                	mov    (%esi),%eax
+801018b7:	e8 44 f8 ff ff       	call   80101100 <bfree>
+801018bc:	eb ea                	jmp    801018a8 <iput+0x118>
+    }
+    brelse(bp);
+801018be:	83 ec 0c             	sub    $0xc,%esp
+801018c1:	ff 75 e4             	pushl  -0x1c(%ebp)
+801018c4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801018c7:	e8 14 e9 ff ff       	call   801001e0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+801018cc:	8b 96 8c 00 00 00    	mov    0x8c(%esi),%edx
+801018d2:	8b 06                	mov    (%esi),%eax
+801018d4:	e8 27 f8 ff ff       	call   80101100 <bfree>
+    ip->addrs[NDIRECT] = 0;
+801018d9:	c7 86 8c 00 00 00 00 	movl   $0x0,0x8c(%esi)
+801018e0:	00 00 00 
+801018e3:	83 c4 10             	add    $0x10,%esp
+801018e6:	e9 62 ff ff ff       	jmp    8010184d <iput+0xbd>
+801018eb:	90                   	nop
+801018ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801018f0 <iunlockput>:
+}
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+801018f0:	55                   	push   %ebp
+801018f1:	89 e5                	mov    %esp,%ebp
+801018f3:	53                   	push   %ebx
+801018f4:	83 ec 10             	sub    $0x10,%esp
+801018f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  iunlock(ip);
+801018fa:	53                   	push   %ebx
+801018fb:	e8 40 fe ff ff       	call   80101740 <iunlock>
+  iput(ip);
+80101900:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101903:	83 c4 10             	add    $0x10,%esp
+}
+80101906:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101909:	c9                   	leave  
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+  iput(ip);
+8010190a:	e9 81 fe ff ff       	jmp    80101790 <iput>
+8010190f:	90                   	nop
+
+80101910 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80101910:	55                   	push   %ebp
+80101911:	89 e5                	mov    %esp,%ebp
+80101913:	8b 55 08             	mov    0x8(%ebp),%edx
+80101916:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+80101919:	8b 0a                	mov    (%edx),%ecx
+8010191b:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+8010191e:	8b 4a 04             	mov    0x4(%edx),%ecx
+80101921:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+80101924:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+80101928:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+8010192b:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+8010192f:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+80101933:	8b 52 58             	mov    0x58(%edx),%edx
+80101936:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80101939:	5d                   	pop    %ebp
+8010193a:	c3                   	ret    
+8010193b:	90                   	nop
+8010193c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101940 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80101940:	55                   	push   %ebp
+80101941:	89 e5                	mov    %esp,%ebp
+80101943:	57                   	push   %edi
+80101944:	56                   	push   %esi
+80101945:	53                   	push   %ebx
+80101946:	83 ec 1c             	sub    $0x1c,%esp
+80101949:	8b 45 08             	mov    0x8(%ebp),%eax
+8010194c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+8010194f:	8b 75 10             	mov    0x10(%ebp),%esi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101952:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80101957:	89 7d e0             	mov    %edi,-0x20(%ebp)
+8010195a:	8b 7d 14             	mov    0x14(%ebp),%edi
+8010195d:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101960:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101963:	0f 84 a7 00 00 00    	je     80101a10 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101969:	8b 45 d8             	mov    -0x28(%ebp),%eax
+8010196c:	8b 40 58             	mov    0x58(%eax),%eax
+8010196f:	39 f0                	cmp    %esi,%eax
+80101971:	0f 82 c1 00 00 00    	jb     80101a38 <readi+0xf8>
+80101977:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+8010197a:	89 fa                	mov    %edi,%edx
+8010197c:	01 f2                	add    %esi,%edx
+8010197e:	0f 82 b4 00 00 00    	jb     80101a38 <readi+0xf8>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+80101984:	89 c1                	mov    %eax,%ecx
+80101986:	29 f1                	sub    %esi,%ecx
+80101988:	39 d0                	cmp    %edx,%eax
+8010198a:	0f 43 cf             	cmovae %edi,%ecx
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+8010198d:	31 ff                	xor    %edi,%edi
+8010198f:	85 c9                	test   %ecx,%ecx
+  }
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+80101991:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80101994:	74 6d                	je     80101a03 <readi+0xc3>
+80101996:	8d 76 00             	lea    0x0(%esi),%esi
+80101999:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801019a0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+801019a3:	89 f2                	mov    %esi,%edx
+801019a5:	c1 ea 09             	shr    $0x9,%edx
+801019a8:	89 d8                	mov    %ebx,%eax
+801019aa:	e8 a1 f9 ff ff       	call   80101350 <bmap>
+801019af:	83 ec 08             	sub    $0x8,%esp
+801019b2:	50                   	push   %eax
+801019b3:	ff 33                	pushl  (%ebx)
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019b5:	bb 00 02 00 00       	mov    $0x200,%ebx
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801019ba:	e8 11 e7 ff ff       	call   801000d0 <bread>
+801019bf:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801019c4:	89 f1                	mov    %esi,%ecx
+801019c6:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
+801019cc:	83 c4 0c             	add    $0xc,%esp
+    memmove(dst, bp->data + off%BSIZE, m);
+801019cf:	89 55 dc             	mov    %edx,-0x24(%ebp)
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+801019d2:	29 cb                	sub    %ecx,%ebx
+801019d4:	29 f8                	sub    %edi,%eax
+801019d6:	39 c3                	cmp    %eax,%ebx
+801019d8:	0f 47 d8             	cmova  %eax,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+801019db:	8d 44 0a 5c          	lea    0x5c(%edx,%ecx,1),%eax
+801019df:	53                   	push   %ebx
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801019e0:	01 df                	add    %ebx,%edi
+801019e2:	01 de                	add    %ebx,%esi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+801019e4:	50                   	push   %eax
+801019e5:	ff 75 e0             	pushl  -0x20(%ebp)
+801019e8:	e8 d3 2a 00 00       	call   801044c0 <memmove>
+    brelse(bp);
+801019ed:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801019f0:	89 14 24             	mov    %edx,(%esp)
+801019f3:	e8 e8 e7 ff ff       	call   801001e0 <brelse>
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801019f8:	01 5d e0             	add    %ebx,-0x20(%ebp)
+801019fb:	83 c4 10             	add    $0x10,%esp
+801019fe:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101a01:	77 9d                	ja     801019a0 <readi+0x60>
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+80101a03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80101a06:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a09:	5b                   	pop    %ebx
+80101a0a:	5e                   	pop    %esi
+80101a0b:	5f                   	pop    %edi
+80101a0c:	5d                   	pop    %ebp
+80101a0d:	c3                   	ret    
+80101a0e:	66 90                	xchg   %ax,%ax
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80101a10:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101a14:	66 83 f8 09          	cmp    $0x9,%ax
+80101a18:	77 1e                	ja     80101a38 <readi+0xf8>
+80101a1a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101a21:	85 c0                	test   %eax,%eax
+80101a23:	74 13                	je     80101a38 <readi+0xf8>
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+80101a25:	89 7d 10             	mov    %edi,0x10(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(dst, bp->data + off%BSIZE, m);
+    brelse(bp);
+  }
+  return n;
+}
+80101a28:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a2b:	5b                   	pop    %ebx
+80101a2c:	5e                   	pop    %esi
+80101a2d:	5f                   	pop    %edi
+80101a2e:	5d                   	pop    %ebp
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+80101a2f:	ff e0                	jmp    *%eax
+80101a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+80101a38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101a3d:	eb c7                	jmp    80101a06 <readi+0xc6>
+80101a3f:	90                   	nop
+
+80101a40 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101a40:	55                   	push   %ebp
+80101a41:	89 e5                	mov    %esp,%ebp
+80101a43:	57                   	push   %edi
+80101a44:	56                   	push   %esi
+80101a45:	53                   	push   %ebx
+80101a46:	83 ec 1c             	sub    $0x1c,%esp
+80101a49:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a4c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101a4f:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101a52:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80101a57:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101a5a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101a5d:	8b 75 10             	mov    0x10(%ebp),%esi
+80101a60:	89 7d e0             	mov    %edi,-0x20(%ebp)
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80101a63:	0f 84 b7 00 00 00    	je     80101b20 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+80101a69:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101a6c:	39 70 58             	cmp    %esi,0x58(%eax)
+80101a6f:	0f 82 eb 00 00 00    	jb     80101b60 <writei+0x120>
+80101a75:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101a78:	89 f8                	mov    %edi,%eax
+80101a7a:	01 f0                	add    %esi,%eax
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80101a7c:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101a81:	0f 87 d9 00 00 00    	ja     80101b60 <writei+0x120>
+80101a87:	39 c6                	cmp    %eax,%esi
+80101a89:	0f 87 d1 00 00 00    	ja     80101b60 <writei+0x120>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101a8f:	85 ff                	test   %edi,%edi
+80101a91:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101a98:	74 78                	je     80101b12 <writei+0xd2>
+80101a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101aa0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101aa3:	89 f2                	mov    %esi,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101aa5:	bb 00 02 00 00       	mov    $0x200,%ebx
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+80101aaa:	c1 ea 09             	shr    $0x9,%edx
+80101aad:	89 f8                	mov    %edi,%eax
+80101aaf:	e8 9c f8 ff ff       	call   80101350 <bmap>
+80101ab4:	83 ec 08             	sub    $0x8,%esp
+80101ab7:	50                   	push   %eax
+80101ab8:	ff 37                	pushl  (%edi)
+80101aba:	e8 11 e6 ff ff       	call   801000d0 <bread>
+80101abf:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+80101ac1:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101ac4:	2b 45 e4             	sub    -0x1c(%ebp),%eax
+80101ac7:	89 f1                	mov    %esi,%ecx
+80101ac9:	83 c4 0c             	add    $0xc,%esp
+80101acc:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
+80101ad2:	29 cb                	sub    %ecx,%ebx
+80101ad4:	39 c3                	cmp    %eax,%ebx
+80101ad6:	0f 47 d8             	cmova  %eax,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+80101ad9:	8d 44 0f 5c          	lea    0x5c(%edi,%ecx,1),%eax
+80101add:	53                   	push   %ebx
+80101ade:	ff 75 dc             	pushl  -0x24(%ebp)
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101ae1:	01 de                	add    %ebx,%esi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    m = min(n - tot, BSIZE - off%BSIZE);
+    memmove(bp->data + off%BSIZE, src, m);
+80101ae3:	50                   	push   %eax
+80101ae4:	e8 d7 29 00 00       	call   801044c0 <memmove>
+    log_write(bp);
+80101ae9:	89 3c 24             	mov    %edi,(%esp)
+80101aec:	e8 2f 12 00 00       	call   80102d20 <log_write>
+    brelse(bp);
+80101af1:	89 3c 24             	mov    %edi,(%esp)
+80101af4:	e8 e7 e6 ff ff       	call   801001e0 <brelse>
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80101af9:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101afc:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101aff:	83 c4 10             	add    $0x10,%esp
+80101b02:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101b05:	39 55 e0             	cmp    %edx,-0x20(%ebp)
+80101b08:	77 96                	ja     80101aa0 <writei+0x60>
+    memmove(bp->data + off%BSIZE, src, m);
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+80101b0a:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101b0d:	3b 70 58             	cmp    0x58(%eax),%esi
+80101b10:	77 36                	ja     80101b48 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80101b12:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80101b15:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b18:	5b                   	pop    %ebx
+80101b19:	5e                   	pop    %esi
+80101b1a:	5f                   	pop    %edi
+80101b1b:	5d                   	pop    %ebp
+80101b1c:	c3                   	ret    
+80101b1d:	8d 76 00             	lea    0x0(%esi),%esi
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80101b20:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101b24:	66 83 f8 09          	cmp    $0x9,%ax
+80101b28:	77 36                	ja     80101b60 <writei+0x120>
+80101b2a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101b31:	85 c0                	test   %eax,%eax
+80101b33:	74 2b                	je     80101b60 <writei+0x120>
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+80101b35:	89 7d 10             	mov    %edi,0x10(%ebp)
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+}
+80101b38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b3b:	5b                   	pop    %ebx
+80101b3c:	5e                   	pop    %esi
+80101b3d:	5f                   	pop    %edi
+80101b3e:	5d                   	pop    %ebp
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+80101b3f:	ff e0                	jmp    *%eax
+80101b41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+80101b48:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+80101b4b:	83 ec 0c             	sub    $0xc,%esp
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(n > 0 && off > ip->size){
+    ip->size = off;
+80101b4e:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80101b51:	50                   	push   %eax
+80101b52:	e8 59 fa ff ff       	call   801015b0 <iupdate>
+80101b57:	83 c4 10             	add    $0x10,%esp
+80101b5a:	eb b6                	jmp    80101b12 <writei+0xd2>
+80101b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+80101b60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101b65:	eb ae                	jmp    80101b15 <writei+0xd5>
+80101b67:	89 f6                	mov    %esi,%esi
+80101b69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101b70 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80101b70:	55                   	push   %ebp
+80101b71:	89 e5                	mov    %esp,%ebp
+80101b73:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+80101b76:	6a 0e                	push   $0xe
+80101b78:	ff 75 0c             	pushl  0xc(%ebp)
+80101b7b:	ff 75 08             	pushl  0x8(%ebp)
+80101b7e:	e8 bd 29 00 00       	call   80104540 <strncmp>
+}
+80101b83:	c9                   	leave  
+80101b84:	c3                   	ret    
+80101b85:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101b90 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+80101b90:	55                   	push   %ebp
+80101b91:	89 e5                	mov    %esp,%ebp
+80101b93:	57                   	push   %edi
+80101b94:	56                   	push   %esi
+80101b95:	53                   	push   %ebx
+80101b96:	83 ec 1c             	sub    $0x1c,%esp
+80101b99:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+80101b9c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101ba1:	0f 85 80 00 00 00    	jne    80101c27 <dirlookup+0x97>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101ba7:	8b 53 58             	mov    0x58(%ebx),%edx
+80101baa:	31 ff                	xor    %edi,%edi
+80101bac:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101baf:	85 d2                	test   %edx,%edx
+80101bb1:	75 0d                	jne    80101bc0 <dirlookup+0x30>
+80101bb3:	eb 5b                	jmp    80101c10 <dirlookup+0x80>
+80101bb5:	8d 76 00             	lea    0x0(%esi),%esi
+80101bb8:	83 c7 10             	add    $0x10,%edi
+80101bbb:	39 7b 58             	cmp    %edi,0x58(%ebx)
+80101bbe:	76 50                	jbe    80101c10 <dirlookup+0x80>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101bc0:	6a 10                	push   $0x10
+80101bc2:	57                   	push   %edi
+80101bc3:	56                   	push   %esi
+80101bc4:	53                   	push   %ebx
+80101bc5:	e8 76 fd ff ff       	call   80101940 <readi>
+80101bca:	83 c4 10             	add    $0x10,%esp
+80101bcd:	83 f8 10             	cmp    $0x10,%eax
+80101bd0:	75 48                	jne    80101c1a <dirlookup+0x8a>
+      panic("dirlookup read");
+    if(de.inum == 0)
+80101bd2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101bd7:	74 df                	je     80101bb8 <dirlookup+0x28>
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+  return strncmp(s, t, DIRSIZ);
+80101bd9:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101bdc:	83 ec 04             	sub    $0x4,%esp
+80101bdf:	6a 0e                	push   $0xe
+80101be1:	50                   	push   %eax
+80101be2:	ff 75 0c             	pushl  0xc(%ebp)
+80101be5:	e8 56 29 00 00       	call   80104540 <strncmp>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlookup read");
+    if(de.inum == 0)
+      continue;
+    if(namecmp(name, de.name) == 0){
+80101bea:	83 c4 10             	add    $0x10,%esp
+80101bed:	85 c0                	test   %eax,%eax
+80101bef:	75 c7                	jne    80101bb8 <dirlookup+0x28>
+      // entry matches path element
+      if(poff)
+80101bf1:	8b 45 10             	mov    0x10(%ebp),%eax
+80101bf4:	85 c0                	test   %eax,%eax
+80101bf6:	74 05                	je     80101bfd <dirlookup+0x6d>
+        *poff = off;
+80101bf8:	8b 45 10             	mov    0x10(%ebp),%eax
+80101bfb:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+      return iget(dp->dev, inum);
+80101bfd:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+80101c01:	8b 03                	mov    (%ebx),%eax
+80101c03:	e8 78 f6 ff ff       	call   80101280 <iget>
+    }
+  }
+
+  return 0;
+}
+80101c08:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c0b:	5b                   	pop    %ebx
+80101c0c:	5e                   	pop    %esi
+80101c0d:	5f                   	pop    %edi
+80101c0e:	5d                   	pop    %ebp
+80101c0f:	c3                   	ret    
+80101c10:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+80101c13:	31 c0                	xor    %eax,%eax
+}
+80101c15:	5b                   	pop    %ebx
+80101c16:	5e                   	pop    %esi
+80101c17:	5f                   	pop    %edi
+80101c18:	5d                   	pop    %ebp
+80101c19:	c3                   	ret    
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlookup read");
+80101c1a:	83 ec 0c             	sub    $0xc,%esp
+80101c1d:	68 79 71 10 80       	push   $0x80107179
+80101c22:	e8 49 e7 ff ff       	call   80100370 <panic>
+{
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+80101c27:	83 ec 0c             	sub    $0xc,%esp
+80101c2a:	68 67 71 10 80       	push   $0x80107167
+80101c2f:	e8 3c e7 ff ff       	call   80100370 <panic>
+80101c34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101c3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80101c40 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80101c40:	55                   	push   %ebp
+80101c41:	89 e5                	mov    %esp,%ebp
+80101c43:	57                   	push   %edi
+80101c44:	56                   	push   %esi
+80101c45:	53                   	push   %ebx
+80101c46:	89 cf                	mov    %ecx,%edi
+80101c48:	89 c3                	mov    %eax,%ebx
+80101c4a:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+80101c4d:	80 38 2f             	cmpb   $0x2f,(%eax)
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80101c50:	89 55 e0             	mov    %edx,-0x20(%ebp)
+  struct inode *ip, *next;
+
+  if(*path == '/')
+80101c53:	0f 84 53 01 00 00    	je     80101dac <namex+0x16c>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+80101c59:	e8 12 1b 00 00       	call   80103770 <myproc>
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&icache.lock);
+80101c5e:	83 ec 0c             	sub    $0xc,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+80101c61:	8b 70 68             	mov    0x68(%eax),%esi
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&icache.lock);
+80101c64:	68 e0 09 11 80       	push   $0x801109e0
+80101c69:	e8 a2 26 00 00       	call   80104310 <acquire>
+  ip->ref++;
+80101c6e:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80101c72:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101c79:	e8 42 27 00 00       	call   801043c0 <release>
+80101c7e:	83 c4 10             	add    $0x10,%esp
+80101c81:	eb 08                	jmp    80101c8b <namex+0x4b>
+80101c83:	90                   	nop
+80101c84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+    path++;
+80101c88:	83 c3 01             	add    $0x1,%ebx
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+80101c8b:	0f b6 03             	movzbl (%ebx),%eax
+80101c8e:	3c 2f                	cmp    $0x2f,%al
+80101c90:	74 f6                	je     80101c88 <namex+0x48>
+    path++;
+  if(*path == 0)
+80101c92:	84 c0                	test   %al,%al
+80101c94:	0f 84 e3 00 00 00    	je     80101d7d <namex+0x13d>
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+80101c9a:	0f b6 03             	movzbl (%ebx),%eax
+80101c9d:	89 da                	mov    %ebx,%edx
+80101c9f:	84 c0                	test   %al,%al
+80101ca1:	0f 84 ac 00 00 00    	je     80101d53 <namex+0x113>
+80101ca7:	3c 2f                	cmp    $0x2f,%al
+80101ca9:	75 09                	jne    80101cb4 <namex+0x74>
+80101cab:	e9 a3 00 00 00       	jmp    80101d53 <namex+0x113>
+80101cb0:	84 c0                	test   %al,%al
+80101cb2:	74 0a                	je     80101cbe <namex+0x7e>
+    path++;
+80101cb4:	83 c2 01             	add    $0x1,%edx
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+80101cb7:	0f b6 02             	movzbl (%edx),%eax
+80101cba:	3c 2f                	cmp    $0x2f,%al
+80101cbc:	75 f2                	jne    80101cb0 <namex+0x70>
+80101cbe:	89 d1                	mov    %edx,%ecx
+80101cc0:	29 d9                	sub    %ebx,%ecx
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+80101cc2:	83 f9 0d             	cmp    $0xd,%ecx
+80101cc5:	0f 8e 8d 00 00 00    	jle    80101d58 <namex+0x118>
+    memmove(name, s, DIRSIZ);
+80101ccb:	83 ec 04             	sub    $0x4,%esp
+80101cce:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101cd1:	6a 0e                	push   $0xe
+80101cd3:	53                   	push   %ebx
+80101cd4:	57                   	push   %edi
+80101cd5:	e8 e6 27 00 00       	call   801044c0 <memmove>
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+80101cda:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+80101cdd:	83 c4 10             	add    $0x10,%esp
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+80101ce0:	89 d3                	mov    %edx,%ebx
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+80101ce2:	80 3a 2f             	cmpb   $0x2f,(%edx)
+80101ce5:	75 11                	jne    80101cf8 <namex+0xb8>
+80101ce7:	89 f6                	mov    %esi,%esi
+80101ce9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    path++;
+80101cf0:	83 c3 01             	add    $0x1,%ebx
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+80101cf3:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101cf6:	74 f8                	je     80101cf0 <namex+0xb0>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80101cf8:	83 ec 0c             	sub    $0xc,%esp
+80101cfb:	56                   	push   %esi
+80101cfc:	e8 5f f9 ff ff       	call   80101660 <ilock>
+    if(ip->type != T_DIR){
+80101d01:	83 c4 10             	add    $0x10,%esp
+80101d04:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101d09:	0f 85 7f 00 00 00    	jne    80101d8e <namex+0x14e>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80101d0f:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101d12:	85 d2                	test   %edx,%edx
+80101d14:	74 09                	je     80101d1f <namex+0xdf>
+80101d16:	80 3b 00             	cmpb   $0x0,(%ebx)
+80101d19:	0f 84 a3 00 00 00    	je     80101dc2 <namex+0x182>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80101d1f:	83 ec 04             	sub    $0x4,%esp
+80101d22:	6a 00                	push   $0x0
+80101d24:	57                   	push   %edi
+80101d25:	56                   	push   %esi
+80101d26:	e8 65 fe ff ff       	call   80101b90 <dirlookup>
+80101d2b:	83 c4 10             	add    $0x10,%esp
+80101d2e:	85 c0                	test   %eax,%eax
+80101d30:	74 5c                	je     80101d8e <namex+0x14e>
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+80101d32:	83 ec 0c             	sub    $0xc,%esp
+80101d35:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101d38:	56                   	push   %esi
+80101d39:	e8 02 fa ff ff       	call   80101740 <iunlock>
+  iput(ip);
+80101d3e:	89 34 24             	mov    %esi,(%esp)
+80101d41:	e8 4a fa ff ff       	call   80101790 <iput>
+80101d46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101d49:	83 c4 10             	add    $0x10,%esp
+80101d4c:	89 c6                	mov    %eax,%esi
+80101d4e:	e9 38 ff ff ff       	jmp    80101c8b <namex+0x4b>
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+80101d53:	31 c9                	xor    %ecx,%ecx
+80101d55:	8d 76 00             	lea    0x0(%esi),%esi
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+80101d58:	83 ec 04             	sub    $0x4,%esp
+80101d5b:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80101d5e:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101d61:	51                   	push   %ecx
+80101d62:	53                   	push   %ebx
+80101d63:	57                   	push   %edi
+80101d64:	e8 57 27 00 00       	call   801044c0 <memmove>
+    name[len] = 0;
+80101d69:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80101d6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101d6f:	83 c4 10             	add    $0x10,%esp
+80101d72:	c6 04 0f 00          	movb   $0x0,(%edi,%ecx,1)
+80101d76:	89 d3                	mov    %edx,%ebx
+80101d78:	e9 65 ff ff ff       	jmp    80101ce2 <namex+0xa2>
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+80101d7d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101d80:	85 c0                	test   %eax,%eax
+80101d82:	75 54                	jne    80101dd8 <namex+0x198>
+80101d84:	89 f0                	mov    %esi,%eax
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101d86:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d89:	5b                   	pop    %ebx
+80101d8a:	5e                   	pop    %esi
+80101d8b:	5f                   	pop    %edi
+80101d8c:	5d                   	pop    %ebp
+80101d8d:	c3                   	ret    
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+80101d8e:	83 ec 0c             	sub    $0xc,%esp
+80101d91:	56                   	push   %esi
+80101d92:	e8 a9 f9 ff ff       	call   80101740 <iunlock>
+  iput(ip);
+80101d97:	89 34 24             	mov    %esi,(%esp)
+80101d9a:	e8 f1 f9 ff ff       	call   80101790 <iput>
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+80101d9f:	83 c4 10             	add    $0x10,%esp
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101da2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+80101da5:	31 c0                	xor    %eax,%eax
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101da7:	5b                   	pop    %ebx
+80101da8:	5e                   	pop    %esi
+80101da9:	5f                   	pop    %edi
+80101daa:	5d                   	pop    %ebp
+80101dab:	c3                   	ret    
+namex(char *path, int nameiparent, char *name)
+{
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+80101dac:	ba 01 00 00 00       	mov    $0x1,%edx
+80101db1:	b8 01 00 00 00       	mov    $0x1,%eax
+80101db6:	e8 c5 f4 ff ff       	call   80101280 <iget>
+80101dbb:	89 c6                	mov    %eax,%esi
+80101dbd:	e9 c9 fe ff ff       	jmp    80101c8b <namex+0x4b>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+80101dc2:	83 ec 0c             	sub    $0xc,%esp
+80101dc5:	56                   	push   %esi
+80101dc6:	e8 75 f9 ff ff       	call   80101740 <iunlock>
+      return ip;
+80101dcb:	83 c4 10             	add    $0x10,%esp
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101dce:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+80101dd1:	89 f0                	mov    %esi,%eax
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+80101dd3:	5b                   	pop    %ebx
+80101dd4:	5e                   	pop    %esi
+80101dd5:	5f                   	pop    %edi
+80101dd6:	5d                   	pop    %ebp
+80101dd7:	c3                   	ret    
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+    iput(ip);
+80101dd8:	83 ec 0c             	sub    $0xc,%esp
+80101ddb:	56                   	push   %esi
+80101ddc:	e8 af f9 ff ff       	call   80101790 <iput>
+    return 0;
+80101de1:	83 c4 10             	add    $0x10,%esp
+80101de4:	31 c0                	xor    %eax,%eax
+80101de6:	eb 9e                	jmp    80101d86 <namex+0x146>
+80101de8:	90                   	nop
+80101de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101df0 <dirlink>:
+}
+
+// Write a new directory entry (name, inum) into the directory dp.
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+80101df0:	55                   	push   %ebp
+80101df1:	89 e5                	mov    %esp,%ebp
+80101df3:	57                   	push   %edi
+80101df4:	56                   	push   %esi
+80101df5:	53                   	push   %ebx
+80101df6:	83 ec 20             	sub    $0x20,%esp
+80101df9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80101dfc:	6a 00                	push   $0x0
+80101dfe:	ff 75 0c             	pushl  0xc(%ebp)
+80101e01:	53                   	push   %ebx
+80101e02:	e8 89 fd ff ff       	call   80101b90 <dirlookup>
+80101e07:	83 c4 10             	add    $0x10,%esp
+80101e0a:	85 c0                	test   %eax,%eax
+80101e0c:	75 67                	jne    80101e75 <dirlink+0x85>
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80101e0e:	8b 7b 58             	mov    0x58(%ebx),%edi
+80101e11:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101e14:	85 ff                	test   %edi,%edi
+80101e16:	74 29                	je     80101e41 <dirlink+0x51>
+80101e18:	31 ff                	xor    %edi,%edi
+80101e1a:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101e1d:	eb 09                	jmp    80101e28 <dirlink+0x38>
+80101e1f:	90                   	nop
+80101e20:	83 c7 10             	add    $0x10,%edi
+80101e23:	39 7b 58             	cmp    %edi,0x58(%ebx)
+80101e26:	76 19                	jbe    80101e41 <dirlink+0x51>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e28:	6a 10                	push   $0x10
+80101e2a:	57                   	push   %edi
+80101e2b:	56                   	push   %esi
+80101e2c:	53                   	push   %ebx
+80101e2d:	e8 0e fb ff ff       	call   80101940 <readi>
+80101e32:	83 c4 10             	add    $0x10,%esp
+80101e35:	83 f8 10             	cmp    $0x10,%eax
+80101e38:	75 4e                	jne    80101e88 <dirlink+0x98>
+      panic("dirlink read");
+    if(de.inum == 0)
+80101e3a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101e3f:	75 df                	jne    80101e20 <dirlink+0x30>
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+80101e41:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101e44:	83 ec 04             	sub    $0x4,%esp
+80101e47:	6a 0e                	push   $0xe
+80101e49:	ff 75 0c             	pushl  0xc(%ebp)
+80101e4c:	50                   	push   %eax
+80101e4d:	e8 5e 27 00 00       	call   801045b0 <strncpy>
+  de.inum = inum;
+80101e52:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e55:	6a 10                	push   $0x10
+80101e57:	57                   	push   %edi
+80101e58:	56                   	push   %esi
+80101e59:	53                   	push   %ebx
+    if(de.inum == 0)
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+80101e5a:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80101e5e:	e8 dd fb ff ff       	call   80101a40 <writei>
+80101e63:	83 c4 20             	add    $0x20,%esp
+80101e66:	83 f8 10             	cmp    $0x10,%eax
+80101e69:	75 2a                	jne    80101e95 <dirlink+0xa5>
+    panic("dirlink");
+
+  return 0;
+80101e6b:	31 c0                	xor    %eax,%eax
+}
+80101e6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e70:	5b                   	pop    %ebx
+80101e71:	5e                   	pop    %esi
+80101e72:	5f                   	pop    %edi
+80101e73:	5d                   	pop    %ebp
+80101e74:	c3                   	ret    
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iput(ip);
+80101e75:	83 ec 0c             	sub    $0xc,%esp
+80101e78:	50                   	push   %eax
+80101e79:	e8 12 f9 ff ff       	call   80101790 <iput>
+    return -1;
+80101e7e:	83 c4 10             	add    $0x10,%esp
+80101e81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101e86:	eb e5                	jmp    80101e6d <dirlink+0x7d>
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+80101e88:	83 ec 0c             	sub    $0xc,%esp
+80101e8b:	68 88 71 10 80       	push   $0x80107188
+80101e90:	e8 db e4 ff ff       	call   80100370 <panic>
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("dirlink");
+80101e95:	83 ec 0c             	sub    $0xc,%esp
+80101e98:	68 86 77 10 80       	push   $0x80107786
+80101e9d:	e8 ce e4 ff ff       	call   80100370 <panic>
+80101ea2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101eb0 <namei>:
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+80101eb0:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80101eb1:	31 d2                	xor    %edx,%edx
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+80101eb3:	89 e5                	mov    %esp,%ebp
+80101eb5:	83 ec 18             	sub    $0x18,%esp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80101eb8:	8b 45 08             	mov    0x8(%ebp),%eax
+80101ebb:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80101ebe:	e8 7d fd ff ff       	call   80101c40 <namex>
+}
+80101ec3:	c9                   	leave  
+80101ec4:	c3                   	ret    
+80101ec5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101ec9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101ed0 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80101ed0:	55                   	push   %ebp
+  return namex(path, 1, name);
+80101ed1:	ba 01 00 00 00       	mov    $0x1,%edx
+  return namex(path, 0, name);
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80101ed6:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+80101ed8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80101edb:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80101ede:	5d                   	pop    %ebp
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+  return namex(path, 1, name);
+80101edf:	e9 5c fd ff ff       	jmp    80101c40 <namex>
+80101ee4:	66 90                	xchg   %ax,%ax
+80101ee6:	66 90                	xchg   %ax,%ax
+80101ee8:	66 90                	xchg   %ax,%ax
+80101eea:	66 90                	xchg   %ax,%ax
+80101eec:	66 90                	xchg   %ax,%ax
+80101eee:	66 90                	xchg   %ax,%ax
+
+80101ef0 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80101ef0:	55                   	push   %ebp
+  if(b == 0)
+80101ef1:	85 c0                	test   %eax,%eax
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80101ef3:	89 e5                	mov    %esp,%ebp
+80101ef5:	56                   	push   %esi
+80101ef6:	53                   	push   %ebx
+  if(b == 0)
+80101ef7:	0f 84 ad 00 00 00    	je     80101faa <idestart+0xba>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+80101efd:	8b 58 08             	mov    0x8(%eax),%ebx
+80101f00:	89 c1                	mov    %eax,%ecx
+80101f02:	81 fb e7 03 00 00    	cmp    $0x3e7,%ebx
+80101f08:	0f 87 8f 00 00 00    	ja     80101f9d <idestart+0xad>
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80101f0e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80101f13:	90                   	nop
+80101f14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101f18:	ec                   	in     (%dx),%al
+static int
+idewait(int checkerr)
+{
+  int r;
+
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80101f19:	83 e0 c0             	and    $0xffffffc0,%eax
+80101f1c:	3c 40                	cmp    $0x40,%al
+80101f1e:	75 f8                	jne    80101f18 <idestart+0x28>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80101f20:	31 f6                	xor    %esi,%esi
+80101f22:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80101f27:	89 f0                	mov    %esi,%eax
+80101f29:	ee                   	out    %al,(%dx)
+80101f2a:	ba f2 01 00 00       	mov    $0x1f2,%edx
+80101f2f:	b8 01 00 00 00       	mov    $0x1,%eax
+80101f34:	ee                   	out    %al,(%dx)
+80101f35:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80101f3a:	89 d8                	mov    %ebx,%eax
+80101f3c:	ee                   	out    %al,(%dx)
+80101f3d:	89 d8                	mov    %ebx,%eax
+80101f3f:	ba f4 01 00 00       	mov    $0x1f4,%edx
+80101f44:	c1 f8 08             	sar    $0x8,%eax
+80101f47:	ee                   	out    %al,(%dx)
+80101f48:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80101f4d:	89 f0                	mov    %esi,%eax
+80101f4f:	ee                   	out    %al,(%dx)
+80101f50:	0f b6 41 04          	movzbl 0x4(%ecx),%eax
+80101f54:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80101f59:	83 e0 01             	and    $0x1,%eax
+80101f5c:	c1 e0 04             	shl    $0x4,%eax
+80101f5f:	83 c8 e0             	or     $0xffffffe0,%eax
+80101f62:	ee                   	out    %al,(%dx)
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+  if(b->flags & B_DIRTY){
+80101f63:	f6 01 04             	testb  $0x4,(%ecx)
+80101f66:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80101f6b:	75 13                	jne    80101f80 <idestart+0x90>
+80101f6d:	b8 20 00 00 00       	mov    $0x20,%eax
+80101f72:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+80101f73:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101f76:	5b                   	pop    %ebx
+80101f77:	5e                   	pop    %esi
+80101f78:	5d                   	pop    %ebp
+80101f79:	c3                   	ret    
+80101f7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101f80:	b8 30 00 00 00       	mov    $0x30,%eax
+80101f85:	ee                   	out    %al,(%dx)
+}
+
+static inline void
+outsl(int port, const void *addr, int cnt)
+{
+  asm volatile("cld; rep outsl" :
+80101f86:	ba f0 01 00 00       	mov    $0x1f0,%edx
+  outb(0x1f4, (sector >> 8) & 0xff);
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+  if(b->flags & B_DIRTY){
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+80101f8b:	8d 71 5c             	lea    0x5c(%ecx),%esi
+80101f8e:	b9 80 00 00 00       	mov    $0x80,%ecx
+80101f93:	fc                   	cld    
+80101f94:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+80101f96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101f99:	5b                   	pop    %ebx
+80101f9a:	5e                   	pop    %esi
+80101f9b:	5d                   	pop    %ebp
+80101f9c:	c3                   	ret    
+idestart(struct buf *b)
+{
+  if(b == 0)
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+    panic("incorrect blockno");
+80101f9d:	83 ec 0c             	sub    $0xc,%esp
+80101fa0:	68 f4 71 10 80       	push   $0x801071f4
+80101fa5:	e8 c6 e3 ff ff       	call   80100370 <panic>
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+  if(b == 0)
+    panic("idestart");
+80101faa:	83 ec 0c             	sub    $0xc,%esp
+80101fad:	68 eb 71 10 80       	push   $0x801071eb
+80101fb2:	e8 b9 e3 ff ff       	call   80100370 <panic>
+80101fb7:	89 f6                	mov    %esi,%esi
+80101fb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80101fc0 <ideinit>:
+  return 0;
+}
+
+void
+ideinit(void)
+{
+80101fc0:	55                   	push   %ebp
+80101fc1:	89 e5                	mov    %esp,%ebp
+80101fc3:	83 ec 10             	sub    $0x10,%esp
+  int i;
+
+  initlock(&idelock, "ide");
+80101fc6:	68 06 72 10 80       	push   $0x80107206
+80101fcb:	68 80 a5 10 80       	push   $0x8010a580
+80101fd0:	e8 db 21 00 00       	call   801041b0 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+80101fd5:	58                   	pop    %eax
+80101fd6:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+80101fdb:	5a                   	pop    %edx
+80101fdc:	83 e8 01             	sub    $0x1,%eax
+80101fdf:	50                   	push   %eax
+80101fe0:	6a 0e                	push   $0xe
+80101fe2:	e8 a9 02 00 00       	call   80102290 <ioapicenable>
+80101fe7:	83 c4 10             	add    $0x10,%esp
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80101fea:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80101fef:	90                   	nop
+80101ff0:	ec                   	in     (%dx),%al
+static int
+idewait(int checkerr)
+{
+  int r;
+
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80101ff1:	83 e0 c0             	and    $0xffffffc0,%eax
+80101ff4:	3c 40                	cmp    $0x40,%al
+80101ff6:	75 f8                	jne    80101ff0 <ideinit+0x30>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80101ff8:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80101ffd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+80102002:	ee                   	out    %al,(%dx)
+80102003:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102008:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010200d:	eb 06                	jmp    80102015 <ideinit+0x55>
+8010200f:	90                   	nop
+  ioapicenable(IRQ_IDE, ncpu - 1);
+  idewait(0);
+
+  // Check if disk 1 is present
+  outb(0x1f6, 0xe0 | (1<<4));
+  for(i=0; i<1000; i++){
+80102010:	83 e9 01             	sub    $0x1,%ecx
+80102013:	74 0f                	je     80102024 <ideinit+0x64>
+80102015:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102016:	84 c0                	test   %al,%al
+80102018:	74 f6                	je     80102010 <ideinit+0x50>
+      havedisk1 = 1;
+8010201a:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+80102021:	00 00 00 
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102024:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102029:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+8010202e:	ee                   	out    %al,(%dx)
+    }
+  }
+
+  // Switch back to disk 0.
+  outb(0x1f6, 0xe0 | (0<<4));
+}
+8010202f:	c9                   	leave  
+80102030:	c3                   	ret    
+80102031:	eb 0d                	jmp    80102040 <ideintr>
+80102033:	90                   	nop
+80102034:	90                   	nop
+80102035:	90                   	nop
+80102036:	90                   	nop
+80102037:	90                   	nop
+80102038:	90                   	nop
+80102039:	90                   	nop
+8010203a:	90                   	nop
+8010203b:	90                   	nop
+8010203c:	90                   	nop
+8010203d:	90                   	nop
+8010203e:	90                   	nop
+8010203f:	90                   	nop
+
+80102040 <ideintr>:
+}
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102040:	55                   	push   %ebp
+80102041:	89 e5                	mov    %esp,%ebp
+80102043:	57                   	push   %edi
+80102044:	56                   	push   %esi
+80102045:	53                   	push   %ebx
+80102046:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102049:	68 80 a5 10 80       	push   $0x8010a580
+8010204e:	e8 bd 22 00 00       	call   80104310 <acquire>
+
+  if((b = idequeue) == 0){
+80102053:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+80102059:	83 c4 10             	add    $0x10,%esp
+8010205c:	85 db                	test   %ebx,%ebx
+8010205e:	74 34                	je     80102094 <ideintr+0x54>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+80102060:	8b 43 58             	mov    0x58(%ebx),%eax
+80102063:	a3 64 a5 10 80       	mov    %eax,0x8010a564
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+80102068:	8b 33                	mov    (%ebx),%esi
+8010206a:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102070:	74 3e                	je     801020b0 <ideintr+0x70>
+    insl(0x1f0, b->data, BSIZE/4);
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+80102072:	83 e6 fb             	and    $0xfffffffb,%esi
+  wakeup(b);
+80102075:	83 ec 0c             	sub    $0xc,%esp
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+    insl(0x1f0, b->data, BSIZE/4);
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+80102078:	83 ce 02             	or     $0x2,%esi
+8010207b:	89 33                	mov    %esi,(%ebx)
+  wakeup(b);
+8010207d:	53                   	push   %ebx
+8010207e:	e8 4d 1e 00 00       	call   80103ed0 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+80102083:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+80102088:	83 c4 10             	add    $0x10,%esp
+8010208b:	85 c0                	test   %eax,%eax
+8010208d:	74 05                	je     80102094 <ideintr+0x54>
+    idestart(idequeue);
+8010208f:	e8 5c fe ff ff       	call   80101ef0 <idestart>
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+
+  if((b = idequeue) == 0){
+    release(&idelock);
+80102094:	83 ec 0c             	sub    $0xc,%esp
+80102097:	68 80 a5 10 80       	push   $0x8010a580
+8010209c:	e8 1f 23 00 00       	call   801043c0 <release>
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+    idestart(idequeue);
+
+  release(&idelock);
+}
+801020a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801020a4:	5b                   	pop    %ebx
+801020a5:	5e                   	pop    %esi
+801020a6:	5f                   	pop    %edi
+801020a7:	5d                   	pop    %ebp
+801020a8:	c3                   	ret    
+801020a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801020b0:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801020b5:	8d 76 00             	lea    0x0(%esi),%esi
+801020b8:	ec                   	in     (%dx),%al
+static int
+idewait(int checkerr)
+{
+  int r;
+
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+801020b9:	89 c1                	mov    %eax,%ecx
+801020bb:	83 e1 c0             	and    $0xffffffc0,%ecx
+801020be:	80 f9 40             	cmp    $0x40,%cl
+801020c1:	75 f5                	jne    801020b8 <ideintr+0x78>
+    ;
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+801020c3:	a8 21                	test   $0x21,%al
+801020c5:	75 ab                	jne    80102072 <ideintr+0x32>
+  }
+  idequeue = b->qnext;
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+    insl(0x1f0, b->data, BSIZE/4);
+801020c7:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+}
+
+static inline void
+insl(int port, void *addr, int cnt)
+{
+  asm volatile("cld; rep insl" :
+801020ca:	b9 80 00 00 00       	mov    $0x80,%ecx
+801020cf:	ba f0 01 00 00       	mov    $0x1f0,%edx
+801020d4:	fc                   	cld    
+801020d5:	f3 6d                	rep insl (%dx),%es:(%edi)
+801020d7:	8b 33                	mov    (%ebx),%esi
+801020d9:	eb 97                	jmp    80102072 <ideintr+0x32>
+801020db:	90                   	nop
+801020dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801020e0 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+801020e0:	55                   	push   %ebp
+801020e1:	89 e5                	mov    %esp,%ebp
+801020e3:	53                   	push   %ebx
+801020e4:	83 ec 10             	sub    $0x10,%esp
+801020e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+801020ea:	8d 43 0c             	lea    0xc(%ebx),%eax
+801020ed:	50                   	push   %eax
+801020ee:	e8 6d 20 00 00       	call   80104160 <holdingsleep>
+801020f3:	83 c4 10             	add    $0x10,%esp
+801020f6:	85 c0                	test   %eax,%eax
+801020f8:	0f 84 ad 00 00 00    	je     801021ab <iderw+0xcb>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+801020fe:	8b 03                	mov    (%ebx),%eax
+80102100:	83 e0 06             	and    $0x6,%eax
+80102103:	83 f8 02             	cmp    $0x2,%eax
+80102106:	0f 84 b9 00 00 00    	je     801021c5 <iderw+0xe5>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+8010210c:	8b 53 04             	mov    0x4(%ebx),%edx
+8010210f:	85 d2                	test   %edx,%edx
+80102111:	74 0d                	je     80102120 <iderw+0x40>
+80102113:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+80102118:	85 c0                	test   %eax,%eax
+8010211a:	0f 84 98 00 00 00    	je     801021b8 <iderw+0xd8>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102120:	83 ec 0c             	sub    $0xc,%esp
+80102123:	68 80 a5 10 80       	push   $0x8010a580
+80102128:	e8 e3 21 00 00       	call   80104310 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010212d:	8b 15 64 a5 10 80    	mov    0x8010a564,%edx
+80102133:	83 c4 10             	add    $0x10,%esp
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+
+  // Append b to idequeue.
+  b->qnext = 0;
+80102136:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010213d:	85 d2                	test   %edx,%edx
+8010213f:	75 09                	jne    8010214a <iderw+0x6a>
+80102141:	eb 58                	jmp    8010219b <iderw+0xbb>
+80102143:	90                   	nop
+80102144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102148:	89 c2                	mov    %eax,%edx
+8010214a:	8b 42 58             	mov    0x58(%edx),%eax
+8010214d:	85 c0                	test   %eax,%eax
+8010214f:	75 f7                	jne    80102148 <iderw+0x68>
+80102151:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+80102154:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+80102156:	3b 1d 64 a5 10 80    	cmp    0x8010a564,%ebx
+8010215c:	74 44                	je     801021a2 <iderw+0xc2>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010215e:	8b 03                	mov    (%ebx),%eax
+80102160:	83 e0 06             	and    $0x6,%eax
+80102163:	83 f8 02             	cmp    $0x2,%eax
+80102166:	74 23                	je     8010218b <iderw+0xab>
+80102168:	90                   	nop
+80102169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sleep(b, &idelock);
+80102170:	83 ec 08             	sub    $0x8,%esp
+80102173:	68 80 a5 10 80       	push   $0x8010a580
+80102178:	53                   	push   %ebx
+80102179:	e8 a2 1b 00 00       	call   80103d20 <sleep>
+  // Start disk if necessary.
+  if(idequeue == b)
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+8010217e:	8b 03                	mov    (%ebx),%eax
+80102180:	83 c4 10             	add    $0x10,%esp
+80102183:	83 e0 06             	and    $0x6,%eax
+80102186:	83 f8 02             	cmp    $0x2,%eax
+80102189:	75 e5                	jne    80102170 <iderw+0x90>
+    sleep(b, &idelock);
+  }
+
+
+  release(&idelock);
+8010218b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
+}
+80102192:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102195:	c9                   	leave  
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+    sleep(b, &idelock);
+  }
+
+
+  release(&idelock);
+80102196:	e9 25 22 00 00       	jmp    801043c0 <release>
+
+  acquire(&idelock);  //DOC:acquire-lock
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+8010219b:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+801021a0:	eb b2                	jmp    80102154 <iderw+0x74>
+    ;
+  *pp = b;
+
+  // Start disk if necessary.
+  if(idequeue == b)
+    idestart(b);
+801021a2:	89 d8                	mov    %ebx,%eax
+801021a4:	e8 47 fd ff ff       	call   80101ef0 <idestart>
+801021a9:	eb b3                	jmp    8010215e <iderw+0x7e>
+iderw(struct buf *b)
+{
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+    panic("iderw: buf not locked");
+801021ab:	83 ec 0c             	sub    $0xc,%esp
+801021ae:	68 0a 72 10 80       	push   $0x8010720a
+801021b3:	e8 b8 e1 ff ff       	call   80100370 <panic>
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+    panic("iderw: ide disk 1 not present");
+801021b8:	83 ec 0c             	sub    $0xc,%esp
+801021bb:	68 35 72 10 80       	push   $0x80107235
+801021c0:	e8 ab e1 ff ff       	call   80100370 <panic>
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+    panic("iderw: nothing to do");
+801021c5:	83 ec 0c             	sub    $0xc,%esp
+801021c8:	68 20 72 10 80       	push   $0x80107220
+801021cd:	e8 9e e1 ff ff       	call   80100370 <panic>
+801021d2:	66 90                	xchg   %ax,%ax
+801021d4:	66 90                	xchg   %ax,%ax
+801021d6:	66 90                	xchg   %ax,%ax
+801021d8:	66 90                	xchg   %ax,%ax
+801021da:	66 90                	xchg   %ax,%ax
+801021dc:	66 90                	xchg   %ax,%ax
+801021de:	66 90                	xchg   %ax,%ax
+
+801021e0 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+801021e0:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+801021e1:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+801021e8:	00 c0 fe 
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+801021eb:	89 e5                	mov    %esp,%ebp
+801021ed:	56                   	push   %esi
+801021ee:	53                   	push   %ebx
+};
+
+static uint
+ioapicread(int reg)
+{
+  ioapic->reg = reg;
+801021ef:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+801021f6:	00 00 00 
+  return ioapic->data;
+801021f9:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+801021ff:	8b 72 10             	mov    0x10(%edx),%esi
+};
+
+static uint
+ioapicread(int reg)
+{
+  ioapic->reg = reg;
+80102202:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+  return ioapic->data;
+80102208:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+8010220e:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
+ioapicinit(void)
+{
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102215:	89 f0                	mov    %esi,%eax
+80102217:	c1 e8 10             	shr    $0x10,%eax
+8010221a:	0f b6 f0             	movzbl %al,%esi
+
+static uint
+ioapicread(int reg)
+{
+  ioapic->reg = reg;
+  return ioapic->data;
+8010221d:	8b 41 10             	mov    0x10(%ecx),%eax
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+80102220:	c1 e8 18             	shr    $0x18,%eax
+80102223:	39 d0                	cmp    %edx,%eax
+80102225:	74 16                	je     8010223d <ioapicinit+0x5d>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102227:	83 ec 0c             	sub    $0xc,%esp
+8010222a:	68 54 72 10 80       	push   $0x80107254
+8010222f:	e8 2c e4 ff ff       	call   80100660 <cprintf>
+80102234:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+8010223a:	83 c4 10             	add    $0x10,%esp
+8010223d:	83 c6 21             	add    $0x21,%esi
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+80102240:	ba 10 00 00 00       	mov    $0x10,%edx
+80102245:	b8 20 00 00 00       	mov    $0x20,%eax
+8010224a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+80102250:	89 11                	mov    %edx,(%ecx)
+  ioapic->data = data;
+80102252:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102258:	89 c3                	mov    %eax,%ebx
+8010225a:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+80102260:	83 c0 01             	add    $0x1,%eax
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+  ioapic->data = data;
+80102263:	89 59 10             	mov    %ebx,0x10(%ecx)
+80102266:	8d 5a 01             	lea    0x1(%edx),%ebx
+80102269:	83 c2 02             	add    $0x2,%edx
+  if(id != ioapicid)
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+8010226c:	39 f0                	cmp    %esi,%eax
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+8010226e:	89 19                	mov    %ebx,(%ecx)
+  ioapic->data = data;
+80102270:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102276:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  if(id != ioapicid)
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+8010227d:	75 d1                	jne    80102250 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+8010227f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102282:	5b                   	pop    %ebx
+80102283:	5e                   	pop    %esi
+80102284:	5d                   	pop    %ebp
+80102285:	c3                   	ret    
+80102286:	8d 76 00             	lea    0x0(%esi),%esi
+80102289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102290 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+80102290:	55                   	push   %ebp
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+80102291:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+  }
+}
+
+void
+ioapicenable(int irq, int cpunum)
+{
+80102297:	89 e5                	mov    %esp,%ebp
+80102299:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+8010229c:	8d 50 20             	lea    0x20(%eax),%edx
+8010229f:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+801022a3:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801022a5:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+801022ab:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+801022ae:	89 51 10             	mov    %edx,0x10(%ecx)
+{
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801022b1:	8b 55 0c             	mov    0xc(%ebp),%edx
+}
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+801022b4:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+801022b6:	a1 34 26 11 80       	mov    0x80112634,%eax
+{
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+801022bb:	c1 e2 18             	shl    $0x18,%edx
+
+static void
+ioapicwrite(int reg, uint data)
+{
+  ioapic->reg = reg;
+  ioapic->data = data;
+801022be:	89 50 10             	mov    %edx,0x10(%eax)
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+}
+801022c1:	5d                   	pop    %ebp
+801022c2:	c3                   	ret    
+801022c3:	66 90                	xchg   %ax,%ax
+801022c5:	66 90                	xchg   %ax,%ax
+801022c7:	66 90                	xchg   %ax,%ax
+801022c9:	66 90                	xchg   %ax,%ax
+801022cb:	66 90                	xchg   %ax,%ax
+801022cd:	66 90                	xchg   %ax,%ax
+801022cf:	90                   	nop
+
+801022d0 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+801022d0:	55                   	push   %ebp
+801022d1:	89 e5                	mov    %esp,%ebp
+801022d3:	53                   	push   %ebx
+801022d4:	83 ec 04             	sub    $0x4,%esp
+801022d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+801022da:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+801022e0:	75 70                	jne    80102352 <kfree+0x82>
+801022e2:	81 fb 88 55 11 80    	cmp    $0x80115588,%ebx
+801022e8:	72 68                	jb     80102352 <kfree+0x82>
+801022ea:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801022f0:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+801022f5:	77 5b                	ja     80102352 <kfree+0x82>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+801022f7:	83 ec 04             	sub    $0x4,%esp
+801022fa:	68 00 10 00 00       	push   $0x1000
+801022ff:	6a 01                	push   $0x1
+80102301:	53                   	push   %ebx
+80102302:	e8 09 21 00 00       	call   80104410 <memset>
+
+  if(kmem.use_lock)
+80102307:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+8010230d:	83 c4 10             	add    $0x10,%esp
+80102310:	85 d2                	test   %edx,%edx
+80102312:	75 2c                	jne    80102340 <kfree+0x70>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102314:	a1 78 26 11 80       	mov    0x80112678,%eax
+80102319:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+8010231b:	a1 74 26 11 80       	mov    0x80112674,%eax
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+  kmem.freelist = r;
+80102320:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
+  if(kmem.use_lock)
+80102326:	85 c0                	test   %eax,%eax
+80102328:	75 06                	jne    80102330 <kfree+0x60>
+    release(&kmem.lock);
+}
+8010232a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010232d:	c9                   	leave  
+8010232e:	c3                   	ret    
+8010232f:	90                   	nop
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+  kmem.freelist = r;
+  if(kmem.use_lock)
+    release(&kmem.lock);
+80102330:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
+}
+80102337:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010233a:	c9                   	leave  
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+  kmem.freelist = r;
+  if(kmem.use_lock)
+    release(&kmem.lock);
+8010233b:	e9 80 20 00 00       	jmp    801043c0 <release>
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+80102340:	83 ec 0c             	sub    $0xc,%esp
+80102343:	68 40 26 11 80       	push   $0x80112640
+80102348:	e8 c3 1f 00 00       	call   80104310 <acquire>
+8010234d:	83 c4 10             	add    $0x10,%esp
+80102350:	eb c2                	jmp    80102314 <kfree+0x44>
+kfree(char *v)
+{
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+    panic("kfree");
+80102352:	83 ec 0c             	sub    $0xc,%esp
+80102355:	68 86 72 10 80       	push   $0x80107286
+8010235a:	e8 11 e0 ff ff       	call   80100370 <panic>
+8010235f:	90                   	nop
+
+80102360 <freerange>:
+  kmem.use_lock = 1;
+}
+
+void
+freerange(void *vstart, void *vend)
+{
+80102360:	55                   	push   %ebp
+80102361:	89 e5                	mov    %esp,%ebp
+80102363:	56                   	push   %esi
+80102364:	53                   	push   %ebx
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+80102365:	8b 45 08             	mov    0x8(%ebp),%eax
+  kmem.use_lock = 1;
+}
+
+void
+freerange(void *vstart, void *vend)
+{
+80102368:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+8010236b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102371:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102377:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010237d:	39 de                	cmp    %ebx,%esi
+8010237f:	72 23                	jb     801023a4 <freerange+0x44>
+80102381:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102388:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010238e:	83 ec 0c             	sub    $0xc,%esp
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102391:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102397:	50                   	push   %eax
+80102398:	e8 33 ff ff ff       	call   801022d0 <kfree>
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010239d:	83 c4 10             	add    $0x10,%esp
+801023a0:	39 f3                	cmp    %esi,%ebx
+801023a2:	76 e4                	jbe    80102388 <freerange+0x28>
+    kfree(p);
+}
+801023a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801023a7:	5b                   	pop    %ebx
+801023a8:	5e                   	pop    %esi
+801023a9:	5d                   	pop    %ebp
+801023aa:	c3                   	ret    
+801023ab:	90                   	nop
+801023ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801023b0 <kinit1>:
+// the pages mapped by entrypgdir on free list.
+// 2. main() calls kinit2() with the rest of the physical pages
+// after installing a full page table that maps them on all cores.
+void
+kinit1(void *vstart, void *vend)
+{
+801023b0:	55                   	push   %ebp
+801023b1:	89 e5                	mov    %esp,%ebp
+801023b3:	56                   	push   %esi
+801023b4:	53                   	push   %ebx
+801023b5:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+801023b8:	83 ec 08             	sub    $0x8,%esp
+801023bb:	68 8c 72 10 80       	push   $0x8010728c
+801023c0:	68 40 26 11 80       	push   $0x80112640
+801023c5:	e8 e6 1d 00 00       	call   801041b0 <initlock>
+
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+801023ca:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023cd:	83 c4 10             	add    $0x10,%esp
+// after installing a full page table that maps them on all cores.
+void
+kinit1(void *vstart, void *vend)
+{
+  initlock(&kmem.lock, "kmem");
+  kmem.use_lock = 0;
+801023d0:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+801023d7:	00 00 00 
+
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+801023da:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801023e0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023e6:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801023ec:	39 de                	cmp    %ebx,%esi
+801023ee:	72 1c                	jb     8010240c <kinit1+0x5c>
+    kfree(p);
+801023f0:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801023f6:	83 ec 0c             	sub    $0xc,%esp
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+801023f9:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+801023ff:	50                   	push   %eax
+80102400:	e8 cb fe ff ff       	call   801022d0 <kfree>
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102405:	83 c4 10             	add    $0x10,%esp
+80102408:	39 de                	cmp    %ebx,%esi
+8010240a:	73 e4                	jae    801023f0 <kinit1+0x40>
+kinit1(void *vstart, void *vend)
+{
+  initlock(&kmem.lock, "kmem");
+  kmem.use_lock = 0;
+  freerange(vstart, vend);
+}
+8010240c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010240f:	5b                   	pop    %ebx
+80102410:	5e                   	pop    %esi
+80102411:	5d                   	pop    %ebp
+80102412:	c3                   	ret    
+80102413:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102419:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102420 <kinit2>:
+
+void
+kinit2(void *vstart, void *vend)
+{
+80102420:	55                   	push   %ebp
+80102421:	89 e5                	mov    %esp,%ebp
+80102423:	56                   	push   %esi
+80102424:	53                   	push   %ebx
+
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+80102425:	8b 45 08             	mov    0x8(%ebp),%eax
+  freerange(vstart, vend);
+}
+
+void
+kinit2(void *vstart, void *vend)
+{
+80102428:	8b 75 0c             	mov    0xc(%ebp),%esi
+
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+8010242b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102431:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102437:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010243d:	39 de                	cmp    %ebx,%esi
+8010243f:	72 23                	jb     80102464 <kinit2+0x44>
+80102441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102448:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+8010244e:	83 ec 0c             	sub    $0xc,%esp
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102451:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102457:	50                   	push   %eax
+80102458:	e8 73 fe ff ff       	call   801022d0 <kfree>
+void
+freerange(void *vstart, void *vend)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint)vstart);
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+8010245d:	83 c4 10             	add    $0x10,%esp
+80102460:	39 de                	cmp    %ebx,%esi
+80102462:	73 e4                	jae    80102448 <kinit2+0x28>
+
+void
+kinit2(void *vstart, void *vend)
+{
+  freerange(vstart, vend);
+  kmem.use_lock = 1;
+80102464:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+8010246b:	00 00 00 
+}
+8010246e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102471:	5b                   	pop    %ebx
+80102472:	5e                   	pop    %esi
+80102473:	5d                   	pop    %ebp
+80102474:	c3                   	ret    
+80102475:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102479:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102480 <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+char*
+kalloc(void)
+{
+80102480:	55                   	push   %ebp
+80102481:	89 e5                	mov    %esp,%ebp
+80102483:	53                   	push   %ebx
+80102484:	83 ec 04             	sub    $0x4,%esp
+  struct run *r;
+
+  if(kmem.use_lock)
+80102487:	a1 74 26 11 80       	mov    0x80112674,%eax
+8010248c:	85 c0                	test   %eax,%eax
+8010248e:	75 30                	jne    801024c0 <kalloc+0x40>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+80102490:	8b 1d 78 26 11 80    	mov    0x80112678,%ebx
+  if(r)
+80102496:	85 db                	test   %ebx,%ebx
+80102498:	74 1c                	je     801024b6 <kalloc+0x36>
+    kmem.freelist = r->next;
+8010249a:	8b 13                	mov    (%ebx),%edx
+8010249c:	89 15 78 26 11 80    	mov    %edx,0x80112678
+  if(kmem.use_lock)
+801024a2:	85 c0                	test   %eax,%eax
+801024a4:	74 10                	je     801024b6 <kalloc+0x36>
+    release(&kmem.lock);
+801024a6:	83 ec 0c             	sub    $0xc,%esp
+801024a9:	68 40 26 11 80       	push   $0x80112640
+801024ae:	e8 0d 1f 00 00       	call   801043c0 <release>
+801024b3:	83 c4 10             	add    $0x10,%esp
+  return (char*)r;
+}
+801024b6:	89 d8                	mov    %ebx,%eax
+801024b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801024bb:	c9                   	leave  
+801024bc:	c3                   	ret    
+801024bd:	8d 76 00             	lea    0x0(%esi),%esi
+kalloc(void)
+{
+  struct run *r;
+
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+801024c0:	83 ec 0c             	sub    $0xc,%esp
+801024c3:	68 40 26 11 80       	push   $0x80112640
+801024c8:	e8 43 1e 00 00       	call   80104310 <acquire>
+  r = kmem.freelist;
+801024cd:	8b 1d 78 26 11 80    	mov    0x80112678,%ebx
+  if(r)
+801024d3:	83 c4 10             	add    $0x10,%esp
+801024d6:	a1 74 26 11 80       	mov    0x80112674,%eax
+801024db:	85 db                	test   %ebx,%ebx
+801024dd:	75 bb                	jne    8010249a <kalloc+0x1a>
+801024df:	eb c1                	jmp    801024a2 <kalloc+0x22>
+801024e1:	66 90                	xchg   %ax,%ax
+801024e3:	66 90                	xchg   %ax,%ax
+801024e5:	66 90                	xchg   %ax,%ax
+801024e7:	66 90                	xchg   %ax,%ax
+801024e9:	66 90                	xchg   %ax,%ax
+801024eb:	66 90                	xchg   %ax,%ax
+801024ed:	66 90                	xchg   %ax,%ax
+801024ef:	90                   	nop
+
+801024f0 <kbdgetc>:
+#include "defs.h"
+#include "kbd.h"
+
+int
+kbdgetc(void)
+{
+801024f0:	55                   	push   %ebp
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801024f1:	ba 64 00 00 00       	mov    $0x64,%edx
+801024f6:	89 e5                	mov    %esp,%ebp
+801024f8:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+801024f9:	a8 01                	test   $0x1,%al
+801024fb:	0f 84 af 00 00 00    	je     801025b0 <kbdgetc+0xc0>
+80102501:	ba 60 00 00 00       	mov    $0x60,%edx
+80102506:	ec                   	in     (%dx),%al
+    return -1;
+  data = inb(KBDATAP);
+80102507:	0f b6 d0             	movzbl %al,%edx
+
+  if(data == 0xE0){
+8010250a:	81 fa e0 00 00 00    	cmp    $0xe0,%edx
+80102510:	74 7e                	je     80102590 <kbdgetc+0xa0>
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+80102512:	84 c0                	test   %al,%al
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+80102514:	8b 0d b4 a5 10 80    	mov    0x8010a5b4,%ecx
+  data = inb(KBDATAP);
+
+  if(data == 0xE0){
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+8010251a:	79 24                	jns    80102540 <kbdgetc+0x50>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+8010251c:	f6 c1 40             	test   $0x40,%cl
+8010251f:	75 05                	jne    80102526 <kbdgetc+0x36>
+80102521:	89 c2                	mov    %eax,%edx
+80102523:	83 e2 7f             	and    $0x7f,%edx
+    shift &= ~(shiftcode[data] | E0ESC);
+80102526:	0f b6 82 c0 73 10 80 	movzbl -0x7fef8c40(%edx),%eax
+8010252d:	83 c8 40             	or     $0x40,%eax
+80102530:	0f b6 c0             	movzbl %al,%eax
+80102533:	f7 d0                	not    %eax
+80102535:	21 c8                	and    %ecx,%eax
+80102537:	a3 b4 a5 10 80       	mov    %eax,0x8010a5b4
+    return 0;
+8010253c:	31 c0                	xor    %eax,%eax
+      c += 'A' - 'a';
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+8010253e:	5d                   	pop    %ebp
+8010253f:	c3                   	ret    
+  } else if(data & 0x80){
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+80102540:	f6 c1 40             	test   $0x40,%cl
+80102543:	74 09                	je     8010254e <kbdgetc+0x5e>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+80102545:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+80102548:	83 e1 bf             	and    $0xffffffbf,%ecx
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+8010254b:	0f b6 d0             	movzbl %al,%edx
+    shift &= ~E0ESC;
+  }
+
+  shift |= shiftcode[data];
+  shift ^= togglecode[data];
+8010254e:	0f b6 82 c0 73 10 80 	movzbl -0x7fef8c40(%edx),%eax
+80102555:	09 c1                	or     %eax,%ecx
+80102557:	0f b6 82 c0 72 10 80 	movzbl -0x7fef8d40(%edx),%eax
+8010255e:	31 c1                	xor    %eax,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102560:	89 c8                	mov    %ecx,%eax
+    data |= 0x80;
+    shift &= ~E0ESC;
+  }
+
+  shift |= shiftcode[data];
+  shift ^= togglecode[data];
+80102562:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
+  c = charcode[shift & (CTL | SHIFT)][data];
+80102568:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+8010256b:	83 e1 08             	and    $0x8,%ecx
+    shift &= ~E0ESC;
+  }
+
+  shift |= shiftcode[data];
+  shift ^= togglecode[data];
+  c = charcode[shift & (CTL | SHIFT)][data];
+8010256e:	8b 04 85 a0 72 10 80 	mov    -0x7fef8d60(,%eax,4),%eax
+80102575:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+  if(shift & CAPSLOCK){
+80102579:	74 c3                	je     8010253e <kbdgetc+0x4e>
+    if('a' <= c && c <= 'z')
+8010257b:	8d 50 9f             	lea    -0x61(%eax),%edx
+8010257e:	83 fa 19             	cmp    $0x19,%edx
+80102581:	77 1d                	ja     801025a0 <kbdgetc+0xb0>
+      c += 'A' - 'a';
+80102583:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+80102586:	5d                   	pop    %ebp
+80102587:	c3                   	ret    
+80102588:	90                   	nop
+80102589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+  data = inb(KBDATAP);
+
+  if(data == 0xE0){
+    shift |= E0ESC;
+    return 0;
+80102590:	31 c0                	xor    %eax,%eax
+  if((st & KBS_DIB) == 0)
+    return -1;
+  data = inb(KBDATAP);
+
+  if(data == 0xE0){
+    shift |= E0ESC;
+80102592:	83 0d b4 a5 10 80 40 	orl    $0x40,0x8010a5b4
+      c += 'A' - 'a';
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+80102599:	5d                   	pop    %ebp
+8010259a:	c3                   	ret    
+8010259b:	90                   	nop
+8010259c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  shift ^= togglecode[data];
+  c = charcode[shift & (CTL | SHIFT)][data];
+  if(shift & CAPSLOCK){
+    if('a' <= c && c <= 'z')
+      c += 'A' - 'a';
+    else if('A' <= c && c <= 'Z')
+801025a0:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+801025a3:	8d 50 20             	lea    0x20(%eax),%edx
+  }
+  return c;
+}
+801025a6:	5d                   	pop    %ebp
+  c = charcode[shift & (CTL | SHIFT)][data];
+  if(shift & CAPSLOCK){
+    if('a' <= c && c <= 'z')
+      c += 'A' - 'a';
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+801025a7:	83 f9 19             	cmp    $0x19,%ecx
+801025aa:	0f 46 c2             	cmovbe %edx,%eax
+  }
+  return c;
+}
+801025ad:	c3                   	ret    
+801025ae:	66 90                	xchg   %ax,%ax
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+    return -1;
+801025b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+      c += 'A' - 'a';
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+801025b5:	5d                   	pop    %ebp
+801025b6:	c3                   	ret    
+801025b7:	89 f6                	mov    %esi,%esi
+801025b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801025c0 <kbdintr>:
+
+void
+kbdintr(void)
+{
+801025c0:	55                   	push   %ebp
+801025c1:	89 e5                	mov    %esp,%ebp
+801025c3:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+801025c6:	68 f0 24 10 80       	push   $0x801024f0
+801025cb:	e8 20 e2 ff ff       	call   801007f0 <consoleintr>
+}
+801025d0:	83 c4 10             	add    $0x10,%esp
+801025d3:	c9                   	leave  
+801025d4:	c3                   	ret    
+801025d5:	66 90                	xchg   %ax,%ax
+801025d7:	66 90                	xchg   %ax,%ax
+801025d9:	66 90                	xchg   %ax,%ax
+801025db:	66 90                	xchg   %ax,%ax
+801025dd:	66 90                	xchg   %ax,%ax
+801025df:	90                   	nop
+
+801025e0 <lapicinit>:
+}
+
+void
+lapicinit(void)
+{
+  if(!lapic)
+801025e0:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+  lapic[ID];  // wait for write to finish, by reading
+}
+
+void
+lapicinit(void)
+{
+801025e5:	55                   	push   %ebp
+801025e6:	89 e5                	mov    %esp,%ebp
+  if(!lapic)
+801025e8:	85 c0                	test   %eax,%eax
+801025ea:	0f 84 c8 00 00 00    	je     801026b8 <lapicinit+0xd8>
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+801025f0:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+801025f7:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801025fa:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+801025fd:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+80102604:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102607:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010260a:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+80102611:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102614:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102617:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+8010261e:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102621:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102624:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+8010262b:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010262e:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102631:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+80102638:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010263b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+8010263e:	8b 50 30             	mov    0x30(%eax),%edx
+80102641:	c1 ea 10             	shr    $0x10,%edx
+80102644:	80 fa 03             	cmp    $0x3,%dl
+80102647:	77 77                	ja     801026c0 <lapicinit+0xe0>
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102649:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102650:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102653:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102656:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010265d:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102660:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102663:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010266a:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010266d:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102670:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102677:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010267a:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010267d:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80102684:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102687:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010268a:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+80102691:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102694:	8b 50 20             	mov    0x20(%eax),%edx
+80102697:	89 f6                	mov    %esi,%esi
+80102699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+801026a0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+801026a6:	80 e6 10             	and    $0x10,%dh
+801026a9:	75 f5                	jne    801026a0 <lapicinit+0xc0>
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+801026ab:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+801026b2:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026b5:	8b 40 20             	mov    0x20(%eax),%eax
+  while(lapic[ICRLO] & DELIVS)
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+801026b8:	5d                   	pop    %ebp
+801026b9:	c3                   	ret    
+801026ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+801026c0:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+801026c7:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+801026ca:	8b 50 20             	mov    0x20(%eax),%edx
+801026cd:	e9 77 ff ff ff       	jmp    80102649 <lapicinit+0x69>
+801026d2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801026d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801026e0 <lapicid>:
+}
+
+int
+lapicid(void)
+{
+  if (!lapic)
+801026e0:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+  lapicw(TPR, 0);
+}
+
+int
+lapicid(void)
+{
+801026e5:	55                   	push   %ebp
+801026e6:	89 e5                	mov    %esp,%ebp
+  if (!lapic)
+801026e8:	85 c0                	test   %eax,%eax
+801026ea:	74 0c                	je     801026f8 <lapicid+0x18>
+    return 0;
+  return lapic[ID] >> 24;
+801026ec:	8b 40 20             	mov    0x20(%eax),%eax
+}
+801026ef:	5d                   	pop    %ebp
+int
+lapicid(void)
+{
+  if (!lapic)
+    return 0;
+  return lapic[ID] >> 24;
+801026f0:	c1 e8 18             	shr    $0x18,%eax
+}
+801026f3:	c3                   	ret    
+801026f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+int
+lapicid(void)
+{
+  if (!lapic)
+    return 0;
+801026f8:	31 c0                	xor    %eax,%eax
+  return lapic[ID] >> 24;
+}
+801026fa:	5d                   	pop    %ebp
+801026fb:	c3                   	ret    
+801026fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102700 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+  if(lapic)
+80102700:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+}
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+80102705:	55                   	push   %ebp
+80102706:	89 e5                	mov    %esp,%ebp
+  if(lapic)
+80102708:	85 c0                	test   %eax,%eax
+8010270a:	74 0d                	je     80102719 <lapiceoi+0x19>
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010270c:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+80102713:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102716:	8b 40 20             	mov    0x20(%eax),%eax
+void
+lapiceoi(void)
+{
+  if(lapic)
+    lapicw(EOI, 0);
+}
+80102719:	5d                   	pop    %ebp
+8010271a:	c3                   	ret    
+8010271b:	90                   	nop
+8010271c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102720 <microdelay>:
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+80102720:	55                   	push   %ebp
+80102721:	89 e5                	mov    %esp,%ebp
+}
+80102723:	5d                   	pop    %ebp
+80102724:	c3                   	ret    
+80102725:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102729:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102730 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+80102730:	55                   	push   %ebp
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102731:	ba 70 00 00 00       	mov    $0x70,%edx
+80102736:	b8 0f 00 00 00       	mov    $0xf,%eax
+8010273b:	89 e5                	mov    %esp,%ebp
+8010273d:	53                   	push   %ebx
+8010273e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102741:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102744:	ee                   	out    %al,(%dx)
+80102745:	ba 71 00 00 00       	mov    $0x71,%edx
+8010274a:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010274f:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80102750:	31 c0                	xor    %eax,%eax
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102752:	c1 e3 18             	shl    $0x18,%ebx
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80102755:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+8010275b:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+8010275d:	c1 e9 0c             	shr    $0xc,%ecx
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+  wrv[1] = addr >> 4;
+80102760:	c1 e8 04             	shr    $0x4,%eax
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102763:	89 da                	mov    %ebx,%edx
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80102765:	80 cd 06             	or     $0x6,%ch
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+  wrv[1] = addr >> 4;
+80102768:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010276e:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102773:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80102779:	8b 58 20             	mov    0x20(%eax),%ebx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010277c:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80102783:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102786:	8b 58 20             	mov    0x20(%eax),%ebx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102789:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80102790:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80102793:	8b 58 20             	mov    0x20(%eax),%ebx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+80102796:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+8010279c:	8b 58 20             	mov    0x20(%eax),%ebx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+8010279f:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027a5:	8b 58 20             	mov    0x20(%eax),%ebx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+801027a8:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027ae:	8b 50 20             	mov    0x20(%eax),%edx
+
+//PAGEBREAK!
+static void
+lapicw(int index, int value)
+{
+  lapic[index] = value;
+801027b1:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+801027b7:	8b 40 20             	mov    0x20(%eax),%eax
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+    microdelay(200);
+  }
+}
+801027ba:	5b                   	pop    %ebx
+801027bb:	5d                   	pop    %ebp
+801027bc:	c3                   	ret    
+801027bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801027c0 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+801027c0:	55                   	push   %ebp
+801027c1:	ba 70 00 00 00       	mov    $0x70,%edx
+801027c6:	b8 0b 00 00 00       	mov    $0xb,%eax
+801027cb:	89 e5                	mov    %esp,%ebp
+801027cd:	57                   	push   %edi
+801027ce:	56                   	push   %esi
+801027cf:	53                   	push   %ebx
+801027d0:	83 ec 4c             	sub    $0x4c,%esp
+801027d3:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801027d4:	ba 71 00 00 00       	mov    $0x71,%edx
+801027d9:	ec                   	in     (%dx),%al
+801027da:	83 e0 04             	and    $0x4,%eax
+801027dd:	8d 75 d0             	lea    -0x30(%ebp),%esi
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801027e0:	31 db                	xor    %ebx,%ebx
+801027e2:	88 45 b7             	mov    %al,-0x49(%ebp)
+801027e5:	bf 70 00 00 00       	mov    $0x70,%edi
+801027ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801027f0:	89 d8                	mov    %ebx,%eax
+801027f2:	89 fa                	mov    %edi,%edx
+801027f4:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801027f5:	b9 71 00 00 00       	mov    $0x71,%ecx
+801027fa:	89 ca                	mov    %ecx,%edx
+801027fc:	ec                   	in     (%dx),%al
+}
+
+static void
+fill_rtcdate(struct rtcdate *r)
+{
+  r->second = cmos_read(SECS);
+801027fd:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102800:	89 fa                	mov    %edi,%edx
+80102802:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102805:	b8 02 00 00 00       	mov    $0x2,%eax
+8010280a:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010280b:	89 ca                	mov    %ecx,%edx
+8010280d:	ec                   	in     (%dx),%al
+  r->minute = cmos_read(MINS);
+8010280e:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102811:	89 fa                	mov    %edi,%edx
+80102813:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102816:	b8 04 00 00 00       	mov    $0x4,%eax
+8010281b:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010281c:	89 ca                	mov    %ecx,%edx
+8010281e:	ec                   	in     (%dx),%al
+  r->hour   = cmos_read(HOURS);
+8010281f:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102822:	89 fa                	mov    %edi,%edx
+80102824:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102827:	b8 07 00 00 00       	mov    $0x7,%eax
+8010282c:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010282d:	89 ca                	mov    %ecx,%edx
+8010282f:	ec                   	in     (%dx),%al
+  r->day    = cmos_read(DAY);
+80102830:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102833:	89 fa                	mov    %edi,%edx
+80102835:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102838:	b8 08 00 00 00       	mov    $0x8,%eax
+8010283d:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010283e:	89 ca                	mov    %ecx,%edx
+80102840:	ec                   	in     (%dx),%al
+  r->month  = cmos_read(MONTH);
+80102841:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102844:	89 fa                	mov    %edi,%edx
+80102846:	89 45 c8             	mov    %eax,-0x38(%ebp)
+80102849:	b8 09 00 00 00       	mov    $0x9,%eax
+8010284e:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010284f:	89 ca                	mov    %ecx,%edx
+80102851:	ec                   	in     (%dx),%al
+  r->year   = cmos_read(YEAR);
+80102852:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102855:	89 fa                	mov    %edi,%edx
+80102857:	89 45 cc             	mov    %eax,-0x34(%ebp)
+8010285a:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010285f:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102860:	89 ca                	mov    %ecx,%edx
+80102862:	ec                   	in     (%dx),%al
+  bcd = (sb & (1 << 2)) == 0;
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+80102863:	84 c0                	test   %al,%al
+80102865:	78 89                	js     801027f0 <cmostime+0x30>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102867:	89 d8                	mov    %ebx,%eax
+80102869:	89 fa                	mov    %edi,%edx
+8010286b:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010286c:	89 ca                	mov    %ecx,%edx
+8010286e:	ec                   	in     (%dx),%al
+}
+
+static void
+fill_rtcdate(struct rtcdate *r)
+{
+  r->second = cmos_read(SECS);
+8010286f:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102872:	89 fa                	mov    %edi,%edx
+80102874:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102877:	b8 02 00 00 00       	mov    $0x2,%eax
+8010287c:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010287d:	89 ca                	mov    %ecx,%edx
+8010287f:	ec                   	in     (%dx),%al
+  r->minute = cmos_read(MINS);
+80102880:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102883:	89 fa                	mov    %edi,%edx
+80102885:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102888:	b8 04 00 00 00       	mov    $0x4,%eax
+8010288d:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010288e:	89 ca                	mov    %ecx,%edx
+80102890:	ec                   	in     (%dx),%al
+  r->hour   = cmos_read(HOURS);
+80102891:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102894:	89 fa                	mov    %edi,%edx
+80102896:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102899:	b8 07 00 00 00       	mov    $0x7,%eax
+8010289e:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010289f:	89 ca                	mov    %ecx,%edx
+801028a1:	ec                   	in     (%dx),%al
+  r->day    = cmos_read(DAY);
+801028a2:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801028a5:	89 fa                	mov    %edi,%edx
+801028a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801028aa:	b8 08 00 00 00       	mov    $0x8,%eax
+801028af:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801028b0:	89 ca                	mov    %ecx,%edx
+801028b2:	ec                   	in     (%dx),%al
+  r->month  = cmos_read(MONTH);
+801028b3:	0f b6 c0             	movzbl %al,%eax
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801028b6:	89 fa                	mov    %edi,%edx
+801028b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801028bb:	b8 09 00 00 00       	mov    $0x9,%eax
+801028c0:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801028c1:	89 ca                	mov    %ecx,%edx
+801028c3:	ec                   	in     (%dx),%al
+  r->year   = cmos_read(YEAR);
+801028c4:	0f b6 c0             	movzbl %al,%eax
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+801028c7:	83 ec 04             	sub    $0x4,%esp
+  r->second = cmos_read(SECS);
+  r->minute = cmos_read(MINS);
+  r->hour   = cmos_read(HOURS);
+  r->day    = cmos_read(DAY);
+  r->month  = cmos_read(MONTH);
+  r->year   = cmos_read(YEAR);
+801028ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+801028cd:	8d 45 b8             	lea    -0x48(%ebp),%eax
+801028d0:	6a 18                	push   $0x18
+801028d2:	56                   	push   %esi
+801028d3:	50                   	push   %eax
+801028d4:	e8 87 1b 00 00       	call   80104460 <memcmp>
+801028d9:	83 c4 10             	add    $0x10,%esp
+801028dc:	85 c0                	test   %eax,%eax
+801028de:	0f 85 0c ff ff ff    	jne    801027f0 <cmostime+0x30>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+801028e4:	80 7d b7 00          	cmpb   $0x0,-0x49(%ebp)
+801028e8:	75 78                	jne    80102962 <cmostime+0x1a2>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+801028ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
+801028ed:	89 c2                	mov    %eax,%edx
+801028ef:	83 e0 0f             	and    $0xf,%eax
+801028f2:	c1 ea 04             	shr    $0x4,%edx
+801028f5:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801028f8:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801028fb:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+801028fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102901:	89 c2                	mov    %eax,%edx
+80102903:	83 e0 0f             	and    $0xf,%eax
+80102906:	c1 ea 04             	shr    $0x4,%edx
+80102909:	8d 14 92             	lea    (%edx,%edx,4),%edx
+8010290c:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010290f:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+80102912:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102915:	89 c2                	mov    %eax,%edx
+80102917:	83 e0 0f             	and    $0xf,%eax
+8010291a:	c1 ea 04             	shr    $0x4,%edx
+8010291d:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102920:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102923:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80102926:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102929:	89 c2                	mov    %eax,%edx
+8010292b:	83 e0 0f             	and    $0xf,%eax
+8010292e:	c1 ea 04             	shr    $0x4,%edx
+80102931:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102934:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102937:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+8010293a:	8b 45 c8             	mov    -0x38(%ebp),%eax
+8010293d:	89 c2                	mov    %eax,%edx
+8010293f:	83 e0 0f             	and    $0xf,%eax
+80102942:	c1 ea 04             	shr    $0x4,%edx
+80102945:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102948:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010294b:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+8010294e:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102951:	89 c2                	mov    %eax,%edx
+80102953:	83 e0 0f             	and    $0xf,%eax
+80102956:	c1 ea 04             	shr    $0x4,%edx
+80102959:	8d 14 92             	lea    (%edx,%edx,4),%edx
+8010295c:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010295f:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+80102962:	8b 75 08             	mov    0x8(%ebp),%esi
+80102965:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102968:	89 06                	mov    %eax,(%esi)
+8010296a:	8b 45 bc             	mov    -0x44(%ebp),%eax
+8010296d:	89 46 04             	mov    %eax,0x4(%esi)
+80102970:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102973:	89 46 08             	mov    %eax,0x8(%esi)
+80102976:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102979:	89 46 0c             	mov    %eax,0xc(%esi)
+8010297c:	8b 45 c8             	mov    -0x38(%ebp),%eax
+8010297f:	89 46 10             	mov    %eax,0x10(%esi)
+80102982:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102985:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+80102988:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+8010298f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102992:	5b                   	pop    %ebx
+80102993:	5e                   	pop    %esi
+80102994:	5f                   	pop    %edi
+80102995:	5d                   	pop    %ebp
+80102996:	c3                   	ret    
+80102997:	66 90                	xchg   %ax,%ax
+80102999:	66 90                	xchg   %ax,%ax
+8010299b:	66 90                	xchg   %ax,%ax
+8010299d:	66 90                	xchg   %ax,%ax
+8010299f:	90                   	nop
+
+801029a0 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+801029a0:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+801029a6:	85 c9                	test   %ecx,%ecx
+801029a8:	0f 8e 85 00 00 00    	jle    80102a33 <install_trans+0x93>
+}
+
+// Copy committed blocks from log to their home location
+static void
+install_trans(void)
+{
+801029ae:	55                   	push   %ebp
+801029af:	89 e5                	mov    %esp,%ebp
+801029b1:	57                   	push   %edi
+801029b2:	56                   	push   %esi
+801029b3:	53                   	push   %ebx
+801029b4:	31 db                	xor    %ebx,%ebx
+801029b6:	83 ec 0c             	sub    $0xc,%esp
+801029b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+801029c0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+801029c5:	83 ec 08             	sub    $0x8,%esp
+801029c8:	01 d8                	add    %ebx,%eax
+801029ca:	83 c0 01             	add    $0x1,%eax
+801029cd:	50                   	push   %eax
+801029ce:	ff 35 c4 26 11 80    	pushl  0x801126c4
+801029d4:	e8 f7 d6 ff ff       	call   801000d0 <bread>
+801029d9:	89 c7                	mov    %eax,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801029db:	58                   	pop    %eax
+801029dc:	5a                   	pop    %edx
+801029dd:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+801029e4:	ff 35 c4 26 11 80    	pushl  0x801126c4
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+801029ea:	83 c3 01             	add    $0x1,%ebx
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801029ed:	e8 de d6 ff ff       	call   801000d0 <bread>
+801029f2:	89 c6                	mov    %eax,%esi
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+801029f4:	8d 47 5c             	lea    0x5c(%edi),%eax
+801029f7:	83 c4 0c             	add    $0xc,%esp
+801029fa:	68 00 02 00 00       	push   $0x200
+801029ff:	50                   	push   %eax
+80102a00:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102a03:	50                   	push   %eax
+80102a04:	e8 b7 1a 00 00       	call   801044c0 <memmove>
+    bwrite(dbuf);  // write dst to disk
+80102a09:	89 34 24             	mov    %esi,(%esp)
+80102a0c:	e8 8f d7 ff ff       	call   801001a0 <bwrite>
+    brelse(lbuf);
+80102a11:	89 3c 24             	mov    %edi,(%esp)
+80102a14:	e8 c7 d7 ff ff       	call   801001e0 <brelse>
+    brelse(dbuf);
+80102a19:	89 34 24             	mov    %esi,(%esp)
+80102a1c:	e8 bf d7 ff ff       	call   801001e0 <brelse>
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102a21:	83 c4 10             	add    $0x10,%esp
+80102a24:	39 1d c8 26 11 80    	cmp    %ebx,0x801126c8
+80102a2a:	7f 94                	jg     801029c0 <install_trans+0x20>
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+    bwrite(dbuf);  // write dst to disk
+    brelse(lbuf);
+    brelse(dbuf);
+  }
+}
+80102a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102a2f:	5b                   	pop    %ebx
+80102a30:	5e                   	pop    %esi
+80102a31:	5f                   	pop    %edi
+80102a32:	5d                   	pop    %ebp
+80102a33:	f3 c3                	repz ret 
+80102a35:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102a39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102a40 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80102a40:	55                   	push   %ebp
+80102a41:	89 e5                	mov    %esp,%ebp
+80102a43:	53                   	push   %ebx
+80102a44:	83 ec 0c             	sub    $0xc,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80102a47:	ff 35 b4 26 11 80    	pushl  0x801126b4
+80102a4d:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102a53:	e8 78 d6 ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+80102a58:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+  for (i = 0; i < log.lh.n; i++) {
+80102a5e:	83 c4 10             	add    $0x10,%esp
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+80102a61:	89 c3                	mov    %eax,%ebx
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80102a63:	85 c9                	test   %ecx,%ecx
+write_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+80102a65:	89 48 5c             	mov    %ecx,0x5c(%eax)
+  for (i = 0; i < log.lh.n; i++) {
+80102a68:	7e 1f                	jle    80102a89 <write_head+0x49>
+80102a6a:	8d 04 8d 00 00 00 00 	lea    0x0(,%ecx,4),%eax
+80102a71:	31 d2                	xor    %edx,%edx
+80102a73:	90                   	nop
+80102a74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    hb->block[i] = log.lh.block[i];
+80102a78:	8b 8a cc 26 11 80    	mov    -0x7feed934(%edx),%ecx
+80102a7e:	89 4c 13 60          	mov    %ecx,0x60(%ebx,%edx,1)
+80102a82:	83 c2 04             	add    $0x4,%edx
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80102a85:	39 c2                	cmp    %eax,%edx
+80102a87:	75 ef                	jne    80102a78 <write_head+0x38>
+    hb->block[i] = log.lh.block[i];
+  }
+  bwrite(buf);
+80102a89:	83 ec 0c             	sub    $0xc,%esp
+80102a8c:	53                   	push   %ebx
+80102a8d:	e8 0e d7 ff ff       	call   801001a0 <bwrite>
+  brelse(buf);
+80102a92:	89 1c 24             	mov    %ebx,(%esp)
+80102a95:	e8 46 d7 ff ff       	call   801001e0 <brelse>
+}
+80102a9a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102a9d:	c9                   	leave  
+80102a9e:	c3                   	ret    
+80102a9f:	90                   	nop
+
+80102aa0 <initlog>:
+static void recover_from_log(void);
+static void commit();
+
+void
+initlog(int dev)
+{
+80102aa0:	55                   	push   %ebp
+80102aa1:	89 e5                	mov    %esp,%ebp
+80102aa3:	53                   	push   %ebx
+80102aa4:	83 ec 2c             	sub    $0x2c,%esp
+80102aa7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (sizeof(struct logheader) >= BSIZE)
+    panic("initlog: too big logheader");
+
+  struct superblock sb;
+  initlock(&log.lock, "log");
+80102aaa:	68 c0 74 10 80       	push   $0x801074c0
+80102aaf:	68 80 26 11 80       	push   $0x80112680
+80102ab4:	e8 f7 16 00 00       	call   801041b0 <initlock>
+  readsb(dev, &sb);
+80102ab9:	58                   	pop    %eax
+80102aba:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102abd:	5a                   	pop    %edx
+80102abe:	50                   	push   %eax
+80102abf:	53                   	push   %ebx
+80102ac0:	e8 5b e9 ff ff       	call   80101420 <readsb>
+  log.start = sb.logstart;
+  log.size = sb.nlog;
+80102ac5:	8b 55 e8             	mov    -0x18(%ebp),%edx
+    panic("initlog: too big logheader");
+
+  struct superblock sb;
+  initlock(&log.lock, "log");
+  readsb(dev, &sb);
+  log.start = sb.logstart;
+80102ac8:	8b 45 ec             	mov    -0x14(%ebp),%eax
+
+// Read the log header from disk into the in-memory log header
+static void
+read_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+80102acb:	59                   	pop    %ecx
+  struct superblock sb;
+  initlock(&log.lock, "log");
+  readsb(dev, &sb);
+  log.start = sb.logstart;
+  log.size = sb.nlog;
+  log.dev = dev;
+80102acc:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
+
+  struct superblock sb;
+  initlock(&log.lock, "log");
+  readsb(dev, &sb);
+  log.start = sb.logstart;
+  log.size = sb.nlog;
+80102ad2:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
+    panic("initlog: too big logheader");
+
+  struct superblock sb;
+  initlock(&log.lock, "log");
+  readsb(dev, &sb);
+  log.start = sb.logstart;
+80102ad8:	a3 b4 26 11 80       	mov    %eax,0x801126b4
+
+// Read the log header from disk into the in-memory log header
+static void
+read_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+80102add:	5a                   	pop    %edx
+80102ade:	50                   	push   %eax
+80102adf:	53                   	push   %ebx
+80102ae0:	e8 eb d5 ff ff       	call   801000d0 <bread>
+  struct logheader *lh = (struct logheader *) (buf->data);
+  int i;
+  log.lh.n = lh->n;
+80102ae5:	8b 48 5c             	mov    0x5c(%eax),%ecx
+  for (i = 0; i < log.lh.n; i++) {
+80102ae8:	83 c4 10             	add    $0x10,%esp
+80102aeb:	85 c9                	test   %ecx,%ecx
+read_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *lh = (struct logheader *) (buf->data);
+  int i;
+  log.lh.n = lh->n;
+80102aed:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
+  for (i = 0; i < log.lh.n; i++) {
+80102af3:	7e 1c                	jle    80102b11 <initlog+0x71>
+80102af5:	8d 1c 8d 00 00 00 00 	lea    0x0(,%ecx,4),%ebx
+80102afc:	31 d2                	xor    %edx,%edx
+80102afe:	66 90                	xchg   %ax,%ax
+    log.lh.block[i] = lh->block[i];
+80102b00:	8b 4c 10 60          	mov    0x60(%eax,%edx,1),%ecx
+80102b04:	83 c2 04             	add    $0x4,%edx
+80102b07:	89 8a c8 26 11 80    	mov    %ecx,-0x7feed938(%edx)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *lh = (struct logheader *) (buf->data);
+  int i;
+  log.lh.n = lh->n;
+  for (i = 0; i < log.lh.n; i++) {
+80102b0d:	39 da                	cmp    %ebx,%edx
+80102b0f:	75 ef                	jne    80102b00 <initlog+0x60>
+    log.lh.block[i] = lh->block[i];
+  }
+  brelse(buf);
+80102b11:	83 ec 0c             	sub    $0xc,%esp
+80102b14:	50                   	push   %eax
+80102b15:	e8 c6 d6 ff ff       	call   801001e0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+80102b1a:	e8 81 fe ff ff       	call   801029a0 <install_trans>
+  log.lh.n = 0;
+80102b1f:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102b26:	00 00 00 
+  write_head(); // clear the log
+80102b29:	e8 12 ff ff ff       	call   80102a40 <write_head>
+  readsb(dev, &sb);
+  log.start = sb.logstart;
+  log.size = sb.nlog;
+  log.dev = dev;
+  recover_from_log();
+}
+80102b2e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102b31:	c9                   	leave  
+80102b32:	c3                   	ret    
+80102b33:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102b40 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80102b40:	55                   	push   %ebp
+80102b41:	89 e5                	mov    %esp,%ebp
+80102b43:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+80102b46:	68 80 26 11 80       	push   $0x80112680
+80102b4b:	e8 c0 17 00 00       	call   80104310 <acquire>
+80102b50:	83 c4 10             	add    $0x10,%esp
+80102b53:	eb 18                	jmp    80102b6d <begin_op+0x2d>
+80102b55:	8d 76 00             	lea    0x0(%esi),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80102b58:	83 ec 08             	sub    $0x8,%esp
+80102b5b:	68 80 26 11 80       	push   $0x80112680
+80102b60:	68 80 26 11 80       	push   $0x80112680
+80102b65:	e8 b6 11 00 00       	call   80103d20 <sleep>
+80102b6a:	83 c4 10             	add    $0x10,%esp
+void
+begin_op(void)
+{
+  acquire(&log.lock);
+  while(1){
+    if(log.committing){
+80102b6d:	a1 c0 26 11 80       	mov    0x801126c0,%eax
+80102b72:	85 c0                	test   %eax,%eax
+80102b74:	75 e2                	jne    80102b58 <begin_op+0x18>
+      sleep(&log, &log.lock);
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+80102b76:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102b7b:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102b81:	83 c0 01             	add    $0x1,%eax
+80102b84:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102b87:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102b8a:	83 fa 1e             	cmp    $0x1e,%edx
+80102b8d:	7f c9                	jg     80102b58 <begin_op+0x18>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80102b8f:	83 ec 0c             	sub    $0xc,%esp
+      sleep(&log, &log.lock);
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+80102b92:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+      release(&log.lock);
+80102b97:	68 80 26 11 80       	push   $0x80112680
+80102b9c:	e8 1f 18 00 00       	call   801043c0 <release>
+      break;
+    }
+  }
+}
+80102ba1:	83 c4 10             	add    $0x10,%esp
+80102ba4:	c9                   	leave  
+80102ba5:	c3                   	ret    
+80102ba6:	8d 76 00             	lea    0x0(%esi),%esi
+80102ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102bb0 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80102bb0:	55                   	push   %ebp
+80102bb1:	89 e5                	mov    %esp,%ebp
+80102bb3:	57                   	push   %edi
+80102bb4:	56                   	push   %esi
+80102bb5:	53                   	push   %ebx
+80102bb6:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+80102bb9:	68 80 26 11 80       	push   $0x80112680
+80102bbe:	e8 4d 17 00 00       	call   80104310 <acquire>
+  log.outstanding -= 1;
+80102bc3:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+  if(log.committing)
+80102bc8:	8b 1d c0 26 11 80    	mov    0x801126c0,%ebx
+80102bce:	83 c4 10             	add    $0x10,%esp
+end_op(void)
+{
+  int do_commit = 0;
+
+  acquire(&log.lock);
+  log.outstanding -= 1;
+80102bd1:	83 e8 01             	sub    $0x1,%eax
+  if(log.committing)
+80102bd4:	85 db                	test   %ebx,%ebx
+end_op(void)
+{
+  int do_commit = 0;
+
+  acquire(&log.lock);
+  log.outstanding -= 1;
+80102bd6:	a3 bc 26 11 80       	mov    %eax,0x801126bc
+  if(log.committing)
+80102bdb:	0f 85 23 01 00 00    	jne    80102d04 <end_op+0x154>
+    panic("log.committing");
+  if(log.outstanding == 0){
+80102be1:	85 c0                	test   %eax,%eax
+80102be3:	0f 85 f7 00 00 00    	jne    80102ce0 <end_op+0x130>
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+80102be9:	83 ec 0c             	sub    $0xc,%esp
+  log.outstanding -= 1;
+  if(log.committing)
+    panic("log.committing");
+  if(log.outstanding == 0){
+    do_commit = 1;
+    log.committing = 1;
+80102bec:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
+80102bf3:	00 00 00 
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+80102bf6:	31 db                	xor    %ebx,%ebx
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+80102bf8:	68 80 26 11 80       	push   $0x80112680
+80102bfd:	e8 be 17 00 00       	call   801043c0 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+80102c02:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102c08:	83 c4 10             	add    $0x10,%esp
+80102c0b:	85 c9                	test   %ecx,%ecx
+80102c0d:	0f 8e 8a 00 00 00    	jle    80102c9d <end_op+0xed>
+80102c13:	90                   	nop
+80102c14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+write_log(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80102c18:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102c1d:	83 ec 08             	sub    $0x8,%esp
+80102c20:	01 d8                	add    %ebx,%eax
+80102c22:	83 c0 01             	add    $0x1,%eax
+80102c25:	50                   	push   %eax
+80102c26:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102c2c:	e8 9f d4 ff ff       	call   801000d0 <bread>
+80102c31:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102c33:	58                   	pop    %eax
+80102c34:	5a                   	pop    %edx
+80102c35:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+80102c3c:	ff 35 c4 26 11 80    	pushl  0x801126c4
+static void
+write_log(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102c42:	83 c3 01             	add    $0x1,%ebx
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80102c45:	e8 86 d4 ff ff       	call   801000d0 <bread>
+80102c4a:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80102c4c:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102c4f:	83 c4 0c             	add    $0xc,%esp
+80102c52:	68 00 02 00 00       	push   $0x200
+80102c57:	50                   	push   %eax
+80102c58:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102c5b:	50                   	push   %eax
+80102c5c:	e8 5f 18 00 00       	call   801044c0 <memmove>
+    bwrite(to);  // write the log
+80102c61:	89 34 24             	mov    %esi,(%esp)
+80102c64:	e8 37 d5 ff ff       	call   801001a0 <bwrite>
+    brelse(from);
+80102c69:	89 3c 24             	mov    %edi,(%esp)
+80102c6c:	e8 6f d5 ff ff       	call   801001e0 <brelse>
+    brelse(to);
+80102c71:	89 34 24             	mov    %esi,(%esp)
+80102c74:	e8 67 d5 ff ff       	call   801001e0 <brelse>
+static void
+write_log(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80102c79:	83 c4 10             	add    $0x10,%esp
+80102c7c:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
+80102c82:	7c 94                	jl     80102c18 <end_op+0x68>
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+80102c84:	e8 b7 fd ff ff       	call   80102a40 <write_head>
+    install_trans(); // Now install writes to home locations
+80102c89:	e8 12 fd ff ff       	call   801029a0 <install_trans>
+    log.lh.n = 0;
+80102c8e:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102c95:	00 00 00 
+    write_head();    // Erase the transaction from the log
+80102c98:	e8 a3 fd ff ff       	call   80102a40 <write_head>
+
+  if(do_commit){
+    // call commit w/o holding locks, since not allowed
+    // to sleep with locks.
+    commit();
+    acquire(&log.lock);
+80102c9d:	83 ec 0c             	sub    $0xc,%esp
+80102ca0:	68 80 26 11 80       	push   $0x80112680
+80102ca5:	e8 66 16 00 00       	call   80104310 <acquire>
+    log.committing = 0;
+    wakeup(&log);
+80102caa:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+  if(do_commit){
+    // call commit w/o holding locks, since not allowed
+    // to sleep with locks.
+    commit();
+    acquire(&log.lock);
+    log.committing = 0;
+80102cb1:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
+80102cb8:	00 00 00 
+    wakeup(&log);
+80102cbb:	e8 10 12 00 00       	call   80103ed0 <wakeup>
+    release(&log.lock);
+80102cc0:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102cc7:	e8 f4 16 00 00       	call   801043c0 <release>
+80102ccc:	83 c4 10             	add    $0x10,%esp
+  }
+}
+80102ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102cd2:	5b                   	pop    %ebx
+80102cd3:	5e                   	pop    %esi
+80102cd4:	5f                   	pop    %edi
+80102cd5:	5d                   	pop    %ebp
+80102cd6:	c3                   	ret    
+80102cd7:	89 f6                	mov    %esi,%esi
+80102cd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    log.committing = 1;
+  } else {
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+80102ce0:	83 ec 0c             	sub    $0xc,%esp
+80102ce3:	68 80 26 11 80       	push   $0x80112680
+80102ce8:	e8 e3 11 00 00       	call   80103ed0 <wakeup>
+  }
+  release(&log.lock);
+80102ced:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102cf4:	e8 c7 16 00 00       	call   801043c0 <release>
+80102cf9:	83 c4 10             	add    $0x10,%esp
+    acquire(&log.lock);
+    log.committing = 0;
+    wakeup(&log);
+    release(&log.lock);
+  }
+}
+80102cfc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102cff:	5b                   	pop    %ebx
+80102d00:	5e                   	pop    %esi
+80102d01:	5f                   	pop    %edi
+80102d02:	5d                   	pop    %ebp
+80102d03:	c3                   	ret    
+  int do_commit = 0;
+
+  acquire(&log.lock);
+  log.outstanding -= 1;
+  if(log.committing)
+    panic("log.committing");
+80102d04:	83 ec 0c             	sub    $0xc,%esp
+80102d07:	68 c4 74 10 80       	push   $0x801074c4
+80102d0c:	e8 5f d6 ff ff       	call   80100370 <panic>
+80102d11:	eb 0d                	jmp    80102d20 <log_write>
+80102d13:	90                   	nop
+80102d14:	90                   	nop
+80102d15:	90                   	nop
+80102d16:	90                   	nop
+80102d17:	90                   	nop
+80102d18:	90                   	nop
+80102d19:	90                   	nop
+80102d1a:	90                   	nop
+80102d1b:	90                   	nop
+80102d1c:	90                   	nop
+80102d1d:	90                   	nop
+80102d1e:	90                   	nop
+80102d1f:	90                   	nop
+
+80102d20 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80102d20:	55                   	push   %ebp
+80102d21:	89 e5                	mov    %esp,%ebp
+80102d23:	53                   	push   %ebx
+80102d24:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102d27:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80102d2d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80102d30:	83 fa 1d             	cmp    $0x1d,%edx
+80102d33:	0f 8f 97 00 00 00    	jg     80102dd0 <log_write+0xb0>
+80102d39:	a1 b8 26 11 80       	mov    0x801126b8,%eax
+80102d3e:	83 e8 01             	sub    $0x1,%eax
+80102d41:	39 c2                	cmp    %eax,%edx
+80102d43:	0f 8d 87 00 00 00    	jge    80102dd0 <log_write+0xb0>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+80102d49:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102d4e:	85 c0                	test   %eax,%eax
+80102d50:	0f 8e 87 00 00 00    	jle    80102ddd <log_write+0xbd>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+80102d56:	83 ec 0c             	sub    $0xc,%esp
+80102d59:	68 80 26 11 80       	push   $0x80112680
+80102d5e:	e8 ad 15 00 00       	call   80104310 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+80102d63:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102d69:	83 c4 10             	add    $0x10,%esp
+80102d6c:	83 fa 00             	cmp    $0x0,%edx
+80102d6f:	7e 50                	jle    80102dc1 <log_write+0xa1>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102d71:	8b 4b 08             	mov    0x8(%ebx),%ecx
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+  for (i = 0; i < log.lh.n; i++) {
+80102d74:	31 c0                	xor    %eax,%eax
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80102d76:	3b 0d cc 26 11 80    	cmp    0x801126cc,%ecx
+80102d7c:	75 0b                	jne    80102d89 <log_write+0x69>
+80102d7e:	eb 38                	jmp    80102db8 <log_write+0x98>
+80102d80:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
+80102d87:	74 2f                	je     80102db8 <log_write+0x98>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+  for (i = 0; i < log.lh.n; i++) {
+80102d89:	83 c0 01             	add    $0x1,%eax
+80102d8c:	39 d0                	cmp    %edx,%eax
+80102d8e:	75 f0                	jne    80102d80 <log_write+0x60>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80102d90:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+80102d97:	83 c2 01             	add    $0x1,%edx
+80102d9a:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
+  b->flags |= B_DIRTY; // prevent eviction
+80102da0:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+80102da3:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
+}
+80102daa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102dad:	c9                   	leave  
+  }
+  log.lh.block[i] = b->blockno;
+  if (i == log.lh.n)
+    log.lh.n++;
+  b->flags |= B_DIRTY; // prevent eviction
+  release(&log.lock);
+80102dae:	e9 0d 16 00 00       	jmp    801043c0 <release>
+80102db3:	90                   	nop
+80102db4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  acquire(&log.lock);
+  for (i = 0; i < log.lh.n; i++) {
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80102db8:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
+80102dbf:	eb df                	jmp    80102da0 <log_write+0x80>
+80102dc1:	8b 43 08             	mov    0x8(%ebx),%eax
+80102dc4:	a3 cc 26 11 80       	mov    %eax,0x801126cc
+  if (i == log.lh.n)
+80102dc9:	75 d5                	jne    80102da0 <log_write+0x80>
+80102dcb:	eb ca                	jmp    80102d97 <log_write+0x77>
+80102dcd:	8d 76 00             	lea    0x0(%esi),%esi
+log_write(struct buf *b)
+{
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+    panic("too big a transaction");
+80102dd0:	83 ec 0c             	sub    $0xc,%esp
+80102dd3:	68 d3 74 10 80       	push   $0x801074d3
+80102dd8:	e8 93 d5 ff ff       	call   80100370 <panic>
+  if (log.outstanding < 1)
+    panic("log_write outside of trans");
+80102ddd:	83 ec 0c             	sub    $0xc,%esp
+80102de0:	68 e9 74 10 80       	push   $0x801074e9
+80102de5:	e8 86 d5 ff ff       	call   80100370 <panic>
+80102dea:	66 90                	xchg   %ax,%ax
+80102dec:	66 90                	xchg   %ax,%ax
+80102dee:	66 90                	xchg   %ax,%ax
+
+80102df0 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+80102df0:	55                   	push   %ebp
+80102df1:	89 e5                	mov    %esp,%ebp
+80102df3:	53                   	push   %ebx
+80102df4:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+80102df7:	e8 54 09 00 00       	call   80103750 <cpuid>
+80102dfc:	89 c3                	mov    %eax,%ebx
+80102dfe:	e8 4d 09 00 00       	call   80103750 <cpuid>
+80102e03:	83 ec 04             	sub    $0x4,%esp
+80102e06:	53                   	push   %ebx
+80102e07:	50                   	push   %eax
+80102e08:	68 04 75 10 80       	push   $0x80107504
+80102e0d:	e8 4e d8 ff ff       	call   80100660 <cprintf>
+  idtinit();       // load idt register
+80102e12:	e8 19 2a 00 00       	call   80105830 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+80102e17:	e8 b4 08 00 00       	call   801036d0 <mycpu>
+80102e1c:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+80102e1e:	b8 01 00 00 00       	mov    $0x1,%eax
+80102e23:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+80102e2a:	e8 01 0c 00 00       	call   80103a30 <scheduler>
+80102e2f:	90                   	nop
+
+80102e30 <mpenter>:
+}
+
+// Other CPUs jump here from entryother.S.
+static void
+mpenter(void)
+{
+80102e30:	55                   	push   %ebp
+80102e31:	89 e5                	mov    %esp,%ebp
+80102e33:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80102e36:	e8 15 3b 00 00       	call   80106950 <switchkvm>
+  seginit();
+80102e3b:	e8 10 3a 00 00       	call   80106850 <seginit>
+  lapicinit();
+80102e40:	e8 9b f7 ff ff       	call   801025e0 <lapicinit>
+  mpmain();
+80102e45:	e8 a6 ff ff ff       	call   80102df0 <mpmain>
+80102e4a:	66 90                	xchg   %ax,%ax
+80102e4c:	66 90                	xchg   %ax,%ax
+80102e4e:	66 90                	xchg   %ax,%ax
+
+80102e50 <main>:
+// Bootstrap processor starts running C code here.
+// Allocate a real stack and switch to it, first
+// doing some setup required for memory allocator to work.
+int
+main(void)
+{
+80102e50:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80102e54:	83 e4 f0             	and    $0xfffffff0,%esp
+80102e57:	ff 71 fc             	pushl  -0x4(%ecx)
+80102e5a:	55                   	push   %ebp
+80102e5b:	89 e5                	mov    %esp,%ebp
+80102e5d:	53                   	push   %ebx
+80102e5e:	51                   	push   %ecx
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80102e5f:	bb 80 27 11 80       	mov    $0x80112780,%ebx
+// Allocate a real stack and switch to it, first
+// doing some setup required for memory allocator to work.
+int
+main(void)
+{
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+80102e64:	83 ec 08             	sub    $0x8,%esp
+80102e67:	68 00 00 40 80       	push   $0x80400000
+80102e6c:	68 88 55 11 80       	push   $0x80115588
+80102e71:	e8 3a f5 ff ff       	call   801023b0 <kinit1>
+  kvmalloc();      // kernel page table
+80102e76:	e8 75 3f 00 00       	call   80106df0 <kvmalloc>
+  mpinit();        // detect other processors
+80102e7b:	e8 70 01 00 00       	call   80102ff0 <mpinit>
+  lapicinit();     // interrupt controller
+80102e80:	e8 5b f7 ff ff       	call   801025e0 <lapicinit>
+  seginit();       // segment descriptors
+80102e85:	e8 c6 39 00 00       	call   80106850 <seginit>
+  picinit();       // disable pic
+80102e8a:	e8 31 03 00 00       	call   801031c0 <picinit>
+  ioapicinit();    // another interrupt controller
+80102e8f:	e8 4c f3 ff ff       	call   801021e0 <ioapicinit>
+  consoleinit();   // console hardware
+80102e94:	e8 07 db ff ff       	call   801009a0 <consoleinit>
+  uartinit();      // serial port
+80102e99:	e8 82 2c 00 00       	call   80105b20 <uartinit>
+  pinit();         // process table
+80102e9e:	e8 0d 08 00 00       	call   801036b0 <pinit>
+  scinit();        // init syscall counter
+80102ea3:	e8 d8 17 00 00       	call   80104680 <scinit>
+  tvinit();        // trap vectors
+80102ea8:	e8 e3 28 00 00       	call   80105790 <tvinit>
+  binit();         // buffer cache
+80102ead:	e8 8e d1 ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+80102eb2:	e8 99 de ff ff       	call   80100d50 <fileinit>
+  ideinit();       // disk 
+80102eb7:	e8 04 f1 ff ff       	call   80101fc0 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80102ebc:	83 c4 0c             	add    $0xc,%esp
+80102ebf:	68 8a 00 00 00       	push   $0x8a
+80102ec4:	68 8c a4 10 80       	push   $0x8010a48c
+80102ec9:	68 00 70 00 80       	push   $0x80007000
+80102ece:	e8 ed 15 00 00       	call   801044c0 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80102ed3:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+80102eda:	00 00 00 
+80102edd:	83 c4 10             	add    $0x10,%esp
+80102ee0:	05 80 27 11 80       	add    $0x80112780,%eax
+80102ee5:	39 d8                	cmp    %ebx,%eax
+80102ee7:	76 6a                	jbe    80102f53 <main+0x103>
+80102ee9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(c == mycpu())  // We've started already.
+80102ef0:	e8 db 07 00 00       	call   801036d0 <mycpu>
+80102ef5:	39 d8                	cmp    %ebx,%eax
+80102ef7:	74 41                	je     80102f3a <main+0xea>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80102ef9:	e8 82 f5 ff ff       	call   80102480 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80102efe:	05 00 10 00 00       	add    $0x1000,%eax
+    *(void(**)(void))(code-8) = mpenter;
+80102f03:	c7 05 f8 6f 00 80 30 	movl   $0x80102e30,0x80006ff8
+80102f0a:	2e 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+80102f0d:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+80102f14:	90 10 00 
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80102f17:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+    *(void(**)(void))(code-8) = mpenter;
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+
+    lapicstartap(c->apicid, V2P(code));
+80102f1c:	0f b6 03             	movzbl (%ebx),%eax
+80102f1f:	83 ec 08             	sub    $0x8,%esp
+80102f22:	68 00 70 00 00       	push   $0x7000
+80102f27:	50                   	push   %eax
+80102f28:	e8 03 f8 ff ff       	call   80102730 <lapicstartap>
+80102f2d:	83 c4 10             	add    $0x10,%esp
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+80102f30:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80102f36:	85 c0                	test   %eax,%eax
+80102f38:	74 f6                	je     80102f30 <main+0xe0>
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80102f3a:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+80102f41:	00 00 00 
+80102f44:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80102f4a:	05 80 27 11 80       	add    $0x80112780,%eax
+80102f4f:	39 c3                	cmp    %eax,%ebx
+80102f51:	72 9d                	jb     80102ef0 <main+0xa0>
+  tvinit();        // trap vectors
+  binit();         // buffer cache
+  fileinit();      // file table
+  ideinit();       // disk 
+  startothers();   // start other processors
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+80102f53:	83 ec 08             	sub    $0x8,%esp
+80102f56:	68 00 00 00 8e       	push   $0x8e000000
+80102f5b:	68 00 00 40 80       	push   $0x80400000
+80102f60:	e8 bb f4 ff ff       	call   80102420 <kinit2>
+  userinit();      // first user process
+80102f65:	e8 36 08 00 00       	call   801037a0 <userinit>
+  mpmain();        // finish this processor's setup
+80102f6a:	e8 81 fe ff ff       	call   80102df0 <mpmain>
+80102f6f:	90                   	nop
+
+80102f70 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80102f70:	55                   	push   %ebp
+80102f71:	89 e5                	mov    %esp,%ebp
+80102f73:	57                   	push   %edi
+80102f74:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+80102f75:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80102f7b:	53                   	push   %ebx
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+  e = addr+len;
+80102f7c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80102f7f:	83 ec 0c             	sub    $0xc,%esp
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+  e = addr+len;
+  for(p = addr; p < e; p += sizeof(struct mp))
+80102f82:	39 de                	cmp    %ebx,%esi
+80102f84:	73 48                	jae    80102fce <mpsearch1+0x5e>
+80102f86:	8d 76 00             	lea    0x0(%esi),%esi
+80102f89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80102f90:	83 ec 04             	sub    $0x4,%esp
+80102f93:	8d 7e 10             	lea    0x10(%esi),%edi
+80102f96:	6a 04                	push   $0x4
+80102f98:	68 18 75 10 80       	push   $0x80107518
+80102f9d:	56                   	push   %esi
+80102f9e:	e8 bd 14 00 00       	call   80104460 <memcmp>
+80102fa3:	83 c4 10             	add    $0x10,%esp
+80102fa6:	85 c0                	test   %eax,%eax
+80102fa8:	75 1e                	jne    80102fc8 <mpsearch1+0x58>
+80102faa:	8d 7e 10             	lea    0x10(%esi),%edi
+80102fad:	89 f2                	mov    %esi,%edx
+80102faf:	31 c9                	xor    %ecx,%ecx
+80102fb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+  int i, sum;
+
+  sum = 0;
+  for(i=0; i<len; i++)
+    sum += addr[i];
+80102fb8:	0f b6 02             	movzbl (%edx),%eax
+80102fbb:	83 c2 01             	add    $0x1,%edx
+80102fbe:	01 c1                	add    %eax,%ecx
+sum(uchar *addr, int len)
+{
+  int i, sum;
+
+  sum = 0;
+  for(i=0; i<len; i++)
+80102fc0:	39 fa                	cmp    %edi,%edx
+80102fc2:	75 f4                	jne    80102fb8 <mpsearch1+0x48>
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+  e = addr+len;
+  for(p = addr; p < e; p += sizeof(struct mp))
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80102fc4:	84 c9                	test   %cl,%cl
+80102fc6:	74 10                	je     80102fd8 <mpsearch1+0x68>
+{
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+  e = addr+len;
+  for(p = addr; p < e; p += sizeof(struct mp))
+80102fc8:	39 fb                	cmp    %edi,%ebx
+80102fca:	89 fe                	mov    %edi,%esi
+80102fcc:	77 c2                	ja     80102f90 <mpsearch1+0x20>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+      return (struct mp*)p;
+  return 0;
+}
+80102fce:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  addr = P2V(a);
+  e = addr+len;
+  for(p = addr; p < e; p += sizeof(struct mp))
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+      return (struct mp*)p;
+  return 0;
+80102fd1:	31 c0                	xor    %eax,%eax
+}
+80102fd3:	5b                   	pop    %ebx
+80102fd4:	5e                   	pop    %esi
+80102fd5:	5f                   	pop    %edi
+80102fd6:	5d                   	pop    %ebp
+80102fd7:	c3                   	ret    
+80102fd8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102fdb:	89 f0                	mov    %esi,%eax
+80102fdd:	5b                   	pop    %ebx
+80102fde:	5e                   	pop    %esi
+80102fdf:	5f                   	pop    %edi
+80102fe0:	5d                   	pop    %ebp
+80102fe1:	c3                   	ret    
+80102fe2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102fe9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80102ff0 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80102ff0:	55                   	push   %ebp
+80102ff1:	89 e5                	mov    %esp,%ebp
+80102ff3:	57                   	push   %edi
+80102ff4:	56                   	push   %esi
+80102ff5:	53                   	push   %ebx
+80102ff6:	83 ec 1c             	sub    $0x1c,%esp
+  uchar *bda;
+  uint p;
+  struct mp *mp;
+
+  bda = (uchar *) P2V(0x400);
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80102ff9:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103000:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103007:	c1 e0 08             	shl    $0x8,%eax
+8010300a:	09 d0                	or     %edx,%eax
+8010300c:	c1 e0 04             	shl    $0x4,%eax
+8010300f:	85 c0                	test   %eax,%eax
+80103011:	75 1b                	jne    8010302e <mpinit+0x3e>
+    if((mp = mpsearch1(p, 1024)))
+      return mp;
+  } else {
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+    if((mp = mpsearch1(p-1024, 1024)))
+80103013:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+8010301a:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103021:	c1 e0 08             	shl    $0x8,%eax
+80103024:	09 d0                	or     %edx,%eax
+80103026:	c1 e0 0a             	shl    $0xa,%eax
+80103029:	2d 00 04 00 00       	sub    $0x400,%eax
+  uint p;
+  struct mp *mp;
+
+  bda = (uchar *) P2V(0x400);
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+    if((mp = mpsearch1(p, 1024)))
+8010302e:	ba 00 04 00 00       	mov    $0x400,%edx
+80103033:	e8 38 ff ff ff       	call   80102f70 <mpsearch1>
+80103038:	85 c0                	test   %eax,%eax
+8010303a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010303d:	0f 84 37 01 00 00    	je     8010317a <mpinit+0x18a>
+mpconfig(struct mp **pmp)
+{
+  struct mpconf *conf;
+  struct mp *mp;
+
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103043:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103046:	8b 58 04             	mov    0x4(%eax),%ebx
+80103049:	85 db                	test   %ebx,%ebx
+8010304b:	0f 84 43 01 00 00    	je     80103194 <mpinit+0x1a4>
+    return 0;
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+80103051:	8d b3 00 00 00 80    	lea    -0x80000000(%ebx),%esi
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103057:	83 ec 04             	sub    $0x4,%esp
+8010305a:	6a 04                	push   $0x4
+8010305c:	68 1d 75 10 80       	push   $0x8010751d
+80103061:	56                   	push   %esi
+80103062:	e8 f9 13 00 00       	call   80104460 <memcmp>
+80103067:	83 c4 10             	add    $0x10,%esp
+8010306a:	85 c0                	test   %eax,%eax
+8010306c:	0f 85 22 01 00 00    	jne    80103194 <mpinit+0x1a4>
+    return 0;
+  if(conf->version != 1 && conf->version != 4)
+80103072:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+80103079:	3c 01                	cmp    $0x1,%al
+8010307b:	74 08                	je     80103085 <mpinit+0x95>
+8010307d:	3c 04                	cmp    $0x4,%al
+8010307f:	0f 85 0f 01 00 00    	jne    80103194 <mpinit+0x1a4>
+    return 0;
+  if(sum((uchar*)conf, conf->length) != 0)
+80103085:	0f b7 bb 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edi
+sum(uchar *addr, int len)
+{
+  int i, sum;
+
+  sum = 0;
+  for(i=0; i<len; i++)
+8010308c:	85 ff                	test   %edi,%edi
+8010308e:	74 21                	je     801030b1 <mpinit+0xc1>
+80103090:	31 d2                	xor    %edx,%edx
+80103092:	31 c0                	xor    %eax,%eax
+80103094:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    sum += addr[i];
+80103098:	0f b6 8c 03 00 00 00 	movzbl -0x80000000(%ebx,%eax,1),%ecx
+8010309f:	80 
+sum(uchar *addr, int len)
+{
+  int i, sum;
+
+  sum = 0;
+  for(i=0; i<len; i++)
+801030a0:	83 c0 01             	add    $0x1,%eax
+    sum += addr[i];
+801030a3:	01 ca                	add    %ecx,%edx
+sum(uchar *addr, int len)
+{
+  int i, sum;
+
+  sum = 0;
+  for(i=0; i<len; i++)
+801030a5:	39 c7                	cmp    %eax,%edi
+801030a7:	75 ef                	jne    80103098 <mpinit+0xa8>
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+  if(memcmp(conf, "PCMP", 4) != 0)
+    return 0;
+  if(conf->version != 1 && conf->version != 4)
+    return 0;
+  if(sum((uchar*)conf, conf->length) != 0)
+801030a9:	84 d2                	test   %dl,%dl
+801030ab:	0f 85 e3 00 00 00    	jne    80103194 <mpinit+0x1a4>
+  struct mp *mp;
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+801030b1:	85 f6                	test   %esi,%esi
+801030b3:	0f 84 db 00 00 00    	je     80103194 <mpinit+0x1a4>
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+801030b9:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+801030bf:	a3 7c 26 11 80       	mov    %eax,0x8011267c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+801030c4:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+801030cb:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+    panic("Expect to run on an SMP");
+  ismp = 1;
+801030d1:	bb 01 00 00 00       	mov    $0x1,%ebx
+  lapic = (uint*)conf->lapicaddr;
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+801030d6:	01 d6                	add    %edx,%esi
+801030d8:	90                   	nop
+801030d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801030e0:	39 c6                	cmp    %eax,%esi
+801030e2:	76 23                	jbe    80103107 <mpinit+0x117>
+801030e4:	0f b6 10             	movzbl (%eax),%edx
+    switch(*p){
+801030e7:	80 fa 04             	cmp    $0x4,%dl
+801030ea:	0f 87 c0 00 00 00    	ja     801031b0 <mpinit+0x1c0>
+801030f0:	ff 24 95 5c 75 10 80 	jmp    *-0x7fef8aa4(,%edx,4)
+801030f7:	89 f6                	mov    %esi,%esi
+801030f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103100:	83 c0 08             	add    $0x8,%eax
+
+  if((conf = mpconfig(&mp)) == 0)
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103103:	39 c6                	cmp    %eax,%esi
+80103105:	77 dd                	ja     801030e4 <mpinit+0xf4>
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103107:	85 db                	test   %ebx,%ebx
+80103109:	0f 84 92 00 00 00    	je     801031a1 <mpinit+0x1b1>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+8010310f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80103112:	80 78 0c 00          	cmpb   $0x0,0xc(%eax)
+80103116:	74 15                	je     8010312d <mpinit+0x13d>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103118:	ba 22 00 00 00       	mov    $0x22,%edx
+8010311d:	b8 70 00 00 00       	mov    $0x70,%eax
+80103122:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103123:	ba 23 00 00 00       	mov    $0x23,%edx
+80103128:	ec                   	in     (%dx),%al
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103129:	83 c8 01             	or     $0x1,%eax
+8010312c:	ee                   	out    %al,(%dx)
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+  }
+}
+8010312d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103130:	5b                   	pop    %ebx
+80103131:	5e                   	pop    %esi
+80103132:	5f                   	pop    %edi
+80103133:	5d                   	pop    %ebp
+80103134:	c3                   	ret    
+80103135:	8d 76 00             	lea    0x0(%esi),%esi
+  lapic = (uint*)conf->lapicaddr;
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+    switch(*p){
+    case MPPROC:
+      proc = (struct mpproc*)p;
+      if(ncpu < NCPU) {
+80103138:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
+8010313e:	83 f9 07             	cmp    $0x7,%ecx
+80103141:	7f 19                	jg     8010315c <mpinit+0x16c>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103143:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+80103147:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+        ncpu++;
+8010314d:	83 c1 01             	add    $0x1,%ecx
+80103150:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+    switch(*p){
+    case MPPROC:
+      proc = (struct mpproc*)p;
+      if(ncpu < NCPU) {
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103156:	88 97 80 27 11 80    	mov    %dl,-0x7feed880(%edi)
+        ncpu++;
+      }
+      p += sizeof(struct mpproc);
+8010315c:	83 c0 14             	add    $0x14,%eax
+      continue;
+8010315f:	e9 7c ff ff ff       	jmp    801030e0 <mpinit+0xf0>
+80103164:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    case MPIOAPIC:
+      ioapic = (struct mpioapic*)p;
+      ioapicid = ioapic->apicno;
+80103168:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+      p += sizeof(struct mpioapic);
+8010316c:	83 c0 08             	add    $0x8,%eax
+      }
+      p += sizeof(struct mpproc);
+      continue;
+    case MPIOAPIC:
+      ioapic = (struct mpioapic*)p;
+      ioapicid = ioapic->apicno;
+8010316f:	88 15 60 27 11 80    	mov    %dl,0x80112760
+      p += sizeof(struct mpioapic);
+      continue;
+80103175:	e9 66 ff ff ff       	jmp    801030e0 <mpinit+0xf0>
+  } else {
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+    if((mp = mpsearch1(p-1024, 1024)))
+      return mp;
+  }
+  return mpsearch1(0xF0000, 0x10000);
+8010317a:	ba 00 00 01 00       	mov    $0x10000,%edx
+8010317f:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+80103184:	e8 e7 fd ff ff       	call   80102f70 <mpsearch1>
+mpconfig(struct mp **pmp)
+{
+  struct mpconf *conf;
+  struct mp *mp;
+
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103189:	85 c0                	test   %eax,%eax
+  } else {
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+    if((mp = mpsearch1(p-1024, 1024)))
+      return mp;
+  }
+  return mpsearch1(0xF0000, 0x10000);
+8010318b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+mpconfig(struct mp **pmp)
+{
+  struct mpconf *conf;
+  struct mp *mp;
+
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+8010318e:	0f 85 af fe ff ff    	jne    80103043 <mpinit+0x53>
+  struct mpconf *conf;
+  struct mpproc *proc;
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+    panic("Expect to run on an SMP");
+80103194:	83 ec 0c             	sub    $0xc,%esp
+80103197:	68 22 75 10 80       	push   $0x80107522
+8010319c:	e8 cf d1 ff ff       	call   80100370 <panic>
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+    panic("Didn't find a suitable machine");
+801031a1:	83 ec 0c             	sub    $0xc,%esp
+801031a4:	68 3c 75 10 80       	push   $0x8010753c
+801031a9:	e8 c2 d1 ff ff       	call   80100370 <panic>
+801031ae:	66 90                	xchg   %ax,%ax
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+      continue;
+    default:
+      ismp = 0;
+801031b0:	31 db                	xor    %ebx,%ebx
+801031b2:	e9 30 ff ff ff       	jmp    801030e7 <mpinit+0xf7>
+801031b7:	66 90                	xchg   %ax,%ax
+801031b9:	66 90                	xchg   %ax,%ax
+801031bb:	66 90                	xchg   %ax,%ax
+801031bd:	66 90                	xchg   %ax,%ax
+801031bf:	90                   	nop
+
+801031c0 <picinit>:
+#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
+
+// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
+void
+picinit(void)
+{
+801031c0:	55                   	push   %ebp
+801031c1:	ba 21 00 00 00       	mov    $0x21,%edx
+801031c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801031cb:	89 e5                	mov    %esp,%ebp
+801031cd:	ee                   	out    %al,(%dx)
+801031ce:	ba a1 00 00 00       	mov    $0xa1,%edx
+801031d3:	ee                   	out    %al,(%dx)
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+801031d4:	5d                   	pop    %ebp
+801031d5:	c3                   	ret    
+801031d6:	66 90                	xchg   %ax,%ax
+801031d8:	66 90                	xchg   %ax,%ax
+801031da:	66 90                	xchg   %ax,%ax
+801031dc:	66 90                	xchg   %ax,%ax
+801031de:	66 90                	xchg   %ax,%ax
+
+801031e0 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+801031e0:	55                   	push   %ebp
+801031e1:	89 e5                	mov    %esp,%ebp
+801031e3:	57                   	push   %edi
+801031e4:	56                   	push   %esi
+801031e5:	53                   	push   %ebx
+801031e6:	83 ec 0c             	sub    $0xc,%esp
+801031e9:	8b 75 08             	mov    0x8(%ebp),%esi
+801031ec:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+801031ef:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801031f5:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+801031fb:	e8 70 db ff ff       	call   80100d70 <filealloc>
+80103200:	85 c0                	test   %eax,%eax
+80103202:	89 06                	mov    %eax,(%esi)
+80103204:	0f 84 a8 00 00 00    	je     801032b2 <pipealloc+0xd2>
+8010320a:	e8 61 db ff ff       	call   80100d70 <filealloc>
+8010320f:	85 c0                	test   %eax,%eax
+80103211:	89 03                	mov    %eax,(%ebx)
+80103213:	0f 84 87 00 00 00    	je     801032a0 <pipealloc+0xc0>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103219:	e8 62 f2 ff ff       	call   80102480 <kalloc>
+8010321e:	85 c0                	test   %eax,%eax
+80103220:	89 c7                	mov    %eax,%edi
+80103222:	0f 84 b0 00 00 00    	je     801032d8 <pipealloc+0xf8>
+    goto bad;
+  p->readopen = 1;
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+80103228:	83 ec 08             	sub    $0x8,%esp
+  *f0 = *f1 = 0;
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+    goto bad;
+  p->readopen = 1;
+8010322b:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+80103232:	00 00 00 
+  p->writeopen = 1;
+80103235:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+8010323c:	00 00 00 
+  p->nwrite = 0;
+8010323f:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+80103246:	00 00 00 
+  p->nread = 0;
+80103249:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103250:	00 00 00 
+  initlock(&p->lock, "pipe");
+80103253:	68 70 75 10 80       	push   $0x80107570
+80103258:	50                   	push   %eax
+80103259:	e8 52 0f 00 00       	call   801041b0 <initlock>
+  (*f0)->type = FD_PIPE;
+8010325e:	8b 06                	mov    (%esi),%eax
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+80103260:	83 c4 10             	add    $0x10,%esp
+  p->readopen = 1;
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+  (*f0)->type = FD_PIPE;
+80103263:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+80103269:	8b 06                	mov    (%esi),%eax
+8010326b:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+8010326f:	8b 06                	mov    (%esi),%eax
+80103271:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+80103275:	8b 06                	mov    (%esi),%eax
+80103277:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+8010327a:	8b 03                	mov    (%ebx),%eax
+8010327c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+80103282:	8b 03                	mov    (%ebx),%eax
+80103284:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+80103288:	8b 03                	mov    (%ebx),%eax
+8010328a:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+8010328e:	8b 03                	mov    (%ebx),%eax
+80103290:	89 78 0c             	mov    %edi,0xc(%eax)
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+80103293:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+80103296:	31 c0                	xor    %eax,%eax
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+80103298:	5b                   	pop    %ebx
+80103299:	5e                   	pop    %esi
+8010329a:	5f                   	pop    %edi
+8010329b:	5d                   	pop    %ebp
+8010329c:	c3                   	ret    
+8010329d:	8d 76 00             	lea    0x0(%esi),%esi
+
+//PAGEBREAK: 20
+ bad:
+  if(p)
+    kfree((char*)p);
+  if(*f0)
+801032a0:	8b 06                	mov    (%esi),%eax
+801032a2:	85 c0                	test   %eax,%eax
+801032a4:	74 1e                	je     801032c4 <pipealloc+0xe4>
+    fileclose(*f0);
+801032a6:	83 ec 0c             	sub    $0xc,%esp
+801032a9:	50                   	push   %eax
+801032aa:	e8 81 db ff ff       	call   80100e30 <fileclose>
+801032af:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+801032b2:	8b 03                	mov    (%ebx),%eax
+801032b4:	85 c0                	test   %eax,%eax
+801032b6:	74 0c                	je     801032c4 <pipealloc+0xe4>
+    fileclose(*f1);
+801032b8:	83 ec 0c             	sub    $0xc,%esp
+801032bb:	50                   	push   %eax
+801032bc:	e8 6f db ff ff       	call   80100e30 <fileclose>
+801032c1:	83 c4 10             	add    $0x10,%esp
+  return -1;
+}
+801032c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    kfree((char*)p);
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+801032c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801032cc:	5b                   	pop    %ebx
+801032cd:	5e                   	pop    %esi
+801032ce:	5f                   	pop    %edi
+801032cf:	5d                   	pop    %ebp
+801032d0:	c3                   	ret    
+801032d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+//PAGEBREAK: 20
+ bad:
+  if(p)
+    kfree((char*)p);
+  if(*f0)
+801032d8:	8b 06                	mov    (%esi),%eax
+801032da:	85 c0                	test   %eax,%eax
+801032dc:	75 c8                	jne    801032a6 <pipealloc+0xc6>
+801032de:	eb d2                	jmp    801032b2 <pipealloc+0xd2>
+
+801032e0 <pipeclose>:
+  return -1;
+}
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+801032e0:	55                   	push   %ebp
+801032e1:	89 e5                	mov    %esp,%ebp
+801032e3:	56                   	push   %esi
+801032e4:	53                   	push   %ebx
+801032e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801032e8:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+801032eb:	83 ec 0c             	sub    $0xc,%esp
+801032ee:	53                   	push   %ebx
+801032ef:	e8 1c 10 00 00       	call   80104310 <acquire>
+  if(writable){
+801032f4:	83 c4 10             	add    $0x10,%esp
+801032f7:	85 f6                	test   %esi,%esi
+801032f9:	74 45                	je     80103340 <pipeclose+0x60>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+801032fb:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80103301:	83 ec 0c             	sub    $0xc,%esp
+void
+pipeclose(struct pipe *p, int writable)
+{
+  acquire(&p->lock);
+  if(writable){
+    p->writeopen = 0;
+80103304:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010330b:	00 00 00 
+    wakeup(&p->nread);
+8010330e:	50                   	push   %eax
+8010330f:	e8 bc 0b 00 00       	call   80103ed0 <wakeup>
+80103314:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103317:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+8010331d:	85 d2                	test   %edx,%edx
+8010331f:	75 0a                	jne    8010332b <pipeclose+0x4b>
+80103321:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103327:	85 c0                	test   %eax,%eax
+80103329:	74 35                	je     80103360 <pipeclose+0x80>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+8010332b:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+8010332e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103331:	5b                   	pop    %ebx
+80103332:	5e                   	pop    %esi
+80103333:	5d                   	pop    %ebp
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+80103334:	e9 87 10 00 00       	jmp    801043c0 <release>
+80103339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(writable){
+    p->writeopen = 0;
+    wakeup(&p->nread);
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+80103340:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+80103346:	83 ec 0c             	sub    $0xc,%esp
+  acquire(&p->lock);
+  if(writable){
+    p->writeopen = 0;
+    wakeup(&p->nread);
+  } else {
+    p->readopen = 0;
+80103349:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+80103350:	00 00 00 
+    wakeup(&p->nwrite);
+80103353:	50                   	push   %eax
+80103354:	e8 77 0b 00 00       	call   80103ed0 <wakeup>
+80103359:	83 c4 10             	add    $0x10,%esp
+8010335c:	eb b9                	jmp    80103317 <pipeclose+0x37>
+8010335e:	66 90                	xchg   %ax,%ax
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+    release(&p->lock);
+80103360:	83 ec 0c             	sub    $0xc,%esp
+80103363:	53                   	push   %ebx
+80103364:	e8 57 10 00 00       	call   801043c0 <release>
+    kfree((char*)p);
+80103369:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010336c:	83 c4 10             	add    $0x10,%esp
+  } else
+    release(&p->lock);
+}
+8010336f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103372:	5b                   	pop    %ebx
+80103373:	5e                   	pop    %esi
+80103374:	5d                   	pop    %ebp
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+    release(&p->lock);
+    kfree((char*)p);
+80103375:	e9 56 ef ff ff       	jmp    801022d0 <kfree>
+8010337a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103380 <pipewrite>:
+}
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+80103380:	55                   	push   %ebp
+80103381:	89 e5                	mov    %esp,%ebp
+80103383:	57                   	push   %edi
+80103384:	56                   	push   %esi
+80103385:	53                   	push   %ebx
+80103386:	83 ec 28             	sub    $0x28,%esp
+80103389:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+8010338c:	53                   	push   %ebx
+8010338d:	e8 7e 0f 00 00       	call   80104310 <acquire>
+  for(i = 0; i < n; i++){
+80103392:	8b 45 10             	mov    0x10(%ebp),%eax
+80103395:	83 c4 10             	add    $0x10,%esp
+80103398:	85 c0                	test   %eax,%eax
+8010339a:	0f 8e b9 00 00 00    	jle    80103459 <pipewrite+0xd9>
+801033a0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801033a3:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+801033a9:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+801033af:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+801033b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+801033b8:	03 4d 10             	add    0x10(%ebp),%ecx
+801033bb:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+801033be:	8b 8b 34 02 00 00    	mov    0x234(%ebx),%ecx
+801033c4:	8d 91 00 02 00 00    	lea    0x200(%ecx),%edx
+801033ca:	39 d0                	cmp    %edx,%eax
+801033cc:	74 38                	je     80103406 <pipewrite+0x86>
+801033ce:	eb 59                	jmp    80103429 <pipewrite+0xa9>
+      if(p->readopen == 0 || myproc()->killed){
+801033d0:	e8 9b 03 00 00       	call   80103770 <myproc>
+801033d5:	8b 48 24             	mov    0x24(%eax),%ecx
+801033d8:	85 c9                	test   %ecx,%ecx
+801033da:	75 34                	jne    80103410 <pipewrite+0x90>
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+801033dc:	83 ec 0c             	sub    $0xc,%esp
+801033df:	57                   	push   %edi
+801033e0:	e8 eb 0a 00 00       	call   80103ed0 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+801033e5:	58                   	pop    %eax
+801033e6:	5a                   	pop    %edx
+801033e7:	53                   	push   %ebx
+801033e8:	56                   	push   %esi
+801033e9:	e8 32 09 00 00       	call   80103d20 <sleep>
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+801033ee:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+801033f4:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+801033fa:	83 c4 10             	add    $0x10,%esp
+801033fd:	05 00 02 00 00       	add    $0x200,%eax
+80103402:	39 c2                	cmp    %eax,%edx
+80103404:	75 2a                	jne    80103430 <pipewrite+0xb0>
+      if(p->readopen == 0 || myproc()->killed){
+80103406:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+8010340c:	85 c0                	test   %eax,%eax
+8010340e:	75 c0                	jne    801033d0 <pipewrite+0x50>
+        release(&p->lock);
+80103410:	83 ec 0c             	sub    $0xc,%esp
+80103413:	53                   	push   %ebx
+80103414:	e8 a7 0f 00 00       	call   801043c0 <release>
+        return -1;
+80103419:	83 c4 10             	add    $0x10,%esp
+8010341c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+80103421:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103424:	5b                   	pop    %ebx
+80103425:	5e                   	pop    %esi
+80103426:	5f                   	pop    %edi
+80103427:	5d                   	pop    %ebp
+80103428:	c3                   	ret    
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103429:	89 c2                	mov    %eax,%edx
+8010342b:	90                   	nop
+8010342c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        return -1;
+      }
+      wakeup(&p->nread);
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+    }
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+80103430:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103433:	8d 42 01             	lea    0x1(%edx),%eax
+80103436:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
+8010343a:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+80103440:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
+80103446:	0f b6 09             	movzbl (%ecx),%ecx
+80103449:	88 4c 13 34          	mov    %cl,0x34(%ebx,%edx,1)
+8010344d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+pipewrite(struct pipe *p, char *addr, int n)
+{
+  int i;
+
+  acquire(&p->lock);
+  for(i = 0; i < n; i++){
+80103450:	3b 4d e0             	cmp    -0x20(%ebp),%ecx
+80103453:	0f 85 65 ff ff ff    	jne    801033be <pipewrite+0x3e>
+      wakeup(&p->nread);
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+    }
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+80103459:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+8010345f:	83 ec 0c             	sub    $0xc,%esp
+80103462:	50                   	push   %eax
+80103463:	e8 68 0a 00 00       	call   80103ed0 <wakeup>
+  release(&p->lock);
+80103468:	89 1c 24             	mov    %ebx,(%esp)
+8010346b:	e8 50 0f 00 00       	call   801043c0 <release>
+  return n;
+80103470:	83 c4 10             	add    $0x10,%esp
+80103473:	8b 45 10             	mov    0x10(%ebp),%eax
+80103476:	eb a9                	jmp    80103421 <pipewrite+0xa1>
+80103478:	90                   	nop
+80103479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103480 <piperead>:
+}
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+80103480:	55                   	push   %ebp
+80103481:	89 e5                	mov    %esp,%ebp
+80103483:	57                   	push   %edi
+80103484:	56                   	push   %esi
+80103485:	53                   	push   %ebx
+80103486:	83 ec 18             	sub    $0x18,%esp
+80103489:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010348c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+8010348f:	53                   	push   %ebx
+80103490:	e8 7b 0e 00 00       	call   80104310 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+80103495:	83 c4 10             	add    $0x10,%esp
+80103498:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010349e:	39 83 38 02 00 00    	cmp    %eax,0x238(%ebx)
+801034a4:	75 6a                	jne    80103510 <piperead+0x90>
+801034a6:	8b b3 40 02 00 00    	mov    0x240(%ebx),%esi
+801034ac:	85 f6                	test   %esi,%esi
+801034ae:	0f 84 cc 00 00 00    	je     80103580 <piperead+0x100>
+    if(myproc()->killed){
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+801034b4:	8d b3 34 02 00 00    	lea    0x234(%ebx),%esi
+801034ba:	eb 2d                	jmp    801034e9 <piperead+0x69>
+801034bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801034c0:	83 ec 08             	sub    $0x8,%esp
+801034c3:	53                   	push   %ebx
+801034c4:	56                   	push   %esi
+801034c5:	e8 56 08 00 00       	call   80103d20 <sleep>
+piperead(struct pipe *p, char *addr, int n)
+{
+  int i;
+
+  acquire(&p->lock);
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801034ca:	83 c4 10             	add    $0x10,%esp
+801034cd:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
+801034d3:	39 83 34 02 00 00    	cmp    %eax,0x234(%ebx)
+801034d9:	75 35                	jne    80103510 <piperead+0x90>
+801034db:	8b 93 40 02 00 00    	mov    0x240(%ebx),%edx
+801034e1:	85 d2                	test   %edx,%edx
+801034e3:	0f 84 97 00 00 00    	je     80103580 <piperead+0x100>
+    if(myproc()->killed){
+801034e9:	e8 82 02 00 00       	call   80103770 <myproc>
+801034ee:	8b 48 24             	mov    0x24(%eax),%ecx
+801034f1:	85 c9                	test   %ecx,%ecx
+801034f3:	74 cb                	je     801034c0 <piperead+0x40>
+      release(&p->lock);
+801034f5:	83 ec 0c             	sub    $0xc,%esp
+801034f8:	53                   	push   %ebx
+801034f9:	e8 c2 0e 00 00       	call   801043c0 <release>
+      return -1;
+801034fe:	83 c4 10             	add    $0x10,%esp
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+  release(&p->lock);
+  return i;
+}
+80103501:	8d 65 f4             	lea    -0xc(%ebp),%esp
+
+  acquire(&p->lock);
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+    if(myproc()->killed){
+      release(&p->lock);
+      return -1;
+80103504:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+  release(&p->lock);
+  return i;
+}
+80103509:	5b                   	pop    %ebx
+8010350a:	5e                   	pop    %esi
+8010350b:	5f                   	pop    %edi
+8010350c:	5d                   	pop    %ebp
+8010350d:	c3                   	ret    
+8010350e:	66 90                	xchg   %ax,%ax
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80103510:	8b 45 10             	mov    0x10(%ebp),%eax
+80103513:	85 c0                	test   %eax,%eax
+80103515:	7e 69                	jle    80103580 <piperead+0x100>
+    if(p->nread == p->nwrite)
+80103517:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010351d:	31 c9                	xor    %ecx,%ecx
+8010351f:	eb 15                	jmp    80103536 <piperead+0xb6>
+80103521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103528:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010352e:	3b 83 38 02 00 00    	cmp    0x238(%ebx),%eax
+80103534:	74 5a                	je     80103590 <piperead+0x110>
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+80103536:	8d 70 01             	lea    0x1(%eax),%esi
+80103539:	25 ff 01 00 00       	and    $0x1ff,%eax
+8010353e:	89 b3 34 02 00 00    	mov    %esi,0x234(%ebx)
+80103544:	0f b6 44 03 34       	movzbl 0x34(%ebx,%eax,1),%eax
+80103549:	88 04 0f             	mov    %al,(%edi,%ecx,1)
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+8010354c:	83 c1 01             	add    $0x1,%ecx
+8010354f:	39 4d 10             	cmp    %ecx,0x10(%ebp)
+80103552:	75 d4                	jne    80103528 <piperead+0xa8>
+    if(p->nread == p->nwrite)
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+80103554:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+8010355a:	83 ec 0c             	sub    $0xc,%esp
+8010355d:	50                   	push   %eax
+8010355e:	e8 6d 09 00 00       	call   80103ed0 <wakeup>
+  release(&p->lock);
+80103563:	89 1c 24             	mov    %ebx,(%esp)
+80103566:	e8 55 0e 00 00       	call   801043c0 <release>
+  return i;
+8010356b:	8b 45 10             	mov    0x10(%ebp),%eax
+8010356e:	83 c4 10             	add    $0x10,%esp
+}
+80103571:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103574:	5b                   	pop    %ebx
+80103575:	5e                   	pop    %esi
+80103576:	5f                   	pop    %edi
+80103577:	5d                   	pop    %ebp
+80103578:	c3                   	ret    
+80103579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80103580:	c7 45 10 00 00 00 00 	movl   $0x0,0x10(%ebp)
+80103587:	eb cb                	jmp    80103554 <piperead+0xd4>
+80103589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103590:	89 4d 10             	mov    %ecx,0x10(%ebp)
+80103593:	eb bf                	jmp    80103554 <piperead+0xd4>
+80103595:	66 90                	xchg   %ax,%ax
+80103597:	66 90                	xchg   %ax,%ax
+80103599:	66 90                	xchg   %ax,%ax
+8010359b:	66 90                	xchg   %ax,%ax
+8010359d:	66 90                	xchg   %ax,%ax
+8010359f:	90                   	nop
+
+801035a0 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+801035a0:	55                   	push   %ebp
+801035a1:	89 e5                	mov    %esp,%ebp
+801035a3:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801035a4:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+801035a9:	83 ec 10             	sub    $0x10,%esp
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+801035ac:	68 20 2d 11 80       	push   $0x80112d20
+801035b1:	e8 5a 0d 00 00       	call   80104310 <acquire>
+801035b6:	83 c4 10             	add    $0x10,%esp
+801035b9:	eb 10                	jmp    801035cb <allocproc+0x2b>
+801035bb:	90                   	nop
+801035bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801035c0:	83 c3 7c             	add    $0x7c,%ebx
+801035c3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+801035c9:	74 75                	je     80103640 <allocproc+0xa0>
+    if(p->state == UNUSED)
+801035cb:	8b 43 0c             	mov    0xc(%ebx),%eax
+801035ce:	85 c0                	test   %eax,%eax
+801035d0:	75 ee                	jne    801035c0 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+801035d2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+
+  release(&ptable.lock);
+801035d7:	83 ec 0c             	sub    $0xc,%esp
+
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+801035da:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->pid = nextpid++;
+
+  release(&ptable.lock);
+801035e1:	68 20 2d 11 80       	push   $0x80112d20
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+801035e6:	8d 50 01             	lea    0x1(%eax),%edx
+801035e9:	89 43 10             	mov    %eax,0x10(%ebx)
+801035ec:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+
+  release(&ptable.lock);
+801035f2:	e8 c9 0d 00 00       	call   801043c0 <release>
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+801035f7:	e8 84 ee ff ff       	call   80102480 <kalloc>
+801035fc:	83 c4 10             	add    $0x10,%esp
+801035ff:	85 c0                	test   %eax,%eax
+80103601:	89 43 08             	mov    %eax,0x8(%ebx)
+80103604:	74 51                	je     80103657 <allocproc+0xb7>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80103606:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+8010360c:	83 ec 04             	sub    $0x4,%esp
+  // Set up new context to start executing at forkret,
+  // which returns to trapret.
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+8010360f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80103614:	89 53 18             	mov    %edx,0x18(%ebx)
+  p->tf = (struct trapframe*)sp;
+
+  // Set up new context to start executing at forkret,
+  // which returns to trapret.
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+80103617:	c7 40 14 7f 57 10 80 	movl   $0x8010577f,0x14(%eax)
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+8010361e:	6a 14                	push   $0x14
+80103620:	6a 00                	push   $0x0
+80103622:	50                   	push   %eax
+  // which returns to trapret.
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+80103623:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+80103626:	e8 e5 0d 00 00       	call   80104410 <memset>
+  p->context->eip = (uint)forkret;
+8010362b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+8010362e:	83 c4 10             	add    $0x10,%esp
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+  p->context->eip = (uint)forkret;
+80103631:	c7 40 10 60 36 10 80 	movl   $0x80103660,0x10(%eax)
+
+  return p;
+80103638:	89 d8                	mov    %ebx,%eax
+}
+8010363a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010363d:	c9                   	leave  
+8010363e:	c3                   	ret    
+8010363f:	90                   	nop
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state == UNUSED)
+      goto found;
+
+  release(&ptable.lock);
+80103640:	83 ec 0c             	sub    $0xc,%esp
+80103643:	68 20 2d 11 80       	push   $0x80112d20
+80103648:	e8 73 0d 00 00       	call   801043c0 <release>
+  return 0;
+8010364d:	83 c4 10             	add    $0x10,%esp
+80103650:	31 c0                	xor    %eax,%eax
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+  p->context->eip = (uint)forkret;
+
+  return p;
+}
+80103652:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103655:	c9                   	leave  
+80103656:	c3                   	ret    
+
+  release(&ptable.lock);
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+    p->state = UNUSED;
+80103657:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+8010365e:	eb da                	jmp    8010363a <allocproc+0x9a>
+
+80103660 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+80103660:	55                   	push   %ebp
+80103661:	89 e5                	mov    %esp,%ebp
+80103663:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+80103666:	68 20 2d 11 80       	push   $0x80112d20
+8010366b:	e8 50 0d 00 00       	call   801043c0 <release>
+
+  if (first) {
+80103670:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+80103675:	83 c4 10             	add    $0x10,%esp
+80103678:	85 c0                	test   %eax,%eax
+8010367a:	75 04                	jne    80103680 <forkret+0x20>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+8010367c:	c9                   	leave  
+8010367d:	c3                   	ret    
+8010367e:	66 90                	xchg   %ax,%ax
+  if (first) {
+    // Some initialization functions must be run in the context
+    // of a regular process (e.g., they call sleep), and thus cannot
+    // be run from main().
+    first = 0;
+    iinit(ROOTDEV);
+80103680:	83 ec 0c             	sub    $0xc,%esp
+
+  if (first) {
+    // Some initialization functions must be run in the context
+    // of a regular process (e.g., they call sleep), and thus cannot
+    // be run from main().
+    first = 0;
+80103683:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+8010368a:	00 00 00 
+    iinit(ROOTDEV);
+8010368d:	6a 01                	push   $0x1
+8010368f:	e8 cc dd ff ff       	call   80101460 <iinit>
+    initlog(ROOTDEV);
+80103694:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+8010369b:	e8 00 f4 ff ff       	call   80102aa0 <initlog>
+801036a0:	83 c4 10             	add    $0x10,%esp
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+801036a3:	c9                   	leave  
+801036a4:	c3                   	ret    
+801036a5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801036a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801036b0 <pinit>:
+
+static void wakeup1(void *chan);
+
+void
+pinit(void)
+{
+801036b0:	55                   	push   %ebp
+801036b1:	89 e5                	mov    %esp,%ebp
+801036b3:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+801036b6:	68 75 75 10 80       	push   $0x80107575
+801036bb:	68 20 2d 11 80       	push   $0x80112d20
+801036c0:	e8 eb 0a 00 00       	call   801041b0 <initlock>
+}
+801036c5:	83 c4 10             	add    $0x10,%esp
+801036c8:	c9                   	leave  
+801036c9:	c3                   	ret    
+801036ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801036d0 <mycpu>:
+
+// Must be called with interrupts disabled to avoid the caller being
+// rescheduled between reading lapicid and running through the loop.
+struct cpu*
+mycpu(void)
+{
+801036d0:	55                   	push   %ebp
+801036d1:	89 e5                	mov    %esp,%ebp
+801036d3:	56                   	push   %esi
+801036d4:	53                   	push   %ebx
+
+static inline uint
+readeflags(void)
+{
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801036d5:	9c                   	pushf  
+801036d6:	58                   	pop    %eax
+  int apicid, i;
+  
+  if(readeflags()&FL_IF)
+801036d7:	f6 c4 02             	test   $0x2,%ah
+801036da:	75 5b                	jne    80103737 <mycpu+0x67>
+    panic("mycpu called with interrupts enabled\n");
+  
+  apicid = lapicid();
+801036dc:	e8 ff ef ff ff       	call   801026e0 <lapicid>
+  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+  // a reverse map, or reserve a register to store &cpus[i].
+  for (i = 0; i < ncpu; ++i) {
+801036e1:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
+801036e7:	85 f6                	test   %esi,%esi
+801036e9:	7e 3f                	jle    8010372a <mycpu+0x5a>
+    if (cpus[i].apicid == apicid)
+801036eb:	0f b6 15 80 27 11 80 	movzbl 0x80112780,%edx
+801036f2:	39 d0                	cmp    %edx,%eax
+801036f4:	74 30                	je     80103726 <mycpu+0x56>
+801036f6:	b9 30 28 11 80       	mov    $0x80112830,%ecx
+801036fb:	31 d2                	xor    %edx,%edx
+801036fd:	8d 76 00             	lea    0x0(%esi),%esi
+    panic("mycpu called with interrupts enabled\n");
+  
+  apicid = lapicid();
+  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+  // a reverse map, or reserve a register to store &cpus[i].
+  for (i = 0; i < ncpu; ++i) {
+80103700:	83 c2 01             	add    $0x1,%edx
+80103703:	39 f2                	cmp    %esi,%edx
+80103705:	74 23                	je     8010372a <mycpu+0x5a>
+    if (cpus[i].apicid == apicid)
+80103707:	0f b6 19             	movzbl (%ecx),%ebx
+8010370a:	81 c1 b0 00 00 00    	add    $0xb0,%ecx
+80103710:	39 d8                	cmp    %ebx,%eax
+80103712:	75 ec                	jne    80103700 <mycpu+0x30>
+      return &cpus[i];
+80103714:	69 c2 b0 00 00 00    	imul   $0xb0,%edx,%eax
+  }
+  panic("unknown apicid\n");
+}
+8010371a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010371d:	5b                   	pop    %ebx
+  apicid = lapicid();
+  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+  // a reverse map, or reserve a register to store &cpus[i].
+  for (i = 0; i < ncpu; ++i) {
+    if (cpus[i].apicid == apicid)
+      return &cpus[i];
+8010371e:	05 80 27 11 80       	add    $0x80112780,%eax
+  }
+  panic("unknown apicid\n");
+}
+80103723:	5e                   	pop    %esi
+80103724:	5d                   	pop    %ebp
+80103725:	c3                   	ret    
+    panic("mycpu called with interrupts enabled\n");
+  
+  apicid = lapicid();
+  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+  // a reverse map, or reserve a register to store &cpus[i].
+  for (i = 0; i < ncpu; ++i) {
+80103726:	31 d2                	xor    %edx,%edx
+80103728:	eb ea                	jmp    80103714 <mycpu+0x44>
+    if (cpus[i].apicid == apicid)
+      return &cpus[i];
+  }
+  panic("unknown apicid\n");
+8010372a:	83 ec 0c             	sub    $0xc,%esp
+8010372d:	68 7c 75 10 80       	push   $0x8010757c
+80103732:	e8 39 cc ff ff       	call   80100370 <panic>
+mycpu(void)
+{
+  int apicid, i;
+  
+  if(readeflags()&FL_IF)
+    panic("mycpu called with interrupts enabled\n");
+80103737:	83 ec 0c             	sub    $0xc,%esp
+8010373a:	68 58 76 10 80       	push   $0x80107658
+8010373f:	e8 2c cc ff ff       	call   80100370 <panic>
+80103744:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010374a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103750 <cpuid>:
+  initlock(&ptable.lock, "ptable");
+}
+
+// Must be called with interrupts disabled
+int
+cpuid() {
+80103750:	55                   	push   %ebp
+80103751:	89 e5                	mov    %esp,%ebp
+80103753:	83 ec 08             	sub    $0x8,%esp
+  return mycpu()-cpus;
+80103756:	e8 75 ff ff ff       	call   801036d0 <mycpu>
+8010375b:	2d 80 27 11 80       	sub    $0x80112780,%eax
+}
+80103760:	c9                   	leave  
+}
+
+// Must be called with interrupts disabled
+int
+cpuid() {
+  return mycpu()-cpus;
+80103761:	c1 f8 04             	sar    $0x4,%eax
+80103764:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+8010376a:	c3                   	ret    
+8010376b:	90                   	nop
+8010376c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103770 <myproc>:
+}
+
+// Disable interrupts so that we are not rescheduled
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+80103770:	55                   	push   %ebp
+80103771:	89 e5                	mov    %esp,%ebp
+80103773:	53                   	push   %ebx
+80103774:	83 ec 04             	sub    $0x4,%esp
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103777:	e8 b4 0a 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+8010377c:	e8 4f ff ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103781:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103787:	e8 e4 0a 00 00       	call   80104270 <popcli>
+  return p;
+}
+8010378c:	83 c4 04             	add    $0x4,%esp
+8010378f:	89 d8                	mov    %ebx,%eax
+80103791:	5b                   	pop    %ebx
+80103792:	5d                   	pop    %ebp
+80103793:	c3                   	ret    
+80103794:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010379a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+801037a0 <userinit>:
+
+//PAGEBREAK: 32
+// Set up first user process.
+void
+userinit(void)
+{
+801037a0:	55                   	push   %ebp
+801037a1:	89 e5                	mov    %esp,%ebp
+801037a3:	53                   	push   %ebx
+801037a4:	83 ec 04             	sub    $0x4,%esp
+  struct proc *p;
+  extern char _binary_initcode_start[], _binary_initcode_size[];
+
+  p = allocproc();
+801037a7:	e8 f4 fd ff ff       	call   801035a0 <allocproc>
+801037ac:	89 c3                	mov    %eax,%ebx
+  
+  initproc = p;
+801037ae:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
+  if((p->pgdir = setupkvm()) == 0)
+801037b3:	e8 b8 35 00 00       	call   80106d70 <setupkvm>
+801037b8:	85 c0                	test   %eax,%eax
+801037ba:	89 43 04             	mov    %eax,0x4(%ebx)
+801037bd:	0f 84 bd 00 00 00    	je     80103880 <userinit+0xe0>
+    panic("userinit: out of memory?");
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+801037c3:	83 ec 04             	sub    $0x4,%esp
+801037c6:	68 2c 00 00 00       	push   $0x2c
+801037cb:	68 60 a4 10 80       	push   $0x8010a460
+801037d0:	50                   	push   %eax
+801037d1:	e8 aa 32 00 00       	call   80106a80 <inituvm>
+  p->sz = PGSIZE;
+  memset(p->tf, 0, sizeof(*p->tf));
+801037d6:	83 c4 0c             	add    $0xc,%esp
+  
+  initproc = p;
+  if((p->pgdir = setupkvm()) == 0)
+    panic("userinit: out of memory?");
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+  p->sz = PGSIZE;
+801037d9:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+801037df:	6a 4c                	push   $0x4c
+801037e1:	6a 00                	push   $0x0
+801037e3:	ff 73 18             	pushl  0x18(%ebx)
+801037e6:	e8 25 0c 00 00       	call   80104410 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+801037eb:	8b 43 18             	mov    0x18(%ebx),%eax
+801037ee:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+801037f3:	b9 23 00 00 00       	mov    $0x23,%ecx
+  p->tf->ss = p->tf->ds;
+  p->tf->eflags = FL_IF;
+  p->tf->esp = PGSIZE;
+  p->tf->eip = 0;  // beginning of initcode.S
+
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+801037f8:	83 c4 0c             	add    $0xc,%esp
+  if((p->pgdir = setupkvm()) == 0)
+    panic("userinit: out of memory?");
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+  p->sz = PGSIZE;
+  memset(p->tf, 0, sizeof(*p->tf));
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+801037fb:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+801037ff:	8b 43 18             	mov    0x18(%ebx),%eax
+80103802:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80103806:	8b 43 18             	mov    0x18(%ebx),%eax
+80103809:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+8010380d:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+80103811:	8b 43 18             	mov    0x18(%ebx),%eax
+80103814:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103818:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+8010381c:	8b 43 18             	mov    0x18(%ebx),%eax
+8010381f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+80103826:	8b 43 18             	mov    0x18(%ebx),%eax
+80103829:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+80103830:	8b 43 18             	mov    0x18(%ebx),%eax
+80103833:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+8010383a:	8d 43 6c             	lea    0x6c(%ebx),%eax
+8010383d:	6a 10                	push   $0x10
+8010383f:	68 a5 75 10 80       	push   $0x801075a5
+80103844:	50                   	push   %eax
+80103845:	e8 c6 0d 00 00       	call   80104610 <safestrcpy>
+  p->cwd = namei("/");
+8010384a:	c7 04 24 ae 75 10 80 	movl   $0x801075ae,(%esp)
+80103851:	e8 5a e6 ff ff       	call   80101eb0 <namei>
+80103856:	89 43 68             	mov    %eax,0x68(%ebx)
+
+  // this assignment to p->state lets other cores
+  // run this process. the acquire forces the above
+  // writes to be visible, and the lock is also needed
+  // because the assignment might not be atomic.
+  acquire(&ptable.lock);
+80103859:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103860:	e8 ab 0a 00 00       	call   80104310 <acquire>
+
+  p->state = RUNNABLE;
+80103865:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+
+  release(&ptable.lock);
+8010386c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103873:	e8 48 0b 00 00       	call   801043c0 <release>
+}
+80103878:	83 c4 10             	add    $0x10,%esp
+8010387b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010387e:	c9                   	leave  
+8010387f:	c3                   	ret    
+
+  p = allocproc();
+  
+  initproc = p;
+  if((p->pgdir = setupkvm()) == 0)
+    panic("userinit: out of memory?");
+80103880:	83 ec 0c             	sub    $0xc,%esp
+80103883:	68 8c 75 10 80       	push   $0x8010758c
+80103888:	e8 e3 ca ff ff       	call   80100370 <panic>
+8010388d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103890 <growproc>:
+
+// Grow current process's memory by n bytes.
+// Return 0 on success, -1 on failure.
+int
+growproc(int n)
+{
+80103890:	55                   	push   %ebp
+80103891:	89 e5                	mov    %esp,%ebp
+80103893:	56                   	push   %esi
+80103894:	53                   	push   %ebx
+80103895:	8b 75 08             	mov    0x8(%ebp),%esi
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103898:	e8 93 09 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+8010389d:	e8 2e fe ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+801038a2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801038a8:	e8 c3 09 00 00       	call   80104270 <popcli>
+{
+  uint sz;
+  struct proc *curproc = myproc();
+
+  sz = curproc->sz;
+  if(n > 0){
+801038ad:	83 fe 00             	cmp    $0x0,%esi
+growproc(int n)
+{
+  uint sz;
+  struct proc *curproc = myproc();
+
+  sz = curproc->sz;
+801038b0:	8b 03                	mov    (%ebx),%eax
+  if(n > 0){
+801038b2:	7e 34                	jle    801038e8 <growproc+0x58>
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+801038b4:	83 ec 04             	sub    $0x4,%esp
+801038b7:	01 c6                	add    %eax,%esi
+801038b9:	56                   	push   %esi
+801038ba:	50                   	push   %eax
+801038bb:	ff 73 04             	pushl  0x4(%ebx)
+801038be:	e8 fd 32 00 00       	call   80106bc0 <allocuvm>
+801038c3:	83 c4 10             	add    $0x10,%esp
+801038c6:	85 c0                	test   %eax,%eax
+801038c8:	74 36                	je     80103900 <growproc+0x70>
+  } else if(n < 0){
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+      return -1;
+  }
+  curproc->sz = sz;
+  switchuvm(curproc);
+801038ca:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+  } else if(n < 0){
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+      return -1;
+  }
+  curproc->sz = sz;
+801038cd:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+801038cf:	53                   	push   %ebx
+801038d0:	e8 9b 30 00 00       	call   80106970 <switchuvm>
+  return 0;
+801038d5:	83 c4 10             	add    $0x10,%esp
+801038d8:	31 c0                	xor    %eax,%eax
+}
+801038da:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801038dd:	5b                   	pop    %ebx
+801038de:	5e                   	pop    %esi
+801038df:	5d                   	pop    %ebp
+801038e0:	c3                   	ret    
+801038e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+  sz = curproc->sz;
+  if(n > 0){
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+      return -1;
+  } else if(n < 0){
+801038e8:	74 e0                	je     801038ca <growproc+0x3a>
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+801038ea:	83 ec 04             	sub    $0x4,%esp
+801038ed:	01 c6                	add    %eax,%esi
+801038ef:	56                   	push   %esi
+801038f0:	50                   	push   %eax
+801038f1:	ff 73 04             	pushl  0x4(%ebx)
+801038f4:	e8 c7 33 00 00       	call   80106cc0 <deallocuvm>
+801038f9:	83 c4 10             	add    $0x10,%esp
+801038fc:	85 c0                	test   %eax,%eax
+801038fe:	75 ca                	jne    801038ca <growproc+0x3a>
+  struct proc *curproc = myproc();
+
+  sz = curproc->sz;
+  if(n > 0){
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+      return -1;
+80103900:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103905:	eb d3                	jmp    801038da <growproc+0x4a>
+80103907:	89 f6                	mov    %esi,%esi
+80103909:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103910 <fork>:
+// Create a new process copying p as the parent.
+// Sets up stack to return as if from system call.
+// Caller must set state of returned proc to RUNNABLE.
+int
+fork(void)
+{
+80103910:	55                   	push   %ebp
+80103911:	89 e5                	mov    %esp,%ebp
+80103913:	57                   	push   %edi
+80103914:	56                   	push   %esi
+80103915:	53                   	push   %ebx
+80103916:	83 ec 1c             	sub    $0x1c,%esp
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103919:	e8 12 09 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+8010391e:	e8 ad fd ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103923:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103929:	e8 42 09 00 00       	call   80104270 <popcli>
+  int i, pid;
+  struct proc *np;
+  struct proc *curproc = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+8010392e:	e8 6d fc ff ff       	call   801035a0 <allocproc>
+80103933:	85 c0                	test   %eax,%eax
+80103935:	89 c7                	mov    %eax,%edi
+80103937:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010393a:	0f 84 b5 00 00 00    	je     801039f5 <fork+0xe5>
+    return -1;
+  }
+
+  // Copy process state from proc.
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+80103940:	83 ec 08             	sub    $0x8,%esp
+80103943:	ff 33                	pushl  (%ebx)
+80103945:	ff 73 04             	pushl  0x4(%ebx)
+80103948:	e8 f3 34 00 00       	call   80106e40 <copyuvm>
+8010394d:	83 c4 10             	add    $0x10,%esp
+80103950:	85 c0                	test   %eax,%eax
+80103952:	89 47 04             	mov    %eax,0x4(%edi)
+80103955:	0f 84 a1 00 00 00    	je     801039fc <fork+0xec>
+    kfree(np->kstack);
+    np->kstack = 0;
+    np->state = UNUSED;
+    return -1;
+  }
+  np->sz = curproc->sz;
+8010395b:	8b 03                	mov    (%ebx),%eax
+8010395d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103960:	89 01                	mov    %eax,(%ecx)
+  np->parent = curproc;
+80103962:	89 59 14             	mov    %ebx,0x14(%ecx)
+  *np->tf = *curproc->tf;
+80103965:	89 c8                	mov    %ecx,%eax
+80103967:	8b 79 18             	mov    0x18(%ecx),%edi
+8010396a:	8b 73 18             	mov    0x18(%ebx),%esi
+8010396d:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103972:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+80103974:	31 f6                	xor    %esi,%esi
+  np->sz = curproc->sz;
+  np->parent = curproc;
+  *np->tf = *curproc->tf;
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+80103976:	8b 40 18             	mov    0x18(%eax),%eax
+80103979:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+80103980:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103984:	85 c0                	test   %eax,%eax
+80103986:	74 13                	je     8010399b <fork+0x8b>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80103988:	83 ec 0c             	sub    $0xc,%esp
+8010398b:	50                   	push   %eax
+8010398c:	e8 4f d4 ff ff       	call   80100de0 <filedup>
+80103991:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103994:	83 c4 10             	add    $0x10,%esp
+80103997:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  *np->tf = *curproc->tf;
+
+  // Clear %eax so that fork returns 0 in the child.
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+8010399b:	83 c6 01             	add    $0x1,%esi
+8010399e:	83 fe 10             	cmp    $0x10,%esi
+801039a1:	75 dd                	jne    80103980 <fork+0x70>
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+801039a3:	83 ec 0c             	sub    $0xc,%esp
+801039a6:	ff 73 68             	pushl  0x68(%ebx)
+
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801039a9:	83 c3 6c             	add    $0x6c,%ebx
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+801039ac:	e8 7f dc ff ff       	call   80101630 <idup>
+801039b1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801039b4:	83 c4 0c             	add    $0xc,%esp
+  np->tf->eax = 0;
+
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+801039b7:	89 47 68             	mov    %eax,0x68(%edi)
+
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801039ba:	8d 47 6c             	lea    0x6c(%edi),%eax
+801039bd:	6a 10                	push   $0x10
+801039bf:	53                   	push   %ebx
+801039c0:	50                   	push   %eax
+801039c1:	e8 4a 0c 00 00       	call   80104610 <safestrcpy>
+
+  pid = np->pid;
+801039c6:	8b 5f 10             	mov    0x10(%edi),%ebx
+
+  acquire(&ptable.lock);
+801039c9:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801039d0:	e8 3b 09 00 00       	call   80104310 <acquire>
+
+  np->state = RUNNABLE;
+801039d5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+
+  release(&ptable.lock);
+801039dc:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+801039e3:	e8 d8 09 00 00       	call   801043c0 <release>
+
+  return pid;
+801039e8:	83 c4 10             	add    $0x10,%esp
+801039eb:	89 d8                	mov    %ebx,%eax
+}
+801039ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801039f0:	5b                   	pop    %ebx
+801039f1:	5e                   	pop    %esi
+801039f2:	5f                   	pop    %edi
+801039f3:	5d                   	pop    %ebp
+801039f4:	c3                   	ret    
+  struct proc *np;
+  struct proc *curproc = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+801039f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801039fa:	eb f1                	jmp    801039ed <fork+0xdd>
+  }
+
+  // Copy process state from proc.
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+    kfree(np->kstack);
+801039fc:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801039ff:	83 ec 0c             	sub    $0xc,%esp
+80103a02:	ff 77 08             	pushl  0x8(%edi)
+80103a05:	e8 c6 e8 ff ff       	call   801022d0 <kfree>
+    np->kstack = 0;
+80103a0a:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%edi)
+    np->state = UNUSED;
+80103a11:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%edi)
+    return -1;
+80103a18:	83 c4 10             	add    $0x10,%esp
+80103a1b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103a20:	eb cb                	jmp    801039ed <fork+0xdd>
+80103a22:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103a30 <scheduler>:
+//  - swtch to start running that process
+//  - eventually that process transfers control
+//      via swtch back to the scheduler.
+void
+scheduler(void)
+{
+80103a30:	55                   	push   %ebp
+80103a31:	89 e5                	mov    %esp,%ebp
+80103a33:	57                   	push   %edi
+80103a34:	56                   	push   %esi
+80103a35:	53                   	push   %ebx
+80103a36:	83 ec 0c             	sub    $0xc,%esp
+  struct proc *p;
+  struct cpu *c = mycpu();
+80103a39:	e8 92 fc ff ff       	call   801036d0 <mycpu>
+80103a3e:	8d 78 04             	lea    0x4(%eax),%edi
+80103a41:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+80103a43:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103a4a:	00 00 00 
+80103a4d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+static inline void
+sti(void)
+{
+  asm volatile("sti");
+80103a50:	fb                   	sti    
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+80103a51:	83 ec 0c             	sub    $0xc,%esp
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103a54:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+  for(;;){
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+80103a59:	68 20 2d 11 80       	push   $0x80112d20
+80103a5e:	e8 ad 08 00 00       	call   80104310 <acquire>
+80103a63:	83 c4 10             	add    $0x10,%esp
+80103a66:	eb 13                	jmp    80103a7b <scheduler+0x4b>
+80103a68:	90                   	nop
+80103a69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103a70:	83 c3 7c             	add    $0x7c,%ebx
+80103a73:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103a79:	74 45                	je     80103ac0 <scheduler+0x90>
+      if(p->state != RUNNABLE)
+80103a7b:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103a7f:	75 ef                	jne    80103a70 <scheduler+0x40>
+
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      c->proc = p;
+      switchuvm(p);
+80103a81:	83 ec 0c             	sub    $0xc,%esp
+        continue;
+
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      c->proc = p;
+80103a84:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+      switchuvm(p);
+80103a8a:	53                   	push   %ebx
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103a8b:	83 c3 7c             	add    $0x7c,%ebx
+
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      c->proc = p;
+      switchuvm(p);
+80103a8e:	e8 dd 2e 00 00       	call   80106970 <switchuvm>
+      p->state = RUNNING;
+
+      swtch(&(c->scheduler), p->context);
+80103a93:	58                   	pop    %eax
+80103a94:	5a                   	pop    %edx
+80103a95:	ff 73 a0             	pushl  -0x60(%ebx)
+80103a98:	57                   	push   %edi
+      // Switch to chosen process.  It is the process's job
+      // to release ptable.lock and then reacquire it
+      // before jumping back to us.
+      c->proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+80103a99:	c7 43 90 04 00 00 00 	movl   $0x4,-0x70(%ebx)
+
+      swtch(&(c->scheduler), p->context);
+80103aa0:	e8 c6 0b 00 00       	call   8010466b <swtch>
+      switchkvm();
+80103aa5:	e8 a6 2e 00 00       	call   80106950 <switchkvm>
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+80103aaa:	83 c4 10             	add    $0x10,%esp
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103aad:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+      swtch(&(c->scheduler), p->context);
+      switchkvm();
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+80103ab3:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103aba:	00 00 00 
+    // Enable interrupts on this processor.
+    sti();
+
+    // Loop over process table looking for process to run.
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103abd:	75 bc                	jne    80103a7b <scheduler+0x4b>
+80103abf:	90                   	nop
+
+      // Process is done running for now.
+      // It should have changed its p->state before coming back.
+      c->proc = 0;
+    }
+    release(&ptable.lock);
+80103ac0:	83 ec 0c             	sub    $0xc,%esp
+80103ac3:	68 20 2d 11 80       	push   $0x80112d20
+80103ac8:	e8 f3 08 00 00       	call   801043c0 <release>
+
+  }
+80103acd:	83 c4 10             	add    $0x10,%esp
+80103ad0:	e9 7b ff ff ff       	jmp    80103a50 <scheduler+0x20>
+80103ad5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ad9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103ae0 <sched>:
+// be proc->intena and proc->ncli, but that would
+// break in the few places where a lock is held but
+// there's no process.
+void
+sched(void)
+{
+80103ae0:	55                   	push   %ebp
+80103ae1:	89 e5                	mov    %esp,%ebp
+80103ae3:	56                   	push   %esi
+80103ae4:	53                   	push   %ebx
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103ae5:	e8 46 07 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+80103aea:	e8 e1 fb ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103aef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103af5:	e8 76 07 00 00       	call   80104270 <popcli>
+sched(void)
+{
+  int intena;
+  struct proc *p = myproc();
+
+  if(!holding(&ptable.lock))
+80103afa:	83 ec 0c             	sub    $0xc,%esp
+80103afd:	68 20 2d 11 80       	push   $0x80112d20
+80103b02:	e8 d9 07 00 00       	call   801042e0 <holding>
+80103b07:	83 c4 10             	add    $0x10,%esp
+80103b0a:	85 c0                	test   %eax,%eax
+80103b0c:	74 4f                	je     80103b5d <sched+0x7d>
+    panic("sched ptable.lock");
+  if(mycpu()->ncli != 1)
+80103b0e:	e8 bd fb ff ff       	call   801036d0 <mycpu>
+80103b13:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103b1a:	75 68                	jne    80103b84 <sched+0xa4>
+    panic("sched locks");
+  if(p->state == RUNNING)
+80103b1c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103b20:	74 55                	je     80103b77 <sched+0x97>
+
+static inline uint
+readeflags(void)
+{
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80103b22:	9c                   	pushf  
+80103b23:	58                   	pop    %eax
+    panic("sched running");
+  if(readeflags()&FL_IF)
+80103b24:	f6 c4 02             	test   $0x2,%ah
+80103b27:	75 41                	jne    80103b6a <sched+0x8a>
+    panic("sched interruptible");
+  intena = mycpu()->intena;
+80103b29:	e8 a2 fb ff ff       	call   801036d0 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80103b2e:	83 c3 1c             	add    $0x1c,%ebx
+    panic("sched locks");
+  if(p->state == RUNNING)
+    panic("sched running");
+  if(readeflags()&FL_IF)
+    panic("sched interruptible");
+  intena = mycpu()->intena;
+80103b31:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+80103b37:	e8 94 fb ff ff       	call   801036d0 <mycpu>
+80103b3c:	83 ec 08             	sub    $0x8,%esp
+80103b3f:	ff 70 04             	pushl  0x4(%eax)
+80103b42:	53                   	push   %ebx
+80103b43:	e8 23 0b 00 00       	call   8010466b <swtch>
+  mycpu()->intena = intena;
+80103b48:	e8 83 fb ff ff       	call   801036d0 <mycpu>
+}
+80103b4d:	83 c4 10             	add    $0x10,%esp
+    panic("sched running");
+  if(readeflags()&FL_IF)
+    panic("sched interruptible");
+  intena = mycpu()->intena;
+  swtch(&p->context, mycpu()->scheduler);
+  mycpu()->intena = intena;
+80103b50:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+80103b56:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103b59:	5b                   	pop    %ebx
+80103b5a:	5e                   	pop    %esi
+80103b5b:	5d                   	pop    %ebp
+80103b5c:	c3                   	ret    
+{
+  int intena;
+  struct proc *p = myproc();
+
+  if(!holding(&ptable.lock))
+    panic("sched ptable.lock");
+80103b5d:	83 ec 0c             	sub    $0xc,%esp
+80103b60:	68 b0 75 10 80       	push   $0x801075b0
+80103b65:	e8 06 c8 ff ff       	call   80100370 <panic>
+  if(mycpu()->ncli != 1)
+    panic("sched locks");
+  if(p->state == RUNNING)
+    panic("sched running");
+  if(readeflags()&FL_IF)
+    panic("sched interruptible");
+80103b6a:	83 ec 0c             	sub    $0xc,%esp
+80103b6d:	68 dc 75 10 80       	push   $0x801075dc
+80103b72:	e8 f9 c7 ff ff       	call   80100370 <panic>
+  if(!holding(&ptable.lock))
+    panic("sched ptable.lock");
+  if(mycpu()->ncli != 1)
+    panic("sched locks");
+  if(p->state == RUNNING)
+    panic("sched running");
+80103b77:	83 ec 0c             	sub    $0xc,%esp
+80103b7a:	68 ce 75 10 80       	push   $0x801075ce
+80103b7f:	e8 ec c7 ff ff       	call   80100370 <panic>
+  struct proc *p = myproc();
+
+  if(!holding(&ptable.lock))
+    panic("sched ptable.lock");
+  if(mycpu()->ncli != 1)
+    panic("sched locks");
+80103b84:	83 ec 0c             	sub    $0xc,%esp
+80103b87:	68 c2 75 10 80       	push   $0x801075c2
+80103b8c:	e8 df c7 ff ff       	call   80100370 <panic>
+80103b91:	eb 0d                	jmp    80103ba0 <exit>
+80103b93:	90                   	nop
+80103b94:	90                   	nop
+80103b95:	90                   	nop
+80103b96:	90                   	nop
+80103b97:	90                   	nop
+80103b98:	90                   	nop
+80103b99:	90                   	nop
+80103b9a:	90                   	nop
+80103b9b:	90                   	nop
+80103b9c:	90                   	nop
+80103b9d:	90                   	nop
+80103b9e:	90                   	nop
+80103b9f:	90                   	nop
+
+80103ba0 <exit>:
+// Exit the current process.  Does not return.
+// An exited process remains in the zombie state
+// until its parent calls wait() to find out it exited.
+void
+exit(void)
+{
+80103ba0:	55                   	push   %ebp
+80103ba1:	89 e5                	mov    %esp,%ebp
+80103ba3:	57                   	push   %edi
+80103ba4:	56                   	push   %esi
+80103ba5:	53                   	push   %ebx
+80103ba6:	83 ec 0c             	sub    $0xc,%esp
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103ba9:	e8 82 06 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+80103bae:	e8 1d fb ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103bb3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103bb9:	e8 b2 06 00 00       	call   80104270 <popcli>
+{
+  struct proc *curproc = myproc();
+  struct proc *p;
+  int fd;
+
+  if(curproc == initproc)
+80103bbe:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
+80103bc4:	8d 5e 28             	lea    0x28(%esi),%ebx
+80103bc7:	8d 7e 68             	lea    0x68(%esi),%edi
+80103bca:	0f 84 e7 00 00 00    	je     80103cb7 <exit+0x117>
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd]){
+80103bd0:	8b 03                	mov    (%ebx),%eax
+80103bd2:	85 c0                	test   %eax,%eax
+80103bd4:	74 12                	je     80103be8 <exit+0x48>
+      fileclose(curproc->ofile[fd]);
+80103bd6:	83 ec 0c             	sub    $0xc,%esp
+80103bd9:	50                   	push   %eax
+80103bda:	e8 51 d2 ff ff       	call   80100e30 <fileclose>
+      curproc->ofile[fd] = 0;
+80103bdf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103be5:	83 c4 10             	add    $0x10,%esp
+80103be8:	83 c3 04             	add    $0x4,%ebx
+
+  if(curproc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+80103beb:	39 df                	cmp    %ebx,%edi
+80103bed:	75 e1                	jne    80103bd0 <exit+0x30>
+      fileclose(curproc->ofile[fd]);
+      curproc->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+80103bef:	e8 4c ef ff ff       	call   80102b40 <begin_op>
+  iput(curproc->cwd);
+80103bf4:	83 ec 0c             	sub    $0xc,%esp
+80103bf7:	ff 76 68             	pushl  0x68(%esi)
+80103bfa:	e8 91 db ff ff       	call   80101790 <iput>
+  end_op();
+80103bff:	e8 ac ef ff ff       	call   80102bb0 <end_op>
+  curproc->cwd = 0;
+80103c04:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+
+  acquire(&ptable.lock);
+80103c0b:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103c12:	e8 f9 06 00 00       	call   80104310 <acquire>
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+80103c17:	8b 56 14             	mov    0x14(%esi),%edx
+80103c1a:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103c1d:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103c22:	eb 0e                	jmp    80103c32 <exit+0x92>
+80103c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103c28:	83 c0 7c             	add    $0x7c,%eax
+80103c2b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103c30:	74 1c                	je     80103c4e <exit+0xae>
+    if(p->state == SLEEPING && p->chan == chan)
+80103c32:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103c36:	75 f0                	jne    80103c28 <exit+0x88>
+80103c38:	3b 50 20             	cmp    0x20(%eax),%edx
+80103c3b:	75 eb                	jne    80103c28 <exit+0x88>
+      p->state = RUNNABLE;
+80103c3d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103c44:	83 c0 7c             	add    $0x7c,%eax
+80103c47:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103c4c:	75 e4                	jne    80103c32 <exit+0x92>
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+80103c4e:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
+80103c54:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103c59:	eb 10                	jmp    80103c6b <exit+0xcb>
+80103c5b:	90                   	nop
+80103c5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103c60:	83 c2 7c             	add    $0x7c,%edx
+80103c63:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
+80103c69:	74 33                	je     80103c9e <exit+0xfe>
+    if(p->parent == curproc){
+80103c6b:	39 72 14             	cmp    %esi,0x14(%edx)
+80103c6e:	75 f0                	jne    80103c60 <exit+0xc0>
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+80103c70:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+80103c74:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if(p->state == ZOMBIE)
+80103c77:	75 e7                	jne    80103c60 <exit+0xc0>
+80103c79:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103c7e:	eb 0a                	jmp    80103c8a <exit+0xea>
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103c80:	83 c0 7c             	add    $0x7c,%eax
+80103c83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103c88:	74 d6                	je     80103c60 <exit+0xc0>
+    if(p->state == SLEEPING && p->chan == chan)
+80103c8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103c8e:	75 f0                	jne    80103c80 <exit+0xe0>
+80103c90:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103c93:	75 eb                	jne    80103c80 <exit+0xe0>
+      p->state = RUNNABLE;
+80103c95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103c9c:	eb e2                	jmp    80103c80 <exit+0xe0>
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  curproc->state = ZOMBIE;
+80103c9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+80103ca5:	e8 36 fe ff ff       	call   80103ae0 <sched>
+  panic("zombie exit");
+80103caa:	83 ec 0c             	sub    $0xc,%esp
+80103cad:	68 fd 75 10 80       	push   $0x801075fd
+80103cb2:	e8 b9 c6 ff ff       	call   80100370 <panic>
+  struct proc *curproc = myproc();
+  struct proc *p;
+  int fd;
+
+  if(curproc == initproc)
+    panic("init exiting");
+80103cb7:	83 ec 0c             	sub    $0xc,%esp
+80103cba:	68 f0 75 10 80       	push   $0x801075f0
+80103cbf:	e8 ac c6 ff ff       	call   80100370 <panic>
+80103cc4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103cca:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80103cd0 <yield>:
+}
+
+// Give up the CPU for one scheduling round.
+void
+yield(void)
+{
+80103cd0:	55                   	push   %ebp
+80103cd1:	89 e5                	mov    %esp,%ebp
+80103cd3:	53                   	push   %ebx
+80103cd4:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+80103cd7:	68 20 2d 11 80       	push   $0x80112d20
+80103cdc:	e8 2f 06 00 00       	call   80104310 <acquire>
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103ce1:	e8 4a 05 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+80103ce6:	e8 e5 f9 ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103ceb:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103cf1:	e8 7a 05 00 00       	call   80104270 <popcli>
+// Give up the CPU for one scheduling round.
+void
+yield(void)
+{
+  acquire(&ptable.lock);  //DOC: yieldlock
+  myproc()->state = RUNNABLE;
+80103cf6:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+80103cfd:	e8 de fd ff ff       	call   80103ae0 <sched>
+  release(&ptable.lock);
+80103d02:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103d09:	e8 b2 06 00 00       	call   801043c0 <release>
+}
+80103d0e:	83 c4 10             	add    $0x10,%esp
+80103d11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103d14:	c9                   	leave  
+80103d15:	c3                   	ret    
+80103d16:	8d 76 00             	lea    0x0(%esi),%esi
+80103d19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103d20 <sleep>:
+
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+sleep(void *chan, struct spinlock *lk)
+{
+80103d20:	55                   	push   %ebp
+80103d21:	89 e5                	mov    %esp,%ebp
+80103d23:	57                   	push   %edi
+80103d24:	56                   	push   %esi
+80103d25:	53                   	push   %ebx
+80103d26:	83 ec 0c             	sub    $0xc,%esp
+80103d29:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103d2c:	8b 75 0c             	mov    0xc(%ebp),%esi
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103d2f:	e8 fc 04 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+80103d34:	e8 97 f9 ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103d39:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80103d3f:	e8 2c 05 00 00       	call   80104270 <popcli>
+void
+sleep(void *chan, struct spinlock *lk)
+{
+  struct proc *p = myproc();
+  
+  if(p == 0)
+80103d44:	85 db                	test   %ebx,%ebx
+80103d46:	0f 84 87 00 00 00    	je     80103dd3 <sleep+0xb3>
+    panic("sleep");
+
+  if(lk == 0)
+80103d4c:	85 f6                	test   %esi,%esi
+80103d4e:	74 76                	je     80103dc6 <sleep+0xa6>
+  // change p->state and then call sched.
+  // Once we hold ptable.lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup runs with ptable.lock locked),
+  // so it's okay to release lk.
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+80103d50:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80103d56:	74 50                	je     80103da8 <sleep+0x88>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+80103d58:	83 ec 0c             	sub    $0xc,%esp
+80103d5b:	68 20 2d 11 80       	push   $0x80112d20
+80103d60:	e8 ab 05 00 00       	call   80104310 <acquire>
+    release(lk);
+80103d65:	89 34 24             	mov    %esi,(%esp)
+80103d68:	e8 53 06 00 00       	call   801043c0 <release>
+  }
+  // Go to sleep.
+  p->chan = chan;
+80103d6d:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80103d70:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+
+  sched();
+80103d77:	e8 64 fd ff ff       	call   80103ae0 <sched>
+
+  // Tidy up.
+  p->chan = 0;
+80103d7c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+
+  // Reacquire original lock.
+  if(lk != &ptable.lock){  //DOC: sleeplock2
+    release(&ptable.lock);
+80103d83:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103d8a:	e8 31 06 00 00       	call   801043c0 <release>
+    acquire(lk);
+80103d8f:	89 75 08             	mov    %esi,0x8(%ebp)
+80103d92:	83 c4 10             	add    $0x10,%esp
+  }
+}
+80103d95:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103d98:	5b                   	pop    %ebx
+80103d99:	5e                   	pop    %esi
+80103d9a:	5f                   	pop    %edi
+80103d9b:	5d                   	pop    %ebp
+  p->chan = 0;
+
+  // Reacquire original lock.
+  if(lk != &ptable.lock){  //DOC: sleeplock2
+    release(&ptable.lock);
+    acquire(lk);
+80103d9c:	e9 6f 05 00 00       	jmp    80104310 <acquire>
+80103da1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+    acquire(&ptable.lock);  //DOC: sleeplock1
+    release(lk);
+  }
+  // Go to sleep.
+  p->chan = chan;
+80103da8:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80103dab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+
+  sched();
+80103db2:	e8 29 fd ff ff       	call   80103ae0 <sched>
+
+  // Tidy up.
+  p->chan = 0;
+80103db7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+  // Reacquire original lock.
+  if(lk != &ptable.lock){  //DOC: sleeplock2
+    release(&ptable.lock);
+    acquire(lk);
+  }
+}
+80103dbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103dc1:	5b                   	pop    %ebx
+80103dc2:	5e                   	pop    %esi
+80103dc3:	5f                   	pop    %edi
+80103dc4:	5d                   	pop    %ebp
+80103dc5:	c3                   	ret    
+  
+  if(p == 0)
+    panic("sleep");
+
+  if(lk == 0)
+    panic("sleep without lk");
+80103dc6:	83 ec 0c             	sub    $0xc,%esp
+80103dc9:	68 0f 76 10 80       	push   $0x8010760f
+80103dce:	e8 9d c5 ff ff       	call   80100370 <panic>
+sleep(void *chan, struct spinlock *lk)
+{
+  struct proc *p = myproc();
+  
+  if(p == 0)
+    panic("sleep");
+80103dd3:	83 ec 0c             	sub    $0xc,%esp
+80103dd6:	68 09 76 10 80       	push   $0x80107609
+80103ddb:	e8 90 c5 ff ff       	call   80100370 <panic>
+
+80103de0 <wait>:
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+wait(void)
+{
+80103de0:	55                   	push   %ebp
+80103de1:	89 e5                	mov    %esp,%ebp
+80103de3:	56                   	push   %esi
+80103de4:	53                   	push   %ebx
+// while reading proc from the cpu structure
+struct proc*
+myproc(void) {
+  struct cpu *c;
+  struct proc *p;
+  pushcli();
+80103de5:	e8 46 04 00 00       	call   80104230 <pushcli>
+  c = mycpu();
+80103dea:	e8 e1 f8 ff ff       	call   801036d0 <mycpu>
+  p = c->proc;
+80103def:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80103df5:	e8 76 04 00 00       	call   80104270 <popcli>
+{
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+80103dfa:	83 ec 0c             	sub    $0xc,%esp
+80103dfd:	68 20 2d 11 80       	push   $0x80112d20
+80103e02:	e8 09 05 00 00       	call   80104310 <acquire>
+80103e07:	83 c4 10             	add    $0x10,%esp
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+80103e0a:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103e0c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80103e11:	eb 10                	jmp    80103e23 <wait+0x43>
+80103e13:	90                   	nop
+80103e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e18:	83 c3 7c             	add    $0x7c,%ebx
+80103e1b:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103e21:	74 1d                	je     80103e40 <wait+0x60>
+      if(p->parent != curproc)
+80103e23:	39 73 14             	cmp    %esi,0x14(%ebx)
+80103e26:	75 f0                	jne    80103e18 <wait+0x38>
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+80103e28:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80103e2c:	74 30                	je     80103e5e <wait+0x7e>
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103e2e:	83 c3 7c             	add    $0x7c,%ebx
+      if(p->parent != curproc)
+        continue;
+      havekids = 1;
+80103e31:	b8 01 00 00 00       	mov    $0x1,%eax
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103e36:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103e3c:	75 e5                	jne    80103e23 <wait+0x43>
+80103e3e:	66 90                	xchg   %ax,%ax
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+80103e40:	85 c0                	test   %eax,%eax
+80103e42:	74 70                	je     80103eb4 <wait+0xd4>
+80103e44:	8b 46 24             	mov    0x24(%esi),%eax
+80103e47:	85 c0                	test   %eax,%eax
+80103e49:	75 69                	jne    80103eb4 <wait+0xd4>
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+80103e4b:	83 ec 08             	sub    $0x8,%esp
+80103e4e:	68 20 2d 11 80       	push   $0x80112d20
+80103e53:	56                   	push   %esi
+80103e54:	e8 c7 fe ff ff       	call   80103d20 <sleep>
+  }
+80103e59:	83 c4 10             	add    $0x10,%esp
+80103e5c:	eb ac                	jmp    80103e0a <wait+0x2a>
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+80103e5e:	83 ec 0c             	sub    $0xc,%esp
+80103e61:	ff 73 08             	pushl  0x8(%ebx)
+      if(p->parent != curproc)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+80103e64:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80103e67:	e8 64 e4 ff ff       	call   801022d0 <kfree>
+        p->kstack = 0;
+        freevm(p->pgdir);
+80103e6c:	5a                   	pop    %edx
+80103e6d:	ff 73 04             	pushl  0x4(%ebx)
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+80103e70:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80103e77:	e8 74 2e 00 00       	call   80106cf0 <freevm>
+        p->pid = 0;
+80103e7c:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80103e83:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80103e8a:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80103e8e:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80103e95:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+80103e9c:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103ea3:	e8 18 05 00 00       	call   801043c0 <release>
+        return pid;
+80103ea8:	83 c4 10             	add    $0x10,%esp
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+80103eab:	8d 65 f8             	lea    -0x8(%ebp),%esp
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return pid;
+80103eae:	89 f0                	mov    %esi,%eax
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+80103eb0:	5b                   	pop    %ebx
+80103eb1:	5e                   	pop    %esi
+80103eb2:	5d                   	pop    %ebp
+80103eb3:	c3                   	ret    
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+80103eb4:	83 ec 0c             	sub    $0xc,%esp
+80103eb7:	68 20 2d 11 80       	push   $0x80112d20
+80103ebc:	e8 ff 04 00 00       	call   801043c0 <release>
+      return -1;
+80103ec1:	83 c4 10             	add    $0x10,%esp
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+80103ec4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+80103ec7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+80103ecc:	5b                   	pop    %ebx
+80103ecd:	5e                   	pop    %esi
+80103ece:	5d                   	pop    %ebp
+80103ecf:	c3                   	ret    
+
+80103ed0 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+80103ed0:	55                   	push   %ebp
+80103ed1:	89 e5                	mov    %esp,%ebp
+80103ed3:	53                   	push   %ebx
+80103ed4:	83 ec 10             	sub    $0x10,%esp
+80103ed7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+80103eda:	68 20 2d 11 80       	push   $0x80112d20
+80103edf:	e8 2c 04 00 00       	call   80104310 <acquire>
+80103ee4:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103ee7:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103eec:	eb 0c                	jmp    80103efa <wakeup+0x2a>
+80103eee:	66 90                	xchg   %ax,%ax
+80103ef0:	83 c0 7c             	add    $0x7c,%eax
+80103ef3:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103ef8:	74 1c                	je     80103f16 <wakeup+0x46>
+    if(p->state == SLEEPING && p->chan == chan)
+80103efa:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103efe:	75 f0                	jne    80103ef0 <wakeup+0x20>
+80103f00:	3b 58 20             	cmp    0x20(%eax),%ebx
+80103f03:	75 eb                	jne    80103ef0 <wakeup+0x20>
+      p->state = RUNNABLE;
+80103f05:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80103f0c:	83 c0 7c             	add    $0x7c,%eax
+80103f0f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103f14:	75 e4                	jne    80103efa <wakeup+0x2a>
+void
+wakeup(void *chan)
+{
+  acquire(&ptable.lock);
+  wakeup1(chan);
+  release(&ptable.lock);
+80103f16:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
+}
+80103f1d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103f20:	c9                   	leave  
+void
+wakeup(void *chan)
+{
+  acquire(&ptable.lock);
+  wakeup1(chan);
+  release(&ptable.lock);
+80103f21:	e9 9a 04 00 00       	jmp    801043c0 <release>
+80103f26:	8d 76 00             	lea    0x0(%esi),%esi
+80103f29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103f30 <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+80103f30:	55                   	push   %ebp
+80103f31:	89 e5                	mov    %esp,%ebp
+80103f33:	53                   	push   %ebx
+80103f34:	83 ec 10             	sub    $0x10,%esp
+80103f37:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+80103f3a:	68 20 2d 11 80       	push   $0x80112d20
+80103f3f:	e8 cc 03 00 00       	call   80104310 <acquire>
+80103f44:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103f47:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103f4c:	eb 0c                	jmp    80103f5a <kill+0x2a>
+80103f4e:	66 90                	xchg   %ax,%ax
+80103f50:	83 c0 7c             	add    $0x7c,%eax
+80103f53:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103f58:	74 3e                	je     80103f98 <kill+0x68>
+    if(p->pid == pid){
+80103f5a:	39 58 10             	cmp    %ebx,0x10(%eax)
+80103f5d:	75 f1                	jne    80103f50 <kill+0x20>
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+80103f5f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+      p->killed = 1;
+80103f63:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+80103f6a:	74 1c                	je     80103f88 <kill+0x58>
+        p->state = RUNNABLE;
+      release(&ptable.lock);
+80103f6c:	83 ec 0c             	sub    $0xc,%esp
+80103f6f:	68 20 2d 11 80       	push   $0x80112d20
+80103f74:	e8 47 04 00 00       	call   801043c0 <release>
+      return 0;
+80103f79:	83 c4 10             	add    $0x10,%esp
+80103f7c:	31 c0                	xor    %eax,%eax
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+80103f7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103f81:	c9                   	leave  
+80103f82:	c3                   	ret    
+80103f83:	90                   	nop
+80103f84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+        p->state = RUNNABLE;
+80103f88:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103f8f:	eb db                	jmp    80103f6c <kill+0x3c>
+80103f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      release(&ptable.lock);
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+80103f98:	83 ec 0c             	sub    $0xc,%esp
+80103f9b:	68 20 2d 11 80       	push   $0x80112d20
+80103fa0:	e8 1b 04 00 00       	call   801043c0 <release>
+  return -1;
+80103fa5:	83 c4 10             	add    $0x10,%esp
+80103fa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80103fad:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103fb0:	c9                   	leave  
+80103fb1:	c3                   	ret    
+80103fb2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103fb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80103fc0 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+80103fc0:	55                   	push   %ebp
+80103fc1:	89 e5                	mov    %esp,%ebp
+80103fc3:	57                   	push   %edi
+80103fc4:	56                   	push   %esi
+80103fc5:	53                   	push   %ebx
+80103fc6:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80103fc9:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+80103fce:	83 ec 3c             	sub    $0x3c,%esp
+80103fd1:	eb 24                	jmp    80103ff7 <procdump+0x37>
+80103fd3:	90                   	nop
+80103fd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80103fd8:	83 ec 0c             	sub    $0xc,%esp
+80103fdb:	68 9b 79 10 80       	push   $0x8010799b
+80103fe0:	e8 7b c6 ff ff       	call   80100660 <cprintf>
+80103fe5:	83 c4 10             	add    $0x10,%esp
+80103fe8:	83 c3 7c             	add    $0x7c,%ebx
+  int i;
+  struct proc *p;
+  char *state;
+  uint pc[10];
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103feb:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
+80103ff1:	0f 84 81 00 00 00    	je     80104078 <procdump+0xb8>
+    if(p->state == UNUSED)
+80103ff7:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80103ffa:	85 c0                	test   %eax,%eax
+80103ffc:	74 ea                	je     80103fe8 <procdump+0x28>
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80103ffe:	83 f8 05             	cmp    $0x5,%eax
+      state = states[p->state];
+    else
+      state = "???";
+80104001:	ba 20 76 10 80       	mov    $0x80107620,%edx
+  uint pc[10];
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80104006:	77 11                	ja     80104019 <procdump+0x59>
+80104008:	8b 14 85 80 76 10 80 	mov    -0x7fef8980(,%eax,4),%edx
+      state = states[p->state];
+    else
+      state = "???";
+8010400f:	b8 20 76 10 80       	mov    $0x80107620,%eax
+80104014:	85 d2                	test   %edx,%edx
+80104016:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+80104019:	53                   	push   %ebx
+8010401a:	52                   	push   %edx
+8010401b:	ff 73 a4             	pushl  -0x5c(%ebx)
+8010401e:	68 24 76 10 80       	push   $0x80107624
+80104023:	e8 38 c6 ff ff       	call   80100660 <cprintf>
+    if(p->state == SLEEPING){
+80104028:	83 c4 10             	add    $0x10,%esp
+8010402b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+8010402f:	75 a7                	jne    80103fd8 <procdump+0x18>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+80104031:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104034:	83 ec 08             	sub    $0x8,%esp
+80104037:	8d 7d c0             	lea    -0x40(%ebp),%edi
+8010403a:	50                   	push   %eax
+8010403b:	8b 43 b0             	mov    -0x50(%ebx),%eax
+8010403e:	8b 40 0c             	mov    0xc(%eax),%eax
+80104041:	83 c0 08             	add    $0x8,%eax
+80104044:	50                   	push   %eax
+80104045:	e8 86 01 00 00       	call   801041d0 <getcallerpcs>
+8010404a:	83 c4 10             	add    $0x10,%esp
+8010404d:	8d 76 00             	lea    0x0(%esi),%esi
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104050:	8b 17                	mov    (%edi),%edx
+80104052:	85 d2                	test   %edx,%edx
+80104054:	74 82                	je     80103fd8 <procdump+0x18>
+        cprintf(" %p", pc[i]);
+80104056:	83 ec 08             	sub    $0x8,%esp
+80104059:	83 c7 04             	add    $0x4,%edi
+8010405c:	52                   	push   %edx
+8010405d:	68 61 70 10 80       	push   $0x80107061
+80104062:	e8 f9 c5 ff ff       	call   80100660 <cprintf>
+    else
+      state = "???";
+    cprintf("%d %s %s", p->pid, state, p->name);
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104067:	83 c4 10             	add    $0x10,%esp
+8010406a:	39 f7                	cmp    %esi,%edi
+8010406c:	75 e2                	jne    80104050 <procdump+0x90>
+8010406e:	e9 65 ff ff ff       	jmp    80103fd8 <procdump+0x18>
+80104073:	90                   	nop
+80104074:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+  }
+}
+80104078:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010407b:	5b                   	pop    %ebx
+8010407c:	5e                   	pop    %esi
+8010407d:	5f                   	pop    %edi
+8010407e:	5d                   	pop    %ebp
+8010407f:	c3                   	ret    
+
+80104080 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+80104080:	55                   	push   %ebp
+80104081:	89 e5                	mov    %esp,%ebp
+80104083:	53                   	push   %ebx
+80104084:	83 ec 0c             	sub    $0xc,%esp
+80104087:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+8010408a:	68 98 76 10 80       	push   $0x80107698
+8010408f:	8d 43 04             	lea    0x4(%ebx),%eax
+80104092:	50                   	push   %eax
+80104093:	e8 18 01 00 00       	call   801041b0 <initlock>
+  lk->name = name;
+80104098:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+8010409b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+801040a1:	83 c4 10             	add    $0x10,%esp
+initsleeplock(struct sleeplock *lk, char *name)
+{
+  initlock(&lk->lk, "sleep lock");
+  lk->name = name;
+  lk->locked = 0;
+  lk->pid = 0;
+801040a4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+  initlock(&lk->lk, "sleep lock");
+  lk->name = name;
+801040ab:	89 43 38             	mov    %eax,0x38(%ebx)
+  lk->locked = 0;
+  lk->pid = 0;
+}
+801040ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801040b1:	c9                   	leave  
+801040b2:	c3                   	ret    
+801040b3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801040b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801040c0 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+801040c0:	55                   	push   %ebp
+801040c1:	89 e5                	mov    %esp,%ebp
+801040c3:	56                   	push   %esi
+801040c4:	53                   	push   %ebx
+801040c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+801040c8:	83 ec 0c             	sub    $0xc,%esp
+801040cb:	8d 73 04             	lea    0x4(%ebx),%esi
+801040ce:	56                   	push   %esi
+801040cf:	e8 3c 02 00 00       	call   80104310 <acquire>
+  while (lk->locked) {
+801040d4:	8b 13                	mov    (%ebx),%edx
+801040d6:	83 c4 10             	add    $0x10,%esp
+801040d9:	85 d2                	test   %edx,%edx
+801040db:	74 16                	je     801040f3 <acquiresleep+0x33>
+801040dd:	8d 76 00             	lea    0x0(%esi),%esi
+    sleep(lk, &lk->lk);
+801040e0:	83 ec 08             	sub    $0x8,%esp
+801040e3:	56                   	push   %esi
+801040e4:	53                   	push   %ebx
+801040e5:	e8 36 fc ff ff       	call   80103d20 <sleep>
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+  acquire(&lk->lk);
+  while (lk->locked) {
+801040ea:	8b 03                	mov    (%ebx),%eax
+801040ec:	83 c4 10             	add    $0x10,%esp
+801040ef:	85 c0                	test   %eax,%eax
+801040f1:	75 ed                	jne    801040e0 <acquiresleep+0x20>
+    sleep(lk, &lk->lk);
+  }
+  lk->locked = 1;
+801040f3:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+801040f9:	e8 72 f6 ff ff       	call   80103770 <myproc>
+801040fe:	8b 40 10             	mov    0x10(%eax),%eax
+80104101:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+80104104:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80104107:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010410a:	5b                   	pop    %ebx
+8010410b:	5e                   	pop    %esi
+8010410c:	5d                   	pop    %ebp
+  while (lk->locked) {
+    sleep(lk, &lk->lk);
+  }
+  lk->locked = 1;
+  lk->pid = myproc()->pid;
+  release(&lk->lk);
+8010410d:	e9 ae 02 00 00       	jmp    801043c0 <release>
+80104112:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104119:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104120 <releasesleep>:
+}
+
+void
+releasesleep(struct sleeplock *lk)
+{
+80104120:	55                   	push   %ebp
+80104121:	89 e5                	mov    %esp,%ebp
+80104123:	56                   	push   %esi
+80104124:	53                   	push   %ebx
+80104125:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104128:	83 ec 0c             	sub    $0xc,%esp
+8010412b:	8d 73 04             	lea    0x4(%ebx),%esi
+8010412e:	56                   	push   %esi
+8010412f:	e8 dc 01 00 00       	call   80104310 <acquire>
+  lk->locked = 0;
+80104134:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+8010413a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+80104141:	89 1c 24             	mov    %ebx,(%esp)
+80104144:	e8 87 fd ff ff       	call   80103ed0 <wakeup>
+  release(&lk->lk);
+80104149:	89 75 08             	mov    %esi,0x8(%ebp)
+8010414c:	83 c4 10             	add    $0x10,%esp
+}
+8010414f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104152:	5b                   	pop    %ebx
+80104153:	5e                   	pop    %esi
+80104154:	5d                   	pop    %ebp
+{
+  acquire(&lk->lk);
+  lk->locked = 0;
+  lk->pid = 0;
+  wakeup(lk);
+  release(&lk->lk);
+80104155:	e9 66 02 00 00       	jmp    801043c0 <release>
+8010415a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104160 <holdingsleep>:
+}
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+80104160:	55                   	push   %ebp
+80104161:	89 e5                	mov    %esp,%ebp
+80104163:	57                   	push   %edi
+80104164:	56                   	push   %esi
+80104165:	53                   	push   %ebx
+80104166:	31 ff                	xor    %edi,%edi
+80104168:	83 ec 18             	sub    $0x18,%esp
+8010416b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+8010416e:	8d 73 04             	lea    0x4(%ebx),%esi
+80104171:	56                   	push   %esi
+80104172:	e8 99 01 00 00       	call   80104310 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+80104177:	8b 03                	mov    (%ebx),%eax
+80104179:	83 c4 10             	add    $0x10,%esp
+8010417c:	85 c0                	test   %eax,%eax
+8010417e:	74 13                	je     80104193 <holdingsleep+0x33>
+80104180:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104183:	e8 e8 f5 ff ff       	call   80103770 <myproc>
+80104188:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010418b:	0f 94 c0             	sete   %al
+8010418e:	0f b6 c0             	movzbl %al,%eax
+80104191:	89 c7                	mov    %eax,%edi
+  release(&lk->lk);
+80104193:	83 ec 0c             	sub    $0xc,%esp
+80104196:	56                   	push   %esi
+80104197:	e8 24 02 00 00       	call   801043c0 <release>
+  return r;
+}
+8010419c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010419f:	89 f8                	mov    %edi,%eax
+801041a1:	5b                   	pop    %ebx
+801041a2:	5e                   	pop    %esi
+801041a3:	5f                   	pop    %edi
+801041a4:	5d                   	pop    %ebp
+801041a5:	c3                   	ret    
+801041a6:	66 90                	xchg   %ax,%ax
+801041a8:	66 90                	xchg   %ax,%ax
+801041aa:	66 90                	xchg   %ax,%ax
+801041ac:	66 90                	xchg   %ax,%ax
+801041ae:	66 90                	xchg   %ax,%ax
+
+801041b0 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+801041b0:	55                   	push   %ebp
+801041b1:	89 e5                	mov    %esp,%ebp
+801041b3:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+801041b6:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+801041b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+  lk->name = name;
+801041bf:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->locked = 0;
+  lk->cpu = 0;
+801041c2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+801041c9:	5d                   	pop    %ebp
+801041ca:	c3                   	ret    
+801041cb:	90                   	nop
+801041cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801041d0 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+801041d0:	55                   	push   %ebp
+801041d1:	89 e5                	mov    %esp,%ebp
+801041d3:	53                   	push   %ebx
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+801041d4:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+801041d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+801041da:	8d 50 f8             	lea    -0x8(%eax),%edx
+  for(i = 0; i < 10; i++){
+801041dd:	31 c0                	xor    %eax,%eax
+801041df:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+801041e0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+801041e6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+801041ec:	77 1a                	ja     80104208 <getcallerpcs+0x38>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+801041ee:	8b 5a 04             	mov    0x4(%edx),%ebx
+801041f1:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
+{
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+801041f4:	83 c0 01             	add    $0x1,%eax
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+801041f7:	8b 12                	mov    (%edx),%edx
+{
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+801041f9:	83 f8 0a             	cmp    $0xa,%eax
+801041fc:	75 e2                	jne    801041e0 <getcallerpcs+0x10>
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+801041fe:	5b                   	pop    %ebx
+801041ff:	5d                   	pop    %ebp
+80104200:	c3                   	ret    
+80104201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+80104208:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+8010420f:	83 c0 01             	add    $0x1,%eax
+80104212:	83 f8 0a             	cmp    $0xa,%eax
+80104215:	74 e7                	je     801041fe <getcallerpcs+0x2e>
+    pcs[i] = 0;
+80104217:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+8010421e:	83 c0 01             	add    $0x1,%eax
+80104221:	83 f8 0a             	cmp    $0xa,%eax
+80104224:	75 e2                	jne    80104208 <getcallerpcs+0x38>
+80104226:	eb d6                	jmp    801041fe <getcallerpcs+0x2e>
+80104228:	90                   	nop
+80104229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104230 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+80104230:	55                   	push   %ebp
+80104231:	89 e5                	mov    %esp,%ebp
+80104233:	53                   	push   %ebx
+80104234:	83 ec 04             	sub    $0x4,%esp
+80104237:	9c                   	pushf  
+80104238:	5b                   	pop    %ebx
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+80104239:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+8010423a:	e8 91 f4 ff ff       	call   801036d0 <mycpu>
+8010423f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104245:	85 c0                	test   %eax,%eax
+80104247:	75 11                	jne    8010425a <pushcli+0x2a>
+    mycpu()->intena = eflags & FL_IF;
+80104249:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010424f:	e8 7c f4 ff ff       	call   801036d0 <mycpu>
+80104254:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+  mycpu()->ncli += 1;
+8010425a:	e8 71 f4 ff ff       	call   801036d0 <mycpu>
+8010425f:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+80104266:	83 c4 04             	add    $0x4,%esp
+80104269:	5b                   	pop    %ebx
+8010426a:	5d                   	pop    %ebp
+8010426b:	c3                   	ret    
+8010426c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104270 <popcli>:
+
+void
+popcli(void)
+{
+80104270:	55                   	push   %ebp
+80104271:	89 e5                	mov    %esp,%ebp
+80104273:	83 ec 08             	sub    $0x8,%esp
+
+static inline uint
+readeflags(void)
+{
+  uint eflags;
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104276:	9c                   	pushf  
+80104277:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80104278:	f6 c4 02             	test   $0x2,%ah
+8010427b:	75 52                	jne    801042cf <popcli+0x5f>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+8010427d:	e8 4e f4 ff ff       	call   801036d0 <mycpu>
+80104282:	8b 88 a4 00 00 00    	mov    0xa4(%eax),%ecx
+80104288:	8d 51 ff             	lea    -0x1(%ecx),%edx
+8010428b:	85 d2                	test   %edx,%edx
+8010428d:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
+80104293:	78 2d                	js     801042c2 <popcli+0x52>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+80104295:	e8 36 f4 ff ff       	call   801036d0 <mycpu>
+8010429a:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801042a0:	85 d2                	test   %edx,%edx
+801042a2:	74 0c                	je     801042b0 <popcli+0x40>
+    sti();
+}
+801042a4:	c9                   	leave  
+801042a5:	c3                   	ret    
+801042a6:	8d 76 00             	lea    0x0(%esi),%esi
+801042a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+{
+  if(readeflags()&FL_IF)
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+801042b0:	e8 1b f4 ff ff       	call   801036d0 <mycpu>
+801042b5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801042bb:	85 c0                	test   %eax,%eax
+801042bd:	74 e5                	je     801042a4 <popcli+0x34>
+}
+
+static inline void
+sti(void)
+{
+  asm volatile("sti");
+801042bf:	fb                   	sti    
+    sti();
+}
+801042c0:	c9                   	leave  
+801042c1:	c3                   	ret    
+popcli(void)
+{
+  if(readeflags()&FL_IF)
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+    panic("popcli");
+801042c2:	83 ec 0c             	sub    $0xc,%esp
+801042c5:	68 ba 76 10 80       	push   $0x801076ba
+801042ca:	e8 a1 c0 ff ff       	call   80100370 <panic>
+
+void
+popcli(void)
+{
+  if(readeflags()&FL_IF)
+    panic("popcli - interruptible");
+801042cf:	83 ec 0c             	sub    $0xc,%esp
+801042d2:	68 a3 76 10 80       	push   $0x801076a3
+801042d7:	e8 94 c0 ff ff       	call   80100370 <panic>
+801042dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801042e0 <holding>:
+}
+
+// Check whether this cpu is holding the lock.
+int
+holding(struct spinlock *lock)
+{
+801042e0:	55                   	push   %ebp
+801042e1:	89 e5                	mov    %esp,%ebp
+801042e3:	56                   	push   %esi
+801042e4:	53                   	push   %ebx
+801042e5:	8b 75 08             	mov    0x8(%ebp),%esi
+801042e8:	31 db                	xor    %ebx,%ebx
+  int r;
+  pushcli();
+801042ea:	e8 41 ff ff ff       	call   80104230 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+801042ef:	8b 06                	mov    (%esi),%eax
+801042f1:	85 c0                	test   %eax,%eax
+801042f3:	74 10                	je     80104305 <holding+0x25>
+801042f5:	8b 5e 08             	mov    0x8(%esi),%ebx
+801042f8:	e8 d3 f3 ff ff       	call   801036d0 <mycpu>
+801042fd:	39 c3                	cmp    %eax,%ebx
+801042ff:	0f 94 c3             	sete   %bl
+80104302:	0f b6 db             	movzbl %bl,%ebx
+  popcli();
+80104305:	e8 66 ff ff ff       	call   80104270 <popcli>
+  return r;
+}
+8010430a:	89 d8                	mov    %ebx,%eax
+8010430c:	5b                   	pop    %ebx
+8010430d:	5e                   	pop    %esi
+8010430e:	5d                   	pop    %ebp
+8010430f:	c3                   	ret    
+
+80104310 <acquire>:
+// Loops (spins) until the lock is acquired.
+// Holding a lock for a long time may cause
+// other CPUs to waste time spinning to acquire it.
+void
+acquire(struct spinlock *lk)
+{
+80104310:	55                   	push   %ebp
+80104311:	89 e5                	mov    %esp,%ebp
+80104313:	53                   	push   %ebx
+80104314:	83 ec 04             	sub    $0x4,%esp
+  pushcli(); // disable interrupts to avoid deadlock.
+80104317:	e8 14 ff ff ff       	call   80104230 <pushcli>
+  if(holding(lk))
+8010431c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010431f:	83 ec 0c             	sub    $0xc,%esp
+80104322:	53                   	push   %ebx
+80104323:	e8 b8 ff ff ff       	call   801042e0 <holding>
+80104328:	83 c4 10             	add    $0x10,%esp
+8010432b:	85 c0                	test   %eax,%eax
+8010432d:	0f 85 7d 00 00 00    	jne    801043b0 <acquire+0xa0>
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+80104333:	ba 01 00 00 00       	mov    $0x1,%edx
+80104338:	eb 09                	jmp    80104343 <acquire+0x33>
+8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104340:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104343:	89 d0                	mov    %edx,%eax
+80104345:	f0 87 03             	lock xchg %eax,(%ebx)
+    panic("acquire");
+
+  // The xchg is atomic.
+  while(xchg(&lk->locked, 1) != 0)
+80104348:	85 c0                	test   %eax,%eax
+8010434a:	75 f4                	jne    80104340 <acquire+0x30>
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen after the lock is acquired.
+  __sync_synchronize();
+8010434c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+
+  // Record info about lock acquisition for debugging.
+  lk->cpu = mycpu();
+80104351:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104354:	e8 77 f3 ff ff       	call   801036d0 <mycpu>
+getcallerpcs(void *v, uint pcs[])
+{
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+80104359:	89 ea                	mov    %ebp,%edx
+  // references happen after the lock is acquired.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for debugging.
+  lk->cpu = mycpu();
+  getcallerpcs(&lk, lk->pcs);
+8010435b:	8d 4b 0c             	lea    0xc(%ebx),%ecx
+  // past this point, to ensure that the critical section's memory
+  // references happen after the lock is acquired.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for debugging.
+  lk->cpu = mycpu();
+8010435e:	89 43 08             	mov    %eax,0x8(%ebx)
+{
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80104361:	31 c0                	xor    %eax,%eax
+80104363:	90                   	nop
+80104364:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104368:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+8010436e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104374:	77 1a                	ja     80104390 <acquire+0x80>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+80104376:	8b 5a 04             	mov    0x4(%edx),%ebx
+80104379:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
+{
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+8010437c:	83 c0 01             	add    $0x1,%eax
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+8010437f:	8b 12                	mov    (%edx),%edx
+{
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80104381:	83 f8 0a             	cmp    $0xa,%eax
+80104384:	75 e2                	jne    80104368 <acquire+0x58>
+  __sync_synchronize();
+
+  // Record info about lock acquisition for debugging.
+  lk->cpu = mycpu();
+  getcallerpcs(&lk, lk->pcs);
+}
+80104386:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104389:	c9                   	leave  
+8010438a:	c3                   	ret    
+8010438b:	90                   	nop
+8010438c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+80104390:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+80104397:	83 c0 01             	add    $0x1,%eax
+8010439a:	83 f8 0a             	cmp    $0xa,%eax
+8010439d:	74 e7                	je     80104386 <acquire+0x76>
+    pcs[i] = 0;
+8010439f:	c7 04 81 00 00 00 00 	movl   $0x0,(%ecx,%eax,4)
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+    ebp = (uint*)ebp[0]; // saved %ebp
+  }
+  for(; i < 10; i++)
+801043a6:	83 c0 01             	add    $0x1,%eax
+801043a9:	83 f8 0a             	cmp    $0xa,%eax
+801043ac:	75 e2                	jne    80104390 <acquire+0x80>
+801043ae:	eb d6                	jmp    80104386 <acquire+0x76>
+void
+acquire(struct spinlock *lk)
+{
+  pushcli(); // disable interrupts to avoid deadlock.
+  if(holding(lk))
+    panic("acquire");
+801043b0:	83 ec 0c             	sub    $0xc,%esp
+801043b3:	68 c1 76 10 80       	push   $0x801076c1
+801043b8:	e8 b3 bf ff ff       	call   80100370 <panic>
+801043bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801043c0 <release>:
+}
+
+// Release the lock.
+void
+release(struct spinlock *lk)
+{
+801043c0:	55                   	push   %ebp
+801043c1:	89 e5                	mov    %esp,%ebp
+801043c3:	53                   	push   %ebx
+801043c4:	83 ec 10             	sub    $0x10,%esp
+801043c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holding(lk))
+801043ca:	53                   	push   %ebx
+801043cb:	e8 10 ff ff ff       	call   801042e0 <holding>
+801043d0:	83 c4 10             	add    $0x10,%esp
+801043d3:	85 c0                	test   %eax,%eax
+801043d5:	74 22                	je     801043f9 <release+0x39>
+    panic("release");
+
+  lk->pcs[0] = 0;
+801043d7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+801043de:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other cores before the lock is released.
+  // Both the C compiler and the hardware may re-order loads and
+  // stores; __sync_synchronize() tells them both not to.
+  __sync_synchronize();
+801043e5:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code can't use a C assignment, since it might
+  // not be atomic. A real OS would use C atomics here.
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+801043ea:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+
+  popcli();
+}
+801043f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801043f3:	c9                   	leave  
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code can't use a C assignment, since it might
+  // not be atomic. A real OS would use C atomics here.
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+
+  popcli();
+801043f4:	e9 77 fe ff ff       	jmp    80104270 <popcli>
+// Release the lock.
+void
+release(struct spinlock *lk)
+{
+  if(!holding(lk))
+    panic("release");
+801043f9:	83 ec 0c             	sub    $0xc,%esp
+801043fc:	68 c9 76 10 80       	push   $0x801076c9
+80104401:	e8 6a bf ff ff       	call   80100370 <panic>
+80104406:	66 90                	xchg   %ax,%ax
+80104408:	66 90                	xchg   %ax,%ax
+8010440a:	66 90                	xchg   %ax,%ax
+8010440c:	66 90                	xchg   %ax,%ax
+8010440e:	66 90                	xchg   %ax,%ax
+
+80104410 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+80104410:	55                   	push   %ebp
+80104411:	89 e5                	mov    %esp,%ebp
+80104413:	57                   	push   %edi
+80104414:	53                   	push   %ebx
+80104415:	8b 55 08             	mov    0x8(%ebp),%edx
+80104418:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  if ((int)dst%4 == 0 && n%4 == 0){
+8010441b:	f6 c2 03             	test   $0x3,%dl
+8010441e:	75 05                	jne    80104425 <memset+0x15>
+80104420:	f6 c1 03             	test   $0x3,%cl
+80104423:	74 13                	je     80104438 <memset+0x28>
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+80104425:	89 d7                	mov    %edx,%edi
+80104427:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010442a:	fc                   	cld    
+8010442b:	f3 aa                	rep stos %al,%es:(%edi)
+    c &= 0xFF;
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+8010442d:	5b                   	pop    %ebx
+8010442e:	89 d0                	mov    %edx,%eax
+80104430:	5f                   	pop    %edi
+80104431:	5d                   	pop    %ebp
+80104432:	c3                   	ret    
+80104433:	90                   	nop
+80104434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+void*
+memset(void *dst, int c, uint n)
+{
+  if ((int)dst%4 == 0 && n%4 == 0){
+    c &= 0xFF;
+80104438:	0f b6 7d 0c          	movzbl 0xc(%ebp),%edi
+}
+
+static inline void
+stosl(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosl" :
+8010443c:	c1 e9 02             	shr    $0x2,%ecx
+8010443f:	89 fb                	mov    %edi,%ebx
+80104441:	89 f8                	mov    %edi,%eax
+80104443:	c1 e3 18             	shl    $0x18,%ebx
+80104446:	c1 e0 10             	shl    $0x10,%eax
+80104449:	09 d8                	or     %ebx,%eax
+8010444b:	09 f8                	or     %edi,%eax
+8010444d:	c1 e7 08             	shl    $0x8,%edi
+80104450:	09 f8                	or     %edi,%eax
+80104452:	89 d7                	mov    %edx,%edi
+80104454:	fc                   	cld    
+80104455:	f3 ab                	rep stos %eax,%es:(%edi)
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+80104457:	5b                   	pop    %ebx
+80104458:	89 d0                	mov    %edx,%eax
+8010445a:	5f                   	pop    %edi
+8010445b:	5d                   	pop    %ebp
+8010445c:	c3                   	ret    
+8010445d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104460 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+80104460:	55                   	push   %ebp
+80104461:	89 e5                	mov    %esp,%ebp
+80104463:	57                   	push   %edi
+80104464:	56                   	push   %esi
+80104465:	8b 45 10             	mov    0x10(%ebp),%eax
+80104468:	53                   	push   %ebx
+80104469:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010446c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+8010446f:	85 c0                	test   %eax,%eax
+80104471:	74 29                	je     8010449c <memcmp+0x3c>
+    if(*s1 != *s2)
+80104473:	0f b6 13             	movzbl (%ebx),%edx
+80104476:	0f b6 0e             	movzbl (%esi),%ecx
+80104479:	38 d1                	cmp    %dl,%cl
+8010447b:	75 2b                	jne    801044a8 <memcmp+0x48>
+8010447d:	8d 78 ff             	lea    -0x1(%eax),%edi
+80104480:	31 c0                	xor    %eax,%eax
+80104482:	eb 14                	jmp    80104498 <memcmp+0x38>
+80104484:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104488:	0f b6 54 03 01       	movzbl 0x1(%ebx,%eax,1),%edx
+8010448d:	83 c0 01             	add    $0x1,%eax
+80104490:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104494:	38 ca                	cmp    %cl,%dl
+80104496:	75 10                	jne    801044a8 <memcmp+0x48>
+{
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+80104498:	39 f8                	cmp    %edi,%eax
+8010449a:	75 ec                	jne    80104488 <memcmp+0x28>
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+}
+8010449c:	5b                   	pop    %ebx
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+8010449d:	31 c0                	xor    %eax,%eax
+}
+8010449f:	5e                   	pop    %esi
+801044a0:	5f                   	pop    %edi
+801044a1:	5d                   	pop    %ebp
+801044a2:	c3                   	ret    
+801044a3:	90                   	nop
+801044a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+    if(*s1 != *s2)
+      return *s1 - *s2;
+801044a8:	0f b6 c2             	movzbl %dl,%eax
+    s1++, s2++;
+  }
+
+  return 0;
+}
+801044ab:	5b                   	pop    %ebx
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+    if(*s1 != *s2)
+      return *s1 - *s2;
+801044ac:	29 c8                	sub    %ecx,%eax
+    s1++, s2++;
+  }
+
+  return 0;
+}
+801044ae:	5e                   	pop    %esi
+801044af:	5f                   	pop    %edi
+801044b0:	5d                   	pop    %ebp
+801044b1:	c3                   	ret    
+801044b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801044c0 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+801044c0:	55                   	push   %ebp
+801044c1:	89 e5                	mov    %esp,%ebp
+801044c3:	56                   	push   %esi
+801044c4:	53                   	push   %ebx
+801044c5:	8b 45 08             	mov    0x8(%ebp),%eax
+801044c8:	8b 75 0c             	mov    0xc(%ebp),%esi
+801044cb:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+801044ce:	39 c6                	cmp    %eax,%esi
+801044d0:	73 2e                	jae    80104500 <memmove+0x40>
+801044d2:	8d 0c 1e             	lea    (%esi,%ebx,1),%ecx
+801044d5:	39 c8                	cmp    %ecx,%eax
+801044d7:	73 27                	jae    80104500 <memmove+0x40>
+    s += n;
+    d += n;
+    while(n-- > 0)
+801044d9:	85 db                	test   %ebx,%ebx
+801044db:	8d 53 ff             	lea    -0x1(%ebx),%edx
+801044de:	74 17                	je     801044f7 <memmove+0x37>
+      *--d = *--s;
+801044e0:	29 d9                	sub    %ebx,%ecx
+801044e2:	89 cb                	mov    %ecx,%ebx
+801044e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801044e8:	0f b6 0c 13          	movzbl (%ebx,%edx,1),%ecx
+801044ec:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+    s += n;
+    d += n;
+    while(n-- > 0)
+801044ef:	83 ea 01             	sub    $0x1,%edx
+801044f2:	83 fa ff             	cmp    $0xffffffff,%edx
+801044f5:	75 f1                	jne    801044e8 <memmove+0x28>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+801044f7:	5b                   	pop    %ebx
+801044f8:	5e                   	pop    %esi
+801044f9:	5d                   	pop    %ebp
+801044fa:	c3                   	ret    
+801044fb:	90                   	nop
+801044fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+80104500:	31 d2                	xor    %edx,%edx
+80104502:	85 db                	test   %ebx,%ebx
+80104504:	74 f1                	je     801044f7 <memmove+0x37>
+80104506:	8d 76 00             	lea    0x0(%esi),%esi
+80104509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      *d++ = *s++;
+80104510:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+80104514:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+80104517:	83 c2 01             	add    $0x1,%edx
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+8010451a:	39 d3                	cmp    %edx,%ebx
+8010451c:	75 f2                	jne    80104510 <memmove+0x50>
+      *d++ = *s++;
+
+  return dst;
+}
+8010451e:	5b                   	pop    %ebx
+8010451f:	5e                   	pop    %esi
+80104520:	5d                   	pop    %ebp
+80104521:	c3                   	ret    
+80104522:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104530 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+80104530:	55                   	push   %ebp
+80104531:	89 e5                	mov    %esp,%ebp
+  return memmove(dst, src, n);
+}
+80104533:	5d                   	pop    %ebp
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+  return memmove(dst, src, n);
+80104534:	eb 8a                	jmp    801044c0 <memmove>
+80104536:	8d 76 00             	lea    0x0(%esi),%esi
+80104539:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104540 <strncmp>:
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+80104540:	55                   	push   %ebp
+80104541:	89 e5                	mov    %esp,%ebp
+80104543:	57                   	push   %edi
+80104544:	56                   	push   %esi
+80104545:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104548:	53                   	push   %ebx
+80104549:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010454c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  while(n > 0 && *p && *p == *q)
+8010454f:	85 c9                	test   %ecx,%ecx
+80104551:	74 37                	je     8010458a <strncmp+0x4a>
+80104553:	0f b6 17             	movzbl (%edi),%edx
+80104556:	0f b6 1e             	movzbl (%esi),%ebx
+80104559:	84 d2                	test   %dl,%dl
+8010455b:	74 3f                	je     8010459c <strncmp+0x5c>
+8010455d:	38 d3                	cmp    %dl,%bl
+8010455f:	75 3b                	jne    8010459c <strncmp+0x5c>
+80104561:	8d 47 01             	lea    0x1(%edi),%eax
+80104564:	01 cf                	add    %ecx,%edi
+80104566:	eb 1b                	jmp    80104583 <strncmp+0x43>
+80104568:	90                   	nop
+80104569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104570:	0f b6 10             	movzbl (%eax),%edx
+80104573:	84 d2                	test   %dl,%dl
+80104575:	74 21                	je     80104598 <strncmp+0x58>
+80104577:	0f b6 19             	movzbl (%ecx),%ebx
+8010457a:	83 c0 01             	add    $0x1,%eax
+8010457d:	89 ce                	mov    %ecx,%esi
+8010457f:	38 da                	cmp    %bl,%dl
+80104581:	75 19                	jne    8010459c <strncmp+0x5c>
+80104583:	39 c7                	cmp    %eax,%edi
+    n--, p++, q++;
+80104585:	8d 4e 01             	lea    0x1(%esi),%ecx
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+  while(n > 0 && *p && *p == *q)
+80104588:	75 e6                	jne    80104570 <strncmp+0x30>
+    n--, p++, q++;
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+}
+8010458a:	5b                   	pop    %ebx
+strncmp(const char *p, const char *q, uint n)
+{
+  while(n > 0 && *p && *p == *q)
+    n--, p++, q++;
+  if(n == 0)
+    return 0;
+8010458b:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+}
+8010458d:	5e                   	pop    %esi
+8010458e:	5f                   	pop    %edi
+8010458f:	5d                   	pop    %ebp
+80104590:	c3                   	ret    
+80104591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104598:	0f b6 5e 01          	movzbl 0x1(%esi),%ebx
+{
+  while(n > 0 && *p && *p == *q)
+    n--, p++, q++;
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+8010459c:	0f b6 c2             	movzbl %dl,%eax
+8010459f:	29 d8                	sub    %ebx,%eax
+}
+801045a1:	5b                   	pop    %ebx
+801045a2:	5e                   	pop    %esi
+801045a3:	5f                   	pop    %edi
+801045a4:	5d                   	pop    %ebp
+801045a5:	c3                   	ret    
+801045a6:	8d 76 00             	lea    0x0(%esi),%esi
+801045a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801045b0 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+801045b0:	55                   	push   %ebp
+801045b1:	89 e5                	mov    %esp,%ebp
+801045b3:	56                   	push   %esi
+801045b4:	53                   	push   %ebx
+801045b5:	8b 45 08             	mov    0x8(%ebp),%eax
+801045b8:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+801045bb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+801045be:	89 c2                	mov    %eax,%edx
+801045c0:	eb 19                	jmp    801045db <strncpy+0x2b>
+801045c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801045c8:	83 c3 01             	add    $0x1,%ebx
+801045cb:	0f b6 4b ff          	movzbl -0x1(%ebx),%ecx
+801045cf:	83 c2 01             	add    $0x1,%edx
+801045d2:	84 c9                	test   %cl,%cl
+801045d4:	88 4a ff             	mov    %cl,-0x1(%edx)
+801045d7:	74 09                	je     801045e2 <strncpy+0x32>
+801045d9:	89 f1                	mov    %esi,%ecx
+801045db:	85 c9                	test   %ecx,%ecx
+801045dd:	8d 71 ff             	lea    -0x1(%ecx),%esi
+801045e0:	7f e6                	jg     801045c8 <strncpy+0x18>
+    ;
+  while(n-- > 0)
+801045e2:	31 c9                	xor    %ecx,%ecx
+801045e4:	85 f6                	test   %esi,%esi
+801045e6:	7e 17                	jle    801045ff <strncpy+0x4f>
+801045e8:	90                   	nop
+801045e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    *s++ = 0;
+801045f0:	c6 04 0a 00          	movb   $0x0,(%edx,%ecx,1)
+801045f4:	89 f3                	mov    %esi,%ebx
+801045f6:	83 c1 01             	add    $0x1,%ecx
+801045f9:	29 cb                	sub    %ecx,%ebx
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+    ;
+  while(n-- > 0)
+801045fb:	85 db                	test   %ebx,%ebx
+801045fd:	7f f1                	jg     801045f0 <strncpy+0x40>
+    *s++ = 0;
+  return os;
+}
+801045ff:	5b                   	pop    %ebx
+80104600:	5e                   	pop    %esi
+80104601:	5d                   	pop    %ebp
+80104602:	c3                   	ret    
+80104603:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104610 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+80104610:	55                   	push   %ebp
+80104611:	89 e5                	mov    %esp,%ebp
+80104613:	56                   	push   %esi
+80104614:	53                   	push   %ebx
+80104615:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104618:	8b 45 08             	mov    0x8(%ebp),%eax
+8010461b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *os;
+
+  os = s;
+  if(n <= 0)
+8010461e:	85 c9                	test   %ecx,%ecx
+80104620:	7e 26                	jle    80104648 <safestrcpy+0x38>
+80104622:	8d 74 0a ff          	lea    -0x1(%edx,%ecx,1),%esi
+80104626:	89 c1                	mov    %eax,%ecx
+80104628:	eb 17                	jmp    80104641 <safestrcpy+0x31>
+8010462a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+80104630:	83 c2 01             	add    $0x1,%edx
+80104633:	0f b6 5a ff          	movzbl -0x1(%edx),%ebx
+80104637:	83 c1 01             	add    $0x1,%ecx
+8010463a:	84 db                	test   %bl,%bl
+8010463c:	88 59 ff             	mov    %bl,-0x1(%ecx)
+8010463f:	74 04                	je     80104645 <safestrcpy+0x35>
+80104641:	39 f2                	cmp    %esi,%edx
+80104643:	75 eb                	jne    80104630 <safestrcpy+0x20>
+    ;
+  *s = 0;
+80104645:	c6 01 00             	movb   $0x0,(%ecx)
+  return os;
+}
+80104648:	5b                   	pop    %ebx
+80104649:	5e                   	pop    %esi
+8010464a:	5d                   	pop    %ebp
+8010464b:	c3                   	ret    
+8010464c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104650 <strlen>:
+
+int
+strlen(const char *s)
+{
+80104650:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+80104651:	31 c0                	xor    %eax,%eax
+  return os;
+}
+
+int
+strlen(const char *s)
+{
+80104653:	89 e5                	mov    %esp,%ebp
+80104655:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+80104658:	80 3a 00             	cmpb   $0x0,(%edx)
+8010465b:	74 0c                	je     80104669 <strlen+0x19>
+8010465d:	8d 76 00             	lea    0x0(%esi),%esi
+80104660:	83 c0 01             	add    $0x1,%eax
+80104663:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104667:	75 f7                	jne    80104660 <strlen+0x10>
+    ;
+  return n;
+}
+80104669:	5d                   	pop    %ebp
+8010466a:	c3                   	ret    
+
+8010466b <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+8010466b:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+8010466f:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+80104673:	55                   	push   %ebp
+  pushl %ebx
+80104674:	53                   	push   %ebx
+  pushl %esi
+80104675:	56                   	push   %esi
+  pushl %edi
+80104676:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80104677:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80104679:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+8010467b:	5f                   	pop    %edi
+  popl %esi
+8010467c:	5e                   	pop    %esi
+  popl %ebx
+8010467d:	5b                   	pop    %ebx
+  popl %ebp
+8010467e:	5d                   	pop    %ebp
+  ret
+8010467f:	c3                   	ret    
+
+80104680 <scinit>:
+
+// Init syscall counter
+void
+scinit(void)
+{
+  reads = 0;
+80104680:	c7 05 d4 4c 11 80 00 	movl   $0x0,0x80114cd4
+80104687:	00 00 00 
+8010468a:	b8 e0 4c 11 80       	mov    $0x80114ce0,%eax
+8010468f:	90                   	nop
+  for (int i = 0; i < SYS_CALL_AMOUNT + 1; i++) {
+    calls[i] = 0;
+80104690:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104696:	83 c0 04             	add    $0x4,%eax
+// Init syscall counter
+void
+scinit(void)
+{
+  reads = 0;
+  for (int i = 0; i < SYS_CALL_AMOUNT + 1; i++) {
+80104699:	3d 40 4d 11 80       	cmp    $0x80114d40,%eax
+8010469e:	75 f0                	jne    80104690 <scinit+0x10>
+uint calls[SYS_CALL_AMOUNT + 1];
+
+// Init syscall counter
+void
+scinit(void)
+{
+801046a0:	55                   	push   %ebp
+801046a1:	89 e5                	mov    %esp,%ebp
+801046a3:	83 ec 10             	sub    $0x10,%esp
+  reads = 0;
+  for (int i = 0; i < SYS_CALL_AMOUNT + 1; i++) {
+    calls[i] = 0;
+  }
+  initlock(&readslock, "time");
+801046a6:	68 d1 76 10 80       	push   $0x801076d1
+801046ab:	68 a0 4c 11 80       	push   $0x80114ca0
+801046b0:	e8 fb fa ff ff       	call   801041b0 <initlock>
+  initlock(&calllock, "calls");
+801046b5:	58                   	pop    %eax
+801046b6:	5a                   	pop    %edx
+801046b7:	68 d6 76 10 80       	push   $0x801076d6
+801046bc:	68 60 4c 11 80       	push   $0x80114c60
+801046c1:	e8 ea fa ff ff       	call   801041b0 <initlock>
+}
+801046c6:	83 c4 10             	add    $0x10,%esp
+801046c9:	c9                   	leave  
+801046ca:	c3                   	ret    
+801046cb:	90                   	nop
+801046cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801046d0 <fetchint>:
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+801046d0:	55                   	push   %ebp
+801046d1:	89 e5                	mov    %esp,%ebp
+801046d3:	53                   	push   %ebx
+801046d4:	83 ec 04             	sub    $0x4,%esp
+801046d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+801046da:	e8 91 f0 ff ff       	call   80103770 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+801046df:	8b 00                	mov    (%eax),%eax
+801046e1:	39 d8                	cmp    %ebx,%eax
+801046e3:	76 1b                	jbe    80104700 <fetchint+0x30>
+801046e5:	8d 53 04             	lea    0x4(%ebx),%edx
+801046e8:	39 d0                	cmp    %edx,%eax
+801046ea:	72 14                	jb     80104700 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+801046ec:	8b 45 0c             	mov    0xc(%ebp),%eax
+801046ef:	8b 13                	mov    (%ebx),%edx
+801046f1:	89 10                	mov    %edx,(%eax)
+  return 0;
+801046f3:	31 c0                	xor    %eax,%eax
+}
+801046f5:	83 c4 04             	add    $0x4,%esp
+801046f8:	5b                   	pop    %ebx
+801046f9:	5d                   	pop    %ebp
+801046fa:	c3                   	ret    
+801046fb:	90                   	nop
+801046fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+fetchint(uint addr, int *ip)
+{
+  struct proc *curproc = myproc();
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+    return -1;
+80104700:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104705:	eb ee                	jmp    801046f5 <fetchint+0x25>
+80104707:	89 f6                	mov    %esi,%esi
+80104709:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104710 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+80104710:	55                   	push   %ebp
+80104711:	89 e5                	mov    %esp,%ebp
+80104713:	53                   	push   %ebx
+80104714:	83 ec 04             	sub    $0x4,%esp
+80104717:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+8010471a:	e8 51 f0 ff ff       	call   80103770 <myproc>
+
+  if(addr >= curproc->sz)
+8010471f:	39 18                	cmp    %ebx,(%eax)
+80104721:	76 29                	jbe    8010474c <fetchstr+0x3c>
+    return -1;
+  *pp = (char*)addr;
+80104723:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104726:	89 da                	mov    %ebx,%edx
+80104728:	89 19                	mov    %ebx,(%ecx)
+  ep = (char*)curproc->sz;
+8010472a:	8b 00                	mov    (%eax),%eax
+  for(s = *pp; s < ep; s++){
+8010472c:	39 c3                	cmp    %eax,%ebx
+8010472e:	73 1c                	jae    8010474c <fetchstr+0x3c>
+    if(*s == 0)
+80104730:	80 3b 00             	cmpb   $0x0,(%ebx)
+80104733:	75 10                	jne    80104745 <fetchstr+0x35>
+80104735:	eb 29                	jmp    80104760 <fetchstr+0x50>
+80104737:	89 f6                	mov    %esi,%esi
+80104739:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104740:	80 3a 00             	cmpb   $0x0,(%edx)
+80104743:	74 1b                	je     80104760 <fetchstr+0x50>
+
+  if(addr >= curproc->sz)
+    return -1;
+  *pp = (char*)addr;
+  ep = (char*)curproc->sz;
+  for(s = *pp; s < ep; s++){
+80104745:	83 c2 01             	add    $0x1,%edx
+80104748:	39 d0                	cmp    %edx,%eax
+8010474a:	77 f4                	ja     80104740 <fetchstr+0x30>
+    if(*s == 0)
+      return s - *pp;
+  }
+  return -1;
+}
+8010474c:	83 c4 04             	add    $0x4,%esp
+{
+  char *s, *ep;
+  struct proc *curproc = myproc();
+
+  if(addr >= curproc->sz)
+    return -1;
+8010474f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  for(s = *pp; s < ep; s++){
+    if(*s == 0)
+      return s - *pp;
+  }
+  return -1;
+}
+80104754:	5b                   	pop    %ebx
+80104755:	5d                   	pop    %ebp
+80104756:	c3                   	ret    
+80104757:	89 f6                	mov    %esi,%esi
+80104759:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80104760:	83 c4 04             	add    $0x4,%esp
+    return -1;
+  *pp = (char*)addr;
+  ep = (char*)curproc->sz;
+  for(s = *pp; s < ep; s++){
+    if(*s == 0)
+      return s - *pp;
+80104763:	89 d0                	mov    %edx,%eax
+80104765:	29 d8                	sub    %ebx,%eax
+  }
+  return -1;
+}
+80104767:	5b                   	pop    %ebx
+80104768:	5d                   	pop    %ebp
+80104769:	c3                   	ret    
+8010476a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104770 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80104770:	55                   	push   %ebp
+80104771:	89 e5                	mov    %esp,%ebp
+80104773:	56                   	push   %esi
+80104774:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80104775:	e8 f6 ef ff ff       	call   80103770 <myproc>
+8010477a:	8b 40 18             	mov    0x18(%eax),%eax
+8010477d:	8b 55 08             	mov    0x8(%ebp),%edx
+80104780:	8b 40 44             	mov    0x44(%eax),%eax
+80104783:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+  struct proc *curproc = myproc();
+80104786:	e8 e5 ef ff ff       	call   80103770 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+8010478b:	8b 00                	mov    (%eax),%eax
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+8010478d:	8d 73 04             	lea    0x4(%ebx),%esi
+int
+fetchint(uint addr, int *ip)
+{
+  struct proc *curproc = myproc();
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80104790:	39 c6                	cmp    %eax,%esi
+80104792:	73 1c                	jae    801047b0 <argint+0x40>
+80104794:	8d 53 08             	lea    0x8(%ebx),%edx
+80104797:	39 d0                	cmp    %edx,%eax
+80104799:	72 15                	jb     801047b0 <argint+0x40>
+    return -1;
+  *ip = *(int*)(addr);
+8010479b:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010479e:	8b 53 04             	mov    0x4(%ebx),%edx
+801047a1:	89 10                	mov    %edx,(%eax)
+  return 0;
+801047a3:	31 c0                	xor    %eax,%eax
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+}
+801047a5:	5b                   	pop    %ebx
+801047a6:	5e                   	pop    %esi
+801047a7:	5d                   	pop    %ebp
+801047a8:	c3                   	ret    
+801047a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+fetchint(uint addr, int *ip)
+{
+  struct proc *curproc = myproc();
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+    return -1;
+801047b0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801047b5:	eb ee                	jmp    801047a5 <argint+0x35>
+801047b7:	89 f6                	mov    %esi,%esi
+801047b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801047c0 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+801047c0:	55                   	push   %ebp
+801047c1:	89 e5                	mov    %esp,%ebp
+801047c3:	56                   	push   %esi
+801047c4:	53                   	push   %ebx
+801047c5:	83 ec 10             	sub    $0x10,%esp
+801047c8:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int i;
+  struct proc *curproc = myproc();
+801047cb:	e8 a0 ef ff ff       	call   80103770 <myproc>
+801047d0:	89 c6                	mov    %eax,%esi
+ 
+  if(argint(n, &i) < 0)
+801047d2:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801047d5:	83 ec 08             	sub    $0x8,%esp
+801047d8:	50                   	push   %eax
+801047d9:	ff 75 08             	pushl  0x8(%ebp)
+801047dc:	e8 8f ff ff ff       	call   80104770 <argint>
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+801047e1:	c1 e8 1f             	shr    $0x1f,%eax
+801047e4:	83 c4 10             	add    $0x10,%esp
+801047e7:	84 c0                	test   %al,%al
+801047e9:	75 2d                	jne    80104818 <argptr+0x58>
+801047eb:	89 d8                	mov    %ebx,%eax
+801047ed:	c1 e8 1f             	shr    $0x1f,%eax
+801047f0:	84 c0                	test   %al,%al
+801047f2:	75 24                	jne    80104818 <argptr+0x58>
+801047f4:	8b 16                	mov    (%esi),%edx
+801047f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801047f9:	39 c2                	cmp    %eax,%edx
+801047fb:	76 1b                	jbe    80104818 <argptr+0x58>
+801047fd:	01 c3                	add    %eax,%ebx
+801047ff:	39 da                	cmp    %ebx,%edx
+80104801:	72 15                	jb     80104818 <argptr+0x58>
+    return -1;
+  *pp = (char*)i;
+80104803:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104806:	89 02                	mov    %eax,(%edx)
+  return 0;
+80104808:	31 c0                	xor    %eax,%eax
+}
+8010480a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010480d:	5b                   	pop    %ebx
+8010480e:	5e                   	pop    %esi
+8010480f:	5d                   	pop    %ebp
+80104810:	c3                   	ret    
+80104811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  struct proc *curproc = myproc();
+ 
+  if(argint(n, &i) < 0)
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+    return -1;
+80104818:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010481d:	eb eb                	jmp    8010480a <argptr+0x4a>
+8010481f:	90                   	nop
+
+80104820 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+80104820:	55                   	push   %ebp
+80104821:	89 e5                	mov    %esp,%ebp
+80104823:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+80104826:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104829:	50                   	push   %eax
+8010482a:	ff 75 08             	pushl  0x8(%ebp)
+8010482d:	e8 3e ff ff ff       	call   80104770 <argint>
+80104832:	83 c4 10             	add    $0x10,%esp
+80104835:	85 c0                	test   %eax,%eax
+80104837:	78 17                	js     80104850 <argstr+0x30>
+    return -1;
+  return fetchstr(addr, pp);
+80104839:	83 ec 08             	sub    $0x8,%esp
+8010483c:	ff 75 0c             	pushl  0xc(%ebp)
+8010483f:	ff 75 f4             	pushl  -0xc(%ebp)
+80104842:	e8 c9 fe ff ff       	call   80104710 <fetchstr>
+80104847:	83 c4 10             	add    $0x10,%esp
+}
+8010484a:	c9                   	leave  
+8010484b:	c3                   	ret    
+8010484c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+int
+argstr(int n, char **pp)
+{
+  int addr;
+  if(argint(n, &addr) < 0)
+    return -1;
+80104850:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchstr(addr, pp);
+}
+80104855:	c9                   	leave  
+80104856:	c3                   	ret    
+80104857:	89 f6                	mov    %esi,%esi
+80104859:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104860 <syscall>:
+[SYS_callcount] sys_callcount,
+};
+
+void
+syscall(void)
+{
+80104860:	55                   	push   %ebp
+80104861:	89 e5                	mov    %esp,%ebp
+80104863:	57                   	push   %edi
+80104864:	56                   	push   %esi
+80104865:	53                   	push   %ebx
+80104866:	83 ec 0c             	sub    $0xc,%esp
+  int num;
+  struct proc *curproc = myproc();
+80104869:	e8 02 ef ff ff       	call   80103770 <myproc>
+8010486e:	89 c6                	mov    %eax,%esi
+
+  num = curproc->tf->eax;
+80104870:	8b 40 18             	mov    0x18(%eax),%eax
+80104873:	8b 58 1c             	mov    0x1c(%eax),%ebx
+  // If call is read add it to the counter
+  if (syscalls[num] == sys_read) {
+80104876:	8b 3c 9d 00 77 10 80 	mov    -0x7fef8900(,%ebx,4),%edi
+8010487d:	81 ff b0 4b 10 80    	cmp    $0x80104bb0,%edi
+80104883:	0f 84 87 00 00 00    	je     80104910 <syscall+0xb0>
+      acquire(&readslock);
+      reads++;
+      release(&readslock);
+  }
+  // Calculate all syscall amount
+  if (num < SYS_CALL_AMOUNT + 1)  {
+80104889:	83 fb 17             	cmp    $0x17,%ebx
+8010488c:	7e 52                	jle    801048e0 <syscall+0x80>
+    acquire(&calllock);
+    calls[num]++;
+    release(&calllock);
+  }
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+8010488e:	8d 43 ff             	lea    -0x1(%ebx),%eax
+80104891:	83 f8 16             	cmp    $0x16,%eax
+80104894:	77 1a                	ja     801048b0 <syscall+0x50>
+80104896:	85 ff                	test   %edi,%edi
+80104898:	74 16                	je     801048b0 <syscall+0x50>
+    curproc->tf->eax = syscalls[num]();
+8010489a:	8b 5e 18             	mov    0x18(%esi),%ebx
+8010489d:	ff d7                	call   *%edi
+8010489f:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+801048a2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801048a5:	5b                   	pop    %ebx
+801048a6:	5e                   	pop    %esi
+801048a7:	5f                   	pop    %edi
+801048a8:	5d                   	pop    %ebp
+801048a9:	c3                   	ret    
+801048aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    curproc->tf->eax = syscalls[num]();
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+801048b0:	8d 46 6c             	lea    0x6c(%esi),%eax
+    release(&calllock);
+  }
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    curproc->tf->eax = syscalls[num]();
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+801048b3:	53                   	push   %ebx
+801048b4:	50                   	push   %eax
+801048b5:	ff 76 10             	pushl  0x10(%esi)
+801048b8:	68 dc 76 10 80       	push   $0x801076dc
+801048bd:	e8 9e bd ff ff       	call   80100660 <cprintf>
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+801048c2:	8b 46 18             	mov    0x18(%esi),%eax
+801048c5:	83 c4 10             	add    $0x10,%esp
+801048c8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+  }
+}
+801048cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801048d2:	5b                   	pop    %ebx
+801048d3:	5e                   	pop    %esi
+801048d4:	5f                   	pop    %edi
+801048d5:	5d                   	pop    %ebp
+801048d6:	c3                   	ret    
+801048d7:	89 f6                	mov    %esi,%esi
+801048d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      reads++;
+      release(&readslock);
+  }
+  // Calculate all syscall amount
+  if (num < SYS_CALL_AMOUNT + 1)  {
+    acquire(&calllock);
+801048e0:	83 ec 0c             	sub    $0xc,%esp
+801048e3:	68 60 4c 11 80       	push   $0x80114c60
+801048e8:	e8 23 fa ff ff       	call   80104310 <acquire>
+    calls[num]++;
+    release(&calllock);
+801048ed:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+      release(&readslock);
+  }
+  // Calculate all syscall amount
+  if (num < SYS_CALL_AMOUNT + 1)  {
+    acquire(&calllock);
+    calls[num]++;
+801048f4:	83 04 9d e0 4c 11 80 	addl   $0x1,-0x7feeb320(,%ebx,4)
+801048fb:	01 
+    release(&calllock);
+801048fc:	e8 bf fa ff ff       	call   801043c0 <release>
+80104901:	83 c4 10             	add    $0x10,%esp
+80104904:	eb 88                	jmp    8010488e <syscall+0x2e>
+80104906:	8d 76 00             	lea    0x0(%esi),%esi
+80104909:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  struct proc *curproc = myproc();
+
+  num = curproc->tf->eax;
+  // If call is read add it to the counter
+  if (syscalls[num] == sys_read) {
+      acquire(&readslock);
+80104910:	83 ec 0c             	sub    $0xc,%esp
+80104913:	68 a0 4c 11 80       	push   $0x80114ca0
+80104918:	e8 f3 f9 ff ff       	call   80104310 <acquire>
+      reads++;
+      release(&readslock);
+8010491d:	c7 04 24 a0 4c 11 80 	movl   $0x80114ca0,(%esp)
+
+  num = curproc->tf->eax;
+  // If call is read add it to the counter
+  if (syscalls[num] == sys_read) {
+      acquire(&readslock);
+      reads++;
+80104924:	83 05 d4 4c 11 80 01 	addl   $0x1,0x80114cd4
+      release(&readslock);
+8010492b:	e8 90 fa ff ff       	call   801043c0 <release>
+80104930:	83 c4 10             	add    $0x10,%esp
+80104933:	e9 51 ff ff ff       	jmp    80104889 <syscall+0x29>
+80104938:	66 90                	xchg   %ax,%ax
+8010493a:	66 90                	xchg   %ax,%ax
+8010493c:	66 90                	xchg   %ax,%ax
+8010493e:	66 90                	xchg   %ax,%ax
+
+80104940 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104940:	55                   	push   %ebp
+80104941:	89 e5                	mov    %esp,%ebp
+80104943:	57                   	push   %edi
+80104944:	56                   	push   %esi
+80104945:	53                   	push   %ebx
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80104946:	8d 75 da             	lea    -0x26(%ebp),%esi
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104949:	83 ec 34             	sub    $0x34,%esp
+8010494c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+8010494f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80104952:	56                   	push   %esi
+80104953:	50                   	push   %eax
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80104954:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104957:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+8010495a:	e8 71 d5 ff ff       	call   80101ed0 <nameiparent>
+8010495f:	83 c4 10             	add    $0x10,%esp
+80104962:	85 c0                	test   %eax,%eax
+80104964:	0f 84 f6 00 00 00    	je     80104a60 <create+0x120>
+    return 0;
+  ilock(dp);
+8010496a:	83 ec 0c             	sub    $0xc,%esp
+8010496d:	89 c7                	mov    %eax,%edi
+8010496f:	50                   	push   %eax
+80104970:	e8 eb cc ff ff       	call   80101660 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80104975:	83 c4 0c             	add    $0xc,%esp
+80104978:	6a 00                	push   $0x0
+8010497a:	56                   	push   %esi
+8010497b:	57                   	push   %edi
+8010497c:	e8 0f d2 ff ff       	call   80101b90 <dirlookup>
+80104981:	83 c4 10             	add    $0x10,%esp
+80104984:	85 c0                	test   %eax,%eax
+80104986:	89 c3                	mov    %eax,%ebx
+80104988:	74 56                	je     801049e0 <create+0xa0>
+    iunlockput(dp);
+8010498a:	83 ec 0c             	sub    $0xc,%esp
+8010498d:	57                   	push   %edi
+8010498e:	e8 5d cf ff ff       	call   801018f0 <iunlockput>
+    ilock(ip);
+80104993:	89 1c 24             	mov    %ebx,(%esp)
+80104996:	e8 c5 cc ff ff       	call   80101660 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+8010499b:	83 c4 10             	add    $0x10,%esp
+8010499e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+801049a3:	75 1b                	jne    801049c0 <create+0x80>
+801049a5:	66 83 7b 50 02       	cmpw   $0x2,0x50(%ebx)
+801049aa:	89 d8                	mov    %ebx,%eax
+801049ac:	75 12                	jne    801049c0 <create+0x80>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+801049ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801049b1:	5b                   	pop    %ebx
+801049b2:	5e                   	pop    %esi
+801049b3:	5f                   	pop    %edi
+801049b4:	5d                   	pop    %ebp
+801049b5:	c3                   	ret    
+801049b6:	8d 76 00             	lea    0x0(%esi),%esi
+801049b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+801049c0:	83 ec 0c             	sub    $0xc,%esp
+801049c3:	53                   	push   %ebx
+801049c4:	e8 27 cf ff ff       	call   801018f0 <iunlockput>
+    return 0;
+801049c9:	83 c4 10             	add    $0x10,%esp
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+801049cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+801049cf:	31 c0                	xor    %eax,%eax
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+801049d1:	5b                   	pop    %ebx
+801049d2:	5e                   	pop    %esi
+801049d3:	5f                   	pop    %edi
+801049d4:	5d                   	pop    %ebp
+801049d5:	c3                   	ret    
+801049d6:	8d 76 00             	lea    0x0(%esi),%esi
+801049d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+801049e0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+801049e4:	83 ec 08             	sub    $0x8,%esp
+801049e7:	50                   	push   %eax
+801049e8:	ff 37                	pushl  (%edi)
+801049ea:	e8 01 cb ff ff       	call   801014f0 <ialloc>
+801049ef:	83 c4 10             	add    $0x10,%esp
+801049f2:	85 c0                	test   %eax,%eax
+801049f4:	89 c3                	mov    %eax,%ebx
+801049f6:	0f 84 cc 00 00 00    	je     80104ac8 <create+0x188>
+    panic("create: ialloc");
+
+  ilock(ip);
+801049fc:	83 ec 0c             	sub    $0xc,%esp
+801049ff:	50                   	push   %eax
+80104a00:	e8 5b cc ff ff       	call   80101660 <ilock>
+  ip->major = major;
+80104a05:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104a09:	66 89 43 52          	mov    %ax,0x52(%ebx)
+  ip->minor = minor;
+80104a0d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104a11:	66 89 43 54          	mov    %ax,0x54(%ebx)
+  ip->nlink = 1;
+80104a15:	b8 01 00 00 00       	mov    $0x1,%eax
+80104a1a:	66 89 43 56          	mov    %ax,0x56(%ebx)
+  iupdate(ip);
+80104a1e:	89 1c 24             	mov    %ebx,(%esp)
+80104a21:	e8 8a cb ff ff       	call   801015b0 <iupdate>
+
+  if(type == T_DIR){  // Create . and .. entries.
+80104a26:	83 c4 10             	add    $0x10,%esp
+80104a29:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104a2e:	74 40                	je     80104a70 <create+0x130>
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+80104a30:	83 ec 04             	sub    $0x4,%esp
+80104a33:	ff 73 04             	pushl  0x4(%ebx)
+80104a36:	56                   	push   %esi
+80104a37:	57                   	push   %edi
+80104a38:	e8 b3 d3 ff ff       	call   80101df0 <dirlink>
+80104a3d:	83 c4 10             	add    $0x10,%esp
+80104a40:	85 c0                	test   %eax,%eax
+80104a42:	78 77                	js     80104abb <create+0x17b>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+80104a44:	83 ec 0c             	sub    $0xc,%esp
+80104a47:	57                   	push   %edi
+80104a48:	e8 a3 ce ff ff       	call   801018f0 <iunlockput>
+
+  return ip;
+80104a4d:	83 c4 10             	add    $0x10,%esp
+}
+80104a50:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+80104a53:	89 d8                	mov    %ebx,%eax
+}
+80104a55:	5b                   	pop    %ebx
+80104a56:	5e                   	pop    %esi
+80104a57:	5f                   	pop    %edi
+80104a58:	5d                   	pop    %ebp
+80104a59:	c3                   	ret    
+80104a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+80104a60:	31 c0                	xor    %eax,%eax
+80104a62:	e9 47 ff ff ff       	jmp    801049ae <create+0x6e>
+80104a67:	89 f6                	mov    %esi,%esi
+80104a69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+80104a70:	66 83 47 56 01       	addw   $0x1,0x56(%edi)
+    iupdate(dp);
+80104a75:	83 ec 0c             	sub    $0xc,%esp
+80104a78:	57                   	push   %edi
+80104a79:	e8 32 cb ff ff       	call   801015b0 <iupdate>
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80104a7e:	83 c4 0c             	add    $0xc,%esp
+80104a81:	ff 73 04             	pushl  0x4(%ebx)
+80104a84:	68 7c 77 10 80       	push   $0x8010777c
+80104a89:	53                   	push   %ebx
+80104a8a:	e8 61 d3 ff ff       	call   80101df0 <dirlink>
+80104a8f:	83 c4 10             	add    $0x10,%esp
+80104a92:	85 c0                	test   %eax,%eax
+80104a94:	78 18                	js     80104aae <create+0x16e>
+80104a96:	83 ec 04             	sub    $0x4,%esp
+80104a99:	ff 77 04             	pushl  0x4(%edi)
+80104a9c:	68 7b 77 10 80       	push   $0x8010777b
+80104aa1:	53                   	push   %ebx
+80104aa2:	e8 49 d3 ff ff       	call   80101df0 <dirlink>
+80104aa7:	83 c4 10             	add    $0x10,%esp
+80104aaa:	85 c0                	test   %eax,%eax
+80104aac:	79 82                	jns    80104a30 <create+0xf0>
+      panic("create dots");
+80104aae:	83 ec 0c             	sub    $0xc,%esp
+80104ab1:	68 6f 77 10 80       	push   $0x8010776f
+80104ab6:	e8 b5 b8 ff ff       	call   80100370 <panic>
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+80104abb:	83 ec 0c             	sub    $0xc,%esp
+80104abe:	68 7e 77 10 80       	push   $0x8010777e
+80104ac3:	e8 a8 b8 ff ff       	call   80100370 <panic>
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+80104ac8:	83 ec 0c             	sub    $0xc,%esp
+80104acb:	68 60 77 10 80       	push   $0x80107760
+80104ad0:	e8 9b b8 ff ff       	call   80100370 <panic>
+80104ad5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ad9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104ae0 <argfd.constprop.0>:
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+80104ae0:	55                   	push   %ebp
+80104ae1:	89 e5                	mov    %esp,%ebp
+80104ae3:	56                   	push   %esi
+80104ae4:	53                   	push   %ebx
+80104ae5:	89 c6                	mov    %eax,%esi
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+80104ae7:	8d 45 f4             	lea    -0xc(%ebp),%eax
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+80104aea:	89 d3                	mov    %edx,%ebx
+80104aec:	83 ec 18             	sub    $0x18,%esp
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+80104aef:	50                   	push   %eax
+80104af0:	6a 00                	push   $0x0
+80104af2:	e8 79 fc ff ff       	call   80104770 <argint>
+80104af7:	83 c4 10             	add    $0x10,%esp
+80104afa:	85 c0                	test   %eax,%eax
+80104afc:	78 32                	js     80104b30 <argfd.constprop.0+0x50>
+    return -1;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80104afe:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104b02:	77 2c                	ja     80104b30 <argfd.constprop.0+0x50>
+80104b04:	e8 67 ec ff ff       	call   80103770 <myproc>
+80104b09:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104b0c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104b10:	85 c0                	test   %eax,%eax
+80104b12:	74 1c                	je     80104b30 <argfd.constprop.0+0x50>
+    return -1;
+  if(pfd)
+80104b14:	85 f6                	test   %esi,%esi
+80104b16:	74 02                	je     80104b1a <argfd.constprop.0+0x3a>
+    *pfd = fd;
+80104b18:	89 16                	mov    %edx,(%esi)
+  if(pf)
+80104b1a:	85 db                	test   %ebx,%ebx
+80104b1c:	74 22                	je     80104b40 <argfd.constprop.0+0x60>
+    *pf = f;
+80104b1e:	89 03                	mov    %eax,(%ebx)
+  return 0;
+80104b20:	31 c0                	xor    %eax,%eax
+}
+80104b22:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104b25:	5b                   	pop    %ebx
+80104b26:	5e                   	pop    %esi
+80104b27:	5d                   	pop    %ebp
+80104b28:	c3                   	ret    
+80104b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b30:	8d 65 f8             	lea    -0x8(%ebp),%esp
+{
+  int fd;
+  struct file *f;
+
+  if(argint(n, &fd) < 0)
+    return -1;
+80104b33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+}
+80104b38:	5b                   	pop    %ebx
+80104b39:	5e                   	pop    %esi
+80104b3a:	5d                   	pop    %ebp
+80104b3b:	c3                   	ret    
+80104b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+80104b40:	31 c0                	xor    %eax,%eax
+80104b42:	eb de                	jmp    80104b22 <argfd.constprop.0+0x42>
+80104b44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80104b50 <sys_dup>:
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+80104b50:	55                   	push   %ebp
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+80104b51:	31 c0                	xor    %eax,%eax
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+80104b53:	89 e5                	mov    %esp,%ebp
+80104b55:	56                   	push   %esi
+80104b56:	53                   	push   %ebx
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+80104b57:	8d 55 f4             	lea    -0xc(%ebp),%edx
+  return -1;
+}
+
+int
+sys_dup(void)
+{
+80104b5a:	83 ec 10             	sub    $0x10,%esp
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+80104b5d:	e8 7e ff ff ff       	call   80104ae0 <argfd.constprop.0>
+80104b62:	85 c0                	test   %eax,%eax
+80104b64:	78 1a                	js     80104b80 <sys_dup+0x30>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+80104b66:	31 db                	xor    %ebx,%ebx
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+80104b68:	8b 75 f4             	mov    -0xc(%ebp),%esi
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+80104b6b:	e8 00 ec ff ff       	call   80103770 <myproc>
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+80104b70:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104b74:	85 d2                	test   %edx,%edx
+80104b76:	74 18                	je     80104b90 <sys_dup+0x40>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+80104b78:	83 c3 01             	add    $0x1,%ebx
+80104b7b:	83 fb 10             	cmp    $0x10,%ebx
+80104b7e:	75 f0                	jne    80104b70 <sys_dup+0x20>
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+80104b80:	8d 65 f8             	lea    -0x8(%ebp),%esp
+{
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+80104b83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+80104b88:	5b                   	pop    %ebx
+80104b89:	5e                   	pop    %esi
+80104b8a:	5d                   	pop    %ebp
+80104b8b:	c3                   	ret    
+80104b8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+80104b90:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+80104b94:	83 ec 0c             	sub    $0xc,%esp
+80104b97:	ff 75 f4             	pushl  -0xc(%ebp)
+80104b9a:	e8 41 c2 ff ff       	call   80100de0 <filedup>
+  return fd;
+80104b9f:	83 c4 10             	add    $0x10,%esp
+}
+80104ba2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+80104ba5:	89 d8                	mov    %ebx,%eax
+}
+80104ba7:	5b                   	pop    %ebx
+80104ba8:	5e                   	pop    %esi
+80104ba9:	5d                   	pop    %ebp
+80104baa:	c3                   	ret    
+80104bab:	90                   	nop
+80104bac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104bb0 <sys_read>:
+
+int
+sys_read(void)
+{
+80104bb0:	55                   	push   %ebp
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104bb1:	31 c0                	xor    %eax,%eax
+  return fd;
+}
+
+int
+sys_read(void)
+{
+80104bb3:	89 e5                	mov    %esp,%ebp
+80104bb5:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104bb8:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104bbb:	e8 20 ff ff ff       	call   80104ae0 <argfd.constprop.0>
+80104bc0:	85 c0                	test   %eax,%eax
+80104bc2:	78 4c                	js     80104c10 <sys_read+0x60>
+80104bc4:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104bc7:	83 ec 08             	sub    $0x8,%esp
+80104bca:	50                   	push   %eax
+80104bcb:	6a 02                	push   $0x2
+80104bcd:	e8 9e fb ff ff       	call   80104770 <argint>
+80104bd2:	83 c4 10             	add    $0x10,%esp
+80104bd5:	85 c0                	test   %eax,%eax
+80104bd7:	78 37                	js     80104c10 <sys_read+0x60>
+80104bd9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104bdc:	83 ec 04             	sub    $0x4,%esp
+80104bdf:	ff 75 f0             	pushl  -0x10(%ebp)
+80104be2:	50                   	push   %eax
+80104be3:	6a 01                	push   $0x1
+80104be5:	e8 d6 fb ff ff       	call   801047c0 <argptr>
+80104bea:	83 c4 10             	add    $0x10,%esp
+80104bed:	85 c0                	test   %eax,%eax
+80104bef:	78 1f                	js     80104c10 <sys_read+0x60>
+    return -1;
+  return fileread(f, p, n);
+80104bf1:	83 ec 04             	sub    $0x4,%esp
+80104bf4:	ff 75 f0             	pushl  -0x10(%ebp)
+80104bf7:	ff 75 f4             	pushl  -0xc(%ebp)
+80104bfa:	ff 75 ec             	pushl  -0x14(%ebp)
+80104bfd:	e8 4e c3 ff ff       	call   80100f50 <fileread>
+80104c02:	83 c4 10             	add    $0x10,%esp
+}
+80104c05:	c9                   	leave  
+80104c06:	c3                   	ret    
+80104c07:	89 f6                	mov    %esi,%esi
+80104c09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+80104c10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fileread(f, p, n);
+}
+80104c15:	c9                   	leave  
+80104c16:	c3                   	ret    
+80104c17:	89 f6                	mov    %esi,%esi
+80104c19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104c20 <sys_write>:
+
+int
+sys_write(void)
+{
+80104c20:	55                   	push   %ebp
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104c21:	31 c0                	xor    %eax,%eax
+  return fileread(f, p, n);
+}
+
+int
+sys_write(void)
+{
+80104c23:	89 e5                	mov    %esp,%ebp
+80104c25:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80104c28:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104c2b:	e8 b0 fe ff ff       	call   80104ae0 <argfd.constprop.0>
+80104c30:	85 c0                	test   %eax,%eax
+80104c32:	78 4c                	js     80104c80 <sys_write+0x60>
+80104c34:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104c37:	83 ec 08             	sub    $0x8,%esp
+80104c3a:	50                   	push   %eax
+80104c3b:	6a 02                	push   $0x2
+80104c3d:	e8 2e fb ff ff       	call   80104770 <argint>
+80104c42:	83 c4 10             	add    $0x10,%esp
+80104c45:	85 c0                	test   %eax,%eax
+80104c47:	78 37                	js     80104c80 <sys_write+0x60>
+80104c49:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104c4c:	83 ec 04             	sub    $0x4,%esp
+80104c4f:	ff 75 f0             	pushl  -0x10(%ebp)
+80104c52:	50                   	push   %eax
+80104c53:	6a 01                	push   $0x1
+80104c55:	e8 66 fb ff ff       	call   801047c0 <argptr>
+80104c5a:	83 c4 10             	add    $0x10,%esp
+80104c5d:	85 c0                	test   %eax,%eax
+80104c5f:	78 1f                	js     80104c80 <sys_write+0x60>
+    return -1;
+  return filewrite(f, p, n);
+80104c61:	83 ec 04             	sub    $0x4,%esp
+80104c64:	ff 75 f0             	pushl  -0x10(%ebp)
+80104c67:	ff 75 f4             	pushl  -0xc(%ebp)
+80104c6a:	ff 75 ec             	pushl  -0x14(%ebp)
+80104c6d:	e8 6e c3 ff ff       	call   80100fe0 <filewrite>
+80104c72:	83 c4 10             	add    $0x10,%esp
+}
+80104c75:	c9                   	leave  
+80104c76:	c3                   	ret    
+80104c77:	89 f6                	mov    %esi,%esi
+80104c79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  struct file *f;
+  int n;
+  char *p;
+
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+    return -1;
+80104c80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return filewrite(f, p, n);
+}
+80104c85:	c9                   	leave  
+80104c86:	c3                   	ret    
+80104c87:	89 f6                	mov    %esi,%esi
+80104c89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104c90 <sys_close>:
+
+int
+sys_close(void)
+{
+80104c90:	55                   	push   %ebp
+80104c91:	89 e5                	mov    %esp,%ebp
+80104c93:	83 ec 18             	sub    $0x18,%esp
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+80104c96:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104c99:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104c9c:	e8 3f fe ff ff       	call   80104ae0 <argfd.constprop.0>
+80104ca1:	85 c0                	test   %eax,%eax
+80104ca3:	78 2b                	js     80104cd0 <sys_close+0x40>
+    return -1;
+  myproc()->ofile[fd] = 0;
+80104ca5:	e8 c6 ea ff ff       	call   80103770 <myproc>
+80104caa:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  fileclose(f);
+80104cad:	83 ec 0c             	sub    $0xc,%esp
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+  myproc()->ofile[fd] = 0;
+80104cb0:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80104cb7:	00 
+  fileclose(f);
+80104cb8:	ff 75 f4             	pushl  -0xc(%ebp)
+80104cbb:	e8 70 c1 ff ff       	call   80100e30 <fileclose>
+  return 0;
+80104cc0:	83 c4 10             	add    $0x10,%esp
+80104cc3:	31 c0                	xor    %eax,%eax
+}
+80104cc5:	c9                   	leave  
+80104cc6:	c3                   	ret    
+80104cc7:	89 f6                	mov    %esi,%esi
+80104cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+{
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+80104cd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+80104cd5:	c9                   	leave  
+80104cd6:	c3                   	ret    
+80104cd7:	89 f6                	mov    %esi,%esi
+80104cd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104ce0 <sys_fstat>:
+
+int
+sys_fstat(void)
+{
+80104ce0:	55                   	push   %ebp
+  struct file *f;
+  struct stat *st;
+
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104ce1:	31 c0                	xor    %eax,%eax
+  return 0;
+}
+
+int
+sys_fstat(void)
+{
+80104ce3:	89 e5                	mov    %esp,%ebp
+80104ce5:	83 ec 18             	sub    $0x18,%esp
+  struct file *f;
+  struct stat *st;
+
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80104ce8:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80104ceb:	e8 f0 fd ff ff       	call   80104ae0 <argfd.constprop.0>
+80104cf0:	85 c0                	test   %eax,%eax
+80104cf2:	78 2c                	js     80104d20 <sys_fstat+0x40>
+80104cf4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104cf7:	83 ec 04             	sub    $0x4,%esp
+80104cfa:	6a 14                	push   $0x14
+80104cfc:	50                   	push   %eax
+80104cfd:	6a 01                	push   $0x1
+80104cff:	e8 bc fa ff ff       	call   801047c0 <argptr>
+80104d04:	83 c4 10             	add    $0x10,%esp
+80104d07:	85 c0                	test   %eax,%eax
+80104d09:	78 15                	js     80104d20 <sys_fstat+0x40>
+    return -1;
+  return filestat(f, st);
+80104d0b:	83 ec 08             	sub    $0x8,%esp
+80104d0e:	ff 75 f4             	pushl  -0xc(%ebp)
+80104d11:	ff 75 f0             	pushl  -0x10(%ebp)
+80104d14:	e8 e7 c1 ff ff       	call   80100f00 <filestat>
+80104d19:	83 c4 10             	add    $0x10,%esp
+}
+80104d1c:	c9                   	leave  
+80104d1d:	c3                   	ret    
+80104d1e:	66 90                	xchg   %ax,%ax
+{
+  struct file *f;
+  struct stat *st;
+
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+    return -1;
+80104d20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return filestat(f, st);
+}
+80104d25:	c9                   	leave  
+80104d26:	c3                   	ret    
+80104d27:	89 f6                	mov    %esi,%esi
+80104d29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80104d30 <sys_link>:
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+80104d30:	55                   	push   %ebp
+80104d31:	89 e5                	mov    %esp,%ebp
+80104d33:	57                   	push   %edi
+80104d34:	56                   	push   %esi
+80104d35:	53                   	push   %ebx
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104d36:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+}
+
+// Create the path new as a link to the same inode as old.
+int
+sys_link(void)
+{
+80104d39:	83 ec 34             	sub    $0x34,%esp
+  char name[DIRSIZ], *new, *old;
+  struct inode *dp, *ip;
+
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80104d3c:	50                   	push   %eax
+80104d3d:	6a 00                	push   $0x0
+80104d3f:	e8 dc fa ff ff       	call   80104820 <argstr>
+80104d44:	83 c4 10             	add    $0x10,%esp
+80104d47:	85 c0                	test   %eax,%eax
+80104d49:	0f 88 fb 00 00 00    	js     80104e4a <sys_link+0x11a>
+80104d4f:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80104d52:	83 ec 08             	sub    $0x8,%esp
+80104d55:	50                   	push   %eax
+80104d56:	6a 01                	push   $0x1
+80104d58:	e8 c3 fa ff ff       	call   80104820 <argstr>
+80104d5d:	83 c4 10             	add    $0x10,%esp
+80104d60:	85 c0                	test   %eax,%eax
+80104d62:	0f 88 e2 00 00 00    	js     80104e4a <sys_link+0x11a>
+    return -1;
+
+  begin_op();
+80104d68:	e8 d3 dd ff ff       	call   80102b40 <begin_op>
+  if((ip = namei(old)) == 0){
+80104d6d:	83 ec 0c             	sub    $0xc,%esp
+80104d70:	ff 75 d4             	pushl  -0x2c(%ebp)
+80104d73:	e8 38 d1 ff ff       	call   80101eb0 <namei>
+80104d78:	83 c4 10             	add    $0x10,%esp
+80104d7b:	85 c0                	test   %eax,%eax
+80104d7d:	89 c3                	mov    %eax,%ebx
+80104d7f:	0f 84 f3 00 00 00    	je     80104e78 <sys_link+0x148>
+    end_op();
+    return -1;
+  }
+
+  ilock(ip);
+80104d85:	83 ec 0c             	sub    $0xc,%esp
+80104d88:	50                   	push   %eax
+80104d89:	e8 d2 c8 ff ff       	call   80101660 <ilock>
+  if(ip->type == T_DIR){
+80104d8e:	83 c4 10             	add    $0x10,%esp
+80104d91:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104d96:	0f 84 c4 00 00 00    	je     80104e60 <sys_link+0x130>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+80104d9c:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80104da1:	83 ec 0c             	sub    $0xc,%esp
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+80104da4:	8d 7d da             	lea    -0x26(%ebp),%edi
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+  iupdate(ip);
+80104da7:	53                   	push   %ebx
+80104da8:	e8 03 c8 ff ff       	call   801015b0 <iupdate>
+  iunlock(ip);
+80104dad:	89 1c 24             	mov    %ebx,(%esp)
+80104db0:	e8 8b c9 ff ff       	call   80101740 <iunlock>
+
+  if((dp = nameiparent(new, name)) == 0)
+80104db5:	58                   	pop    %eax
+80104db6:	5a                   	pop    %edx
+80104db7:	57                   	push   %edi
+80104db8:	ff 75 d0             	pushl  -0x30(%ebp)
+80104dbb:	e8 10 d1 ff ff       	call   80101ed0 <nameiparent>
+80104dc0:	83 c4 10             	add    $0x10,%esp
+80104dc3:	85 c0                	test   %eax,%eax
+80104dc5:	89 c6                	mov    %eax,%esi
+80104dc7:	74 5b                	je     80104e24 <sys_link+0xf4>
+    goto bad;
+  ilock(dp);
+80104dc9:	83 ec 0c             	sub    $0xc,%esp
+80104dcc:	50                   	push   %eax
+80104dcd:	e8 8e c8 ff ff       	call   80101660 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+80104dd2:	83 c4 10             	add    $0x10,%esp
+80104dd5:	8b 03                	mov    (%ebx),%eax
+80104dd7:	39 06                	cmp    %eax,(%esi)
+80104dd9:	75 3d                	jne    80104e18 <sys_link+0xe8>
+80104ddb:	83 ec 04             	sub    $0x4,%esp
+80104dde:	ff 73 04             	pushl  0x4(%ebx)
+80104de1:	57                   	push   %edi
+80104de2:	56                   	push   %esi
+80104de3:	e8 08 d0 ff ff       	call   80101df0 <dirlink>
+80104de8:	83 c4 10             	add    $0x10,%esp
+80104deb:	85 c0                	test   %eax,%eax
+80104ded:	78 29                	js     80104e18 <sys_link+0xe8>
+    iunlockput(dp);
+    goto bad;
+  }
+  iunlockput(dp);
+80104def:	83 ec 0c             	sub    $0xc,%esp
+80104df2:	56                   	push   %esi
+80104df3:	e8 f8 ca ff ff       	call   801018f0 <iunlockput>
+  iput(ip);
+80104df8:	89 1c 24             	mov    %ebx,(%esp)
+80104dfb:	e8 90 c9 ff ff       	call   80101790 <iput>
+
+  end_op();
+80104e00:	e8 ab dd ff ff       	call   80102bb0 <end_op>
+
+  return 0;
+80104e05:	83 c4 10             	add    $0x10,%esp
+80104e08:	31 c0                	xor    %eax,%eax
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+}
+80104e0a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e0d:	5b                   	pop    %ebx
+80104e0e:	5e                   	pop    %esi
+80104e0f:	5f                   	pop    %edi
+80104e10:	5d                   	pop    %ebp
+80104e11:	c3                   	ret    
+80104e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+  ilock(dp);
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    iunlockput(dp);
+80104e18:	83 ec 0c             	sub    $0xc,%esp
+80104e1b:	56                   	push   %esi
+80104e1c:	e8 cf ca ff ff       	call   801018f0 <iunlockput>
+    goto bad;
+80104e21:	83 c4 10             	add    $0x10,%esp
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+80104e24:	83 ec 0c             	sub    $0xc,%esp
+80104e27:	53                   	push   %ebx
+80104e28:	e8 33 c8 ff ff       	call   80101660 <ilock>
+  ip->nlink--;
+80104e2d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80104e32:	89 1c 24             	mov    %ebx,(%esp)
+80104e35:	e8 76 c7 ff ff       	call   801015b0 <iupdate>
+  iunlockput(ip);
+80104e3a:	89 1c 24             	mov    %ebx,(%esp)
+80104e3d:	e8 ae ca ff ff       	call   801018f0 <iunlockput>
+  end_op();
+80104e42:	e8 69 dd ff ff       	call   80102bb0 <end_op>
+  return -1;
+80104e47:	83 c4 10             	add    $0x10,%esp
+}
+80104e4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  ilock(ip);
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+80104e4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104e52:	5b                   	pop    %ebx
+80104e53:	5e                   	pop    %esi
+80104e54:	5f                   	pop    %edi
+80104e55:	5d                   	pop    %ebp
+80104e56:	c3                   	ret    
+80104e57:	89 f6                	mov    %esi,%esi
+80104e59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    return -1;
+  }
+
+  ilock(ip);
+  if(ip->type == T_DIR){
+    iunlockput(ip);
+80104e60:	83 ec 0c             	sub    $0xc,%esp
+80104e63:	53                   	push   %ebx
+80104e64:	e8 87 ca ff ff       	call   801018f0 <iunlockput>
+    end_op();
+80104e69:	e8 42 dd ff ff       	call   80102bb0 <end_op>
+    return -1;
+80104e6e:	83 c4 10             	add    $0x10,%esp
+80104e71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e76:	eb 92                	jmp    80104e0a <sys_link+0xda>
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+    return -1;
+
+  begin_op();
+  if((ip = namei(old)) == 0){
+    end_op();
+80104e78:	e8 33 dd ff ff       	call   80102bb0 <end_op>
+    return -1;
+80104e7d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e82:	eb 86                	jmp    80104e0a <sys_link+0xda>
+80104e84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104e8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80104e90 <sys_unlink>:
+}
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+80104e90:	55                   	push   %ebp
+80104e91:	89 e5                	mov    %esp,%ebp
+80104e93:	57                   	push   %edi
+80104e94:	56                   	push   %esi
+80104e95:	53                   	push   %ebx
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+80104e96:	8d 45 c0             	lea    -0x40(%ebp),%eax
+}
+
+//PAGEBREAK!
+int
+sys_unlink(void)
+{
+80104e99:	83 ec 54             	sub    $0x54,%esp
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+80104e9c:	50                   	push   %eax
+80104e9d:	6a 00                	push   $0x0
+80104e9f:	e8 7c f9 ff ff       	call   80104820 <argstr>
+80104ea4:	83 c4 10             	add    $0x10,%esp
+80104ea7:	85 c0                	test   %eax,%eax
+80104ea9:	0f 88 82 01 00 00    	js     80105031 <sys_unlink+0x1a1>
+    return -1;
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+80104eaf:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+  uint off;
+
+  if(argstr(0, &path) < 0)
+    return -1;
+
+  begin_op();
+80104eb2:	e8 89 dc ff ff       	call   80102b40 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+80104eb7:	83 ec 08             	sub    $0x8,%esp
+80104eba:	53                   	push   %ebx
+80104ebb:	ff 75 c0             	pushl  -0x40(%ebp)
+80104ebe:	e8 0d d0 ff ff       	call   80101ed0 <nameiparent>
+80104ec3:	83 c4 10             	add    $0x10,%esp
+80104ec6:	85 c0                	test   %eax,%eax
+80104ec8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+80104ecb:	0f 84 6a 01 00 00    	je     8010503b <sys_unlink+0x1ab>
+    end_op();
+    return -1;
+  }
+
+  ilock(dp);
+80104ed1:	8b 75 b4             	mov    -0x4c(%ebp),%esi
+80104ed4:	83 ec 0c             	sub    $0xc,%esp
+80104ed7:	56                   	push   %esi
+80104ed8:	e8 83 c7 ff ff       	call   80101660 <ilock>
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+80104edd:	58                   	pop    %eax
+80104ede:	5a                   	pop    %edx
+80104edf:	68 7c 77 10 80       	push   $0x8010777c
+80104ee4:	53                   	push   %ebx
+80104ee5:	e8 86 cc ff ff       	call   80101b70 <namecmp>
+80104eea:	83 c4 10             	add    $0x10,%esp
+80104eed:	85 c0                	test   %eax,%eax
+80104eef:	0f 84 fc 00 00 00    	je     80104ff1 <sys_unlink+0x161>
+80104ef5:	83 ec 08             	sub    $0x8,%esp
+80104ef8:	68 7b 77 10 80       	push   $0x8010777b
+80104efd:	53                   	push   %ebx
+80104efe:	e8 6d cc ff ff       	call   80101b70 <namecmp>
+80104f03:	83 c4 10             	add    $0x10,%esp
+80104f06:	85 c0                	test   %eax,%eax
+80104f08:	0f 84 e3 00 00 00    	je     80104ff1 <sys_unlink+0x161>
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+80104f0e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80104f11:	83 ec 04             	sub    $0x4,%esp
+80104f14:	50                   	push   %eax
+80104f15:	53                   	push   %ebx
+80104f16:	56                   	push   %esi
+80104f17:	e8 74 cc ff ff       	call   80101b90 <dirlookup>
+80104f1c:	83 c4 10             	add    $0x10,%esp
+80104f1f:	85 c0                	test   %eax,%eax
+80104f21:	89 c3                	mov    %eax,%ebx
+80104f23:	0f 84 c8 00 00 00    	je     80104ff1 <sys_unlink+0x161>
+    goto bad;
+  ilock(ip);
+80104f29:	83 ec 0c             	sub    $0xc,%esp
+80104f2c:	50                   	push   %eax
+80104f2d:	e8 2e c7 ff ff       	call   80101660 <ilock>
+
+  if(ip->nlink < 1)
+80104f32:	83 c4 10             	add    $0x10,%esp
+80104f35:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80104f3a:	0f 8e 24 01 00 00    	jle    80105064 <sys_unlink+0x1d4>
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+80104f40:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104f45:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80104f48:	74 66                	je     80104fb0 <sys_unlink+0x120>
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+80104f4a:	83 ec 04             	sub    $0x4,%esp
+80104f4d:	6a 10                	push   $0x10
+80104f4f:	6a 00                	push   $0x0
+80104f51:	56                   	push   %esi
+80104f52:	e8 b9 f4 ff ff       	call   80104410 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80104f57:	6a 10                	push   $0x10
+80104f59:	ff 75 c4             	pushl  -0x3c(%ebp)
+80104f5c:	56                   	push   %esi
+80104f5d:	ff 75 b4             	pushl  -0x4c(%ebp)
+80104f60:	e8 db ca ff ff       	call   80101a40 <writei>
+80104f65:	83 c4 20             	add    $0x20,%esp
+80104f68:	83 f8 10             	cmp    $0x10,%eax
+80104f6b:	0f 85 e6 00 00 00    	jne    80105057 <sys_unlink+0x1c7>
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+80104f71:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104f76:	0f 84 9c 00 00 00    	je     80105018 <sys_unlink+0x188>
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+80104f7c:	83 ec 0c             	sub    $0xc,%esp
+80104f7f:	ff 75 b4             	pushl  -0x4c(%ebp)
+80104f82:	e8 69 c9 ff ff       	call   801018f0 <iunlockput>
+
+  ip->nlink--;
+80104f87:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80104f8c:	89 1c 24             	mov    %ebx,(%esp)
+80104f8f:	e8 1c c6 ff ff       	call   801015b0 <iupdate>
+  iunlockput(ip);
+80104f94:	89 1c 24             	mov    %ebx,(%esp)
+80104f97:	e8 54 c9 ff ff       	call   801018f0 <iunlockput>
+
+  end_op();
+80104f9c:	e8 0f dc ff ff       	call   80102bb0 <end_op>
+
+  return 0;
+80104fa1:	83 c4 10             	add    $0x10,%esp
+80104fa4:	31 c0                	xor    %eax,%eax
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+80104fa6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104fa9:	5b                   	pop    %ebx
+80104faa:	5e                   	pop    %esi
+80104fab:	5f                   	pop    %edi
+80104fac:	5d                   	pop    %ebp
+80104fad:	c3                   	ret    
+80104fae:	66 90                	xchg   %ax,%ax
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80104fb0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80104fb4:	76 94                	jbe    80104f4a <sys_unlink+0xba>
+80104fb6:	bf 20 00 00 00       	mov    $0x20,%edi
+80104fbb:	eb 0f                	jmp    80104fcc <sys_unlink+0x13c>
+80104fbd:	8d 76 00             	lea    0x0(%esi),%esi
+80104fc0:	83 c7 10             	add    $0x10,%edi
+80104fc3:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80104fc6:	0f 83 7e ff ff ff    	jae    80104f4a <sys_unlink+0xba>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80104fcc:	6a 10                	push   $0x10
+80104fce:	57                   	push   %edi
+80104fcf:	56                   	push   %esi
+80104fd0:	53                   	push   %ebx
+80104fd1:	e8 6a c9 ff ff       	call   80101940 <readi>
+80104fd6:	83 c4 10             	add    $0x10,%esp
+80104fd9:	83 f8 10             	cmp    $0x10,%eax
+80104fdc:	75 6c                	jne    8010504a <sys_unlink+0x1ba>
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+80104fde:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80104fe3:	74 db                	je     80104fc0 <sys_unlink+0x130>
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+80104fe5:	83 ec 0c             	sub    $0xc,%esp
+80104fe8:	53                   	push   %ebx
+80104fe9:	e8 02 c9 ff ff       	call   801018f0 <iunlockput>
+    goto bad;
+80104fee:	83 c4 10             	add    $0x10,%esp
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+80104ff1:	83 ec 0c             	sub    $0xc,%esp
+80104ff4:	ff 75 b4             	pushl  -0x4c(%ebp)
+80104ff7:	e8 f4 c8 ff ff       	call   801018f0 <iunlockput>
+  end_op();
+80104ffc:	e8 af db ff ff       	call   80102bb0 <end_op>
+  return -1;
+80105001:	83 c4 10             	add    $0x10,%esp
+}
+80105004:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+80105007:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010500c:	5b                   	pop    %ebx
+8010500d:	5e                   	pop    %esi
+8010500e:	5f                   	pop    %edi
+8010500f:	5d                   	pop    %ebp
+80105010:	c3                   	ret    
+80105011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+80105018:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+    iupdate(dp);
+8010501b:	83 ec 0c             	sub    $0xc,%esp
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+8010501e:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
+    iupdate(dp);
+80105023:	50                   	push   %eax
+80105024:	e8 87 c5 ff ff       	call   801015b0 <iupdate>
+80105029:	83 c4 10             	add    $0x10,%esp
+8010502c:	e9 4b ff ff ff       	jmp    80104f7c <sys_unlink+0xec>
+  struct dirent de;
+  char name[DIRSIZ], *path;
+  uint off;
+
+  if(argstr(0, &path) < 0)
+    return -1;
+80105031:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105036:	e9 6b ff ff ff       	jmp    80104fa6 <sys_unlink+0x116>
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+    end_op();
+8010503b:	e8 70 db ff ff       	call   80102bb0 <end_op>
+    return -1;
+80105040:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105045:	e9 5c ff ff ff       	jmp    80104fa6 <sys_unlink+0x116>
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+8010504a:	83 ec 0c             	sub    $0xc,%esp
+8010504d:	68 a0 77 10 80       	push   $0x801077a0
+80105052:	e8 19 b3 ff ff       	call   80100370 <panic>
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+80105057:	83 ec 0c             	sub    $0xc,%esp
+8010505a:	68 b2 77 10 80       	push   $0x801077b2
+8010505f:	e8 0c b3 ff ff       	call   80100370 <panic>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+80105064:	83 ec 0c             	sub    $0xc,%esp
+80105067:	68 8e 77 10 80       	push   $0x8010778e
+8010506c:	e8 ff b2 ff ff       	call   80100370 <panic>
+80105071:	eb 0d                	jmp    80105080 <sys_open>
+80105073:	90                   	nop
+80105074:	90                   	nop
+80105075:	90                   	nop
+80105076:	90                   	nop
+80105077:	90                   	nop
+80105078:	90                   	nop
+80105079:	90                   	nop
+8010507a:	90                   	nop
+8010507b:	90                   	nop
+8010507c:	90                   	nop
+8010507d:	90                   	nop
+8010507e:	90                   	nop
+8010507f:	90                   	nop
+
+80105080 <sys_open>:
+  return ip;
+}
+
+int
+sys_open(void)
+{
+80105080:	55                   	push   %ebp
+80105081:	89 e5                	mov    %esp,%ebp
+80105083:	57                   	push   %edi
+80105084:	56                   	push   %esi
+80105085:	53                   	push   %ebx
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80105086:	8d 45 e0             	lea    -0x20(%ebp),%eax
+  return ip;
+}
+
+int
+sys_open(void)
+{
+80105089:	83 ec 24             	sub    $0x24,%esp
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+8010508c:	50                   	push   %eax
+8010508d:	6a 00                	push   $0x0
+8010508f:	e8 8c f7 ff ff       	call   80104820 <argstr>
+80105094:	83 c4 10             	add    $0x10,%esp
+80105097:	85 c0                	test   %eax,%eax
+80105099:	0f 88 9e 00 00 00    	js     8010513d <sys_open+0xbd>
+8010509f:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801050a2:	83 ec 08             	sub    $0x8,%esp
+801050a5:	50                   	push   %eax
+801050a6:	6a 01                	push   $0x1
+801050a8:	e8 c3 f6 ff ff       	call   80104770 <argint>
+801050ad:	83 c4 10             	add    $0x10,%esp
+801050b0:	85 c0                	test   %eax,%eax
+801050b2:	0f 88 85 00 00 00    	js     8010513d <sys_open+0xbd>
+    return -1;
+
+  begin_op();
+801050b8:	e8 83 da ff ff       	call   80102b40 <begin_op>
+
+  if(omode & O_CREATE){
+801050bd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+801050c1:	0f 85 89 00 00 00    	jne    80105150 <sys_open+0xd0>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+801050c7:	83 ec 0c             	sub    $0xc,%esp
+801050ca:	ff 75 e0             	pushl  -0x20(%ebp)
+801050cd:	e8 de cd ff ff       	call   80101eb0 <namei>
+801050d2:	83 c4 10             	add    $0x10,%esp
+801050d5:	85 c0                	test   %eax,%eax
+801050d7:	89 c6                	mov    %eax,%esi
+801050d9:	0f 84 8e 00 00 00    	je     8010516d <sys_open+0xed>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+801050df:	83 ec 0c             	sub    $0xc,%esp
+801050e2:	50                   	push   %eax
+801050e3:	e8 78 c5 ff ff       	call   80101660 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+801050e8:	83 c4 10             	add    $0x10,%esp
+801050eb:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+801050f0:	0f 84 d2 00 00 00    	je     801051c8 <sys_open+0x148>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+801050f6:	e8 75 bc ff ff       	call   80100d70 <filealloc>
+801050fb:	85 c0                	test   %eax,%eax
+801050fd:	89 c7                	mov    %eax,%edi
+801050ff:	74 2b                	je     8010512c <sys_open+0xac>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+80105101:	31 db                	xor    %ebx,%ebx
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+80105103:	e8 68 e6 ff ff       	call   80103770 <myproc>
+80105108:	90                   	nop
+80105109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+80105110:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105114:	85 d2                	test   %edx,%edx
+80105116:	74 68                	je     80105180 <sys_open+0x100>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+80105118:	83 c3 01             	add    $0x1,%ebx
+8010511b:	83 fb 10             	cmp    $0x10,%ebx
+8010511e:	75 f0                	jne    80105110 <sys_open+0x90>
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+80105120:	83 ec 0c             	sub    $0xc,%esp
+80105123:	57                   	push   %edi
+80105124:	e8 07 bd ff ff       	call   80100e30 <fileclose>
+80105129:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+8010512c:	83 ec 0c             	sub    $0xc,%esp
+8010512f:	56                   	push   %esi
+80105130:	e8 bb c7 ff ff       	call   801018f0 <iunlockput>
+    end_op();
+80105135:	e8 76 da ff ff       	call   80102bb0 <end_op>
+    return -1;
+8010513a:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+8010513d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+80105140:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  return fd;
+}
+80105145:	5b                   	pop    %ebx
+80105146:	5e                   	pop    %esi
+80105147:	5f                   	pop    %edi
+80105148:	5d                   	pop    %ebp
+80105149:	c3                   	ret    
+8010514a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+80105150:	83 ec 0c             	sub    $0xc,%esp
+80105153:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105156:	31 c9                	xor    %ecx,%ecx
+80105158:	6a 00                	push   $0x0
+8010515a:	ba 02 00 00 00       	mov    $0x2,%edx
+8010515f:	e8 dc f7 ff ff       	call   80104940 <create>
+    if(ip == 0){
+80105164:	83 c4 10             	add    $0x10,%esp
+80105167:	85 c0                	test   %eax,%eax
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+80105169:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+8010516b:	75 89                	jne    801050f6 <sys_open+0x76>
+      end_op();
+8010516d:	e8 3e da ff ff       	call   80102bb0 <end_op>
+      return -1;
+80105172:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105177:	eb 43                	jmp    801051bc <sys_open+0x13c>
+80105179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105180:	83 ec 0c             	sub    $0xc,%esp
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+80105183:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105187:	56                   	push   %esi
+80105188:	e8 b3 c5 ff ff       	call   80101740 <iunlock>
+  end_op();
+8010518d:	e8 1e da ff ff       	call   80102bb0 <end_op>
+
+  f->type = FD_INODE;
+80105192:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+80105198:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+8010519b:	83 c4 10             	add    $0x10,%esp
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+8010519e:	89 77 10             	mov    %esi,0x10(%edi)
+  f->off = 0;
+801051a1:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+801051a8:	89 d0                	mov    %edx,%eax
+801051aa:	83 e0 01             	and    $0x1,%eax
+801051ad:	83 f0 01             	xor    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801051b0:	83 e2 03             	and    $0x3,%edx
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+801051b3:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+801051b6:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+801051ba:	89 d8                	mov    %ebx,%eax
+}
+801051bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801051bf:	5b                   	pop    %ebx
+801051c0:	5e                   	pop    %esi
+801051c1:	5f                   	pop    %edi
+801051c2:	5d                   	pop    %ebp
+801051c3:	c3                   	ret    
+801051c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+801051c8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801051cb:	85 c9                	test   %ecx,%ecx
+801051cd:	0f 84 23 ff ff ff    	je     801050f6 <sys_open+0x76>
+801051d3:	e9 54 ff ff ff       	jmp    8010512c <sys_open+0xac>
+801051d8:	90                   	nop
+801051d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801051e0 <sys_mkdir>:
+  return fd;
+}
+
+int
+sys_mkdir(void)
+{
+801051e0:	55                   	push   %ebp
+801051e1:	89 e5                	mov    %esp,%ebp
+801051e3:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+801051e6:	e8 55 d9 ff ff       	call   80102b40 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+801051eb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801051ee:	83 ec 08             	sub    $0x8,%esp
+801051f1:	50                   	push   %eax
+801051f2:	6a 00                	push   $0x0
+801051f4:	e8 27 f6 ff ff       	call   80104820 <argstr>
+801051f9:	83 c4 10             	add    $0x10,%esp
+801051fc:	85 c0                	test   %eax,%eax
+801051fe:	78 30                	js     80105230 <sys_mkdir+0x50>
+80105200:	83 ec 0c             	sub    $0xc,%esp
+80105203:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105206:	31 c9                	xor    %ecx,%ecx
+80105208:	6a 00                	push   $0x0
+8010520a:	ba 01 00 00 00       	mov    $0x1,%edx
+8010520f:	e8 2c f7 ff ff       	call   80104940 <create>
+80105214:	83 c4 10             	add    $0x10,%esp
+80105217:	85 c0                	test   %eax,%eax
+80105219:	74 15                	je     80105230 <sys_mkdir+0x50>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+8010521b:	83 ec 0c             	sub    $0xc,%esp
+8010521e:	50                   	push   %eax
+8010521f:	e8 cc c6 ff ff       	call   801018f0 <iunlockput>
+  end_op();
+80105224:	e8 87 d9 ff ff       	call   80102bb0 <end_op>
+  return 0;
+80105229:	83 c4 10             	add    $0x10,%esp
+8010522c:	31 c0                	xor    %eax,%eax
+}
+8010522e:	c9                   	leave  
+8010522f:	c3                   	ret    
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    end_op();
+80105230:	e8 7b d9 ff ff       	call   80102bb0 <end_op>
+    return -1;
+80105235:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+8010523a:	c9                   	leave  
+8010523b:	c3                   	ret    
+8010523c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105240 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+80105240:	55                   	push   %ebp
+80105241:	89 e5                	mov    %esp,%ebp
+80105243:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+80105246:	e8 f5 d8 ff ff       	call   80102b40 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+8010524b:	8d 45 ec             	lea    -0x14(%ebp),%eax
+8010524e:	83 ec 08             	sub    $0x8,%esp
+80105251:	50                   	push   %eax
+80105252:	6a 00                	push   $0x0
+80105254:	e8 c7 f5 ff ff       	call   80104820 <argstr>
+80105259:	83 c4 10             	add    $0x10,%esp
+8010525c:	85 c0                	test   %eax,%eax
+8010525e:	78 60                	js     801052c0 <sys_mknod+0x80>
+     argint(1, &major) < 0 ||
+80105260:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105263:	83 ec 08             	sub    $0x8,%esp
+80105266:	50                   	push   %eax
+80105267:	6a 01                	push   $0x1
+80105269:	e8 02 f5 ff ff       	call   80104770 <argint>
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+  if((argstr(0, &path)) < 0 ||
+8010526e:	83 c4 10             	add    $0x10,%esp
+80105271:	85 c0                	test   %eax,%eax
+80105273:	78 4b                	js     801052c0 <sys_mknod+0x80>
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+80105275:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105278:	83 ec 08             	sub    $0x8,%esp
+8010527b:	50                   	push   %eax
+8010527c:	6a 02                	push   $0x2
+8010527e:	e8 ed f4 ff ff       	call   80104770 <argint>
+  char *path;
+  int major, minor;
+
+  begin_op();
+  if((argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+80105283:	83 c4 10             	add    $0x10,%esp
+80105286:	85 c0                	test   %eax,%eax
+80105288:	78 36                	js     801052c0 <sys_mknod+0x80>
+     argint(2, &minor) < 0 ||
+8010528a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+8010528e:	83 ec 0c             	sub    $0xc,%esp
+80105291:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105295:	ba 03 00 00 00       	mov    $0x3,%edx
+8010529a:	50                   	push   %eax
+8010529b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010529e:	e8 9d f6 ff ff       	call   80104940 <create>
+801052a3:	83 c4 10             	add    $0x10,%esp
+801052a6:	85 c0                	test   %eax,%eax
+801052a8:	74 16                	je     801052c0 <sys_mknod+0x80>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+801052aa:	83 ec 0c             	sub    $0xc,%esp
+801052ad:	50                   	push   %eax
+801052ae:	e8 3d c6 ff ff       	call   801018f0 <iunlockput>
+  end_op();
+801052b3:	e8 f8 d8 ff ff       	call   80102bb0 <end_op>
+  return 0;
+801052b8:	83 c4 10             	add    $0x10,%esp
+801052bb:	31 c0                	xor    %eax,%eax
+}
+801052bd:	c9                   	leave  
+801052be:	c3                   	ret    
+801052bf:	90                   	nop
+  begin_op();
+  if((argstr(0, &path)) < 0 ||
+     argint(1, &major) < 0 ||
+     argint(2, &minor) < 0 ||
+     (ip = create(path, T_DEV, major, minor)) == 0){
+    end_op();
+801052c0:	e8 eb d8 ff ff       	call   80102bb0 <end_op>
+    return -1;
+801052c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+801052ca:	c9                   	leave  
+801052cb:	c3                   	ret    
+801052cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801052d0 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+801052d0:	55                   	push   %ebp
+801052d1:	89 e5                	mov    %esp,%ebp
+801052d3:	56                   	push   %esi
+801052d4:	53                   	push   %ebx
+801052d5:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+801052d8:	e8 93 e4 ff ff       	call   80103770 <myproc>
+801052dd:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+801052df:	e8 5c d8 ff ff       	call   80102b40 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+801052e4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801052e7:	83 ec 08             	sub    $0x8,%esp
+801052ea:	50                   	push   %eax
+801052eb:	6a 00                	push   $0x0
+801052ed:	e8 2e f5 ff ff       	call   80104820 <argstr>
+801052f2:	83 c4 10             	add    $0x10,%esp
+801052f5:	85 c0                	test   %eax,%eax
+801052f7:	78 77                	js     80105370 <sys_chdir+0xa0>
+801052f9:	83 ec 0c             	sub    $0xc,%esp
+801052fc:	ff 75 f4             	pushl  -0xc(%ebp)
+801052ff:	e8 ac cb ff ff       	call   80101eb0 <namei>
+80105304:	83 c4 10             	add    $0x10,%esp
+80105307:	85 c0                	test   %eax,%eax
+80105309:	89 c3                	mov    %eax,%ebx
+8010530b:	74 63                	je     80105370 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+8010530d:	83 ec 0c             	sub    $0xc,%esp
+80105310:	50                   	push   %eax
+80105311:	e8 4a c3 ff ff       	call   80101660 <ilock>
+  if(ip->type != T_DIR){
+80105316:	83 c4 10             	add    $0x10,%esp
+80105319:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010531e:	75 30                	jne    80105350 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105320:	83 ec 0c             	sub    $0xc,%esp
+80105323:	53                   	push   %ebx
+80105324:	e8 17 c4 ff ff       	call   80101740 <iunlock>
+  iput(curproc->cwd);
+80105329:	58                   	pop    %eax
+8010532a:	ff 76 68             	pushl  0x68(%esi)
+8010532d:	e8 5e c4 ff ff       	call   80101790 <iput>
+  end_op();
+80105332:	e8 79 d8 ff ff       	call   80102bb0 <end_op>
+  curproc->cwd = ip;
+80105337:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+8010533a:	83 c4 10             	add    $0x10,%esp
+8010533d:	31 c0                	xor    %eax,%eax
+}
+8010533f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105342:	5b                   	pop    %ebx
+80105343:	5e                   	pop    %esi
+80105344:	5d                   	pop    %ebp
+80105345:	c3                   	ret    
+80105346:	8d 76 00             	lea    0x0(%esi),%esi
+80105349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  if(ip->type != T_DIR){
+    iunlockput(ip);
+80105350:	83 ec 0c             	sub    $0xc,%esp
+80105353:	53                   	push   %ebx
+80105354:	e8 97 c5 ff ff       	call   801018f0 <iunlockput>
+    end_op();
+80105359:	e8 52 d8 ff ff       	call   80102bb0 <end_op>
+    return -1;
+8010535e:	83 c4 10             	add    $0x10,%esp
+80105361:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105366:	eb d7                	jmp    8010533f <sys_chdir+0x6f>
+80105368:	90                   	nop
+80105369:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  struct inode *ip;
+  struct proc *curproc = myproc();
+  
+  begin_op();
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+    end_op();
+80105370:	e8 3b d8 ff ff       	call   80102bb0 <end_op>
+    return -1;
+80105375:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010537a:	eb c3                	jmp    8010533f <sys_chdir+0x6f>
+8010537c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105380 <sys_exec>:
+  return 0;
+}
+
+int
+sys_exec(void)
+{
+80105380:	55                   	push   %ebp
+80105381:	89 e5                	mov    %esp,%ebp
+80105383:	57                   	push   %edi
+80105384:	56                   	push   %esi
+80105385:	53                   	push   %ebx
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105386:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+  return 0;
+}
+
+int
+sys_exec(void)
+{
+8010538c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105392:	50                   	push   %eax
+80105393:	6a 00                	push   $0x0
+80105395:	e8 86 f4 ff ff       	call   80104820 <argstr>
+8010539a:	83 c4 10             	add    $0x10,%esp
+8010539d:	85 c0                	test   %eax,%eax
+8010539f:	78 7f                	js     80105420 <sys_exec+0xa0>
+801053a1:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801053a7:	83 ec 08             	sub    $0x8,%esp
+801053aa:	50                   	push   %eax
+801053ab:	6a 01                	push   $0x1
+801053ad:	e8 be f3 ff ff       	call   80104770 <argint>
+801053b2:	83 c4 10             	add    $0x10,%esp
+801053b5:	85 c0                	test   %eax,%eax
+801053b7:	78 67                	js     80105420 <sys_exec+0xa0>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+801053b9:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+801053bf:	83 ec 04             	sub    $0x4,%esp
+801053c2:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
+801053c8:	68 80 00 00 00       	push   $0x80
+801053cd:	6a 00                	push   $0x0
+801053cf:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+801053d5:	50                   	push   %eax
+801053d6:	31 db                	xor    %ebx,%ebx
+801053d8:	e8 33 f0 ff ff       	call   80104410 <memset>
+801053dd:	83 c4 10             	add    $0x10,%esp
+  for(i=0;; i++){
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+801053e0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+801053e6:	83 ec 08             	sub    $0x8,%esp
+801053e9:	57                   	push   %edi
+801053ea:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+801053ed:	50                   	push   %eax
+801053ee:	e8 dd f2 ff ff       	call   801046d0 <fetchint>
+801053f3:	83 c4 10             	add    $0x10,%esp
+801053f6:	85 c0                	test   %eax,%eax
+801053f8:	78 26                	js     80105420 <sys_exec+0xa0>
+      return -1;
+    if(uarg == 0){
+801053fa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105400:	85 c0                	test   %eax,%eax
+80105402:	74 2c                	je     80105430 <sys_exec+0xb0>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+80105404:	83 ec 08             	sub    $0x8,%esp
+80105407:	56                   	push   %esi
+80105408:	50                   	push   %eax
+80105409:	e8 02 f3 ff ff       	call   80104710 <fetchstr>
+8010540e:	83 c4 10             	add    $0x10,%esp
+80105411:	85 c0                	test   %eax,%eax
+80105413:	78 0b                	js     80105420 <sys_exec+0xa0>
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+80105415:	83 c3 01             	add    $0x1,%ebx
+80105418:	83 c6 04             	add    $0x4,%esi
+    if(i >= NELEM(argv))
+8010541b:	83 fb 20             	cmp    $0x20,%ebx
+8010541e:	75 c0                	jne    801053e0 <sys_exec+0x60>
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+}
+80105420:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+    return -1;
+80105423:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+}
+80105428:	5b                   	pop    %ebx
+80105429:	5e                   	pop    %esi
+8010542a:	5f                   	pop    %edi
+8010542b:	5d                   	pop    %ebp
+8010542c:	c3                   	ret    
+8010542d:	8d 76 00             	lea    0x0(%esi),%esi
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+80105430:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105436:	83 ec 08             	sub    $0x8,%esp
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+      return -1;
+    if(uarg == 0){
+      argv[i] = 0;
+80105439:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105440:	00 00 00 00 
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+      return -1;
+  }
+  return exec(path, argv);
+80105444:	50                   	push   %eax
+80105445:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+8010544b:	e8 a0 b5 ff ff       	call   801009f0 <exec>
+80105450:	83 c4 10             	add    $0x10,%esp
+}
+80105453:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105456:	5b                   	pop    %ebx
+80105457:	5e                   	pop    %esi
+80105458:	5f                   	pop    %edi
+80105459:	5d                   	pop    %ebp
+8010545a:	c3                   	ret    
+8010545b:	90                   	nop
+8010545c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105460 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+80105460:	55                   	push   %ebp
+80105461:	89 e5                	mov    %esp,%ebp
+80105463:	57                   	push   %edi
+80105464:	56                   	push   %esi
+80105465:	53                   	push   %ebx
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80105466:	8d 45 dc             	lea    -0x24(%ebp),%eax
+  return exec(path, argv);
+}
+
+int
+sys_pipe(void)
+{
+80105469:	83 ec 20             	sub    $0x20,%esp
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+8010546c:	6a 08                	push   $0x8
+8010546e:	50                   	push   %eax
+8010546f:	6a 00                	push   $0x0
+80105471:	e8 4a f3 ff ff       	call   801047c0 <argptr>
+80105476:	83 c4 10             	add    $0x10,%esp
+80105479:	85 c0                	test   %eax,%eax
+8010547b:	78 4a                	js     801054c7 <sys_pipe+0x67>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+8010547d:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105480:	83 ec 08             	sub    $0x8,%esp
+80105483:	50                   	push   %eax
+80105484:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105487:	50                   	push   %eax
+80105488:	e8 53 dd ff ff       	call   801031e0 <pipealloc>
+8010548d:	83 c4 10             	add    $0x10,%esp
+80105490:	85 c0                	test   %eax,%eax
+80105492:	78 33                	js     801054c7 <sys_pipe+0x67>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+80105494:	31 db                	xor    %ebx,%ebx
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80105496:	8b 7d e0             	mov    -0x20(%ebp),%edi
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+80105499:	e8 d2 e2 ff ff       	call   80103770 <myproc>
+8010549e:	66 90                	xchg   %ax,%ax
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+801054a0:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+801054a4:	85 f6                	test   %esi,%esi
+801054a6:	74 30                	je     801054d8 <sys_pipe+0x78>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+801054a8:	83 c3 01             	add    $0x1,%ebx
+801054ab:	83 fb 10             	cmp    $0x10,%ebx
+801054ae:	75 f0                	jne    801054a0 <sys_pipe+0x40>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+801054b0:	83 ec 0c             	sub    $0xc,%esp
+801054b3:	ff 75 e0             	pushl  -0x20(%ebp)
+801054b6:	e8 75 b9 ff ff       	call   80100e30 <fileclose>
+    fileclose(wf);
+801054bb:	58                   	pop    %eax
+801054bc:	ff 75 e4             	pushl  -0x1c(%ebp)
+801054bf:	e8 6c b9 ff ff       	call   80100e30 <fileclose>
+    return -1;
+801054c4:	83 c4 10             	add    $0x10,%esp
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+}
+801054c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+801054ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+}
+801054cf:	5b                   	pop    %ebx
+801054d0:	5e                   	pop    %esi
+801054d1:	5f                   	pop    %edi
+801054d2:	5d                   	pop    %ebp
+801054d3:	c3                   	ret    
+801054d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+801054d8:	8d 73 08             	lea    0x8(%ebx),%esi
+801054db:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801054df:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+801054e2:	e8 89 e2 ff ff       	call   80103770 <myproc>
+
+  for(fd = 0; fd < NOFILE; fd++){
+801054e7:	31 d2                	xor    %edx,%edx
+801054e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+801054f0:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801054f4:	85 c9                	test   %ecx,%ecx
+801054f6:	74 18                	je     80105510 <sys_pipe+0xb0>
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+801054f8:	83 c2 01             	add    $0x1,%edx
+801054fb:	83 fa 10             	cmp    $0x10,%edx
+801054fe:	75 f0                	jne    801054f0 <sys_pipe+0x90>
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+80105500:	e8 6b e2 ff ff       	call   80103770 <myproc>
+80105505:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+8010550c:	00 
+8010550d:	eb a1                	jmp    801054b0 <sys_pipe+0x50>
+8010550f:	90                   	nop
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+80105510:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+80105514:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105517:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+80105519:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010551c:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+}
+8010551f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    fileclose(wf);
+    return -1;
+  }
+  fd[0] = fd0;
+  fd[1] = fd1;
+  return 0;
+80105522:	31 c0                	xor    %eax,%eax
+}
+80105524:	5b                   	pop    %ebx
+80105525:	5e                   	pop    %esi
+80105526:	5f                   	pop    %edi
+80105527:	5d                   	pop    %ebp
+80105528:	c3                   	ret    
+80105529:	66 90                	xchg   %ax,%ax
+8010552b:	66 90                	xchg   %ax,%ax
+8010552d:	66 90                	xchg   %ax,%ax
+8010552f:	90                   	nop
+
+80105530 <sys_fork>:
+#include "syscall.h"
+#include "spinlock.h"
+
+int
+sys_fork(void)
+{
+80105530:	55                   	push   %ebp
+80105531:	89 e5                	mov    %esp,%ebp
+  return fork();
+}
+80105533:	5d                   	pop    %ebp
+#include "spinlock.h"
+
+int
+sys_fork(void)
+{
+  return fork();
+80105534:	e9 d7 e3 ff ff       	jmp    80103910 <fork>
+80105539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105540 <sys_exit>:
+}
+
+int
+sys_exit(void)
+{
+80105540:	55                   	push   %ebp
+80105541:	89 e5                	mov    %esp,%ebp
+80105543:	83 ec 08             	sub    $0x8,%esp
+  exit();
+80105546:	e8 55 e6 ff ff       	call   80103ba0 <exit>
+  return 0;  // not reached
+}
+8010554b:	31 c0                	xor    %eax,%eax
+8010554d:	c9                   	leave  
+8010554e:	c3                   	ret    
+8010554f:	90                   	nop
+
+80105550 <sys_wait>:
+
+int
+sys_wait(void)
+{
+80105550:	55                   	push   %ebp
+80105551:	89 e5                	mov    %esp,%ebp
+  return wait();
+}
+80105553:	5d                   	pop    %ebp
+}
+
+int
+sys_wait(void)
+{
+  return wait();
+80105554:	e9 87 e8 ff ff       	jmp    80103de0 <wait>
+80105559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105560 <sys_kill>:
+}
+
+int
+sys_kill(void)
+{
+80105560:	55                   	push   %ebp
+80105561:	89 e5                	mov    %esp,%ebp
+80105563:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+80105566:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105569:	50                   	push   %eax
+8010556a:	6a 00                	push   $0x0
+8010556c:	e8 ff f1 ff ff       	call   80104770 <argint>
+80105571:	83 c4 10             	add    $0x10,%esp
+80105574:	85 c0                	test   %eax,%eax
+80105576:	78 18                	js     80105590 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+80105578:	83 ec 0c             	sub    $0xc,%esp
+8010557b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010557e:	e8 ad e9 ff ff       	call   80103f30 <kill>
+80105583:	83 c4 10             	add    $0x10,%esp
+}
+80105586:	c9                   	leave  
+80105587:	c3                   	ret    
+80105588:	90                   	nop
+80105589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+sys_kill(void)
+{
+  int pid;
+
+  if(argint(0, &pid) < 0)
+    return -1;
+80105590:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return kill(pid);
+}
+80105595:	c9                   	leave  
+80105596:	c3                   	ret    
+80105597:	89 f6                	mov    %esi,%esi
+80105599:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801055a0 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+801055a0:	55                   	push   %ebp
+801055a1:	89 e5                	mov    %esp,%ebp
+801055a3:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+801055a6:	e8 c5 e1 ff ff       	call   80103770 <myproc>
+801055ab:	8b 40 10             	mov    0x10(%eax),%eax
+}
+801055ae:	c9                   	leave  
+801055af:	c3                   	ret    
+
+801055b0 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+801055b0:	55                   	push   %ebp
+801055b1:	89 e5                	mov    %esp,%ebp
+801055b3:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+801055b4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  return myproc()->pid;
+}
+
+int
+sys_sbrk(void)
+{
+801055b7:	83 ec 1c             	sub    $0x1c,%esp
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+801055ba:	50                   	push   %eax
+801055bb:	6a 00                	push   $0x0
+801055bd:	e8 ae f1 ff ff       	call   80104770 <argint>
+801055c2:	83 c4 10             	add    $0x10,%esp
+801055c5:	85 c0                	test   %eax,%eax
+801055c7:	78 27                	js     801055f0 <sys_sbrk+0x40>
+    return -1;
+  addr = myproc()->sz;
+801055c9:	e8 a2 e1 ff ff       	call   80103770 <myproc>
+  if(growproc(n) < 0)
+801055ce:	83 ec 0c             	sub    $0xc,%esp
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+    return -1;
+  addr = myproc()->sz;
+801055d1:	8b 18                	mov    (%eax),%ebx
+  if(growproc(n) < 0)
+801055d3:	ff 75 f4             	pushl  -0xc(%ebp)
+801055d6:	e8 b5 e2 ff ff       	call   80103890 <growproc>
+801055db:	83 c4 10             	add    $0x10,%esp
+801055de:	85 c0                	test   %eax,%eax
+801055e0:	78 0e                	js     801055f0 <sys_sbrk+0x40>
+    return -1;
+  return addr;
+801055e2:	89 d8                	mov    %ebx,%eax
+}
+801055e4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801055e7:	c9                   	leave  
+801055e8:	c3                   	ret    
+801055e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+    return -1;
+801055f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801055f5:	eb ed                	jmp    801055e4 <sys_sbrk+0x34>
+801055f7:	89 f6                	mov    %esi,%esi
+801055f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105600 <sys_sleep>:
+  return addr;
+}
+
+int
+sys_sleep(void)
+{
+80105600:	55                   	push   %ebp
+80105601:	89 e5                	mov    %esp,%ebp
+80105603:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+80105604:	8d 45 f4             	lea    -0xc(%ebp),%eax
+  return addr;
+}
+
+int
+sys_sleep(void)
+{
+80105607:	83 ec 1c             	sub    $0x1c,%esp
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+8010560a:	50                   	push   %eax
+8010560b:	6a 00                	push   $0x0
+8010560d:	e8 5e f1 ff ff       	call   80104770 <argint>
+80105612:	83 c4 10             	add    $0x10,%esp
+80105615:	85 c0                	test   %eax,%eax
+80105617:	0f 88 8a 00 00 00    	js     801056a7 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+8010561d:	83 ec 0c             	sub    $0xc,%esp
+80105620:	68 40 4d 11 80       	push   $0x80114d40
+80105625:	e8 e6 ec ff ff       	call   80104310 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+8010562a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010562d:	83 c4 10             	add    $0x10,%esp
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+    return -1;
+  acquire(&tickslock);
+  ticks0 = ticks;
+80105630:	8b 1d 80 55 11 80    	mov    0x80115580,%ebx
+  while(ticks - ticks0 < n){
+80105636:	85 d2                	test   %edx,%edx
+80105638:	75 27                	jne    80105661 <sys_sleep+0x61>
+8010563a:	eb 54                	jmp    80105690 <sys_sleep+0x90>
+8010563c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+80105640:	83 ec 08             	sub    $0x8,%esp
+80105643:	68 40 4d 11 80       	push   $0x80114d40
+80105648:	68 80 55 11 80       	push   $0x80115580
+8010564d:	e8 ce e6 ff ff       	call   80103d20 <sleep>
+
+  if(argint(0, &n) < 0)
+    return -1;
+  acquire(&tickslock);
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+80105652:	a1 80 55 11 80       	mov    0x80115580,%eax
+80105657:	83 c4 10             	add    $0x10,%esp
+8010565a:	29 d8                	sub    %ebx,%eax
+8010565c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+8010565f:	73 2f                	jae    80105690 <sys_sleep+0x90>
+    if(myproc()->killed){
+80105661:	e8 0a e1 ff ff       	call   80103770 <myproc>
+80105666:	8b 40 24             	mov    0x24(%eax),%eax
+80105669:	85 c0                	test   %eax,%eax
+8010566b:	74 d3                	je     80105640 <sys_sleep+0x40>
+      release(&tickslock);
+8010566d:	83 ec 0c             	sub    $0xc,%esp
+80105670:	68 40 4d 11 80       	push   $0x80114d40
+80105675:	e8 46 ed ff ff       	call   801043c0 <release>
+      return -1;
+8010567a:	83 c4 10             	add    $0x10,%esp
+8010567d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    }
+    sleep(&ticks, &tickslock);
+  }
+  release(&tickslock);
+  return 0;
+}
+80105682:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105685:	c9                   	leave  
+80105686:	c3                   	ret    
+80105687:	89 f6                	mov    %esi,%esi
+80105689:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+  }
+  release(&tickslock);
+80105690:	83 ec 0c             	sub    $0xc,%esp
+80105693:	68 40 4d 11 80       	push   $0x80114d40
+80105698:	e8 23 ed ff ff       	call   801043c0 <release>
+  return 0;
+8010569d:	83 c4 10             	add    $0x10,%esp
+801056a0:	31 c0                	xor    %eax,%eax
+}
+801056a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056a5:	c9                   	leave  
+801056a6:	c3                   	ret    
+{
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+    return -1;
+801056a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056ac:	eb d4                	jmp    80105682 <sys_sleep+0x82>
+801056ae:	66 90                	xchg   %ax,%ax
+
+801056b0 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+801056b0:	55                   	push   %ebp
+801056b1:	89 e5                	mov    %esp,%ebp
+801056b3:	53                   	push   %ebx
+801056b4:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+801056b7:	68 40 4d 11 80       	push   $0x80114d40
+801056bc:	e8 4f ec ff ff       	call   80104310 <acquire>
+  xticks = ticks;
+801056c1:	8b 1d 80 55 11 80    	mov    0x80115580,%ebx
+  release(&tickslock);
+801056c7:	c7 04 24 40 4d 11 80 	movl   $0x80114d40,(%esp)
+801056ce:	e8 ed ec ff ff       	call   801043c0 <release>
+  return xticks;
+}
+801056d3:	89 d8                	mov    %ebx,%eax
+801056d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801056d8:	c9                   	leave  
+801056d9:	c3                   	ret    
+801056da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801056e0 <sys_readcount>:
+
+int
+sys_readcount(void)
+{
+801056e0:	55                   	push   %ebp
+  return reads;
+}
+801056e1:	a1 d4 4c 11 80       	mov    0x80114cd4,%eax
+  return xticks;
+}
+
+int
+sys_readcount(void)
+{
+801056e6:	89 e5                	mov    %esp,%ebp
+  return reads;
+}
+801056e8:	5d                   	pop    %ebp
+801056e9:	c3                   	ret    
+801056ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801056f0 <sys_callcount>:
+
+struct spinlock calllock;
+
+int
+sys_callcount(void)
+{
+801056f0:	55                   	push   %ebp
+801056f1:	89 e5                	mov    %esp,%ebp
+801056f3:	83 ec 20             	sub    $0x20,%esp
+  int arg = 0;
+  argint(0, &arg);
+801056f6:	8d 45 f4             	lea    -0xc(%ebp),%eax
+struct spinlock calllock;
+
+int
+sys_callcount(void)
+{
+  int arg = 0;
+801056f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
+  argint(0, &arg);
+80105700:	50                   	push   %eax
+80105701:	6a 00                	push   $0x0
+80105703:	e8 68 f0 ff ff       	call   80104770 <argint>
+  // Check for resets
+  if (arg > 100 && arg < 100 + SYS_CALL_AMOUNT + 1) {
+80105708:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010570b:	83 c4 10             	add    $0x10,%esp
+8010570e:	8d 50 9b             	lea    -0x65(%eax),%edx
+80105711:	83 fa 16             	cmp    $0x16,%edx
+80105714:	76 12                	jbe    80105728 <sys_callcount+0x38>
+    acquire(&calllock);
+    calls[arg] = 0;
+    release(&calllock);
+    return 0;
+  }
+  if (arg < SYS_CALL_AMOUNT + 1) {
+80105716:	83 f8 17             	cmp    $0x17,%eax
+80105719:	7f 45                	jg     80105760 <sys_callcount+0x70>
+    return calls[arg];
+8010571b:	8b 04 85 e0 4c 11 80 	mov    -0x7feeb320(,%eax,4),%eax
+  }
+  else {
+    return -1;
+  }
+}
+80105722:	c9                   	leave  
+80105723:	c3                   	ret    
+80105724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int arg = 0;
+  argint(0, &arg);
+  // Check for resets
+  if (arg > 100 && arg < 100 + SYS_CALL_AMOUNT + 1) {
+    arg -= 100;
+    acquire(&calllock);
+80105728:	83 ec 0c             	sub    $0xc,%esp
+{
+  int arg = 0;
+  argint(0, &arg);
+  // Check for resets
+  if (arg > 100 && arg < 100 + SYS_CALL_AMOUNT + 1) {
+    arg -= 100;
+8010572b:	83 e8 64             	sub    $0x64,%eax
+    acquire(&calllock);
+8010572e:	68 60 4c 11 80       	push   $0x80114c60
+{
+  int arg = 0;
+  argint(0, &arg);
+  // Check for resets
+  if (arg > 100 && arg < 100 + SYS_CALL_AMOUNT + 1) {
+    arg -= 100;
+80105733:	89 45 f4             	mov    %eax,-0xc(%ebp)
+    acquire(&calllock);
+80105736:	e8 d5 eb ff ff       	call   80104310 <acquire>
+    calls[arg] = 0;
+8010573b:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    release(&calllock);
+8010573e:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+  argint(0, &arg);
+  // Check for resets
+  if (arg > 100 && arg < 100 + SYS_CALL_AMOUNT + 1) {
+    arg -= 100;
+    acquire(&calllock);
+    calls[arg] = 0;
+80105745:	c7 04 85 e0 4c 11 80 	movl   $0x0,-0x7feeb320(,%eax,4)
+8010574c:	00 00 00 00 
+    release(&calllock);
+80105750:	e8 6b ec ff ff       	call   801043c0 <release>
+    return 0;
+80105755:	83 c4 10             	add    $0x10,%esp
+80105758:	31 c0                	xor    %eax,%eax
+    return calls[arg];
+  }
+  else {
+    return -1;
+  }
+}
+8010575a:	c9                   	leave  
+8010575b:	c3                   	ret    
+8010575c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  }
+  if (arg < SYS_CALL_AMOUNT + 1) {
+    return calls[arg];
+  }
+  else {
+    return -1;
+80105760:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+}
+80105765:	c9                   	leave  
+80105766:	c3                   	ret    
+
+80105767 <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+80105767:	1e                   	push   %ds
+  pushl %es
+80105768:	06                   	push   %es
+  pushl %fs
+80105769:	0f a0                	push   %fs
+  pushl %gs
+8010576b:	0f a8                	push   %gs
+  pushal
+8010576d:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+8010576e:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+80105772:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+80105774:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+80105776:	54                   	push   %esp
+  call trap
+80105777:	e8 e4 00 00 00       	call   80105860 <trap>
+  addl $4, %esp
+8010577c:	83 c4 04             	add    $0x4,%esp
+
+8010577f <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+8010577f:	61                   	popa   
+  popl %gs
+80105780:	0f a9                	pop    %gs
+  popl %fs
+80105782:	0f a1                	pop    %fs
+  popl %es
+80105784:	07                   	pop    %es
+  popl %ds
+80105785:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80105786:	83 c4 08             	add    $0x8,%esp
+  iret
+80105789:	cf                   	iret   
+8010578a:	66 90                	xchg   %ax,%ax
+8010578c:	66 90                	xchg   %ax,%ax
+8010578e:	66 90                	xchg   %ax,%ax
+
+80105790 <tvinit>:
+void
+tvinit(void)
+{
+  int i;
+
+  for(i = 0; i < 256; i++)
+80105790:	31 c0                	xor    %eax,%eax
+80105792:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80105798:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+8010579f:	b9 08 00 00 00       	mov    $0x8,%ecx
+801057a4:	c6 04 c5 84 4d 11 80 	movb   $0x0,-0x7feeb27c(,%eax,8)
+801057ab:	00 
+801057ac:	66 89 0c c5 82 4d 11 	mov    %cx,-0x7feeb27e(,%eax,8)
+801057b3:	80 
+801057b4:	c6 04 c5 85 4d 11 80 	movb   $0x8e,-0x7feeb27b(,%eax,8)
+801057bb:	8e 
+801057bc:	66 89 14 c5 80 4d 11 	mov    %dx,-0x7feeb280(,%eax,8)
+801057c3:	80 
+801057c4:	c1 ea 10             	shr    $0x10,%edx
+801057c7:	66 89 14 c5 86 4d 11 	mov    %dx,-0x7feeb27a(,%eax,8)
+801057ce:	80 
+void
+tvinit(void)
+{
+  int i;
+
+  for(i = 0; i < 256; i++)
+801057cf:	83 c0 01             	add    $0x1,%eax
+801057d2:	3d 00 01 00 00       	cmp    $0x100,%eax
+801057d7:	75 bf                	jne    80105798 <tvinit+0x8>
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+801057d9:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801057da:	ba 08 00 00 00       	mov    $0x8,%edx
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+801057df:	89 e5                	mov    %esp,%ebp
+801057e1:	83 ec 10             	sub    $0x10,%esp
+  int i;
+
+  for(i = 0; i < 256; i++)
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801057e4:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+
+  initlock(&tickslock, "time");
+801057e9:	68 d1 76 10 80       	push   $0x801076d1
+801057ee:	68 40 4d 11 80       	push   $0x80114d40
+{
+  int i;
+
+  for(i = 0; i < 256; i++)
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801057f3:	66 89 15 82 4f 11 80 	mov    %dx,0x80114f82
+801057fa:	c6 05 84 4f 11 80 00 	movb   $0x0,0x80114f84
+80105801:	66 a3 80 4f 11 80    	mov    %ax,0x80114f80
+80105807:	c1 e8 10             	shr    $0x10,%eax
+8010580a:	c6 05 85 4f 11 80 ef 	movb   $0xef,0x80114f85
+80105811:	66 a3 86 4f 11 80    	mov    %ax,0x80114f86
+
+  initlock(&tickslock, "time");
+80105817:	e8 94 e9 ff ff       	call   801041b0 <initlock>
+}
+8010581c:	83 c4 10             	add    $0x10,%esp
+8010581f:	c9                   	leave  
+80105820:	c3                   	ret    
+80105821:	eb 0d                	jmp    80105830 <idtinit>
+80105823:	90                   	nop
+80105824:	90                   	nop
+80105825:	90                   	nop
+80105826:	90                   	nop
+80105827:	90                   	nop
+80105828:	90                   	nop
+80105829:	90                   	nop
+8010582a:	90                   	nop
+8010582b:	90                   	nop
+8010582c:	90                   	nop
+8010582d:	90                   	nop
+8010582e:	90                   	nop
+8010582f:	90                   	nop
+
+80105830 <idtinit>:
+
+void
+idtinit(void)
+{
+80105830:	55                   	push   %ebp
+static inline void
+lidt(struct gatedesc *p, int size)
+{
+  volatile ushort pd[3];
+
+  pd[0] = size-1;
+80105831:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105836:	89 e5                	mov    %esp,%ebp
+80105838:	83 ec 10             	sub    $0x10,%esp
+8010583b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+8010583f:	b8 80 4d 11 80       	mov    $0x80114d80,%eax
+80105844:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+80105848:	c1 e8 10             	shr    $0x10,%eax
+8010584b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+
+  asm volatile("lidt (%0)" : : "r" (pd));
+8010584f:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105852:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+80105855:	c9                   	leave  
+80105856:	c3                   	ret    
+80105857:	89 f6                	mov    %esi,%esi
+80105859:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105860 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80105860:	55                   	push   %ebp
+80105861:	89 e5                	mov    %esp,%ebp
+80105863:	57                   	push   %edi
+80105864:	56                   	push   %esi
+80105865:	53                   	push   %ebx
+80105866:	83 ec 1c             	sub    $0x1c,%esp
+80105869:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if(tf->trapno == T_SYSCALL){
+8010586c:	8b 47 30             	mov    0x30(%edi),%eax
+8010586f:	83 f8 40             	cmp    $0x40,%eax
+80105872:	0f 84 88 01 00 00    	je     80105a00 <trap+0x1a0>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+80105878:	83 e8 20             	sub    $0x20,%eax
+8010587b:	83 f8 1f             	cmp    $0x1f,%eax
+8010587e:	77 10                	ja     80105890 <trap+0x30>
+80105880:	ff 24 85 64 78 10 80 	jmp    *-0x7fef879c(,%eax,4)
+80105887:	89 f6                	mov    %esi,%esi
+80105889:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+80105890:	e8 db de ff ff       	call   80103770 <myproc>
+80105895:	85 c0                	test   %eax,%eax
+80105897:	0f 84 d7 01 00 00    	je     80105a74 <trap+0x214>
+8010589d:	f6 47 3c 03          	testb  $0x3,0x3c(%edi)
+801058a1:	0f 84 cd 01 00 00    	je     80105a74 <trap+0x214>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+801058a7:	0f 20 d1             	mov    %cr2,%ecx
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+801058aa:	8b 57 38             	mov    0x38(%edi),%edx
+801058ad:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+801058b0:	89 55 dc             	mov    %edx,-0x24(%ebp)
+801058b3:	e8 98 de ff ff       	call   80103750 <cpuid>
+801058b8:	8b 77 34             	mov    0x34(%edi),%esi
+801058bb:	8b 5f 30             	mov    0x30(%edi),%ebx
+801058be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+801058c1:	e8 aa de ff ff       	call   80103770 <myproc>
+801058c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801058c9:	e8 a2 de ff ff       	call   80103770 <myproc>
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+801058ce:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+801058d1:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801058d4:	51                   	push   %ecx
+801058d5:	52                   	push   %edx
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+801058d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+801058d9:	ff 75 e4             	pushl  -0x1c(%ebp)
+801058dc:	56                   	push   %esi
+801058dd:	53                   	push   %ebx
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+801058de:	83 c2 6c             	add    $0x6c,%edx
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+801058e1:	52                   	push   %edx
+801058e2:	ff 70 10             	pushl  0x10(%eax)
+801058e5:	68 20 78 10 80       	push   $0x80107820
+801058ea:	e8 71 ad ff ff       	call   80100660 <cprintf>
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+801058ef:	83 c4 20             	add    $0x20,%esp
+801058f2:	e8 79 de ff ff       	call   80103770 <myproc>
+801058f7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801058fe:	66 90                	xchg   %ax,%ax
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105900:	e8 6b de ff ff       	call   80103770 <myproc>
+80105905:	85 c0                	test   %eax,%eax
+80105907:	74 0c                	je     80105915 <trap+0xb5>
+80105909:	e8 62 de ff ff       	call   80103770 <myproc>
+8010590e:	8b 50 24             	mov    0x24(%eax),%edx
+80105911:	85 d2                	test   %edx,%edx
+80105913:	75 4b                	jne    80105960 <trap+0x100>
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING &&
+80105915:	e8 56 de ff ff       	call   80103770 <myproc>
+8010591a:	85 c0                	test   %eax,%eax
+8010591c:	74 0b                	je     80105929 <trap+0xc9>
+8010591e:	e8 4d de ff ff       	call   80103770 <myproc>
+80105923:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105927:	74 4f                	je     80105978 <trap+0x118>
+     tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105929:	e8 42 de ff ff       	call   80103770 <myproc>
+8010592e:	85 c0                	test   %eax,%eax
+80105930:	74 1d                	je     8010594f <trap+0xef>
+80105932:	e8 39 de ff ff       	call   80103770 <myproc>
+80105937:	8b 40 24             	mov    0x24(%eax),%eax
+8010593a:	85 c0                	test   %eax,%eax
+8010593c:	74 11                	je     8010594f <trap+0xef>
+8010593e:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105942:	83 e0 03             	and    $0x3,%eax
+80105945:	66 83 f8 03          	cmp    $0x3,%ax
+80105949:	0f 84 da 00 00 00    	je     80105a29 <trap+0x1c9>
+    exit();
+}
+8010594f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105952:	5b                   	pop    %ebx
+80105953:	5e                   	pop    %esi
+80105954:	5f                   	pop    %edi
+80105955:	5d                   	pop    %ebp
+80105956:	c3                   	ret    
+80105957:	89 f6                	mov    %esi,%esi
+80105959:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80105960:	0f b7 47 3c          	movzwl 0x3c(%edi),%eax
+80105964:	83 e0 03             	and    $0x3,%eax
+80105967:	66 83 f8 03          	cmp    $0x3,%ax
+8010596b:	75 a8                	jne    80105915 <trap+0xb5>
+    exit();
+8010596d:	e8 2e e2 ff ff       	call   80103ba0 <exit>
+80105972:	eb a1                	jmp    80105915 <trap+0xb5>
+80105974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING &&
+80105978:	83 7f 30 20          	cmpl   $0x20,0x30(%edi)
+8010597c:	75 ab                	jne    80105929 <trap+0xc9>
+     tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+8010597e:	e8 4d e3 ff ff       	call   80103cd0 <yield>
+80105983:	eb a4                	jmp    80105929 <trap+0xc9>
+80105985:	8d 76 00             	lea    0x0(%esi),%esi
+    return;
+  }
+
+  switch(tf->trapno){
+  case T_IRQ0 + IRQ_TIMER:
+    if(cpuid() == 0){
+80105988:	e8 c3 dd ff ff       	call   80103750 <cpuid>
+8010598d:	85 c0                	test   %eax,%eax
+8010598f:	0f 84 ab 00 00 00    	je     80105a40 <trap+0x1e0>
+    }
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_IDE:
+    ideintr();
+    lapiceoi();
+80105995:	e8 66 cd ff ff       	call   80102700 <lapiceoi>
+    break;
+8010599a:	e9 61 ff ff ff       	jmp    80105900 <trap+0xa0>
+8010599f:	90                   	nop
+  case T_IRQ0 + IRQ_IDE+1:
+    // Bochs generates spurious IDE1 interrupts.
+    break;
+  case T_IRQ0 + IRQ_KBD:
+    kbdintr();
+801059a0:	e8 1b cc ff ff       	call   801025c0 <kbdintr>
+    lapiceoi();
+801059a5:	e8 56 cd ff ff       	call   80102700 <lapiceoi>
+    break;
+801059aa:	e9 51 ff ff ff       	jmp    80105900 <trap+0xa0>
+801059af:	90                   	nop
+  case T_IRQ0 + IRQ_COM1:
+    uartintr();
+801059b0:	e8 5b 02 00 00       	call   80105c10 <uartintr>
+    lapiceoi();
+801059b5:	e8 46 cd ff ff       	call   80102700 <lapiceoi>
+    break;
+801059ba:	e9 41 ff ff ff       	jmp    80105900 <trap+0xa0>
+801059bf:	90                   	nop
+  case T_IRQ0 + 7:
+  case T_IRQ0 + IRQ_SPURIOUS:
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+801059c0:	0f b7 5f 3c          	movzwl 0x3c(%edi),%ebx
+801059c4:	8b 77 38             	mov    0x38(%edi),%esi
+801059c7:	e8 84 dd ff ff       	call   80103750 <cpuid>
+801059cc:	56                   	push   %esi
+801059cd:	53                   	push   %ebx
+801059ce:	50                   	push   %eax
+801059cf:	68 c8 77 10 80       	push   $0x801077c8
+801059d4:	e8 87 ac ff ff       	call   80100660 <cprintf>
+            cpuid(), tf->cs, tf->eip);
+    lapiceoi();
+801059d9:	e8 22 cd ff ff       	call   80102700 <lapiceoi>
+    break;
+801059de:	83 c4 10             	add    $0x10,%esp
+801059e1:	e9 1a ff ff ff       	jmp    80105900 <trap+0xa0>
+801059e6:	8d 76 00             	lea    0x0(%esi),%esi
+801059e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+      release(&tickslock);
+    }
+    lapiceoi();
+    break;
+  case T_IRQ0 + IRQ_IDE:
+    ideintr();
+801059f0:	e8 4b c6 ff ff       	call   80102040 <ideintr>
+801059f5:	eb 9e                	jmp    80105995 <trap+0x135>
+801059f7:	89 f6                	mov    %esi,%esi
+801059f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+  if(tf->trapno == T_SYSCALL){
+    if(myproc()->killed)
+80105a00:	e8 6b dd ff ff       	call   80103770 <myproc>
+80105a05:	8b 58 24             	mov    0x24(%eax),%ebx
+80105a08:	85 db                	test   %ebx,%ebx
+80105a0a:	75 2c                	jne    80105a38 <trap+0x1d8>
+      exit();
+    myproc()->tf = tf;
+80105a0c:	e8 5f dd ff ff       	call   80103770 <myproc>
+80105a11:	89 78 18             	mov    %edi,0x18(%eax)
+    syscall();
+80105a14:	e8 47 ee ff ff       	call   80104860 <syscall>
+    if(myproc()->killed)
+80105a19:	e8 52 dd ff ff       	call   80103770 <myproc>
+80105a1e:	8b 48 24             	mov    0x24(%eax),%ecx
+80105a21:	85 c9                	test   %ecx,%ecx
+80105a23:	0f 84 26 ff ff ff    	je     8010594f <trap+0xef>
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+    exit();
+}
+80105a29:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105a2c:	5b                   	pop    %ebx
+80105a2d:	5e                   	pop    %esi
+80105a2e:	5f                   	pop    %edi
+80105a2f:	5d                   	pop    %ebp
+    if(myproc()->killed)
+      exit();
+    myproc()->tf = tf;
+    syscall();
+    if(myproc()->killed)
+      exit();
+80105a30:	e9 6b e1 ff ff       	jmp    80103ba0 <exit>
+80105a35:	8d 76 00             	lea    0x0(%esi),%esi
+void
+trap(struct trapframe *tf)
+{
+  if(tf->trapno == T_SYSCALL){
+    if(myproc()->killed)
+      exit();
+80105a38:	e8 63 e1 ff ff       	call   80103ba0 <exit>
+80105a3d:	eb cd                	jmp    80105a0c <trap+0x1ac>
+80105a3f:	90                   	nop
+  }
+
+  switch(tf->trapno){
+  case T_IRQ0 + IRQ_TIMER:
+    if(cpuid() == 0){
+      acquire(&tickslock);
+80105a40:	83 ec 0c             	sub    $0xc,%esp
+80105a43:	68 40 4d 11 80       	push   $0x80114d40
+80105a48:	e8 c3 e8 ff ff       	call   80104310 <acquire>
+      ticks++;
+      wakeup(&ticks);
+80105a4d:	c7 04 24 80 55 11 80 	movl   $0x80115580,(%esp)
+
+  switch(tf->trapno){
+  case T_IRQ0 + IRQ_TIMER:
+    if(cpuid() == 0){
+      acquire(&tickslock);
+      ticks++;
+80105a54:	83 05 80 55 11 80 01 	addl   $0x1,0x80115580
+      wakeup(&ticks);
+80105a5b:	e8 70 e4 ff ff       	call   80103ed0 <wakeup>
+      release(&tickslock);
+80105a60:	c7 04 24 40 4d 11 80 	movl   $0x80114d40,(%esp)
+80105a67:	e8 54 e9 ff ff       	call   801043c0 <release>
+80105a6c:	83 c4 10             	add    $0x10,%esp
+80105a6f:	e9 21 ff ff ff       	jmp    80105995 <trap+0x135>
+80105a74:	0f 20 d6             	mov    %cr2,%esi
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+      // In kernel, it must be our mistake.
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80105a77:	8b 5f 38             	mov    0x38(%edi),%ebx
+80105a7a:	e8 d1 dc ff ff       	call   80103750 <cpuid>
+80105a7f:	83 ec 0c             	sub    $0xc,%esp
+80105a82:	56                   	push   %esi
+80105a83:	53                   	push   %ebx
+80105a84:	50                   	push   %eax
+80105a85:	ff 77 30             	pushl  0x30(%edi)
+80105a88:	68 ec 77 10 80       	push   $0x801077ec
+80105a8d:	e8 ce ab ff ff       	call   80100660 <cprintf>
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+80105a92:	83 c4 14             	add    $0x14,%esp
+80105a95:	68 c1 77 10 80       	push   $0x801077c1
+80105a9a:	e8 d1 a8 ff ff       	call   80100370 <panic>
+80105a9f:	90                   	nop
+
+80105aa0 <uartgetc>:
+}
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+80105aa0:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+  outb(COM1+0, c);
+}
+
+static int
+uartgetc(void)
+{
+80105aa5:	55                   	push   %ebp
+80105aa6:	89 e5                	mov    %esp,%ebp
+  if(!uart)
+80105aa8:	85 c0                	test   %eax,%eax
+80105aaa:	74 1c                	je     80105ac8 <uartgetc+0x28>
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105aac:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105ab1:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80105ab2:	a8 01                	test   $0x1,%al
+80105ab4:	74 12                	je     80105ac8 <uartgetc+0x28>
+80105ab6:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105abb:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+80105abc:	0f b6 c0             	movzbl %al,%eax
+}
+80105abf:	5d                   	pop    %ebp
+80105ac0:	c3                   	ret    
+80105ac1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+static int
+uartgetc(void)
+{
+  if(!uart)
+    return -1;
+80105ac8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  if(!(inb(COM1+5) & 0x01))
+    return -1;
+  return inb(COM1+0);
+}
+80105acd:	5d                   	pop    %ebp
+80105ace:	c3                   	ret    
+80105acf:	90                   	nop
+
+80105ad0 <uartputc.part.0>:
+  for(p="xv6...\n"; *p; p++)
+    uartputc(*p);
+}
+
+void
+uartputc(int c)
+80105ad0:	55                   	push   %ebp
+80105ad1:	89 e5                	mov    %esp,%ebp
+80105ad3:	57                   	push   %edi
+80105ad4:	56                   	push   %esi
+80105ad5:	53                   	push   %ebx
+80105ad6:	89 c7                	mov    %eax,%edi
+80105ad8:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105add:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105ae2:	83 ec 0c             	sub    $0xc,%esp
+80105ae5:	eb 1b                	jmp    80105b02 <uartputc.part.0+0x32>
+80105ae7:	89 f6                	mov    %esi,%esi
+80105ae9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  int i;
+
+  if(!uart)
+    return;
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+    microdelay(10);
+80105af0:	83 ec 0c             	sub    $0xc,%esp
+80105af3:	6a 0a                	push   $0xa
+80105af5:	e8 26 cc ff ff       	call   80102720 <microdelay>
+{
+  int i;
+
+  if(!uart)
+    return;
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80105afa:	83 c4 10             	add    $0x10,%esp
+80105afd:	83 eb 01             	sub    $0x1,%ebx
+80105b00:	74 07                	je     80105b09 <uartputc.part.0+0x39>
+80105b02:	89 f2                	mov    %esi,%edx
+80105b04:	ec                   	in     (%dx),%al
+80105b05:	a8 20                	test   $0x20,%al
+80105b07:	74 e7                	je     80105af0 <uartputc.part.0+0x20>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80105b09:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105b0e:	89 f8                	mov    %edi,%eax
+80105b10:	ee                   	out    %al,(%dx)
+    microdelay(10);
+  outb(COM1+0, c);
+}
+80105b11:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105b14:	5b                   	pop    %ebx
+80105b15:	5e                   	pop    %esi
+80105b16:	5f                   	pop    %edi
+80105b17:	5d                   	pop    %ebp
+80105b18:	c3                   	ret    
+80105b19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105b20 <uartinit>:
+
+static int uart;    // is there a uart?
+
+void
+uartinit(void)
+{
+80105b20:	55                   	push   %ebp
+80105b21:	31 c9                	xor    %ecx,%ecx
+80105b23:	89 c8                	mov    %ecx,%eax
+80105b25:	89 e5                	mov    %esp,%ebp
+80105b27:	57                   	push   %edi
+80105b28:	56                   	push   %esi
+80105b29:	53                   	push   %ebx
+80105b2a:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105b2f:	89 da                	mov    %ebx,%edx
+80105b31:	83 ec 0c             	sub    $0xc,%esp
+80105b34:	ee                   	out    %al,(%dx)
+80105b35:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105b3a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105b3f:	89 fa                	mov    %edi,%edx
+80105b41:	ee                   	out    %al,(%dx)
+80105b42:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105b47:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105b4c:	ee                   	out    %al,(%dx)
+80105b4d:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105b52:	89 c8                	mov    %ecx,%eax
+80105b54:	89 f2                	mov    %esi,%edx
+80105b56:	ee                   	out    %al,(%dx)
+80105b57:	b8 03 00 00 00       	mov    $0x3,%eax
+80105b5c:	89 fa                	mov    %edi,%edx
+80105b5e:	ee                   	out    %al,(%dx)
+80105b5f:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105b64:	89 c8                	mov    %ecx,%eax
+80105b66:	ee                   	out    %al,(%dx)
+80105b67:	b8 01 00 00 00       	mov    $0x1,%eax
+80105b6c:	89 f2                	mov    %esi,%edx
+80105b6e:	ee                   	out    %al,(%dx)
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80105b6f:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105b74:	ec                   	in     (%dx),%al
+  outb(COM1+3, 0x03);    // Lock divisor, 8 data bits.
+  outb(COM1+4, 0);
+  outb(COM1+1, 0x01);    // Enable receive interrupts.
+
+  // If status is 0xFF, no serial port.
+  if(inb(COM1+5) == 0xFF)
+80105b75:	3c ff                	cmp    $0xff,%al
+80105b77:	74 5a                	je     80105bd3 <uartinit+0xb3>
+    return;
+  uart = 1;
+80105b79:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105b80:	00 00 00 
+80105b83:	89 da                	mov    %ebx,%edx
+80105b85:	ec                   	in     (%dx),%al
+80105b86:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105b8b:	ec                   	in     (%dx),%al
+
+  // Acknowledge pre-existing interrupt conditions;
+  // enable interrupts.
+  inb(COM1+2);
+  inb(COM1+0);
+  ioapicenable(IRQ_COM1, 0);
+80105b8c:	83 ec 08             	sub    $0x8,%esp
+80105b8f:	bb e4 78 10 80       	mov    $0x801078e4,%ebx
+80105b94:	6a 00                	push   $0x0
+80105b96:	6a 04                	push   $0x4
+80105b98:	e8 f3 c6 ff ff       	call   80102290 <ioapicenable>
+80105b9d:	83 c4 10             	add    $0x10,%esp
+80105ba0:	b8 78 00 00 00       	mov    $0x78,%eax
+80105ba5:	eb 13                	jmp    80105bba <uartinit+0x9a>
+80105ba7:	89 f6                	mov    %esi,%esi
+80105ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+  // Announce that we're here.
+  for(p="xv6...\n"; *p; p++)
+80105bb0:	83 c3 01             	add    $0x1,%ebx
+80105bb3:	0f be 03             	movsbl (%ebx),%eax
+80105bb6:	84 c0                	test   %al,%al
+80105bb8:	74 19                	je     80105bd3 <uartinit+0xb3>
+void
+uartputc(int c)
+{
+  int i;
+
+  if(!uart)
+80105bba:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80105bc0:	85 d2                	test   %edx,%edx
+80105bc2:	74 ec                	je     80105bb0 <uartinit+0x90>
+  inb(COM1+2);
+  inb(COM1+0);
+  ioapicenable(IRQ_COM1, 0);
+
+  // Announce that we're here.
+  for(p="xv6...\n"; *p; p++)
+80105bc4:	83 c3 01             	add    $0x1,%ebx
+80105bc7:	e8 04 ff ff ff       	call   80105ad0 <uartputc.part.0>
+80105bcc:	0f be 03             	movsbl (%ebx),%eax
+80105bcf:	84 c0                	test   %al,%al
+80105bd1:	75 e7                	jne    80105bba <uartinit+0x9a>
+    uartputc(*p);
+}
+80105bd3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105bd6:	5b                   	pop    %ebx
+80105bd7:	5e                   	pop    %esi
+80105bd8:	5f                   	pop    %edi
+80105bd9:	5d                   	pop    %ebp
+80105bda:	c3                   	ret    
+80105bdb:	90                   	nop
+80105bdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105be0 <uartputc>:
+void
+uartputc(int c)
+{
+  int i;
+
+  if(!uart)
+80105be0:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+    uartputc(*p);
+}
+
+void
+uartputc(int c)
+{
+80105be6:	55                   	push   %ebp
+80105be7:	89 e5                	mov    %esp,%ebp
+  int i;
+
+  if(!uart)
+80105be9:	85 d2                	test   %edx,%edx
+    uartputc(*p);
+}
+
+void
+uartputc(int c)
+{
+80105beb:	8b 45 08             	mov    0x8(%ebp),%eax
+  int i;
+
+  if(!uart)
+80105bee:	74 10                	je     80105c00 <uartputc+0x20>
+    return;
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+    microdelay(10);
+  outb(COM1+0, c);
+}
+80105bf0:	5d                   	pop    %ebp
+80105bf1:	e9 da fe ff ff       	jmp    80105ad0 <uartputc.part.0>
+80105bf6:	8d 76 00             	lea    0x0(%esi),%esi
+80105bf9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80105c00:	5d                   	pop    %ebp
+80105c01:	c3                   	ret    
+80105c02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80105c10 <uartintr>:
+  return inb(COM1+0);
+}
+
+void
+uartintr(void)
+{
+80105c10:	55                   	push   %ebp
+80105c11:	89 e5                	mov    %esp,%ebp
+80105c13:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+80105c16:	68 a0 5a 10 80       	push   $0x80105aa0
+80105c1b:	e8 d0 ab ff ff       	call   801007f0 <consoleintr>
+}
+80105c20:	83 c4 10             	add    $0x10,%esp
+80105c23:	c9                   	leave  
+80105c24:	c3                   	ret    
+
+80105c25 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80105c25:	6a 00                	push   $0x0
+  pushl $0
+80105c27:	6a 00                	push   $0x0
+  jmp alltraps
+80105c29:	e9 39 fb ff ff       	jmp    80105767 <alltraps>
+
+80105c2e <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80105c2e:	6a 00                	push   $0x0
+  pushl $1
+80105c30:	6a 01                	push   $0x1
+  jmp alltraps
+80105c32:	e9 30 fb ff ff       	jmp    80105767 <alltraps>
+
+80105c37 <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+80105c37:	6a 00                	push   $0x0
+  pushl $2
+80105c39:	6a 02                	push   $0x2
+  jmp alltraps
+80105c3b:	e9 27 fb ff ff       	jmp    80105767 <alltraps>
+
+80105c40 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80105c40:	6a 00                	push   $0x0
+  pushl $3
+80105c42:	6a 03                	push   $0x3
+  jmp alltraps
+80105c44:	e9 1e fb ff ff       	jmp    80105767 <alltraps>
+
+80105c49 <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+80105c49:	6a 00                	push   $0x0
+  pushl $4
+80105c4b:	6a 04                	push   $0x4
+  jmp alltraps
+80105c4d:	e9 15 fb ff ff       	jmp    80105767 <alltraps>
+
+80105c52 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80105c52:	6a 00                	push   $0x0
+  pushl $5
+80105c54:	6a 05                	push   $0x5
+  jmp alltraps
+80105c56:	e9 0c fb ff ff       	jmp    80105767 <alltraps>
+
+80105c5b <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+80105c5b:	6a 00                	push   $0x0
+  pushl $6
+80105c5d:	6a 06                	push   $0x6
+  jmp alltraps
+80105c5f:	e9 03 fb ff ff       	jmp    80105767 <alltraps>
+
+80105c64 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80105c64:	6a 00                	push   $0x0
+  pushl $7
+80105c66:	6a 07                	push   $0x7
+  jmp alltraps
+80105c68:	e9 fa fa ff ff       	jmp    80105767 <alltraps>
+
+80105c6d <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+80105c6d:	6a 08                	push   $0x8
+  jmp alltraps
+80105c6f:	e9 f3 fa ff ff       	jmp    80105767 <alltraps>
+
+80105c74 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80105c74:	6a 00                	push   $0x0
+  pushl $9
+80105c76:	6a 09                	push   $0x9
+  jmp alltraps
+80105c78:	e9 ea fa ff ff       	jmp    80105767 <alltraps>
+
+80105c7d <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+80105c7d:	6a 0a                	push   $0xa
+  jmp alltraps
+80105c7f:	e9 e3 fa ff ff       	jmp    80105767 <alltraps>
+
+80105c84 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80105c84:	6a 0b                	push   $0xb
+  jmp alltraps
+80105c86:	e9 dc fa ff ff       	jmp    80105767 <alltraps>
+
+80105c8b <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+80105c8b:	6a 0c                	push   $0xc
+  jmp alltraps
+80105c8d:	e9 d5 fa ff ff       	jmp    80105767 <alltraps>
+
+80105c92 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80105c92:	6a 0d                	push   $0xd
+  jmp alltraps
+80105c94:	e9 ce fa ff ff       	jmp    80105767 <alltraps>
+
+80105c99 <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+80105c99:	6a 0e                	push   $0xe
+  jmp alltraps
+80105c9b:	e9 c7 fa ff ff       	jmp    80105767 <alltraps>
+
+80105ca0 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80105ca0:	6a 00                	push   $0x0
+  pushl $15
+80105ca2:	6a 0f                	push   $0xf
+  jmp alltraps
+80105ca4:	e9 be fa ff ff       	jmp    80105767 <alltraps>
+
+80105ca9 <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+80105ca9:	6a 00                	push   $0x0
+  pushl $16
+80105cab:	6a 10                	push   $0x10
+  jmp alltraps
+80105cad:	e9 b5 fa ff ff       	jmp    80105767 <alltraps>
+
+80105cb2 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80105cb2:	6a 11                	push   $0x11
+  jmp alltraps
+80105cb4:	e9 ae fa ff ff       	jmp    80105767 <alltraps>
+
+80105cb9 <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+80105cb9:	6a 00                	push   $0x0
+  pushl $18
+80105cbb:	6a 12                	push   $0x12
+  jmp alltraps
+80105cbd:	e9 a5 fa ff ff       	jmp    80105767 <alltraps>
+
+80105cc2 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80105cc2:	6a 00                	push   $0x0
+  pushl $19
+80105cc4:	6a 13                	push   $0x13
+  jmp alltraps
+80105cc6:	e9 9c fa ff ff       	jmp    80105767 <alltraps>
+
+80105ccb <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+80105ccb:	6a 00                	push   $0x0
+  pushl $20
+80105ccd:	6a 14                	push   $0x14
+  jmp alltraps
+80105ccf:	e9 93 fa ff ff       	jmp    80105767 <alltraps>
+
+80105cd4 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+80105cd4:	6a 00                	push   $0x0
+  pushl $21
+80105cd6:	6a 15                	push   $0x15
+  jmp alltraps
+80105cd8:	e9 8a fa ff ff       	jmp    80105767 <alltraps>
+
+80105cdd <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+80105cdd:	6a 00                	push   $0x0
+  pushl $22
+80105cdf:	6a 16                	push   $0x16
+  jmp alltraps
+80105ce1:	e9 81 fa ff ff       	jmp    80105767 <alltraps>
+
+80105ce6 <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+80105ce6:	6a 00                	push   $0x0
+  pushl $23
+80105ce8:	6a 17                	push   $0x17
+  jmp alltraps
+80105cea:	e9 78 fa ff ff       	jmp    80105767 <alltraps>
+
+80105cef <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+80105cef:	6a 00                	push   $0x0
+  pushl $24
+80105cf1:	6a 18                	push   $0x18
+  jmp alltraps
+80105cf3:	e9 6f fa ff ff       	jmp    80105767 <alltraps>
+
+80105cf8 <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+80105cf8:	6a 00                	push   $0x0
+  pushl $25
+80105cfa:	6a 19                	push   $0x19
+  jmp alltraps
+80105cfc:	e9 66 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d01 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+80105d01:	6a 00                	push   $0x0
+  pushl $26
+80105d03:	6a 1a                	push   $0x1a
+  jmp alltraps
+80105d05:	e9 5d fa ff ff       	jmp    80105767 <alltraps>
+
+80105d0a <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+80105d0a:	6a 00                	push   $0x0
+  pushl $27
+80105d0c:	6a 1b                	push   $0x1b
+  jmp alltraps
+80105d0e:	e9 54 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d13 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+80105d13:	6a 00                	push   $0x0
+  pushl $28
+80105d15:	6a 1c                	push   $0x1c
+  jmp alltraps
+80105d17:	e9 4b fa ff ff       	jmp    80105767 <alltraps>
+
+80105d1c <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+80105d1c:	6a 00                	push   $0x0
+  pushl $29
+80105d1e:	6a 1d                	push   $0x1d
+  jmp alltraps
+80105d20:	e9 42 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d25 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+80105d25:	6a 00                	push   $0x0
+  pushl $30
+80105d27:	6a 1e                	push   $0x1e
+  jmp alltraps
+80105d29:	e9 39 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d2e <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+80105d2e:	6a 00                	push   $0x0
+  pushl $31
+80105d30:	6a 1f                	push   $0x1f
+  jmp alltraps
+80105d32:	e9 30 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d37 <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+80105d37:	6a 00                	push   $0x0
+  pushl $32
+80105d39:	6a 20                	push   $0x20
+  jmp alltraps
+80105d3b:	e9 27 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d40 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80105d40:	6a 00                	push   $0x0
+  pushl $33
+80105d42:	6a 21                	push   $0x21
+  jmp alltraps
+80105d44:	e9 1e fa ff ff       	jmp    80105767 <alltraps>
+
+80105d49 <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+80105d49:	6a 00                	push   $0x0
+  pushl $34
+80105d4b:	6a 22                	push   $0x22
+  jmp alltraps
+80105d4d:	e9 15 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d52 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80105d52:	6a 00                	push   $0x0
+  pushl $35
+80105d54:	6a 23                	push   $0x23
+  jmp alltraps
+80105d56:	e9 0c fa ff ff       	jmp    80105767 <alltraps>
+
+80105d5b <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+80105d5b:	6a 00                	push   $0x0
+  pushl $36
+80105d5d:	6a 24                	push   $0x24
+  jmp alltraps
+80105d5f:	e9 03 fa ff ff       	jmp    80105767 <alltraps>
+
+80105d64 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80105d64:	6a 00                	push   $0x0
+  pushl $37
+80105d66:	6a 25                	push   $0x25
+  jmp alltraps
+80105d68:	e9 fa f9 ff ff       	jmp    80105767 <alltraps>
+
+80105d6d <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+80105d6d:	6a 00                	push   $0x0
+  pushl $38
+80105d6f:	6a 26                	push   $0x26
+  jmp alltraps
+80105d71:	e9 f1 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105d76 <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+80105d76:	6a 00                	push   $0x0
+  pushl $39
+80105d78:	6a 27                	push   $0x27
+  jmp alltraps
+80105d7a:	e9 e8 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105d7f <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+80105d7f:	6a 00                	push   $0x0
+  pushl $40
+80105d81:	6a 28                	push   $0x28
+  jmp alltraps
+80105d83:	e9 df f9 ff ff       	jmp    80105767 <alltraps>
+
+80105d88 <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+80105d88:	6a 00                	push   $0x0
+  pushl $41
+80105d8a:	6a 29                	push   $0x29
+  jmp alltraps
+80105d8c:	e9 d6 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105d91 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80105d91:	6a 00                	push   $0x0
+  pushl $42
+80105d93:	6a 2a                	push   $0x2a
+  jmp alltraps
+80105d95:	e9 cd f9 ff ff       	jmp    80105767 <alltraps>
+
+80105d9a <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+80105d9a:	6a 00                	push   $0x0
+  pushl $43
+80105d9c:	6a 2b                	push   $0x2b
+  jmp alltraps
+80105d9e:	e9 c4 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105da3 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80105da3:	6a 00                	push   $0x0
+  pushl $44
+80105da5:	6a 2c                	push   $0x2c
+  jmp alltraps
+80105da7:	e9 bb f9 ff ff       	jmp    80105767 <alltraps>
+
+80105dac <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+80105dac:	6a 00                	push   $0x0
+  pushl $45
+80105dae:	6a 2d                	push   $0x2d
+  jmp alltraps
+80105db0:	e9 b2 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105db5 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80105db5:	6a 00                	push   $0x0
+  pushl $46
+80105db7:	6a 2e                	push   $0x2e
+  jmp alltraps
+80105db9:	e9 a9 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105dbe <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+80105dbe:	6a 00                	push   $0x0
+  pushl $47
+80105dc0:	6a 2f                	push   $0x2f
+  jmp alltraps
+80105dc2:	e9 a0 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105dc7 <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+80105dc7:	6a 00                	push   $0x0
+  pushl $48
+80105dc9:	6a 30                	push   $0x30
+  jmp alltraps
+80105dcb:	e9 97 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105dd0 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+80105dd0:	6a 00                	push   $0x0
+  pushl $49
+80105dd2:	6a 31                	push   $0x31
+  jmp alltraps
+80105dd4:	e9 8e f9 ff ff       	jmp    80105767 <alltraps>
+
+80105dd9 <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+80105dd9:	6a 00                	push   $0x0
+  pushl $50
+80105ddb:	6a 32                	push   $0x32
+  jmp alltraps
+80105ddd:	e9 85 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105de2 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+80105de2:	6a 00                	push   $0x0
+  pushl $51
+80105de4:	6a 33                	push   $0x33
+  jmp alltraps
+80105de6:	e9 7c f9 ff ff       	jmp    80105767 <alltraps>
+
+80105deb <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+80105deb:	6a 00                	push   $0x0
+  pushl $52
+80105ded:	6a 34                	push   $0x34
+  jmp alltraps
+80105def:	e9 73 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105df4 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+80105df4:	6a 00                	push   $0x0
+  pushl $53
+80105df6:	6a 35                	push   $0x35
+  jmp alltraps
+80105df8:	e9 6a f9 ff ff       	jmp    80105767 <alltraps>
+
+80105dfd <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+80105dfd:	6a 00                	push   $0x0
+  pushl $54
+80105dff:	6a 36                	push   $0x36
+  jmp alltraps
+80105e01:	e9 61 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e06 <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+80105e06:	6a 00                	push   $0x0
+  pushl $55
+80105e08:	6a 37                	push   $0x37
+  jmp alltraps
+80105e0a:	e9 58 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e0f <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+80105e0f:	6a 00                	push   $0x0
+  pushl $56
+80105e11:	6a 38                	push   $0x38
+  jmp alltraps
+80105e13:	e9 4f f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e18 <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+80105e18:	6a 00                	push   $0x0
+  pushl $57
+80105e1a:	6a 39                	push   $0x39
+  jmp alltraps
+80105e1c:	e9 46 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e21 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+80105e21:	6a 00                	push   $0x0
+  pushl $58
+80105e23:	6a 3a                	push   $0x3a
+  jmp alltraps
+80105e25:	e9 3d f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e2a <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+80105e2a:	6a 00                	push   $0x0
+  pushl $59
+80105e2c:	6a 3b                	push   $0x3b
+  jmp alltraps
+80105e2e:	e9 34 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e33 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+80105e33:	6a 00                	push   $0x0
+  pushl $60
+80105e35:	6a 3c                	push   $0x3c
+  jmp alltraps
+80105e37:	e9 2b f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e3c <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+80105e3c:	6a 00                	push   $0x0
+  pushl $61
+80105e3e:	6a 3d                	push   $0x3d
+  jmp alltraps
+80105e40:	e9 22 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e45 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80105e45:	6a 00                	push   $0x0
+  pushl $62
+80105e47:	6a 3e                	push   $0x3e
+  jmp alltraps
+80105e49:	e9 19 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e4e <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+80105e4e:	6a 00                	push   $0x0
+  pushl $63
+80105e50:	6a 3f                	push   $0x3f
+  jmp alltraps
+80105e52:	e9 10 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e57 <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80105e57:	6a 00                	push   $0x0
+  pushl $64
+80105e59:	6a 40                	push   $0x40
+  jmp alltraps
+80105e5b:	e9 07 f9 ff ff       	jmp    80105767 <alltraps>
+
+80105e60 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80105e60:	6a 00                	push   $0x0
+  pushl $65
+80105e62:	6a 41                	push   $0x41
+  jmp alltraps
+80105e64:	e9 fe f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e69 <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80105e69:	6a 00                	push   $0x0
+  pushl $66
+80105e6b:	6a 42                	push   $0x42
+  jmp alltraps
+80105e6d:	e9 f5 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e72 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80105e72:	6a 00                	push   $0x0
+  pushl $67
+80105e74:	6a 43                	push   $0x43
+  jmp alltraps
+80105e76:	e9 ec f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e7b <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+80105e7b:	6a 00                	push   $0x0
+  pushl $68
+80105e7d:	6a 44                	push   $0x44
+  jmp alltraps
+80105e7f:	e9 e3 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e84 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80105e84:	6a 00                	push   $0x0
+  pushl $69
+80105e86:	6a 45                	push   $0x45
+  jmp alltraps
+80105e88:	e9 da f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e8d <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+80105e8d:	6a 00                	push   $0x0
+  pushl $70
+80105e8f:	6a 46                	push   $0x46
+  jmp alltraps
+80105e91:	e9 d1 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e96 <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80105e96:	6a 00                	push   $0x0
+  pushl $71
+80105e98:	6a 47                	push   $0x47
+  jmp alltraps
+80105e9a:	e9 c8 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105e9f <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+80105e9f:	6a 00                	push   $0x0
+  pushl $72
+80105ea1:	6a 48                	push   $0x48
+  jmp alltraps
+80105ea3:	e9 bf f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ea8 <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80105ea8:	6a 00                	push   $0x0
+  pushl $73
+80105eaa:	6a 49                	push   $0x49
+  jmp alltraps
+80105eac:	e9 b6 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105eb1 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80105eb1:	6a 00                	push   $0x0
+  pushl $74
+80105eb3:	6a 4a                	push   $0x4a
+  jmp alltraps
+80105eb5:	e9 ad f8 ff ff       	jmp    80105767 <alltraps>
+
+80105eba <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+80105eba:	6a 00                	push   $0x0
+  pushl $75
+80105ebc:	6a 4b                	push   $0x4b
+  jmp alltraps
+80105ebe:	e9 a4 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ec3 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80105ec3:	6a 00                	push   $0x0
+  pushl $76
+80105ec5:	6a 4c                	push   $0x4c
+  jmp alltraps
+80105ec7:	e9 9b f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ecc <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+80105ecc:	6a 00                	push   $0x0
+  pushl $77
+80105ece:	6a 4d                	push   $0x4d
+  jmp alltraps
+80105ed0:	e9 92 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ed5 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+80105ed5:	6a 00                	push   $0x0
+  pushl $78
+80105ed7:	6a 4e                	push   $0x4e
+  jmp alltraps
+80105ed9:	e9 89 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ede <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+80105ede:	6a 00                	push   $0x0
+  pushl $79
+80105ee0:	6a 4f                	push   $0x4f
+  jmp alltraps
+80105ee2:	e9 80 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ee7 <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+80105ee7:	6a 00                	push   $0x0
+  pushl $80
+80105ee9:	6a 50                	push   $0x50
+  jmp alltraps
+80105eeb:	e9 77 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ef0 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+80105ef0:	6a 00                	push   $0x0
+  pushl $81
+80105ef2:	6a 51                	push   $0x51
+  jmp alltraps
+80105ef4:	e9 6e f8 ff ff       	jmp    80105767 <alltraps>
+
+80105ef9 <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+80105ef9:	6a 00                	push   $0x0
+  pushl $82
+80105efb:	6a 52                	push   $0x52
+  jmp alltraps
+80105efd:	e9 65 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f02 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+80105f02:	6a 00                	push   $0x0
+  pushl $83
+80105f04:	6a 53                	push   $0x53
+  jmp alltraps
+80105f06:	e9 5c f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f0b <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+80105f0b:	6a 00                	push   $0x0
+  pushl $84
+80105f0d:	6a 54                	push   $0x54
+  jmp alltraps
+80105f0f:	e9 53 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f14 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+80105f14:	6a 00                	push   $0x0
+  pushl $85
+80105f16:	6a 55                	push   $0x55
+  jmp alltraps
+80105f18:	e9 4a f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f1d <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+80105f1d:	6a 00                	push   $0x0
+  pushl $86
+80105f1f:	6a 56                	push   $0x56
+  jmp alltraps
+80105f21:	e9 41 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f26 <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+80105f26:	6a 00                	push   $0x0
+  pushl $87
+80105f28:	6a 57                	push   $0x57
+  jmp alltraps
+80105f2a:	e9 38 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f2f <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+80105f2f:	6a 00                	push   $0x0
+  pushl $88
+80105f31:	6a 58                	push   $0x58
+  jmp alltraps
+80105f33:	e9 2f f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f38 <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+80105f38:	6a 00                	push   $0x0
+  pushl $89
+80105f3a:	6a 59                	push   $0x59
+  jmp alltraps
+80105f3c:	e9 26 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f41 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80105f41:	6a 00                	push   $0x0
+  pushl $90
+80105f43:	6a 5a                	push   $0x5a
+  jmp alltraps
+80105f45:	e9 1d f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f4a <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+80105f4a:	6a 00                	push   $0x0
+  pushl $91
+80105f4c:	6a 5b                	push   $0x5b
+  jmp alltraps
+80105f4e:	e9 14 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f53 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80105f53:	6a 00                	push   $0x0
+  pushl $92
+80105f55:	6a 5c                	push   $0x5c
+  jmp alltraps
+80105f57:	e9 0b f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f5c <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+80105f5c:	6a 00                	push   $0x0
+  pushl $93
+80105f5e:	6a 5d                	push   $0x5d
+  jmp alltraps
+80105f60:	e9 02 f8 ff ff       	jmp    80105767 <alltraps>
+
+80105f65 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80105f65:	6a 00                	push   $0x0
+  pushl $94
+80105f67:	6a 5e                	push   $0x5e
+  jmp alltraps
+80105f69:	e9 f9 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105f6e <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+80105f6e:	6a 00                	push   $0x0
+  pushl $95
+80105f70:	6a 5f                	push   $0x5f
+  jmp alltraps
+80105f72:	e9 f0 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105f77 <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+80105f77:	6a 00                	push   $0x0
+  pushl $96
+80105f79:	6a 60                	push   $0x60
+  jmp alltraps
+80105f7b:	e9 e7 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105f80 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80105f80:	6a 00                	push   $0x0
+  pushl $97
+80105f82:	6a 61                	push   $0x61
+  jmp alltraps
+80105f84:	e9 de f7 ff ff       	jmp    80105767 <alltraps>
+
+80105f89 <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80105f89:	6a 00                	push   $0x0
+  pushl $98
+80105f8b:	6a 62                	push   $0x62
+  jmp alltraps
+80105f8d:	e9 d5 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105f92 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80105f92:	6a 00                	push   $0x0
+  pushl $99
+80105f94:	6a 63                	push   $0x63
+  jmp alltraps
+80105f96:	e9 cc f7 ff ff       	jmp    80105767 <alltraps>
+
+80105f9b <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+80105f9b:	6a 00                	push   $0x0
+  pushl $100
+80105f9d:	6a 64                	push   $0x64
+  jmp alltraps
+80105f9f:	e9 c3 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fa4 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80105fa4:	6a 00                	push   $0x0
+  pushl $101
+80105fa6:	6a 65                	push   $0x65
+  jmp alltraps
+80105fa8:	e9 ba f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fad <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+80105fad:	6a 00                	push   $0x0
+  pushl $102
+80105faf:	6a 66                	push   $0x66
+  jmp alltraps
+80105fb1:	e9 b1 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fb6 <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80105fb6:	6a 00                	push   $0x0
+  pushl $103
+80105fb8:	6a 67                	push   $0x67
+  jmp alltraps
+80105fba:	e9 a8 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fbf <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+80105fbf:	6a 00                	push   $0x0
+  pushl $104
+80105fc1:	6a 68                	push   $0x68
+  jmp alltraps
+80105fc3:	e9 9f f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fc8 <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80105fc8:	6a 00                	push   $0x0
+  pushl $105
+80105fca:	6a 69                	push   $0x69
+  jmp alltraps
+80105fcc:	e9 96 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fd1 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+80105fd1:	6a 00                	push   $0x0
+  pushl $106
+80105fd3:	6a 6a                	push   $0x6a
+  jmp alltraps
+80105fd5:	e9 8d f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fda <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+80105fda:	6a 00                	push   $0x0
+  pushl $107
+80105fdc:	6a 6b                	push   $0x6b
+  jmp alltraps
+80105fde:	e9 84 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fe3 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+80105fe3:	6a 00                	push   $0x0
+  pushl $108
+80105fe5:	6a 6c                	push   $0x6c
+  jmp alltraps
+80105fe7:	e9 7b f7 ff ff       	jmp    80105767 <alltraps>
+
+80105fec <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+80105fec:	6a 00                	push   $0x0
+  pushl $109
+80105fee:	6a 6d                	push   $0x6d
+  jmp alltraps
+80105ff0:	e9 72 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105ff5 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+80105ff5:	6a 00                	push   $0x0
+  pushl $110
+80105ff7:	6a 6e                	push   $0x6e
+  jmp alltraps
+80105ff9:	e9 69 f7 ff ff       	jmp    80105767 <alltraps>
+
+80105ffe <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+80105ffe:	6a 00                	push   $0x0
+  pushl $111
+80106000:	6a 6f                	push   $0x6f
+  jmp alltraps
+80106002:	e9 60 f7 ff ff       	jmp    80105767 <alltraps>
+
+80106007 <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+80106007:	6a 00                	push   $0x0
+  pushl $112
+80106009:	6a 70                	push   $0x70
+  jmp alltraps
+8010600b:	e9 57 f7 ff ff       	jmp    80105767 <alltraps>
+
+80106010 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+80106010:	6a 00                	push   $0x0
+  pushl $113
+80106012:	6a 71                	push   $0x71
+  jmp alltraps
+80106014:	e9 4e f7 ff ff       	jmp    80105767 <alltraps>
+
+80106019 <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+80106019:	6a 00                	push   $0x0
+  pushl $114
+8010601b:	6a 72                	push   $0x72
+  jmp alltraps
+8010601d:	e9 45 f7 ff ff       	jmp    80105767 <alltraps>
+
+80106022 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+80106022:	6a 00                	push   $0x0
+  pushl $115
+80106024:	6a 73                	push   $0x73
+  jmp alltraps
+80106026:	e9 3c f7 ff ff       	jmp    80105767 <alltraps>
+
+8010602b <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+8010602b:	6a 00                	push   $0x0
+  pushl $116
+8010602d:	6a 74                	push   $0x74
+  jmp alltraps
+8010602f:	e9 33 f7 ff ff       	jmp    80105767 <alltraps>
+
+80106034 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+80106034:	6a 00                	push   $0x0
+  pushl $117
+80106036:	6a 75                	push   $0x75
+  jmp alltraps
+80106038:	e9 2a f7 ff ff       	jmp    80105767 <alltraps>
+
+8010603d <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+8010603d:	6a 00                	push   $0x0
+  pushl $118
+8010603f:	6a 76                	push   $0x76
+  jmp alltraps
+80106041:	e9 21 f7 ff ff       	jmp    80105767 <alltraps>
+
+80106046 <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+80106046:	6a 00                	push   $0x0
+  pushl $119
+80106048:	6a 77                	push   $0x77
+  jmp alltraps
+8010604a:	e9 18 f7 ff ff       	jmp    80105767 <alltraps>
+
+8010604f <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+8010604f:	6a 00                	push   $0x0
+  pushl $120
+80106051:	6a 78                	push   $0x78
+  jmp alltraps
+80106053:	e9 0f f7 ff ff       	jmp    80105767 <alltraps>
+
+80106058 <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+80106058:	6a 00                	push   $0x0
+  pushl $121
+8010605a:	6a 79                	push   $0x79
+  jmp alltraps
+8010605c:	e9 06 f7 ff ff       	jmp    80105767 <alltraps>
+
+80106061 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80106061:	6a 00                	push   $0x0
+  pushl $122
+80106063:	6a 7a                	push   $0x7a
+  jmp alltraps
+80106065:	e9 fd f6 ff ff       	jmp    80105767 <alltraps>
+
+8010606a <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+8010606a:	6a 00                	push   $0x0
+  pushl $123
+8010606c:	6a 7b                	push   $0x7b
+  jmp alltraps
+8010606e:	e9 f4 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106073 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80106073:	6a 00                	push   $0x0
+  pushl $124
+80106075:	6a 7c                	push   $0x7c
+  jmp alltraps
+80106077:	e9 eb f6 ff ff       	jmp    80105767 <alltraps>
+
+8010607c <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+8010607c:	6a 00                	push   $0x0
+  pushl $125
+8010607e:	6a 7d                	push   $0x7d
+  jmp alltraps
+80106080:	e9 e2 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106085 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80106085:	6a 00                	push   $0x0
+  pushl $126
+80106087:	6a 7e                	push   $0x7e
+  jmp alltraps
+80106089:	e9 d9 f6 ff ff       	jmp    80105767 <alltraps>
+
+8010608e <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+8010608e:	6a 00                	push   $0x0
+  pushl $127
+80106090:	6a 7f                	push   $0x7f
+  jmp alltraps
+80106092:	e9 d0 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106097 <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+80106097:	6a 00                	push   $0x0
+  pushl $128
+80106099:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+8010609e:	e9 c4 f6 ff ff       	jmp    80105767 <alltraps>
+
+801060a3 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+801060a3:	6a 00                	push   $0x0
+  pushl $129
+801060a5:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+801060aa:	e9 b8 f6 ff ff       	jmp    80105767 <alltraps>
+
+801060af <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+801060af:	6a 00                	push   $0x0
+  pushl $130
+801060b1:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+801060b6:	e9 ac f6 ff ff       	jmp    80105767 <alltraps>
+
+801060bb <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+801060bb:	6a 00                	push   $0x0
+  pushl $131
+801060bd:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+801060c2:	e9 a0 f6 ff ff       	jmp    80105767 <alltraps>
+
+801060c7 <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+801060c7:	6a 00                	push   $0x0
+  pushl $132
+801060c9:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+801060ce:	e9 94 f6 ff ff       	jmp    80105767 <alltraps>
+
+801060d3 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+801060d3:	6a 00                	push   $0x0
+  pushl $133
+801060d5:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+801060da:	e9 88 f6 ff ff       	jmp    80105767 <alltraps>
+
+801060df <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+801060df:	6a 00                	push   $0x0
+  pushl $134
+801060e1:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+801060e6:	e9 7c f6 ff ff       	jmp    80105767 <alltraps>
+
+801060eb <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+801060eb:	6a 00                	push   $0x0
+  pushl $135
+801060ed:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+801060f2:	e9 70 f6 ff ff       	jmp    80105767 <alltraps>
+
+801060f7 <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+801060f7:	6a 00                	push   $0x0
+  pushl $136
+801060f9:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+801060fe:	e9 64 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106103 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+80106103:	6a 00                	push   $0x0
+  pushl $137
+80106105:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+8010610a:	e9 58 f6 ff ff       	jmp    80105767 <alltraps>
+
+8010610f <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+8010610f:	6a 00                	push   $0x0
+  pushl $138
+80106111:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+80106116:	e9 4c f6 ff ff       	jmp    80105767 <alltraps>
+
+8010611b <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+8010611b:	6a 00                	push   $0x0
+  pushl $139
+8010611d:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+80106122:	e9 40 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106127 <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+80106127:	6a 00                	push   $0x0
+  pushl $140
+80106129:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+8010612e:	e9 34 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106133 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+80106133:	6a 00                	push   $0x0
+  pushl $141
+80106135:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+8010613a:	e9 28 f6 ff ff       	jmp    80105767 <alltraps>
+
+8010613f <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+8010613f:	6a 00                	push   $0x0
+  pushl $142
+80106141:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+80106146:	e9 1c f6 ff ff       	jmp    80105767 <alltraps>
+
+8010614b <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+8010614b:	6a 00                	push   $0x0
+  pushl $143
+8010614d:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+80106152:	e9 10 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106157 <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+80106157:	6a 00                	push   $0x0
+  pushl $144
+80106159:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+8010615e:	e9 04 f6 ff ff       	jmp    80105767 <alltraps>
+
+80106163 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80106163:	6a 00                	push   $0x0
+  pushl $145
+80106165:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+8010616a:	e9 f8 f5 ff ff       	jmp    80105767 <alltraps>
+
+8010616f <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+8010616f:	6a 00                	push   $0x0
+  pushl $146
+80106171:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+80106176:	e9 ec f5 ff ff       	jmp    80105767 <alltraps>
+
+8010617b <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+8010617b:	6a 00                	push   $0x0
+  pushl $147
+8010617d:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80106182:	e9 e0 f5 ff ff       	jmp    80105767 <alltraps>
+
+80106187 <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+80106187:	6a 00                	push   $0x0
+  pushl $148
+80106189:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+8010618e:	e9 d4 f5 ff ff       	jmp    80105767 <alltraps>
+
+80106193 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80106193:	6a 00                	push   $0x0
+  pushl $149
+80106195:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+8010619a:	e9 c8 f5 ff ff       	jmp    80105767 <alltraps>
+
+8010619f <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+8010619f:	6a 00                	push   $0x0
+  pushl $150
+801061a1:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+801061a6:	e9 bc f5 ff ff       	jmp    80105767 <alltraps>
+
+801061ab <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+801061ab:	6a 00                	push   $0x0
+  pushl $151
+801061ad:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+801061b2:	e9 b0 f5 ff ff       	jmp    80105767 <alltraps>
+
+801061b7 <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+801061b7:	6a 00                	push   $0x0
+  pushl $152
+801061b9:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+801061be:	e9 a4 f5 ff ff       	jmp    80105767 <alltraps>
+
+801061c3 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+801061c3:	6a 00                	push   $0x0
+  pushl $153
+801061c5:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+801061ca:	e9 98 f5 ff ff       	jmp    80105767 <alltraps>
+
+801061cf <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+801061cf:	6a 00                	push   $0x0
+  pushl $154
+801061d1:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+801061d6:	e9 8c f5 ff ff       	jmp    80105767 <alltraps>
+
+801061db <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+801061db:	6a 00                	push   $0x0
+  pushl $155
+801061dd:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+801061e2:	e9 80 f5 ff ff       	jmp    80105767 <alltraps>
+
+801061e7 <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+801061e7:	6a 00                	push   $0x0
+  pushl $156
+801061e9:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+801061ee:	e9 74 f5 ff ff       	jmp    80105767 <alltraps>
+
+801061f3 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+801061f3:	6a 00                	push   $0x0
+  pushl $157
+801061f5:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+801061fa:	e9 68 f5 ff ff       	jmp    80105767 <alltraps>
+
+801061ff <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+801061ff:	6a 00                	push   $0x0
+  pushl $158
+80106201:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+80106206:	e9 5c f5 ff ff       	jmp    80105767 <alltraps>
+
+8010620b <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+8010620b:	6a 00                	push   $0x0
+  pushl $159
+8010620d:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+80106212:	e9 50 f5 ff ff       	jmp    80105767 <alltraps>
+
+80106217 <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+80106217:	6a 00                	push   $0x0
+  pushl $160
+80106219:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+8010621e:	e9 44 f5 ff ff       	jmp    80105767 <alltraps>
+
+80106223 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+80106223:	6a 00                	push   $0x0
+  pushl $161
+80106225:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+8010622a:	e9 38 f5 ff ff       	jmp    80105767 <alltraps>
+
+8010622f <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+8010622f:	6a 00                	push   $0x0
+  pushl $162
+80106231:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+80106236:	e9 2c f5 ff ff       	jmp    80105767 <alltraps>
+
+8010623b <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+8010623b:	6a 00                	push   $0x0
+  pushl $163
+8010623d:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+80106242:	e9 20 f5 ff ff       	jmp    80105767 <alltraps>
+
+80106247 <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+80106247:	6a 00                	push   $0x0
+  pushl $164
+80106249:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+8010624e:	e9 14 f5 ff ff       	jmp    80105767 <alltraps>
+
+80106253 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+80106253:	6a 00                	push   $0x0
+  pushl $165
+80106255:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+8010625a:	e9 08 f5 ff ff       	jmp    80105767 <alltraps>
+
+8010625f <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+8010625f:	6a 00                	push   $0x0
+  pushl $166
+80106261:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+80106266:	e9 fc f4 ff ff       	jmp    80105767 <alltraps>
+
+8010626b <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+8010626b:	6a 00                	push   $0x0
+  pushl $167
+8010626d:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80106272:	e9 f0 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106277 <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+80106277:	6a 00                	push   $0x0
+  pushl $168
+80106279:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+8010627e:	e9 e4 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106283 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80106283:	6a 00                	push   $0x0
+  pushl $169
+80106285:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+8010628a:	e9 d8 f4 ff ff       	jmp    80105767 <alltraps>
+
+8010628f <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+8010628f:	6a 00                	push   $0x0
+  pushl $170
+80106291:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+80106296:	e9 cc f4 ff ff       	jmp    80105767 <alltraps>
+
+8010629b <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+8010629b:	6a 00                	push   $0x0
+  pushl $171
+8010629d:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+801062a2:	e9 c0 f4 ff ff       	jmp    80105767 <alltraps>
+
+801062a7 <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+801062a7:	6a 00                	push   $0x0
+  pushl $172
+801062a9:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+801062ae:	e9 b4 f4 ff ff       	jmp    80105767 <alltraps>
+
+801062b3 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+801062b3:	6a 00                	push   $0x0
+  pushl $173
+801062b5:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+801062ba:	e9 a8 f4 ff ff       	jmp    80105767 <alltraps>
+
+801062bf <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+801062bf:	6a 00                	push   $0x0
+  pushl $174
+801062c1:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+801062c6:	e9 9c f4 ff ff       	jmp    80105767 <alltraps>
+
+801062cb <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+801062cb:	6a 00                	push   $0x0
+  pushl $175
+801062cd:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+801062d2:	e9 90 f4 ff ff       	jmp    80105767 <alltraps>
+
+801062d7 <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+801062d7:	6a 00                	push   $0x0
+  pushl $176
+801062d9:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+801062de:	e9 84 f4 ff ff       	jmp    80105767 <alltraps>
+
+801062e3 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+801062e3:	6a 00                	push   $0x0
+  pushl $177
+801062e5:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+801062ea:	e9 78 f4 ff ff       	jmp    80105767 <alltraps>
+
+801062ef <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+801062ef:	6a 00                	push   $0x0
+  pushl $178
+801062f1:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+801062f6:	e9 6c f4 ff ff       	jmp    80105767 <alltraps>
+
+801062fb <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+801062fb:	6a 00                	push   $0x0
+  pushl $179
+801062fd:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+80106302:	e9 60 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106307 <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+80106307:	6a 00                	push   $0x0
+  pushl $180
+80106309:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+8010630e:	e9 54 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106313 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+80106313:	6a 00                	push   $0x0
+  pushl $181
+80106315:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+8010631a:	e9 48 f4 ff ff       	jmp    80105767 <alltraps>
+
+8010631f <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+8010631f:	6a 00                	push   $0x0
+  pushl $182
+80106321:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+80106326:	e9 3c f4 ff ff       	jmp    80105767 <alltraps>
+
+8010632b <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+8010632b:	6a 00                	push   $0x0
+  pushl $183
+8010632d:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+80106332:	e9 30 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106337 <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+80106337:	6a 00                	push   $0x0
+  pushl $184
+80106339:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+8010633e:	e9 24 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106343 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+80106343:	6a 00                	push   $0x0
+  pushl $185
+80106345:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+8010634a:	e9 18 f4 ff ff       	jmp    80105767 <alltraps>
+
+8010634f <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+8010634f:	6a 00                	push   $0x0
+  pushl $186
+80106351:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+80106356:	e9 0c f4 ff ff       	jmp    80105767 <alltraps>
+
+8010635b <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+8010635b:	6a 00                	push   $0x0
+  pushl $187
+8010635d:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80106362:	e9 00 f4 ff ff       	jmp    80105767 <alltraps>
+
+80106367 <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+80106367:	6a 00                	push   $0x0
+  pushl $188
+80106369:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+8010636e:	e9 f4 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106373 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80106373:	6a 00                	push   $0x0
+  pushl $189
+80106375:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+8010637a:	e9 e8 f3 ff ff       	jmp    80105767 <alltraps>
+
+8010637f <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+8010637f:	6a 00                	push   $0x0
+  pushl $190
+80106381:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+80106386:	e9 dc f3 ff ff       	jmp    80105767 <alltraps>
+
+8010638b <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+8010638b:	6a 00                	push   $0x0
+  pushl $191
+8010638d:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80106392:	e9 d0 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106397 <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+80106397:	6a 00                	push   $0x0
+  pushl $192
+80106399:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+8010639e:	e9 c4 f3 ff ff       	jmp    80105767 <alltraps>
+
+801063a3 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+801063a3:	6a 00                	push   $0x0
+  pushl $193
+801063a5:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+801063aa:	e9 b8 f3 ff ff       	jmp    80105767 <alltraps>
+
+801063af <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+801063af:	6a 00                	push   $0x0
+  pushl $194
+801063b1:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+801063b6:	e9 ac f3 ff ff       	jmp    80105767 <alltraps>
+
+801063bb <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+801063bb:	6a 00                	push   $0x0
+  pushl $195
+801063bd:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+801063c2:	e9 a0 f3 ff ff       	jmp    80105767 <alltraps>
+
+801063c7 <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+801063c7:	6a 00                	push   $0x0
+  pushl $196
+801063c9:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+801063ce:	e9 94 f3 ff ff       	jmp    80105767 <alltraps>
+
+801063d3 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+801063d3:	6a 00                	push   $0x0
+  pushl $197
+801063d5:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+801063da:	e9 88 f3 ff ff       	jmp    80105767 <alltraps>
+
+801063df <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+801063df:	6a 00                	push   $0x0
+  pushl $198
+801063e1:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+801063e6:	e9 7c f3 ff ff       	jmp    80105767 <alltraps>
+
+801063eb <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+801063eb:	6a 00                	push   $0x0
+  pushl $199
+801063ed:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+801063f2:	e9 70 f3 ff ff       	jmp    80105767 <alltraps>
+
+801063f7 <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+801063f7:	6a 00                	push   $0x0
+  pushl $200
+801063f9:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+801063fe:	e9 64 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106403 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+80106403:	6a 00                	push   $0x0
+  pushl $201
+80106405:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+8010640a:	e9 58 f3 ff ff       	jmp    80105767 <alltraps>
+
+8010640f <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+8010640f:	6a 00                	push   $0x0
+  pushl $202
+80106411:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+80106416:	e9 4c f3 ff ff       	jmp    80105767 <alltraps>
+
+8010641b <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+8010641b:	6a 00                	push   $0x0
+  pushl $203
+8010641d:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+80106422:	e9 40 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106427 <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+80106427:	6a 00                	push   $0x0
+  pushl $204
+80106429:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+8010642e:	e9 34 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106433 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+80106433:	6a 00                	push   $0x0
+  pushl $205
+80106435:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+8010643a:	e9 28 f3 ff ff       	jmp    80105767 <alltraps>
+
+8010643f <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+8010643f:	6a 00                	push   $0x0
+  pushl $206
+80106441:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+80106446:	e9 1c f3 ff ff       	jmp    80105767 <alltraps>
+
+8010644b <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+8010644b:	6a 00                	push   $0x0
+  pushl $207
+8010644d:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+80106452:	e9 10 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106457 <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+80106457:	6a 00                	push   $0x0
+  pushl $208
+80106459:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+8010645e:	e9 04 f3 ff ff       	jmp    80105767 <alltraps>
+
+80106463 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80106463:	6a 00                	push   $0x0
+  pushl $209
+80106465:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+8010646a:	e9 f8 f2 ff ff       	jmp    80105767 <alltraps>
+
+8010646f <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+8010646f:	6a 00                	push   $0x0
+  pushl $210
+80106471:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+80106476:	e9 ec f2 ff ff       	jmp    80105767 <alltraps>
+
+8010647b <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+8010647b:	6a 00                	push   $0x0
+  pushl $211
+8010647d:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80106482:	e9 e0 f2 ff ff       	jmp    80105767 <alltraps>
+
+80106487 <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+80106487:	6a 00                	push   $0x0
+  pushl $212
+80106489:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+8010648e:	e9 d4 f2 ff ff       	jmp    80105767 <alltraps>
+
+80106493 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80106493:	6a 00                	push   $0x0
+  pushl $213
+80106495:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010649a:	e9 c8 f2 ff ff       	jmp    80105767 <alltraps>
+
+8010649f <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+8010649f:	6a 00                	push   $0x0
+  pushl $214
+801064a1:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+801064a6:	e9 bc f2 ff ff       	jmp    80105767 <alltraps>
+
+801064ab <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+801064ab:	6a 00                	push   $0x0
+  pushl $215
+801064ad:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+801064b2:	e9 b0 f2 ff ff       	jmp    80105767 <alltraps>
+
+801064b7 <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+801064b7:	6a 00                	push   $0x0
+  pushl $216
+801064b9:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+801064be:	e9 a4 f2 ff ff       	jmp    80105767 <alltraps>
+
+801064c3 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+801064c3:	6a 00                	push   $0x0
+  pushl $217
+801064c5:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+801064ca:	e9 98 f2 ff ff       	jmp    80105767 <alltraps>
+
+801064cf <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+801064cf:	6a 00                	push   $0x0
+  pushl $218
+801064d1:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+801064d6:	e9 8c f2 ff ff       	jmp    80105767 <alltraps>
+
+801064db <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+801064db:	6a 00                	push   $0x0
+  pushl $219
+801064dd:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+801064e2:	e9 80 f2 ff ff       	jmp    80105767 <alltraps>
+
+801064e7 <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+801064e7:	6a 00                	push   $0x0
+  pushl $220
+801064e9:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+801064ee:	e9 74 f2 ff ff       	jmp    80105767 <alltraps>
+
+801064f3 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+801064f3:	6a 00                	push   $0x0
+  pushl $221
+801064f5:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+801064fa:	e9 68 f2 ff ff       	jmp    80105767 <alltraps>
+
+801064ff <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+801064ff:	6a 00                	push   $0x0
+  pushl $222
+80106501:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+80106506:	e9 5c f2 ff ff       	jmp    80105767 <alltraps>
+
+8010650b <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+8010650b:	6a 00                	push   $0x0
+  pushl $223
+8010650d:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+80106512:	e9 50 f2 ff ff       	jmp    80105767 <alltraps>
+
+80106517 <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+80106517:	6a 00                	push   $0x0
+  pushl $224
+80106519:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+8010651e:	e9 44 f2 ff ff       	jmp    80105767 <alltraps>
+
+80106523 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+80106523:	6a 00                	push   $0x0
+  pushl $225
+80106525:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+8010652a:	e9 38 f2 ff ff       	jmp    80105767 <alltraps>
+
+8010652f <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+8010652f:	6a 00                	push   $0x0
+  pushl $226
+80106531:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+80106536:	e9 2c f2 ff ff       	jmp    80105767 <alltraps>
+
+8010653b <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+8010653b:	6a 00                	push   $0x0
+  pushl $227
+8010653d:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+80106542:	e9 20 f2 ff ff       	jmp    80105767 <alltraps>
+
+80106547 <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+80106547:	6a 00                	push   $0x0
+  pushl $228
+80106549:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+8010654e:	e9 14 f2 ff ff       	jmp    80105767 <alltraps>
+
+80106553 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+80106553:	6a 00                	push   $0x0
+  pushl $229
+80106555:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+8010655a:	e9 08 f2 ff ff       	jmp    80105767 <alltraps>
+
+8010655f <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+8010655f:	6a 00                	push   $0x0
+  pushl $230
+80106561:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+80106566:	e9 fc f1 ff ff       	jmp    80105767 <alltraps>
+
+8010656b <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+8010656b:	6a 00                	push   $0x0
+  pushl $231
+8010656d:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80106572:	e9 f0 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106577 <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+80106577:	6a 00                	push   $0x0
+  pushl $232
+80106579:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+8010657e:	e9 e4 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106583 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80106583:	6a 00                	push   $0x0
+  pushl $233
+80106585:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+8010658a:	e9 d8 f1 ff ff       	jmp    80105767 <alltraps>
+
+8010658f <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+8010658f:	6a 00                	push   $0x0
+  pushl $234
+80106591:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+80106596:	e9 cc f1 ff ff       	jmp    80105767 <alltraps>
+
+8010659b <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+8010659b:	6a 00                	push   $0x0
+  pushl $235
+8010659d:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+801065a2:	e9 c0 f1 ff ff       	jmp    80105767 <alltraps>
+
+801065a7 <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+801065a7:	6a 00                	push   $0x0
+  pushl $236
+801065a9:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+801065ae:	e9 b4 f1 ff ff       	jmp    80105767 <alltraps>
+
+801065b3 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+801065b3:	6a 00                	push   $0x0
+  pushl $237
+801065b5:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+801065ba:	e9 a8 f1 ff ff       	jmp    80105767 <alltraps>
+
+801065bf <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+801065bf:	6a 00                	push   $0x0
+  pushl $238
+801065c1:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+801065c6:	e9 9c f1 ff ff       	jmp    80105767 <alltraps>
+
+801065cb <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+801065cb:	6a 00                	push   $0x0
+  pushl $239
+801065cd:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+801065d2:	e9 90 f1 ff ff       	jmp    80105767 <alltraps>
+
+801065d7 <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+801065d7:	6a 00                	push   $0x0
+  pushl $240
+801065d9:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+801065de:	e9 84 f1 ff ff       	jmp    80105767 <alltraps>
+
+801065e3 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+801065e3:	6a 00                	push   $0x0
+  pushl $241
+801065e5:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+801065ea:	e9 78 f1 ff ff       	jmp    80105767 <alltraps>
+
+801065ef <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+801065ef:	6a 00                	push   $0x0
+  pushl $242
+801065f1:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+801065f6:	e9 6c f1 ff ff       	jmp    80105767 <alltraps>
+
+801065fb <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+801065fb:	6a 00                	push   $0x0
+  pushl $243
+801065fd:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+80106602:	e9 60 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106607 <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+80106607:	6a 00                	push   $0x0
+  pushl $244
+80106609:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+8010660e:	e9 54 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106613 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+80106613:	6a 00                	push   $0x0
+  pushl $245
+80106615:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+8010661a:	e9 48 f1 ff ff       	jmp    80105767 <alltraps>
+
+8010661f <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+8010661f:	6a 00                	push   $0x0
+  pushl $246
+80106621:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+80106626:	e9 3c f1 ff ff       	jmp    80105767 <alltraps>
+
+8010662b <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+8010662b:	6a 00                	push   $0x0
+  pushl $247
+8010662d:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+80106632:	e9 30 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106637 <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+80106637:	6a 00                	push   $0x0
+  pushl $248
+80106639:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+8010663e:	e9 24 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106643 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+80106643:	6a 00                	push   $0x0
+  pushl $249
+80106645:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+8010664a:	e9 18 f1 ff ff       	jmp    80105767 <alltraps>
+
+8010664f <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+8010664f:	6a 00                	push   $0x0
+  pushl $250
+80106651:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+80106656:	e9 0c f1 ff ff       	jmp    80105767 <alltraps>
+
+8010665b <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+8010665b:	6a 00                	push   $0x0
+  pushl $251
+8010665d:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80106662:	e9 00 f1 ff ff       	jmp    80105767 <alltraps>
+
+80106667 <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+80106667:	6a 00                	push   $0x0
+  pushl $252
+80106669:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+8010666e:	e9 f4 f0 ff ff       	jmp    80105767 <alltraps>
+
+80106673 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80106673:	6a 00                	push   $0x0
+  pushl $253
+80106675:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+8010667a:	e9 e8 f0 ff ff       	jmp    80105767 <alltraps>
+
+8010667f <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+8010667f:	6a 00                	push   $0x0
+  pushl $254
+80106681:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+80106686:	e9 dc f0 ff ff       	jmp    80105767 <alltraps>
+
+8010668b <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+8010668b:	6a 00                	push   $0x0
+  pushl $255
+8010668d:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80106692:	e9 d0 f0 ff ff       	jmp    80105767 <alltraps>
+80106697:	66 90                	xchg   %ax,%ax
+80106699:	66 90                	xchg   %ax,%ax
+8010669b:	66 90                	xchg   %ax,%ax
+8010669d:	66 90                	xchg   %ax,%ax
+8010669f:	90                   	nop
+
+801066a0 <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+801066a0:	55                   	push   %ebp
+801066a1:	89 e5                	mov    %esp,%ebp
+801066a3:	57                   	push   %edi
+801066a4:	56                   	push   %esi
+801066a5:	53                   	push   %ebx
+801066a6:	89 d3                	mov    %edx,%ebx
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+801066a8:	c1 ea 16             	shr    $0x16,%edx
+801066ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+801066ae:	83 ec 0c             	sub    $0xc,%esp
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+  if(*pde & PTE_P){
+801066b1:	8b 07                	mov    (%edi),%eax
+801066b3:	a8 01                	test   $0x1,%al
+801066b5:	74 29                	je     801066e0 <walkpgdir+0x40>
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+801066b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801066bc:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+}
+801066c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+801066c5:	c1 eb 0a             	shr    $0xa,%ebx
+801066c8:	81 e3 fc 0f 00 00    	and    $0xffc,%ebx
+801066ce:	8d 04 1e             	lea    (%esi,%ebx,1),%eax
+}
+801066d1:	5b                   	pop    %ebx
+801066d2:	5e                   	pop    %esi
+801066d3:	5f                   	pop    %edi
+801066d4:	5d                   	pop    %ebp
+801066d5:	c3                   	ret    
+801066d6:	8d 76 00             	lea    0x0(%esi),%esi
+801066d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+  pde = &pgdir[PDX(va)];
+  if(*pde & PTE_P){
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+  } else {
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+801066e0:	85 c9                	test   %ecx,%ecx
+801066e2:	74 2c                	je     80106710 <walkpgdir+0x70>
+801066e4:	e8 97 bd ff ff       	call   80102480 <kalloc>
+801066e9:	85 c0                	test   %eax,%eax
+801066eb:	89 c6                	mov    %eax,%esi
+801066ed:	74 21                	je     80106710 <walkpgdir+0x70>
+      return 0;
+    // Make sure all those PTE_P bits are zero.
+    memset(pgtab, 0, PGSIZE);
+801066ef:	83 ec 04             	sub    $0x4,%esp
+801066f2:	68 00 10 00 00       	push   $0x1000
+801066f7:	6a 00                	push   $0x0
+801066f9:	50                   	push   %eax
+801066fa:	e8 11 dd ff ff       	call   80104410 <memset>
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+801066ff:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106705:	83 c4 10             	add    $0x10,%esp
+80106708:	83 c8 07             	or     $0x7,%eax
+8010670b:	89 07                	mov    %eax,(%edi)
+8010670d:	eb b3                	jmp    801066c2 <walkpgdir+0x22>
+8010670f:	90                   	nop
+  }
+  return &pgtab[PTX(va)];
+}
+80106710:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  pde = &pgdir[PDX(va)];
+  if(*pde & PTE_P){
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+  } else {
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+      return 0;
+80106713:	31 c0                	xor    %eax,%eax
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+}
+80106715:	5b                   	pop    %ebx
+80106716:	5e                   	pop    %esi
+80106717:	5f                   	pop    %edi
+80106718:	5d                   	pop    %ebp
+80106719:	c3                   	ret    
+8010671a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106720 <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+80106720:	55                   	push   %ebp
+80106721:	89 e5                	mov    %esp,%ebp
+80106723:	57                   	push   %edi
+80106724:	56                   	push   %esi
+80106725:	53                   	push   %ebx
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+80106726:	89 d3                	mov    %edx,%ebx
+80106728:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+8010672e:	83 ec 1c             	sub    $0x1c,%esp
+80106731:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80106734:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106738:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010673b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106740:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+80106743:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106746:	29 df                	sub    %ebx,%edi
+80106748:	83 c8 01             	or     $0x1,%eax
+8010674b:	89 45 dc             	mov    %eax,-0x24(%ebp)
+8010674e:	eb 15                	jmp    80106765 <mappages+0x45>
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+80106750:	f6 00 01             	testb  $0x1,(%eax)
+80106753:	75 45                	jne    8010679a <mappages+0x7a>
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+80106755:	0b 75 dc             	or     -0x24(%ebp),%esi
+    if(a == last)
+80106758:	3b 5d e0             	cmp    -0x20(%ebp),%ebx
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+8010675b:	89 30                	mov    %esi,(%eax)
+    if(a == last)
+8010675d:	74 31                	je     80106790 <mappages+0x70>
+      break;
+    a += PGSIZE;
+8010675f:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+80106765:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106768:	b9 01 00 00 00       	mov    $0x1,%ecx
+8010676d:	89 da                	mov    %ebx,%edx
+8010676f:	8d 34 3b             	lea    (%ebx,%edi,1),%esi
+80106772:	e8 29 ff ff ff       	call   801066a0 <walkpgdir>
+80106777:	85 c0                	test   %eax,%eax
+80106779:	75 d5                	jne    80106750 <mappages+0x30>
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+}
+8010677b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+8010677e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+}
+80106783:	5b                   	pop    %ebx
+80106784:	5e                   	pop    %esi
+80106785:	5f                   	pop    %edi
+80106786:	5d                   	pop    %ebp
+80106787:	c3                   	ret    
+80106788:	90                   	nop
+80106789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106790:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    if(a == last)
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+80106793:	31 c0                	xor    %eax,%eax
+}
+80106795:	5b                   	pop    %ebx
+80106796:	5e                   	pop    %esi
+80106797:	5f                   	pop    %edi
+80106798:	5d                   	pop    %ebp
+80106799:	c3                   	ret    
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+      panic("remap");
+8010679a:	83 ec 0c             	sub    $0xc,%esp
+8010679d:	68 ec 78 10 80       	push   $0x801078ec
+801067a2:	e8 c9 9b ff ff       	call   80100370 <panic>
+801067a7:	89 f6                	mov    %esi,%esi
+801067a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+801067b0 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+801067b0:	55                   	push   %ebp
+801067b1:	89 e5                	mov    %esp,%ebp
+801067b3:	57                   	push   %edi
+801067b4:	56                   	push   %esi
+801067b5:	53                   	push   %ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+801067b6:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+801067bc:	89 c7                	mov    %eax,%edi
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+801067be:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+801067c4:	83 ec 1c             	sub    $0x1c,%esp
+801067c7:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+  for(; a  < oldsz; a += PGSIZE){
+801067ca:	39 d3                	cmp    %edx,%ebx
+801067cc:	73 66                	jae    80106834 <deallocuvm.part.0+0x84>
+801067ce:	89 d6                	mov    %edx,%esi
+801067d0:	eb 3d                	jmp    8010680f <deallocuvm.part.0+0x5f>
+801067d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    pte = walkpgdir(pgdir, (char*)a, 0);
+    if(!pte)
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+801067d8:	8b 10                	mov    (%eax),%edx
+801067da:	f6 c2 01             	test   $0x1,%dl
+801067dd:	74 26                	je     80106805 <deallocuvm.part.0+0x55>
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+801067df:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+801067e5:	74 58                	je     8010683f <deallocuvm.part.0+0x8f>
+        panic("kfree");
+      char *v = P2V(pa);
+      kfree(v);
+801067e7:	83 ec 0c             	sub    $0xc,%esp
+801067ea:	81 c2 00 00 00 80    	add    $0x80000000,%edx
+801067f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801067f3:	52                   	push   %edx
+801067f4:	e8 d7 ba ff ff       	call   801022d0 <kfree>
+      *pte = 0;
+801067f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801067fc:	83 c4 10             	add    $0x10,%esp
+801067ff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+  for(; a  < oldsz; a += PGSIZE){
+80106805:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+8010680b:	39 f3                	cmp    %esi,%ebx
+8010680d:	73 25                	jae    80106834 <deallocuvm.part.0+0x84>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+8010680f:	31 c9                	xor    %ecx,%ecx
+80106811:	89 da                	mov    %ebx,%edx
+80106813:	89 f8                	mov    %edi,%eax
+80106815:	e8 86 fe ff ff       	call   801066a0 <walkpgdir>
+    if(!pte)
+8010681a:	85 c0                	test   %eax,%eax
+8010681c:	75 ba                	jne    801067d8 <deallocuvm.part.0+0x28>
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+8010681e:	81 e3 00 00 c0 ff    	and    $0xffc00000,%ebx
+80106824:	81 c3 00 f0 3f 00    	add    $0x3ff000,%ebx
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+  for(; a  < oldsz; a += PGSIZE){
+8010682a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106830:	39 f3                	cmp    %esi,%ebx
+80106832:	72 db                	jb     8010680f <deallocuvm.part.0+0x5f>
+      kfree(v);
+      *pte = 0;
+    }
+  }
+  return newsz;
+}
+80106834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106837:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010683a:	5b                   	pop    %ebx
+8010683b:	5e                   	pop    %esi
+8010683c:	5f                   	pop    %edi
+8010683d:	5d                   	pop    %ebp
+8010683e:	c3                   	ret    
+    if(!pte)
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+        panic("kfree");
+8010683f:	83 ec 0c             	sub    $0xc,%esp
+80106842:	68 86 72 10 80       	push   $0x80107286
+80106847:	e8 24 9b ff ff       	call   80100370 <panic>
+8010684c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106850 <seginit>:
+
+// Set up CPU's kernel segment descriptors.
+// Run once on entry on each CPU.
+void
+seginit(void)
+{
+80106850:	55                   	push   %ebp
+80106851:	89 e5                	mov    %esp,%ebp
+80106853:	83 ec 18             	sub    $0x18,%esp
+
+  // Map "logical" addresses to virtual addresses using identity map.
+  // Cannot share a CODE descriptor for both kernel and user
+  // because it would have to have DPL_USR, but the CPU forbids
+  // an interrupt from CPL=0 to DPL=3.
+  c = &cpus[cpuid()];
+80106856:	e8 f5 ce ff ff       	call   80103750 <cpuid>
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+8010685b:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106861:	31 c9                	xor    %ecx,%ecx
+80106863:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80106868:	66 89 90 f8 27 11 80 	mov    %dx,-0x7feed808(%eax)
+8010686f:	66 89 88 fa 27 11 80 	mov    %cx,-0x7feed806(%eax)
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+80106876:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+8010687b:	31 c9                	xor    %ecx,%ecx
+8010687d:	66 89 90 00 28 11 80 	mov    %dx,-0x7feed800(%eax)
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80106884:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+  // Cannot share a CODE descriptor for both kernel and user
+  // because it would have to have DPL_USR, but the CPU forbids
+  // an interrupt from CPL=0 to DPL=3.
+  c = &cpus[cpuid()];
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+80106889:	66 89 88 02 28 11 80 	mov    %cx,-0x7feed7fe(%eax)
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80106890:	31 c9                	xor    %ecx,%ecx
+80106892:	66 89 90 08 28 11 80 	mov    %dx,-0x7feed7f8(%eax)
+80106899:	66 89 88 0a 28 11 80 	mov    %cx,-0x7feed7f6(%eax)
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+801068a0:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+801068a5:	31 c9                	xor    %ecx,%ecx
+801068a7:	66 89 90 10 28 11 80 	mov    %dx,-0x7feed7f0(%eax)
+  // Map "logical" addresses to virtual addresses using identity map.
+  // Cannot share a CODE descriptor for both kernel and user
+  // because it would have to have DPL_USR, but the CPU forbids
+  // an interrupt from CPL=0 to DPL=3.
+  c = &cpus[cpuid()];
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+801068ae:	c6 80 fc 27 11 80 00 	movb   $0x0,-0x7feed804(%eax)
+static inline void
+lgdt(struct segdesc *p, int size)
+{
+  volatile ushort pd[3];
+
+  pd[0] = size-1;
+801068b5:	ba 2f 00 00 00       	mov    $0x2f,%edx
+801068ba:	c6 80 fd 27 11 80 9a 	movb   $0x9a,-0x7feed803(%eax)
+801068c1:	c6 80 fe 27 11 80 cf 	movb   $0xcf,-0x7feed802(%eax)
+801068c8:	c6 80 ff 27 11 80 00 	movb   $0x0,-0x7feed801(%eax)
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+801068cf:	c6 80 04 28 11 80 00 	movb   $0x0,-0x7feed7fc(%eax)
+801068d6:	c6 80 05 28 11 80 92 	movb   $0x92,-0x7feed7fb(%eax)
+801068dd:	c6 80 06 28 11 80 cf 	movb   $0xcf,-0x7feed7fa(%eax)
+801068e4:	c6 80 07 28 11 80 00 	movb   $0x0,-0x7feed7f9(%eax)
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+801068eb:	c6 80 0c 28 11 80 00 	movb   $0x0,-0x7feed7f4(%eax)
+801068f2:	c6 80 0d 28 11 80 fa 	movb   $0xfa,-0x7feed7f3(%eax)
+801068f9:	c6 80 0e 28 11 80 cf 	movb   $0xcf,-0x7feed7f2(%eax)
+80106900:	c6 80 0f 28 11 80 00 	movb   $0x0,-0x7feed7f1(%eax)
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80106907:	66 89 88 12 28 11 80 	mov    %cx,-0x7feed7ee(%eax)
+8010690e:	c6 80 14 28 11 80 00 	movb   $0x0,-0x7feed7ec(%eax)
+80106915:	c6 80 15 28 11 80 f2 	movb   $0xf2,-0x7feed7eb(%eax)
+8010691c:	c6 80 16 28 11 80 cf 	movb   $0xcf,-0x7feed7ea(%eax)
+80106923:	c6 80 17 28 11 80 00 	movb   $0x0,-0x7feed7e9(%eax)
+  lgdt(c->gdt, sizeof(c->gdt));
+8010692a:	05 f0 27 11 80       	add    $0x801127f0,%eax
+8010692f:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  pd[1] = (uint)p;
+80106933:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80106937:	c1 e8 10             	shr    $0x10,%eax
+8010693a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+
+  asm volatile("lgdt (%0)" : : "r" (pd));
+8010693e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106941:	0f 01 10             	lgdtl  (%eax)
+}
+80106944:	c9                   	leave  
+80106945:	c3                   	ret    
+80106946:	8d 76 00             	lea    0x0(%esi),%esi
+80106949:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106950 <switchkvm>:
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106950:	a1 84 55 11 80       	mov    0x80115584,%eax
+
+// Switch h/w page table register to the kernel-only page table,
+// for when no process is running.
+void
+switchkvm(void)
+{
+80106955:	55                   	push   %ebp
+80106956:	89 e5                	mov    %esp,%ebp
+80106958:	05 00 00 00 80       	add    $0x80000000,%eax
+8010695d:	0f 22 d8             	mov    %eax,%cr3
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+}
+80106960:	5d                   	pop    %ebp
+80106961:	c3                   	ret    
+80106962:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106969:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106970 <switchuvm>:
+
+// Switch TSS and h/w page table to correspond to process p.
+void
+switchuvm(struct proc *p)
+{
+80106970:	55                   	push   %ebp
+80106971:	89 e5                	mov    %esp,%ebp
+80106973:	57                   	push   %edi
+80106974:	56                   	push   %esi
+80106975:	53                   	push   %ebx
+80106976:	83 ec 1c             	sub    $0x1c,%esp
+80106979:	8b 75 08             	mov    0x8(%ebp),%esi
+  if(p == 0)
+8010697c:	85 f6                	test   %esi,%esi
+8010697e:	0f 84 cd 00 00 00    	je     80106a51 <switchuvm+0xe1>
+    panic("switchuvm: no process");
+  if(p->kstack == 0)
+80106984:	8b 46 08             	mov    0x8(%esi),%eax
+80106987:	85 c0                	test   %eax,%eax
+80106989:	0f 84 dc 00 00 00    	je     80106a6b <switchuvm+0xfb>
+    panic("switchuvm: no kstack");
+  if(p->pgdir == 0)
+8010698f:	8b 7e 04             	mov    0x4(%esi),%edi
+80106992:	85 ff                	test   %edi,%edi
+80106994:	0f 84 c4 00 00 00    	je     80106a5e <switchuvm+0xee>
+    panic("switchuvm: no pgdir");
+
+  pushcli();
+8010699a:	e8 91 d8 ff ff       	call   80104230 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+8010699f:	e8 2c cd ff ff       	call   801036d0 <mycpu>
+801069a4:	89 c3                	mov    %eax,%ebx
+801069a6:	e8 25 cd ff ff       	call   801036d0 <mycpu>
+801069ab:	89 c7                	mov    %eax,%edi
+801069ad:	e8 1e cd ff ff       	call   801036d0 <mycpu>
+801069b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801069b5:	83 c7 08             	add    $0x8,%edi
+801069b8:	e8 13 cd ff ff       	call   801036d0 <mycpu>
+801069bd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801069c0:	83 c0 08             	add    $0x8,%eax
+801069c3:	ba 67 00 00 00       	mov    $0x67,%edx
+801069c8:	c1 e8 18             	shr    $0x18,%eax
+801069cb:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+801069d2:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+801069d9:	c6 83 9d 00 00 00 99 	movb   $0x99,0x9d(%ebx)
+801069e0:	c6 83 9e 00 00 00 40 	movb   $0x40,0x9e(%ebx)
+801069e7:	83 c1 08             	add    $0x8,%ecx
+801069ea:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+801069f0:	c1 e9 10             	shr    $0x10,%ecx
+801069f3:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+  mycpu()->gdt[SEG_TSS].s = 0;
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+  // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
+  // forbids I/O instructions (e.g., inb and outb) from user space
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+801069f9:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+    panic("switchuvm: no pgdir");
+
+  pushcli();
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+                                sizeof(mycpu()->ts)-1, 0);
+  mycpu()->gdt[SEG_TSS].s = 0;
+801069fe:	e8 cd cc ff ff       	call   801036d0 <mycpu>
+80106a03:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80106a0a:	e8 c1 cc ff ff       	call   801036d0 <mycpu>
+80106a0f:	b9 10 00 00 00       	mov    $0x10,%ecx
+80106a14:	66 89 48 10          	mov    %cx,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+80106a18:	e8 b3 cc ff ff       	call   801036d0 <mycpu>
+80106a1d:	8b 56 08             	mov    0x8(%esi),%edx
+80106a20:	8d 8a 00 10 00 00    	lea    0x1000(%edx),%ecx
+80106a26:	89 48 0c             	mov    %ecx,0xc(%eax)
+  // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
+  // forbids I/O instructions (e.g., inb and outb) from user space
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80106a29:	e8 a2 cc ff ff       	call   801036d0 <mycpu>
+80106a2e:	66 89 58 6e          	mov    %bx,0x6e(%eax)
+}
+
+static inline void
+ltr(ushort sel)
+{
+  asm volatile("ltr %0" : : "r" (sel));
+80106a32:	b8 28 00 00 00       	mov    $0x28,%eax
+80106a37:	0f 00 d8             	ltr    %ax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80106a3a:	8b 46 04             	mov    0x4(%esi),%eax
+80106a3d:	05 00 00 00 80       	add    $0x80000000,%eax
+80106a42:	0f 22 d8             	mov    %eax,%cr3
+  ltr(SEG_TSS << 3);
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+  popcli();
+}
+80106a45:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106a48:	5b                   	pop    %ebx
+80106a49:	5e                   	pop    %esi
+80106a4a:	5f                   	pop    %edi
+80106a4b:	5d                   	pop    %ebp
+  // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
+  // forbids I/O instructions (e.g., inb and outb) from user space
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+  ltr(SEG_TSS << 3);
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+  popcli();
+80106a4c:	e9 1f d8 ff ff       	jmp    80104270 <popcli>
+// Switch TSS and h/w page table to correspond to process p.
+void
+switchuvm(struct proc *p)
+{
+  if(p == 0)
+    panic("switchuvm: no process");
+80106a51:	83 ec 0c             	sub    $0xc,%esp
+80106a54:	68 f2 78 10 80       	push   $0x801078f2
+80106a59:	e8 12 99 ff ff       	call   80100370 <panic>
+  if(p->kstack == 0)
+    panic("switchuvm: no kstack");
+  if(p->pgdir == 0)
+    panic("switchuvm: no pgdir");
+80106a5e:	83 ec 0c             	sub    $0xc,%esp
+80106a61:	68 1d 79 10 80       	push   $0x8010791d
+80106a66:	e8 05 99 ff ff       	call   80100370 <panic>
+switchuvm(struct proc *p)
+{
+  if(p == 0)
+    panic("switchuvm: no process");
+  if(p->kstack == 0)
+    panic("switchuvm: no kstack");
+80106a6b:	83 ec 0c             	sub    $0xc,%esp
+80106a6e:	68 08 79 10 80       	push   $0x80107908
+80106a73:	e8 f8 98 ff ff       	call   80100370 <panic>
+80106a78:	90                   	nop
+80106a79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106a80 <inituvm>:
+
+// Load the initcode into address 0 of pgdir.
+// sz must be less than a page.
+void
+inituvm(pde_t *pgdir, char *init, uint sz)
+{
+80106a80:	55                   	push   %ebp
+80106a81:	89 e5                	mov    %esp,%ebp
+80106a83:	57                   	push   %edi
+80106a84:	56                   	push   %esi
+80106a85:	53                   	push   %ebx
+80106a86:	83 ec 1c             	sub    $0x1c,%esp
+80106a89:	8b 75 10             	mov    0x10(%ebp),%esi
+80106a8c:	8b 45 08             	mov    0x8(%ebp),%eax
+80106a8f:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *mem;
+
+  if(sz >= PGSIZE)
+80106a92:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+
+// Load the initcode into address 0 of pgdir.
+// sz must be less than a page.
+void
+inituvm(pde_t *pgdir, char *init, uint sz)
+{
+80106a98:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  char *mem;
+
+  if(sz >= PGSIZE)
+80106a9b:	77 49                	ja     80106ae6 <inituvm+0x66>
+    panic("inituvm: more than a page");
+  mem = kalloc();
+80106a9d:	e8 de b9 ff ff       	call   80102480 <kalloc>
+  memset(mem, 0, PGSIZE);
+80106aa2:	83 ec 04             	sub    $0x4,%esp
+{
+  char *mem;
+
+  if(sz >= PGSIZE)
+    panic("inituvm: more than a page");
+  mem = kalloc();
+80106aa5:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+80106aa7:	68 00 10 00 00       	push   $0x1000
+80106aac:	6a 00                	push   $0x0
+80106aae:	50                   	push   %eax
+80106aaf:	e8 5c d9 ff ff       	call   80104410 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+80106ab4:	58                   	pop    %eax
+80106ab5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106abb:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106ac0:	5a                   	pop    %edx
+80106ac1:	6a 06                	push   $0x6
+80106ac3:	50                   	push   %eax
+80106ac4:	31 d2                	xor    %edx,%edx
+80106ac6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106ac9:	e8 52 fc ff ff       	call   80106720 <mappages>
+  memmove(mem, init, sz);
+80106ace:	89 75 10             	mov    %esi,0x10(%ebp)
+80106ad1:	89 7d 0c             	mov    %edi,0xc(%ebp)
+80106ad4:	83 c4 10             	add    $0x10,%esp
+80106ad7:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80106ada:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106add:	5b                   	pop    %ebx
+80106ade:	5e                   	pop    %esi
+80106adf:	5f                   	pop    %edi
+80106ae0:	5d                   	pop    %ebp
+  if(sz >= PGSIZE)
+    panic("inituvm: more than a page");
+  mem = kalloc();
+  memset(mem, 0, PGSIZE);
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+  memmove(mem, init, sz);
+80106ae1:	e9 da d9 ff ff       	jmp    801044c0 <memmove>
+inituvm(pde_t *pgdir, char *init, uint sz)
+{
+  char *mem;
+
+  if(sz >= PGSIZE)
+    panic("inituvm: more than a page");
+80106ae6:	83 ec 0c             	sub    $0xc,%esp
+80106ae9:	68 31 79 10 80       	push   $0x80107931
+80106aee:	e8 7d 98 ff ff       	call   80100370 <panic>
+80106af3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106af9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106b00 <loaduvm>:
+
+// Load a program segment into pgdir.  addr must be page-aligned
+// and the pages from addr to addr+sz must already be mapped.
+int
+loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
+{
+80106b00:	55                   	push   %ebp
+80106b01:	89 e5                	mov    %esp,%ebp
+80106b03:	57                   	push   %edi
+80106b04:	56                   	push   %esi
+80106b05:	53                   	push   %ebx
+80106b06:	83 ec 0c             	sub    $0xc,%esp
+  uint i, pa, n;
+  pte_t *pte;
+
+  if((uint) addr % PGSIZE != 0)
+80106b09:	f7 45 0c ff 0f 00 00 	testl  $0xfff,0xc(%ebp)
+80106b10:	0f 85 91 00 00 00    	jne    80106ba7 <loaduvm+0xa7>
+    panic("loaduvm: addr must be page aligned");
+  for(i = 0; i < sz; i += PGSIZE){
+80106b16:	8b 75 18             	mov    0x18(%ebp),%esi
+80106b19:	31 db                	xor    %ebx,%ebx
+80106b1b:	85 f6                	test   %esi,%esi
+80106b1d:	75 1a                	jne    80106b39 <loaduvm+0x39>
+80106b1f:	eb 6f                	jmp    80106b90 <loaduvm+0x90>
+80106b21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b28:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106b2e:	81 ee 00 10 00 00    	sub    $0x1000,%esi
+80106b34:	39 5d 18             	cmp    %ebx,0x18(%ebp)
+80106b37:	76 57                	jbe    80106b90 <loaduvm+0x90>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80106b39:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106b3c:	8b 45 08             	mov    0x8(%ebp),%eax
+80106b3f:	31 c9                	xor    %ecx,%ecx
+80106b41:	01 da                	add    %ebx,%edx
+80106b43:	e8 58 fb ff ff       	call   801066a0 <walkpgdir>
+80106b48:	85 c0                	test   %eax,%eax
+80106b4a:	74 4e                	je     80106b9a <loaduvm+0x9a>
+      panic("loaduvm: address should exist");
+    pa = PTE_ADDR(*pte);
+80106b4c:	8b 00                	mov    (%eax),%eax
+    if(sz - i < PGSIZE)
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106b4e:	8b 4d 14             	mov    0x14(%ebp),%ecx
+    panic("loaduvm: addr must be page aligned");
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+      panic("loaduvm: address should exist");
+    pa = PTE_ADDR(*pte);
+    if(sz - i < PGSIZE)
+80106b51:	bf 00 10 00 00       	mov    $0x1000,%edi
+  if((uint) addr % PGSIZE != 0)
+    panic("loaduvm: addr must be page aligned");
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+      panic("loaduvm: address should exist");
+    pa = PTE_ADDR(*pte);
+80106b56:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+80106b5b:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106b61:	0f 46 fe             	cmovbe %esi,%edi
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80106b64:	01 d9                	add    %ebx,%ecx
+80106b66:	05 00 00 00 80       	add    $0x80000000,%eax
+80106b6b:	57                   	push   %edi
+80106b6c:	51                   	push   %ecx
+80106b6d:	50                   	push   %eax
+80106b6e:	ff 75 10             	pushl  0x10(%ebp)
+80106b71:	e8 ca ad ff ff       	call   80101940 <readi>
+80106b76:	83 c4 10             	add    $0x10,%esp
+80106b79:	39 c7                	cmp    %eax,%edi
+80106b7b:	74 ab                	je     80106b28 <loaduvm+0x28>
+      return -1;
+  }
+  return 0;
+}
+80106b7d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    if(sz - i < PGSIZE)
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+      return -1;
+80106b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  return 0;
+}
+80106b85:	5b                   	pop    %ebx
+80106b86:	5e                   	pop    %esi
+80106b87:	5f                   	pop    %edi
+80106b88:	5d                   	pop    %ebp
+80106b89:	c3                   	ret    
+80106b8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106b90:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    else
+      n = PGSIZE;
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+      return -1;
+  }
+  return 0;
+80106b93:	31 c0                	xor    %eax,%eax
+}
+80106b95:	5b                   	pop    %ebx
+80106b96:	5e                   	pop    %esi
+80106b97:	5f                   	pop    %edi
+80106b98:	5d                   	pop    %ebp
+80106b99:	c3                   	ret    
+
+  if((uint) addr % PGSIZE != 0)
+    panic("loaduvm: addr must be page aligned");
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+      panic("loaduvm: address should exist");
+80106b9a:	83 ec 0c             	sub    $0xc,%esp
+80106b9d:	68 4b 79 10 80       	push   $0x8010794b
+80106ba2:	e8 c9 97 ff ff       	call   80100370 <panic>
+{
+  uint i, pa, n;
+  pte_t *pte;
+
+  if((uint) addr % PGSIZE != 0)
+    panic("loaduvm: addr must be page aligned");
+80106ba7:	83 ec 0c             	sub    $0xc,%esp
+80106baa:	68 ec 79 10 80       	push   $0x801079ec
+80106baf:	e8 bc 97 ff ff       	call   80100370 <panic>
+80106bb4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106bba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80106bc0 <allocuvm>:
+
+// Allocate page tables and physical memory to grow process from oldsz to
+// newsz, which need not be page aligned.  Returns new size or 0 on error.
+int
+allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+80106bc0:	55                   	push   %ebp
+80106bc1:	89 e5                	mov    %esp,%ebp
+80106bc3:	57                   	push   %edi
+80106bc4:	56                   	push   %esi
+80106bc5:	53                   	push   %ebx
+80106bc6:	83 ec 0c             	sub    $0xc,%esp
+80106bc9:	8b 7d 10             	mov    0x10(%ebp),%edi
+  char *mem;
+  uint a;
+
+  if(newsz >= KERNBASE)
+80106bcc:	85 ff                	test   %edi,%edi
+80106bce:	0f 88 ca 00 00 00    	js     80106c9e <allocuvm+0xde>
+    return 0;
+  if(newsz < oldsz)
+80106bd4:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+    return oldsz;
+80106bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
+  char *mem;
+  uint a;
+
+  if(newsz >= KERNBASE)
+    return 0;
+  if(newsz < oldsz)
+80106bda:	0f 82 82 00 00 00    	jb     80106c62 <allocuvm+0xa2>
+    return oldsz;
+
+  a = PGROUNDUP(oldsz);
+80106be0:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80106be6:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; a < newsz; a += PGSIZE){
+80106bec:	39 df                	cmp    %ebx,%edi
+80106bee:	77 43                	ja     80106c33 <allocuvm+0x73>
+80106bf0:	e9 bb 00 00 00       	jmp    80106cb0 <allocuvm+0xf0>
+80106bf5:	8d 76 00             	lea    0x0(%esi),%esi
+    if(mem == 0){
+      cprintf("allocuvm out of memory\n");
+      deallocuvm(pgdir, newsz, oldsz);
+      return 0;
+    }
+    memset(mem, 0, PGSIZE);
+80106bf8:	83 ec 04             	sub    $0x4,%esp
+80106bfb:	68 00 10 00 00       	push   $0x1000
+80106c00:	6a 00                	push   $0x0
+80106c02:	50                   	push   %eax
+80106c03:	e8 08 d8 ff ff       	call   80104410 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+80106c08:	58                   	pop    %eax
+80106c09:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106c0f:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106c14:	5a                   	pop    %edx
+80106c15:	6a 06                	push   $0x6
+80106c17:	50                   	push   %eax
+80106c18:	89 da                	mov    %ebx,%edx
+80106c1a:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c1d:	e8 fe fa ff ff       	call   80106720 <mappages>
+80106c22:	83 c4 10             	add    $0x10,%esp
+80106c25:	85 c0                	test   %eax,%eax
+80106c27:	78 47                	js     80106c70 <allocuvm+0xb0>
+    return 0;
+  if(newsz < oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(oldsz);
+  for(; a < newsz; a += PGSIZE){
+80106c29:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106c2f:	39 df                	cmp    %ebx,%edi
+80106c31:	76 7d                	jbe    80106cb0 <allocuvm+0xf0>
+    mem = kalloc();
+80106c33:	e8 48 b8 ff ff       	call   80102480 <kalloc>
+    if(mem == 0){
+80106c38:	85 c0                	test   %eax,%eax
+  if(newsz < oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(oldsz);
+  for(; a < newsz; a += PGSIZE){
+    mem = kalloc();
+80106c3a:	89 c6                	mov    %eax,%esi
+    if(mem == 0){
+80106c3c:	75 ba                	jne    80106bf8 <allocuvm+0x38>
+      cprintf("allocuvm out of memory\n");
+80106c3e:	83 ec 0c             	sub    $0xc,%esp
+80106c41:	68 69 79 10 80       	push   $0x80107969
+80106c46:	e8 15 9a ff ff       	call   80100660 <cprintf>
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+  pte_t *pte;
+  uint a, pa;
+
+  if(newsz >= oldsz)
+80106c4b:	83 c4 10             	add    $0x10,%esp
+80106c4e:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106c51:	76 4b                	jbe    80106c9e <allocuvm+0xde>
+80106c53:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106c56:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c59:	89 fa                	mov    %edi,%edx
+80106c5b:	e8 50 fb ff ff       	call   801067b0 <deallocuvm.part.0>
+  for(; a < newsz; a += PGSIZE){
+    mem = kalloc();
+    if(mem == 0){
+      cprintf("allocuvm out of memory\n");
+      deallocuvm(pgdir, newsz, oldsz);
+      return 0;
+80106c60:	31 c0                	xor    %eax,%eax
+      kfree(mem);
+      return 0;
+    }
+  }
+  return newsz;
+}
+80106c62:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c65:	5b                   	pop    %ebx
+80106c66:	5e                   	pop    %esi
+80106c67:	5f                   	pop    %edi
+80106c68:	5d                   	pop    %ebp
+80106c69:	c3                   	ret    
+80106c6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      deallocuvm(pgdir, newsz, oldsz);
+      return 0;
+    }
+    memset(mem, 0, PGSIZE);
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+      cprintf("allocuvm out of memory (2)\n");
+80106c70:	83 ec 0c             	sub    $0xc,%esp
+80106c73:	68 81 79 10 80       	push   $0x80107981
+80106c78:	e8 e3 99 ff ff       	call   80100660 <cprintf>
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+  pte_t *pte;
+  uint a, pa;
+
+  if(newsz >= oldsz)
+80106c7d:	83 c4 10             	add    $0x10,%esp
+80106c80:	3b 7d 0c             	cmp    0xc(%ebp),%edi
+80106c83:	76 0d                	jbe    80106c92 <allocuvm+0xd2>
+80106c85:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106c88:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c8b:	89 fa                	mov    %edi,%edx
+80106c8d:	e8 1e fb ff ff       	call   801067b0 <deallocuvm.part.0>
+    }
+    memset(mem, 0, PGSIZE);
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+      cprintf("allocuvm out of memory (2)\n");
+      deallocuvm(pgdir, newsz, oldsz);
+      kfree(mem);
+80106c92:	83 ec 0c             	sub    $0xc,%esp
+80106c95:	56                   	push   %esi
+80106c96:	e8 35 b6 ff ff       	call   801022d0 <kfree>
+      return 0;
+80106c9b:	83 c4 10             	add    $0x10,%esp
+    }
+  }
+  return newsz;
+}
+80106c9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    memset(mem, 0, PGSIZE);
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+      cprintf("allocuvm out of memory (2)\n");
+      deallocuvm(pgdir, newsz, oldsz);
+      kfree(mem);
+      return 0;
+80106ca1:	31 c0                	xor    %eax,%eax
+    }
+  }
+  return newsz;
+}
+80106ca3:	5b                   	pop    %ebx
+80106ca4:	5e                   	pop    %esi
+80106ca5:	5f                   	pop    %edi
+80106ca6:	5d                   	pop    %ebp
+80106ca7:	c3                   	ret    
+80106ca8:	90                   	nop
+80106ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+  if(newsz < oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(oldsz);
+  for(; a < newsz; a += PGSIZE){
+80106cb3:	89 f8                	mov    %edi,%eax
+      kfree(mem);
+      return 0;
+    }
+  }
+  return newsz;
+}
+80106cb5:	5b                   	pop    %ebx
+80106cb6:	5e                   	pop    %esi
+80106cb7:	5f                   	pop    %edi
+80106cb8:	5d                   	pop    %ebp
+80106cb9:	c3                   	ret    
+80106cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106cc0 <deallocuvm>:
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+{
+80106cc0:	55                   	push   %ebp
+80106cc1:	89 e5                	mov    %esp,%ebp
+80106cc3:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106cc6:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106cc9:	8b 45 08             	mov    0x8(%ebp),%eax
+  pte_t *pte;
+  uint a, pa;
+
+  if(newsz >= oldsz)
+80106ccc:	39 d1                	cmp    %edx,%ecx
+80106cce:	73 10                	jae    80106ce0 <deallocuvm+0x20>
+      kfree(v);
+      *pte = 0;
+    }
+  }
+  return newsz;
+}
+80106cd0:	5d                   	pop    %ebp
+80106cd1:	e9 da fa ff ff       	jmp    801067b0 <deallocuvm.part.0>
+80106cd6:	8d 76 00             	lea    0x0(%esi),%esi
+80106cd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+80106ce0:	89 d0                	mov    %edx,%eax
+80106ce2:	5d                   	pop    %ebp
+80106ce3:	c3                   	ret    
+80106ce4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106cea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80106cf0 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+80106cf0:	55                   	push   %ebp
+80106cf1:	89 e5                	mov    %esp,%ebp
+80106cf3:	57                   	push   %edi
+80106cf4:	56                   	push   %esi
+80106cf5:	53                   	push   %ebx
+80106cf6:	83 ec 0c             	sub    $0xc,%esp
+80106cf9:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+80106cfc:	85 f6                	test   %esi,%esi
+80106cfe:	74 59                	je     80106d59 <freevm+0x69>
+80106d00:	31 c9                	xor    %ecx,%ecx
+80106d02:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106d07:	89 f0                	mov    %esi,%eax
+80106d09:	e8 a2 fa ff ff       	call   801067b0 <deallocuvm.part.0>
+80106d0e:	89 f3                	mov    %esi,%ebx
+80106d10:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80106d16:	eb 0f                	jmp    80106d27 <freevm+0x37>
+80106d18:	90                   	nop
+80106d19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d20:	83 c3 04             	add    $0x4,%ebx
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+80106d23:	39 fb                	cmp    %edi,%ebx
+80106d25:	74 23                	je     80106d4a <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+80106d27:	8b 03                	mov    (%ebx),%eax
+80106d29:	a8 01                	test   $0x1,%al
+80106d2b:	74 f3                	je     80106d20 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+      kfree(v);
+80106d2d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106d32:	83 ec 0c             	sub    $0xc,%esp
+80106d35:	83 c3 04             	add    $0x4,%ebx
+80106d38:	05 00 00 00 80       	add    $0x80000000,%eax
+80106d3d:	50                   	push   %eax
+80106d3e:	e8 8d b5 ff ff       	call   801022d0 <kfree>
+80106d43:	83 c4 10             	add    $0x10,%esp
+  uint i;
+
+  if(pgdir == 0)
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+80106d46:	39 fb                	cmp    %edi,%ebx
+80106d48:	75 dd                	jne    80106d27 <freevm+0x37>
+    if(pgdir[i] & PTE_P){
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+      kfree(v);
+    }
+  }
+  kfree((char*)pgdir);
+80106d4a:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80106d4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d50:	5b                   	pop    %ebx
+80106d51:	5e                   	pop    %esi
+80106d52:	5f                   	pop    %edi
+80106d53:	5d                   	pop    %ebp
+    if(pgdir[i] & PTE_P){
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+      kfree(v);
+    }
+  }
+  kfree((char*)pgdir);
+80106d54:	e9 77 b5 ff ff       	jmp    801022d0 <kfree>
+freevm(pde_t *pgdir)
+{
+  uint i;
+
+  if(pgdir == 0)
+    panic("freevm: no pgdir");
+80106d59:	83 ec 0c             	sub    $0xc,%esp
+80106d5c:	68 9d 79 10 80       	push   $0x8010799d
+80106d61:	e8 0a 96 ff ff       	call   80100370 <panic>
+80106d66:	8d 76 00             	lea    0x0(%esi),%esi
+80106d69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+80106d70 <setupkvm>:
+};
+
+// Set up kernel part of a page table.
+pde_t*
+setupkvm(void)
+{
+80106d70:	55                   	push   %ebp
+80106d71:	89 e5                	mov    %esp,%ebp
+80106d73:	56                   	push   %esi
+80106d74:	53                   	push   %ebx
+  pde_t *pgdir;
+  struct kmap *k;
+
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80106d75:	e8 06 b7 ff ff       	call   80102480 <kalloc>
+80106d7a:	85 c0                	test   %eax,%eax
+80106d7c:	74 6a                	je     80106de8 <setupkvm+0x78>
+    return 0;
+  memset(pgdir, 0, PGSIZE);
+80106d7e:	83 ec 04             	sub    $0x4,%esp
+80106d81:	89 c6                	mov    %eax,%esi
+  if (P2V(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80106d83:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+  pde_t *pgdir;
+  struct kmap *k;
+
+  if((pgdir = (pde_t*)kalloc()) == 0)
+    return 0;
+  memset(pgdir, 0, PGSIZE);
+80106d88:	68 00 10 00 00       	push   $0x1000
+80106d8d:	6a 00                	push   $0x0
+80106d8f:	50                   	push   %eax
+80106d90:	e8 7b d6 ff ff       	call   80104410 <memset>
+80106d95:	83 c4 10             	add    $0x10,%esp
+  if (P2V(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+80106d98:	8b 43 04             	mov    0x4(%ebx),%eax
+80106d9b:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80106d9e:	83 ec 08             	sub    $0x8,%esp
+80106da1:	8b 13                	mov    (%ebx),%edx
+80106da3:	ff 73 0c             	pushl  0xc(%ebx)
+80106da6:	50                   	push   %eax
+80106da7:	29 c1                	sub    %eax,%ecx
+80106da9:	89 f0                	mov    %esi,%eax
+80106dab:	e8 70 f9 ff ff       	call   80106720 <mappages>
+80106db0:	83 c4 10             	add    $0x10,%esp
+80106db3:	85 c0                	test   %eax,%eax
+80106db5:	78 19                	js     80106dd0 <setupkvm+0x60>
+  if((pgdir = (pde_t*)kalloc()) == 0)
+    return 0;
+  memset(pgdir, 0, PGSIZE);
+  if (P2V(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80106db7:	83 c3 10             	add    $0x10,%ebx
+80106dba:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80106dc0:	75 d6                	jne    80106d98 <setupkvm+0x28>
+80106dc2:	89 f0                	mov    %esi,%eax
+                (uint)k->phys_start, k->perm) < 0) {
+      freevm(pgdir);
+      return 0;
+    }
+  return pgdir;
+}
+80106dc4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106dc7:	5b                   	pop    %ebx
+80106dc8:	5e                   	pop    %esi
+80106dc9:	5d                   	pop    %ebp
+80106dca:	c3                   	ret    
+80106dcb:	90                   	nop
+80106dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if (P2V(PHYSTOP) > (void*)DEVSPACE)
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+                (uint)k->phys_start, k->perm) < 0) {
+      freevm(pgdir);
+80106dd0:	83 ec 0c             	sub    $0xc,%esp
+80106dd3:	56                   	push   %esi
+80106dd4:	e8 17 ff ff ff       	call   80106cf0 <freevm>
+      return 0;
+80106dd9:	83 c4 10             	add    $0x10,%esp
+    }
+  return pgdir;
+}
+80106ddc:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    panic("PHYSTOP too high");
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+                (uint)k->phys_start, k->perm) < 0) {
+      freevm(pgdir);
+      return 0;
+80106ddf:	31 c0                	xor    %eax,%eax
+    }
+  return pgdir;
+}
+80106de1:	5b                   	pop    %ebx
+80106de2:	5e                   	pop    %esi
+80106de3:	5d                   	pop    %ebp
+80106de4:	c3                   	ret    
+80106de5:	8d 76 00             	lea    0x0(%esi),%esi
+{
+  pde_t *pgdir;
+  struct kmap *k;
+
+  if((pgdir = (pde_t*)kalloc()) == 0)
+    return 0;
+80106de8:	31 c0                	xor    %eax,%eax
+80106dea:	eb d8                	jmp    80106dc4 <setupkvm+0x54>
+80106dec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106df0 <kvmalloc>:
+
+// Allocate one page table for the machine for the kernel address
+// space for scheduler processes.
+void
+kvmalloc(void)
+{
+80106df0:	55                   	push   %ebp
+80106df1:	89 e5                	mov    %esp,%ebp
+80106df3:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+80106df6:	e8 75 ff ff ff       	call   80106d70 <setupkvm>
+80106dfb:	a3 84 55 11 80       	mov    %eax,0x80115584
+80106e00:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e05:	0f 22 d8             	mov    %eax,%cr3
+  switchkvm();
+}
+80106e08:	c9                   	leave  
+80106e09:	c3                   	ret    
+80106e0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106e10 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+80106e10:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80106e11:	31 c9                	xor    %ecx,%ecx
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+80106e13:	89 e5                	mov    %esp,%ebp
+80106e15:	83 ec 08             	sub    $0x8,%esp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80106e18:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106e1b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106e1e:	e8 7d f8 ff ff       	call   801066a0 <walkpgdir>
+  if(pte == 0)
+80106e23:	85 c0                	test   %eax,%eax
+80106e25:	74 05                	je     80106e2c <clearpteu+0x1c>
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+80106e27:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+80106e2a:	c9                   	leave  
+80106e2b:	c3                   	ret    
+{
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+  if(pte == 0)
+    panic("clearpteu");
+80106e2c:	83 ec 0c             	sub    $0xc,%esp
+80106e2f:	68 ae 79 10 80       	push   $0x801079ae
+80106e34:	e8 37 95 ff ff       	call   80100370 <panic>
+80106e39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106e40 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+80106e40:	55                   	push   %ebp
+80106e41:	89 e5                	mov    %esp,%ebp
+80106e43:	57                   	push   %edi
+80106e44:	56                   	push   %esi
+80106e45:	53                   	push   %ebx
+80106e46:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+80106e49:	e8 22 ff ff ff       	call   80106d70 <setupkvm>
+80106e4e:	85 c0                	test   %eax,%eax
+80106e50:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106e53:	0f 84 c5 00 00 00    	je     80106f1e <copyuvm+0xde>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+80106e59:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106e5c:	85 c9                	test   %ecx,%ecx
+80106e5e:	0f 84 9c 00 00 00    	je     80106f00 <copyuvm+0xc0>
+80106e64:	31 ff                	xor    %edi,%edi
+80106e66:	eb 4a                	jmp    80106eb2 <copyuvm+0x72>
+80106e68:	90                   	nop
+80106e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+80106e70:	83 ec 04             	sub    $0x4,%esp
+80106e73:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+80106e79:	68 00 10 00 00       	push   $0x1000
+80106e7e:	53                   	push   %ebx
+80106e7f:	50                   	push   %eax
+80106e80:	e8 3b d6 ff ff       	call   801044c0 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+80106e85:	58                   	pop    %eax
+80106e86:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
+80106e8c:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106e91:	5a                   	pop    %edx
+80106e92:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106e95:	50                   	push   %eax
+80106e96:	89 fa                	mov    %edi,%edx
+80106e98:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106e9b:	e8 80 f8 ff ff       	call   80106720 <mappages>
+80106ea0:	83 c4 10             	add    $0x10,%esp
+80106ea3:	85 c0                	test   %eax,%eax
+80106ea5:	78 69                	js     80106f10 <copyuvm+0xd0>
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+80106ea7:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80106ead:	39 7d 0c             	cmp    %edi,0xc(%ebp)
+80106eb0:	76 4e                	jbe    80106f00 <copyuvm+0xc0>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80106eb2:	8b 45 08             	mov    0x8(%ebp),%eax
+80106eb5:	31 c9                	xor    %ecx,%ecx
+80106eb7:	89 fa                	mov    %edi,%edx
+80106eb9:	e8 e2 f7 ff ff       	call   801066a0 <walkpgdir>
+80106ebe:	85 c0                	test   %eax,%eax
+80106ec0:	74 6d                	je     80106f2f <copyuvm+0xef>
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+80106ec2:	8b 00                	mov    (%eax),%eax
+80106ec4:	a8 01                	test   $0x1,%al
+80106ec6:	74 5a                	je     80106f22 <copyuvm+0xe2>
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+80106ec8:	89 c3                	mov    %eax,%ebx
+    flags = PTE_FLAGS(*pte);
+80106eca:	25 ff 0f 00 00       	and    $0xfff,%eax
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+80106ecf:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+    flags = PTE_FLAGS(*pte);
+80106ed5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if((mem = kalloc()) == 0)
+80106ed8:	e8 a3 b5 ff ff       	call   80102480 <kalloc>
+80106edd:	85 c0                	test   %eax,%eax
+80106edf:	89 c6                	mov    %eax,%esi
+80106ee1:	75 8d                	jne    80106e70 <copyuvm+0x30>
+    }
+  }
+  return d;
+
+bad:
+  freevm(d);
+80106ee3:	83 ec 0c             	sub    $0xc,%esp
+80106ee6:	ff 75 e0             	pushl  -0x20(%ebp)
+80106ee9:	e8 02 fe ff ff       	call   80106cf0 <freevm>
+  return 0;
+80106eee:	83 c4 10             	add    $0x10,%esp
+80106ef1:	31 c0                	xor    %eax,%eax
+}
+80106ef3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106ef6:	5b                   	pop    %ebx
+80106ef7:	5e                   	pop    %esi
+80106ef8:	5f                   	pop    %edi
+80106ef9:	5d                   	pop    %ebp
+80106efa:	c3                   	ret    
+80106efb:	90                   	nop
+80106efc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+80106f00:	8b 45 e0             	mov    -0x20(%ebp),%eax
+  return d;
+
+bad:
+  freevm(d);
+  return 0;
+}
+80106f03:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106f06:	5b                   	pop    %ebx
+80106f07:	5e                   	pop    %esi
+80106f08:	5f                   	pop    %edi
+80106f09:	5d                   	pop    %ebp
+80106f0a:	c3                   	ret    
+80106f0b:	90                   	nop
+80106f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+      kfree(mem);
+80106f10:	83 ec 0c             	sub    $0xc,%esp
+80106f13:	56                   	push   %esi
+80106f14:	e8 b7 b3 ff ff       	call   801022d0 <kfree>
+      goto bad;
+80106f19:	83 c4 10             	add    $0x10,%esp
+80106f1c:	eb c5                	jmp    80106ee3 <copyuvm+0xa3>
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+    return 0;
+80106f1e:	31 c0                	xor    %eax,%eax
+80106f20:	eb d1                	jmp    80106ef3 <copyuvm+0xb3>
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+80106f22:	83 ec 0c             	sub    $0xc,%esp
+80106f25:	68 d2 79 10 80       	push   $0x801079d2
+80106f2a:	e8 41 94 ff ff       	call   80100370 <panic>
+
+  if((d = setupkvm()) == 0)
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+80106f2f:	83 ec 0c             	sub    $0xc,%esp
+80106f32:	68 b8 79 10 80       	push   $0x801079b8
+80106f37:	e8 34 94 ff ff       	call   80100370 <panic>
+80106f3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106f40 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+80106f40:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80106f41:	31 c9                	xor    %ecx,%ecx
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+80106f43:	89 e5                	mov    %esp,%ebp
+80106f45:	83 ec 08             	sub    $0x8,%esp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80106f48:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106f4b:	8b 45 08             	mov    0x8(%ebp),%eax
+80106f4e:	e8 4d f7 ff ff       	call   801066a0 <walkpgdir>
+  if((*pte & PTE_P) == 0)
+80106f53:	8b 00                	mov    (%eax),%eax
+    return 0;
+  if((*pte & PTE_U) == 0)
+80106f55:	89 c2                	mov    %eax,%edx
+80106f57:	83 e2 05             	and    $0x5,%edx
+80106f5a:	83 fa 05             	cmp    $0x5,%edx
+80106f5d:	75 11                	jne    80106f70 <uva2ka+0x30>
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+80106f5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+}
+80106f64:	c9                   	leave  
+  pte = walkpgdir(pgdir, uva, 0);
+  if((*pte & PTE_P) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+80106f65:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+80106f6a:	c3                   	ret    
+80106f6b:	90                   	nop
+80106f6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+  pte = walkpgdir(pgdir, uva, 0);
+  if((*pte & PTE_P) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+80106f70:	31 c0                	xor    %eax,%eax
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+80106f72:	c9                   	leave  
+80106f73:	c3                   	ret    
+80106f74:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106f7a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+80106f80 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80106f80:	55                   	push   %ebp
+80106f81:	89 e5                	mov    %esp,%ebp
+80106f83:	57                   	push   %edi
+80106f84:	56                   	push   %esi
+80106f85:	53                   	push   %ebx
+80106f86:	83 ec 1c             	sub    $0x1c,%esp
+80106f89:	8b 5d 14             	mov    0x14(%ebp),%ebx
+80106f8c:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106f8f:	8b 7d 10             	mov    0x10(%ebp),%edi
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80106f92:	85 db                	test   %ebx,%ebx
+80106f94:	75 40                	jne    80106fd6 <copyout+0x56>
+80106f96:	eb 70                	jmp    80107008 <copyout+0x88>
+80106f98:	90                   	nop
+80106f99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+80106fa0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106fa3:	89 f1                	mov    %esi,%ecx
+80106fa5:	29 d1                	sub    %edx,%ecx
+80106fa7:	81 c1 00 10 00 00    	add    $0x1000,%ecx
+80106fad:	39 d9                	cmp    %ebx,%ecx
+80106faf:	0f 47 cb             	cmova  %ebx,%ecx
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80106fb2:	29 f2                	sub    %esi,%edx
+80106fb4:	83 ec 04             	sub    $0x4,%esp
+80106fb7:	01 d0                	add    %edx,%eax
+80106fb9:	51                   	push   %ecx
+80106fba:	57                   	push   %edi
+80106fbb:	50                   	push   %eax
+80106fbc:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80106fbf:	e8 fc d4 ff ff       	call   801044c0 <memmove>
+    len -= n;
+    buf += n;
+80106fc4:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+{
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80106fc7:	83 c4 10             	add    $0x10,%esp
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+    len -= n;
+    buf += n;
+    va = va0 + PGSIZE;
+80106fca:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    n = PGSIZE - (va - va0);
+    if(n > len)
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+    len -= n;
+    buf += n;
+80106fd0:	01 cf                	add    %ecx,%edi
+{
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80106fd2:	29 cb                	sub    %ecx,%ebx
+80106fd4:	74 32                	je     80107008 <copyout+0x88>
+    va0 = (uint)PGROUNDDOWN(va);
+80106fd6:	89 d6                	mov    %edx,%esi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80106fd8:	83 ec 08             	sub    $0x8,%esp
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+    va0 = (uint)PGROUNDDOWN(va);
+80106fdb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80106fde:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80106fe4:	56                   	push   %esi
+80106fe5:	ff 75 08             	pushl  0x8(%ebp)
+80106fe8:	e8 53 ff ff ff       	call   80106f40 <uva2ka>
+    if(pa0 == 0)
+80106fed:	83 c4 10             	add    $0x10,%esp
+80106ff0:	85 c0                	test   %eax,%eax
+80106ff2:	75 ac                	jne    80106fa0 <copyout+0x20>
+    len -= n;
+    buf += n;
+    va = va0 + PGSIZE;
+  }
+  return 0;
+}
+80106ff4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  buf = (char*)p;
+  while(len > 0){
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+80106ff7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    len -= n;
+    buf += n;
+    va = va0 + PGSIZE;
+  }
+  return 0;
+}
+80106ffc:	5b                   	pop    %ebx
+80106ffd:	5e                   	pop    %esi
+80106ffe:	5f                   	pop    %edi
+80106fff:	5d                   	pop    %ebp
+80107000:	c3                   	ret    
+80107001:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107008:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    memmove(pa0 + (va - va0), buf, n);
+    len -= n;
+    buf += n;
+    va = va0 + PGSIZE;
+  }
+  return 0;
+8010700b:	31 c0                	xor    %eax,%eax
+}
+8010700d:	5b                   	pop    %ebx
+8010700e:	5e                   	pop    %esi
+8010700f:	5f                   	pop    %edi
+80107010:	5d                   	pop    %ebp
+80107011:	c3                   	ret    
diff -ruN ./xv6-public-src/kernel.sym ./xv6-public/kernel.sym
--- ./xv6-public-src/kernel.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kernel.sym	2019-11-28 18:00:21.504985137 +0200
@@ -0,0 +1,525 @@
+80100000 .text
+80107020 .rodata
+80107a10 .stab
+80107a11 .stabstr
+80108000 .data
+8010a520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .debug_str
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010a520 cons
+8010a558 panicked
+801003f0 consputc
+80100580 printint
+80107090 digits.1605
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+80101100 bfree
+80101170 balloc
+80101280 iget
+80101350 bmap
+80101c40 namex
+00000000 ide.c
+80101ef0 idestart
+8010a580 idelock
+8010a560 havedisk1
+8010a564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8010a5b4 shift.1446
+801073c0 shiftcode
+801072c0 togglecode
+801072a0 charcode.1447
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
+00000000 lapic.c
+00000000 log.c
+801029a0 install_trans
+80102a40 write_head
+00000000 main.c
+80102df0 mpmain
+80102e30 mpenter
+00000000 mp.c
+80102f70 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+801035a0 allocproc
+8010a000 first.1647
+8010a5b8 initproc
+80107680 states.1673
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+80107700 syscalls
+00000000 sysfile.c
+80104940 create
+80104ae0 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80105aa0 uartgetc
+8010a5bc uart
+80105ad0 uartputc.part.0
+00000000 vm.c
+801066a0 walkpgdir
+80106720 mappages
+801067b0 deallocuvm.part.0
+8010a420 kmap
+80100270 consoleread
+801065ef vector242
+80106046 vector119
+8010000c entry
+80105f26 vector87
+80105f1d vector86
+80104610 safestrcpy
+80104c90 sys_close
+8010665b vector251
+80105f4a vector91
+80105d40 vector33
+8010622f vector162
+80103cd0 yield
+80112680 log
+80112640 kmem
+80106493 vector213
+80105fe3 vector108
+80105b20 uartinit
+80105d9a vector43
+80102700 lapiceoi
+80106253 vector165
+80114c60 calllock
+80106343 vector185
+801021e0 ioapicinit
+80106022 vector115
+80100f50 fileread
+80106061 vector122
+801055b0 sys_sbrk
+80112760 ioapicid
+801061e7 vector156
+80106613 vector245
+80112634 ioapic
+80106373 vector189
+80105c64 vector7
+80105e3c vector61
+80105cef vector24
+80105ffe vector111
+801063f7 vector200
+80105e72 vector67
+8010610f vector138
+80105eb1 vector74
+80103ae0 sched
+801044c0 memmove
+80105e18 vector57
+80104860 syscall
+8010649f vector214
+80105f92 vector99
+80103750 cpuid
+80101a40 writei
+80106133 vector141
+80105530 sys_fork
+8010b5c0 bcache
+801062a7 vector172
+801065e3 vector241
+801041d0 getcallerpcs
+801051e0 sys_mkdir
+80106673 vector253
+80105c40 vector3
+80105c37 vector2
+80101b70 namecmp
+8010653b vector227
+8010646f vector210
+80104820 argstr
+80106517 vector224
+80105d88 vector41
+80100660 cprintf
+80100de0 filedup
+80101eb0 namei
+80105cd4 vector21
+80100040 binit
+801062e3 vector177
+8010603d vector118
+80105e8d vector70
+80105e84 vector69
+801065b3 vector237
+80105e57 vector64
+80105d0a vector27
+801060c7 vector132
+8010634f vector186
+80104bb0 sys_read
+801064c3 vector217
+801046d0 fetchint
+80106d70 setupkvm
+80104530 memcpy
+80106cf0 freevm
+80105c2e vector1
+801062ef vector178
+80105d6d vector38
+801022d0 kfree
+801065bf vector238
+801036d0 mycpu
+80101790 iput
+801060d3 vector133
+80105ea8 vector73
+80106157 vector144
+8010667f vector254
+80101420 readsb
+8010a004 nextpid
+80105fa4 vector101
+8010647b vector211
+80102ff0 mpinit
+801062bf vector174
+801065fb vector243
+80100d50 fileinit
+801041b0 initlock
+80106097 vector128
+80106f80 copyout
+80105ef0 vector81
+80103d20 sleep
+80102720 microdelay
+80105c92 vector13
+80105de2 vector51
+80105ca9 vector16
+8010ff20 input
+801065d7 vector240
+80105dfd vector54
+80105cc2 vector19
+80105f53 vector92
+80106607 vector244
+80101910 stati
+80106127 vector140
+80105560 sys_kill
+80105dac vector45
+80105ede vector79
+801032e0 pipeclose
+80106553 vector229
+801061ff vector158
+80104ce0 sys_fstat
+80100600 consolewrite
+80105d76 vector39
+80106277 vector168
+80102bb0 end_op
+80105d52 vector35
+80106010 vector113
+80102360 freerange
+8010607c vector125
+80106bc0 allocuvm
+8010577f trapret
+801064b7 vector216
+80105e4e vector63
+80105d01 vector26
+801063a3 vector193
+801025e0 lapicinit
+801063c7 vector196
+80106463 vector209
+80105c49 vector4
+8010628f vector170
+8010a5c0 stack
+801060f7 vector136
+80105c7d vector10
+8010643f vector206
+80101740 iunlock
+80105600 sys_sleep
+8010668b vector255
+80106313 vector181
+80105e2a vector59
+80105f14 vector85
+80105f0b vector84
+8010632b vector183
+8010620b vector159
+80106487 vector212
+80104d30 sys_link
+80105dbe vector47
+80106547 vector228
+80105d91 vector42
+80106019 vector114
+80106f40 uva2ka
+801062cb vector175
+8010614b vector143
+80100d70 filealloc
+80103ed0 wakeup
+801060af vector130
+8010661f vector246
+80105c74 vector9
+8010613f vector142
+80105f9b vector100
+80106403 vector201
+80106e10 clearpteu
+80103770 myproc
+80105790 tvinit
+80105e33 vector60
+80105ce6 vector23
+80101630 idup
+801065a7 vector236
+801025c0 kbdintr
+80105080 sys_open
+8010656b vector231
+80105e69 vector66
+80105d1c vector29
+80101940 readi
+801060eb vector135
+801007f0 consoleintr
+80103f30 kill
+80105ecc vector77
+801014f0 ialloc
+80106307 vector180
+80115584 kpgdir
+80106457 vector208
+801027c0 cmostime
+80105c10 uartintr
+80105f89 vector98
+80105f80 vector97
+801062d7 vector176
+801063af vector194
+80105d37 vector32
+80115588 end
+801063eb vector199
+801060bb vector131
+80106667 vector252
+80100fe0 filewrite
+80105c25 vector0
+80104770 argint
+801009f0 exec
+80106163 vector145
+80104c20 sys_write
+801043c0 release
+801056f0 sys_callcount
+80104710 fetchstr
+80105fda vector107
+80105d7f vector40
+80103de0 wait
+80105fad vector102
+80109000 entrypgdir
+0010000c _start
+80105e0f vector56
+80105e7b vector68
+80105c5b vector6
+8010a48c _binary_initcode_end
+80100000 multiboot_header
+801060a3 vector129
+80103a30 scheduler
+80101b90 dirlookup
+801063d3 vector197
+80100e30 fileclose
+80102b40 begin_op
+801061b7 vector152
+80106df0 kvmalloc
+8010655f vector230
+80104540 strncmp
+80105d64 vector37
+80106433 vector205
+80106223 vector161
+80114d40 tickslock
+80103380 pipewrite
+80114ca0 readslock
+801045b0 strncpy
+801056e0 sys_readcount
+80105e96 vector71
+80106e40 copyuvm
+8010ffc0 ftable
+80106217 vector160
+801047c0 argptr
+801064ab vector215
+801061f3 vector157
+80104b50 sys_dup
+80106007 vector112
+80100370 panic
+80103660 forkret
+8010631f vector182
+80105c8b vector12
+80104460 memcmp
+801024f0 kbdgetc
+80105fec vector109
+80105ccb vector20
+80103910 fork
+80105df4 vector53
+80105cb9 vector18
+0000008a _binary_entryother_size
+80112780 cpus
+80104120 releasesleep
+80105f6e vector95
+801042e0 holding
+801109c0 sb
+80104310 acquire
+8010652f vector226
+80101ed0 nameiparent
+80105dd0 vector49
+80105da3 vector44
+8011267c lapic
+80105ed5 vector78
+80105767 alltraps
+801062b3 vector173
+80106034 vector117
+80105ef9 vector82
+801064ff vector222
+80105c6d vector8
+80106193 vector149
+801015b0 iupdate
+80108000 data
+80104410 memset
+80106577 vector232
+80102e50 main
+80106950 switchkvm
+80114cd4 reads
+80105fd1 vector106
+801064e7 vector220
+80105f41 vector90
+8010623b vector163
+8010658f vector234
+80102d20 log_write
+801040c0 acquiresleep
+80104e90 sys_unlink
+80105e45 vector62
+80105cf8 vector25
+801063df vector198
+8010604f vector120
+8010a48c _binary_entryother_start
+801023b0 kinit1
+80105dd9 vector50
+80105ca0 vector15
+801061ab vector151
+80105f02 vector83
+80105f38 vector89
+80105f2f vector88
+80105860 trap
+801056b0 sys_uptime
+801062fb vector179
+80105d49 vector34
+80114ce0 calls
+80105db5 vector46
+801060df vector134
+8010650b vector223
+80114d80 idt
+801064cf vector218
+801036b0 pinit
+80104680 scinit
+80106cc0 deallocuvm
+80106523 vector225
+801026e0 lapicid
+8010635b vector187
+80103890 growproc
+80104160 holdingsleep
+80112d00 ncpu
+80105d25 vector30
+801037a0 userinit
+801000d0 bread
+8010608e vector127
+80103480 piperead
+80115580 ticks
+80106397 vector192
+8010625f vector166
+801009a0 consoleinit
+80105ec3 vector76
+80105eba vector75
+80102040 ideintr
+801063bb vector195
+8010619f vector150
+80105e21 vector58
+80106637 vector248
+8010606a vector123
+80105f77 vector96
+80105d2e vector31
+8010641b vector203
+8010611b vector139
+801061c3 vector153
+80106247 vector164
+80103fc0 procdump
+80106058 vector121
+80105be0 uartputc
+80105c52 vector5
+8010626b vector167
+801061db vector155
+80106643 vector249
+801001e0 brelse
+8010664f vector250
+80106073 vector124
+80105ff5 vector110
+80106427 vector204
+80101660 ilock
+80105380 sys_exec
+80106103 vector137
+8010a460 _binary_initcode_start
+8010466b swtch
+8010662b vector247
+80105cdd vector22
+8010640f vector202
+80106850 seginit
+801018f0 iunlockput
+80105e9f vector72
+80105e06 vector55
+80106085 vector126
+80105e60 vector65
+80105d13 vector28
+8010a516 _binary_entryother_end
+80106283 vector169
+801001a0 bwrite
+80106583 vector233
+80105830 idtinit
+80103ba0 exit
+80105550 sys_wait
+80105540 sys_exit
+80101df0 dirlink
+0000002c _binary_initcode_size
+8010617b vector147
+80104080 initsleeplock
+80101fc0 ideinit
+80106b00 loaduvm
+80105fbf vector104
+8010602b vector116
+80112d20 ptable
+80102290 ioapicenable
+80104270 popcli
+8010a008 vectors
+80105deb vector52
+80105cb2 vector17
+80106337 vector184
+80104650 strlen
+80105460 sys_pipe
+80101460 iinit
+801031c0 picinit
+8010644b vector207
+80106a80 inituvm
+8010637f vector190
+801065cb vector239
+80105f65 vector94
+80105f5c vector93
+80102aa0 initlog
+80106367 vector188
+80105dc7 vector48
+801020e0 iderw
+801064db vector219
+80106187 vector148
+801064f3 vector221
+80102480 kalloc
+80110960 devsw
+801055a0 sys_getpid
+80105ee7 vector80
+8010629b vector171
+801061cf vector154
+80105d5b vector36
+801031e0 pipealloc
+8010659b vector235
+80105fc8 vector105
+801052d0 sys_chdir
+801109e0 icache
+8010616f vector146
+8010638b vector191
+80105fb6 vector103
+80105240 sys_mknod
+80102730 lapicstartap
+80106970 switchuvm
+80104230 pushcli
+80102420 kinit2
+80105c84 vector11
+80105c99 vector14
+80100f00 filestat
Binary files ./xv6-public-src/_kill and ./xv6-public/_kill differ
diff -ruN ./xv6-public-src/kill.asm ./xv6-public/kill.asm
--- ./xv6-public-src/kill.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kill.asm	2019-11-28 17:52:28.199907299 +0200
@@ -0,0 +1,1509 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bb 01 00 00 00       	mov    $0x1,%ebx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  if(argc < 2){
+  1e:	83 fe 01             	cmp    $0x1,%esi
+  21:	7e 27                	jle    4a <main+0x4a>
+  23:	90                   	nop
+  24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 34 9f             	pushl  (%edi,%ebx,4)
+
+  if(argc < 2){
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+  2e:	83 c3 01             	add    $0x1,%ebx
+    kill(atoi(argv[i]));
+  31:	e8 fa 01 00 00       	call   230 <atoi>
+  36:	89 04 24             	mov    %eax,(%esp)
+  39:	e8 94 02 00 00       	call   2d2 <kill>
+
+  if(argc < 2){
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+  3e:	83 c4 10             	add    $0x10,%esp
+  41:	39 de                	cmp    %ebx,%esi
+  43:	75 e3                	jne    28 <main+0x28>
+    kill(atoi(argv[i]));
+  exit();
+  45:	e8 58 02 00 00       	call   2a2 <exit>
+main(int argc, char **argv)
+{
+  int i;
+
+  if(argc < 2){
+    printf(2, "usage: kill pid...\n");
+  4a:	50                   	push   %eax
+  4b:	50                   	push   %eax
+  4c:	68 20 07 00 00       	push   $0x720
+  51:	6a 02                	push   $0x2
+  53:	e8 a8 03 00 00       	call   400 <printf>
+    exit();
+  58:	e8 45 02 00 00       	call   2a2 <exit>
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 55 08             	mov    0x8(%ebp),%edx
+  98:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9b:	0f b6 02             	movzbl (%edx),%eax
+  9e:	0f b6 19             	movzbl (%ecx),%ebx
+  a1:	84 c0                	test   %al,%al
+  a3:	75 1e                	jne    c3 <strcmp+0x33>
+  a5:	eb 29                	jmp    d0 <strcmp+0x40>
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	89 f1                	mov    %esi,%ecx
+  c3:	38 d8                	cmp    %bl,%al
+  c5:	74 e9                	je     b0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  c7:	29 d8                	sub    %ebx,%eax
+}
+  c9:	5b                   	pop    %ebx
+  ca:	5e                   	pop    %esi
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5e                   	pop    %esi
+  d6:	5d                   	pop    %ebp
+  d7:	c3                   	ret    
+  d8:	90                   	nop
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 12                	je     fd <strlen+0x1d>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+  ff:	5d                   	pop    %ebp
+ 100:	c3                   	ret    
+ 101:	eb 0d                	jmp    110 <memset>
+ 103:	90                   	nop
+ 104:	90                   	nop
+ 105:	90                   	nop
+ 106:	90                   	nop
+ 107:	90                   	nop
+ 108:	90                   	nop
+ 109:	90                   	nop
+ 10a:	90                   	nop
+ 10b:	90                   	nop
+ 10c:	90                   	nop
+ 10d:	90                   	nop
+ 10e:	90                   	nop
+ 10f:	90                   	nop
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 178:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 17b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 17e:	eb 29                	jmp    1a9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 180:	83 ec 04             	sub    $0x4,%esp
+ 183:	6a 01                	push   $0x1
+ 185:	57                   	push   %edi
+ 186:	6a 00                	push   $0x0
+ 188:	e8 2d 01 00 00       	call   2ba <read>
+    if(cc < 1)
+ 18d:	83 c4 10             	add    $0x10,%esp
+ 190:	85 c0                	test   %eax,%eax
+ 192:	7e 1d                	jle    1b1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 194:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 198:	8b 55 08             	mov    0x8(%ebp),%edx
+ 19b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 19d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 19f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1a3:	74 1b                	je     1c0 <gets+0x50>
+ 1a5:	3c 0d                	cmp    $0xd,%al
+ 1a7:	74 17                	je     1c0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1ac:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1af:	7c cf                	jl     180 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1bb:	5b                   	pop    %ebx
+ 1bc:	5e                   	pop    %esi
+ 1bd:	5f                   	pop    %edi
+ 1be:	5d                   	pop    %ebp
+ 1bf:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cc:	5b                   	pop    %ebx
+ 1cd:	5e                   	pop    %esi
+ 1ce:	5f                   	pop    %edi
+ 1cf:	5d                   	pop    %ebp
+ 1d0:	c3                   	ret    
+ 1d1:	eb 0d                	jmp    1e0 <stat>
+ 1d3:	90                   	nop
+ 1d4:	90                   	nop
+ 1d5:	90                   	nop
+ 1d6:	90                   	nop
+ 1d7:	90                   	nop
+ 1d8:	90                   	nop
+ 1d9:	90                   	nop
+ 1da:	90                   	nop
+ 1db:	90                   	nop
+ 1dc:	90                   	nop
+ 1dd:	90                   	nop
+ 1de:	90                   	nop
+ 1df:	90                   	nop
+
+000001e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	56                   	push   %esi
+ 1e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	6a 00                	push   $0x0
+ 1ea:	ff 75 08             	pushl  0x8(%ebp)
+ 1ed:	e8 f0 00 00 00       	call   2e2 <open>
+  if(fd < 0)
+ 1f2:	83 c4 10             	add    $0x10,%esp
+ 1f5:	85 c0                	test   %eax,%eax
+ 1f7:	78 27                	js     220 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1ff:	89 c3                	mov    %eax,%ebx
+ 201:	50                   	push   %eax
+ 202:	e8 f3 00 00 00       	call   2fa <fstat>
+ 207:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 209:	89 1c 24             	mov    %ebx,(%esp)
+ 20c:	e8 b9 00 00 00       	call   2ca <close>
+  return r;
+ 211:	83 c4 10             	add    $0x10,%esp
+ 214:	89 f0                	mov    %esi,%eax
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 220:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 225:	eb ef                	jmp    216 <stat+0x36>
+ 227:	89 f6                	mov    %esi,%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000230 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	53                   	push   %ebx
+ 234:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 237:	0f be 11             	movsbl (%ecx),%edx
+ 23a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 23d:	3c 09                	cmp    $0x9,%al
+ 23f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 244:	77 1f                	ja     265 <atoi+0x35>
+ 246:	8d 76 00             	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 250:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 253:	83 c1 01             	add    $0x1,%ecx
+ 256:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25a:	0f be 11             	movsbl (%ecx),%edx
+ 25d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 260:	80 fb 09             	cmp    $0x9,%bl
+ 263:	76 eb                	jbe    250 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 265:	5b                   	pop    %ebx
+ 266:	5d                   	pop    %ebp
+ 267:	c3                   	ret    
+ 268:	90                   	nop
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+ 275:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 278:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 27e:	85 db                	test   %ebx,%ebx
+ 280:	7e 14                	jle    296 <memmove+0x26>
+ 282:	31 d2                	xor    %edx,%edx
+ 284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 288:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 28c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 28f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 292:	39 da                	cmp    %ebx,%edx
+ 294:	75 f2                	jne    288 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 296:	5b                   	pop    %ebx
+ 297:	5e                   	pop    %esi
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+
+0000029a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 29a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <exit>:
+SYSCALL(exit)
+ 2a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <wait>:
+SYSCALL(wait)
+ 2aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <pipe>:
+SYSCALL(pipe)
+ 2b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <read>:
+SYSCALL(read)
+ 2ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <write>:
+SYSCALL(write)
+ 2c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <close>:
+SYSCALL(close)
+ 2ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <kill>:
+SYSCALL(kill)
+ 2d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <exec>:
+SYSCALL(exec)
+ 2da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <open>:
+SYSCALL(open)
+ 2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mknod>:
+SYSCALL(mknod)
+ 2ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <unlink>:
+SYSCALL(unlink)
+ 2f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <fstat>:
+SYSCALL(fstat)
+ 2fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <link>:
+SYSCALL(link)
+ 302:	b8 13 00 00 00       	mov    $0x13,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mkdir>:
+SYSCALL(mkdir)
+ 30a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <chdir>:
+SYSCALL(chdir)
+ 312:	b8 09 00 00 00       	mov    $0x9,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <dup>:
+SYSCALL(dup)
+ 31a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getpid>:
+SYSCALL(getpid)
+ 322:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <sbrk>:
+SYSCALL(sbrk)
+ 32a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <sleep>:
+SYSCALL(sleep)
+ 332:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <uptime>:
+SYSCALL(uptime)
+ 33a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <readcount>:
+SYSCALL(readcount)
+ 342:	b8 16 00 00 00       	mov    $0x16,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <callcount>:
+SYSCALL(callcount)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+ 352:	66 90                	xchg   %ax,%ax
+ 354:	66 90                	xchg   %ax,%ax
+ 356:	66 90                	xchg   %ax,%ax
+ 358:	66 90                	xchg   %ax,%ax
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	89 c6                	mov    %eax,%esi
+ 368:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 7e                	je     3f0 <printint+0x90>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	74 75                	je     3f0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 37b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 37d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 384:	f7 d8                	neg    %eax
+ 386:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 389:	31 ff                	xor    %edi,%edi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	89 ce                	mov    %ecx,%esi
+ 390:	eb 08                	jmp    39a <printint+0x3a>
+ 392:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 398:	89 cf                	mov    %ecx,%edi
+ 39a:	31 d2                	xor    %edx,%edx
+ 39c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 39f:	f7 f6                	div    %esi
+ 3a1:	0f b6 92 3c 07 00 00 	movzbl 0x73c(%edx),%edx
+  }while((x /= base) != 0);
+ 3a8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3aa:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3ad:	75 e9                	jne    398 <printint+0x38>
+  if(neg)
+ 3af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3b2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3b5:	85 c0                	test   %eax,%eax
+ 3b7:	74 08                	je     3c1 <printint+0x61>
+    buf[i++] = '-';
+ 3b9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3be:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3c1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3c5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3cb:	83 ec 04             	sub    $0x4,%esp
+ 3ce:	83 ef 01             	sub    $0x1,%edi
+ 3d1:	6a 01                	push   $0x1
+ 3d3:	53                   	push   %ebx
+ 3d4:	56                   	push   %esi
+ 3d5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3d8:	e8 e5 fe ff ff       	call   2c2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3dd:	83 c4 10             	add    $0x10,%esp
+ 3e0:	39 df                	cmp    %ebx,%edi
+ 3e2:	75 e4                	jne    3c8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 3e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3f0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3f2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3f9:	eb 8b                	jmp    386 <printint+0x26>
+ 3fb:	90                   	nop
+ 3fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000400 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 406:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 409:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 40c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 40f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 412:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 415:	0f b6 1e             	movzbl (%esi),%ebx
+ 418:	83 c6 01             	add    $0x1,%esi
+ 41b:	84 db                	test   %bl,%bl
+ 41d:	0f 84 b0 00 00 00    	je     4d3 <printf+0xd3>
+ 423:	31 d2                	xor    %edx,%edx
+ 425:	eb 39                	jmp    460 <printf+0x60>
+ 427:	89 f6                	mov    %esi,%esi
+ 429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 430:	83 f8 25             	cmp    $0x25,%eax
+ 433:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 436:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 43b:	74 18                	je     455 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 43d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 440:	83 ec 04             	sub    $0x4,%esp
+ 443:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 446:	6a 01                	push   $0x1
+ 448:	50                   	push   %eax
+ 449:	57                   	push   %edi
+ 44a:	e8 73 fe ff ff       	call   2c2 <write>
+ 44f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 452:	83 c4 10             	add    $0x10,%esp
+ 455:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 458:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45c:	84 db                	test   %bl,%bl
+ 45e:	74 73                	je     4d3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 460:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 462:	0f be cb             	movsbl %bl,%ecx
+ 465:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 468:	74 c6                	je     430 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 46a:	83 fa 25             	cmp    $0x25,%edx
+ 46d:	75 e6                	jne    455 <printf+0x55>
+      if(c == 'd'){
+ 46f:	83 f8 64             	cmp    $0x64,%eax
+ 472:	0f 84 f8 00 00 00    	je     570 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 478:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 47e:	83 f9 70             	cmp    $0x70,%ecx
+ 481:	74 5d                	je     4e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 483:	83 f8 73             	cmp    $0x73,%eax
+ 486:	0f 84 84 00 00 00    	je     510 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48c:	83 f8 63             	cmp    $0x63,%eax
+ 48f:	0f 84 ea 00 00 00    	je     57f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 495:	83 f8 25             	cmp    $0x25,%eax
+ 498:	0f 84 c2 00 00 00    	je     560 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 49e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a1:	83 ec 04             	sub    $0x4,%esp
+ 4a4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4a8:	6a 01                	push   $0x1
+ 4aa:	50                   	push   %eax
+ 4ab:	57                   	push   %edi
+ 4ac:	e8 11 fe ff ff       	call   2c2 <write>
+ 4b1:	83 c4 0c             	add    $0xc,%esp
+ 4b4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4b7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ba:	6a 01                	push   $0x1
+ 4bc:	50                   	push   %eax
+ 4bd:	57                   	push   %edi
+ 4be:	83 c6 01             	add    $0x1,%esi
+ 4c1:	e8 fc fd ff ff       	call   2c2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4c6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ca:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4cd:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4cf:	84 db                	test   %bl,%bl
+ 4d1:	75 8d                	jne    460 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d6:	5b                   	pop    %ebx
+ 4d7:	5e                   	pop    %esi
+ 4d8:	5f                   	pop    %edi
+ 4d9:	5d                   	pop    %ebp
+ 4da:	c3                   	ret    
+ 4db:	90                   	nop
+ 4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 4e0:	83 ec 0c             	sub    $0xc,%esp
+ 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4ed:	89 f8                	mov    %edi,%eax
+ 4ef:	8b 13                	mov    (%ebx),%edx
+ 4f1:	e8 6a fe ff ff       	call   360 <printint>
+        ap++;
+ 4f6:	89 d8                	mov    %ebx,%eax
+ 4f8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4fb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 4fd:	83 c0 04             	add    $0x4,%eax
+ 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 503:	e9 4d ff ff ff       	jmp    455 <printf+0x55>
+ 508:	90                   	nop
+ 509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 510:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 513:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 515:	83 c0 04             	add    $0x4,%eax
+ 518:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 51b:	b8 34 07 00 00       	mov    $0x734,%eax
+ 520:	85 db                	test   %ebx,%ebx
+ 522:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 525:	0f b6 03             	movzbl (%ebx),%eax
+ 528:	84 c0                	test   %al,%al
+ 52a:	74 23                	je     54f <printf+0x14f>
+ 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 530:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 533:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 536:	83 ec 04             	sub    $0x4,%esp
+ 539:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 53b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 53e:	50                   	push   %eax
+ 53f:	57                   	push   %edi
+ 540:	e8 7d fd ff ff       	call   2c2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 545:	0f b6 03             	movzbl (%ebx),%eax
+ 548:	83 c4 10             	add    $0x10,%esp
+ 54b:	84 c0                	test   %al,%al
+ 54d:	75 e1                	jne    530 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 54f:	31 d2                	xor    %edx,%edx
+ 551:	e9 ff fe ff ff       	jmp    455 <printf+0x55>
+ 556:	8d 76 00             	lea    0x0(%esi),%esi
+ 559:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 560:	83 ec 04             	sub    $0x4,%esp
+ 563:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 566:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 569:	6a 01                	push   $0x1
+ 56b:	e9 4c ff ff ff       	jmp    4bc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 6b ff ff ff       	jmp    4ea <printf+0xea>
+ 57f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 582:	83 ec 04             	sub    $0x4,%esp
+ 585:	8b 03                	mov    (%ebx),%eax
+ 587:	6a 01                	push   $0x1
+ 589:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 58c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 58f:	50                   	push   %eax
+ 590:	57                   	push   %edi
+ 591:	e8 2c fd ff ff       	call   2c2 <write>
+ 596:	e9 5b ff ff ff       	jmp    4f6 <printf+0xf6>
+ 59b:	66 90                	xchg   %ax,%ax
+ 59d:	66 90                	xchg   %ax,%ax
+ 59f:	90                   	nop
+
+000005a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5a1:	a1 e0 09 00 00       	mov    0x9e0,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ae:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5b0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b3:	39 c8                	cmp    %ecx,%eax
+ 5b5:	73 19                	jae    5d0 <free+0x30>
+ 5b7:	89 f6                	mov    %esi,%esi
+ 5b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5c0:	39 d1                	cmp    %edx,%ecx
+ 5c2:	72 1c                	jb     5e0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5c4:	39 d0                	cmp    %edx,%eax
+ 5c6:	73 18                	jae    5e0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ca:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5cc:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ce:	72 f0                	jb     5c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d0:	39 d0                	cmp    %edx,%eax
+ 5d2:	72 f4                	jb     5c8 <free+0x28>
+ 5d4:	39 d1                	cmp    %edx,%ecx
+ 5d6:	73 f0                	jae    5c8 <free+0x28>
+ 5d8:	90                   	nop
+ 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5e3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5e6:	39 d7                	cmp    %edx,%edi
+ 5e8:	74 19                	je     603 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 5f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5f3:	39 f1                	cmp    %esi,%ecx
+ 5f5:	74 23                	je     61a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5f7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5f9:	a3 e0 09 00 00       	mov    %eax,0x9e0
+}
+ 5fe:	5b                   	pop    %ebx
+ 5ff:	5e                   	pop    %esi
+ 600:	5f                   	pop    %edi
+ 601:	5d                   	pop    %ebp
+ 602:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 603:	03 72 04             	add    0x4(%edx),%esi
+ 606:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 609:	8b 10                	mov    (%eax),%edx
+ 60b:	8b 12                	mov    (%edx),%edx
+ 60d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 610:	8b 50 04             	mov    0x4(%eax),%edx
+ 613:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 616:	39 f1                	cmp    %esi,%ecx
+ 618:	75 dd                	jne    5f7 <free+0x57>
+    p->s.size += bp->s.size;
+ 61a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 61d:	a3 e0 09 00 00       	mov    %eax,0x9e0
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 622:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 625:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 628:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 62a:	5b                   	pop    %ebx
+ 62b:	5e                   	pop    %esi
+ 62c:	5f                   	pop    %edi
+ 62d:	5d                   	pop    %ebp
+ 62e:	c3                   	ret    
+ 62f:	90                   	nop
+
+00000630 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 63c:	8b 15 e0 09 00 00    	mov    0x9e0,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 642:	8d 78 07             	lea    0x7(%eax),%edi
+ 645:	c1 ef 03             	shr    $0x3,%edi
+ 648:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 64b:	85 d2                	test   %edx,%edx
+ 64d:	0f 84 a3 00 00 00    	je     6f6 <malloc+0xc6>
+ 653:	8b 02                	mov    (%edx),%eax
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 658:	39 cf                	cmp    %ecx,%edi
+ 65a:	76 74                	jbe    6d0 <malloc+0xa0>
+ 65c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 662:	be 00 10 00 00       	mov    $0x1000,%esi
+ 667:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 66e:	0f 43 f7             	cmovae %edi,%esi
+ 671:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 676:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 67c:	0f 46 da             	cmovbe %edx,%ebx
+ 67f:	eb 10                	jmp    691 <malloc+0x61>
+ 681:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 688:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 68a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68d:	39 cf                	cmp    %ecx,%edi
+ 68f:	76 3f                	jbe    6d0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 691:	39 05 e0 09 00 00    	cmp    %eax,0x9e0
+ 697:	89 c2                	mov    %eax,%edx
+ 699:	75 ed                	jne    688 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 69b:	83 ec 0c             	sub    $0xc,%esp
+ 69e:	53                   	push   %ebx
+ 69f:	e8 86 fc ff ff       	call   32a <sbrk>
+  if(p == (char*)-1)
+ 6a4:	83 c4 10             	add    $0x10,%esp
+ 6a7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6aa:	74 1c                	je     6c8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6ac:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6af:	83 ec 0c             	sub    $0xc,%esp
+ 6b2:	83 c0 08             	add    $0x8,%eax
+ 6b5:	50                   	push   %eax
+ 6b6:	e8 e5 fe ff ff       	call   5a0 <free>
+  return freep;
+ 6bb:	8b 15 e0 09 00 00    	mov    0x9e0,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6c1:	83 c4 10             	add    $0x10,%esp
+ 6c4:	85 d2                	test   %edx,%edx
+ 6c6:	75 c0                	jne    688 <malloc+0x58>
+        return 0;
+ 6c8:	31 c0                	xor    %eax,%eax
+ 6ca:	eb 1c                	jmp    6e8 <malloc+0xb8>
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6d0:	39 cf                	cmp    %ecx,%edi
+ 6d2:	74 1c                	je     6f0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6d4:	29 f9                	sub    %edi,%ecx
+ 6d6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6dc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6df:	89 15 e0 09 00 00    	mov    %edx,0x9e0
+      return (void*)(p + 1);
+ 6e5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 6e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6eb:	5b                   	pop    %ebx
+ 6ec:	5e                   	pop    %esi
+ 6ed:	5f                   	pop    %edi
+ 6ee:	5d                   	pop    %ebp
+ 6ef:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 6f0:	8b 08                	mov    (%eax),%ecx
+ 6f2:	89 0a                	mov    %ecx,(%edx)
+ 6f4:	eb e9                	jmp    6df <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 6f6:	c7 05 e0 09 00 00 e4 	movl   $0x9e4,0x9e0
+ 6fd:	09 00 00 
+ 700:	c7 05 e4 09 00 00 e4 	movl   $0x9e4,0x9e4
+ 707:	09 00 00 
+    base.s.size = 0;
+ 70a:	b8 e4 09 00 00       	mov    $0x9e4,%eax
+ 70f:	c7 05 e8 09 00 00 00 	movl   $0x0,0x9e8
+ 716:	00 00 00 
+ 719:	e9 3e ff ff ff       	jmp    65c <malloc+0x2c>
diff -ruN ./xv6-public-src/kill.d ./xv6-public/kill.d
--- ./xv6-public-src/kill.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kill.d	2019-11-28 17:52:28.183897428 +0200
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/kill.o and ./xv6-public/kill.o differ
diff -ruN ./xv6-public-src/kill.sym ./xv6-public/kill.sym
--- ./xv6-public-src/kill.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/kill.sym	2019-11-28 17:52:28.203909766 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000720 .rodata
+00000750 .eh_frame
+000009e0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+0000073c digits.1111
+00000000 umalloc.c
+000009e0 freep
+000009e4 base
+00000060 strcpy
+00000400 printf
+00000270 memmove
+000002ea mknod
+00000170 gets
+00000322 getpid
+00000630 malloc
+00000332 sleep
+00000342 readcount
+0000034a callcount
+000002b2 pipe
+000002c2 write
+000002fa fstat
+000002d2 kill
+00000312 chdir
+000002da exec
+000002aa wait
+000002ba read
+000002f2 unlink
+0000029a fork
+0000032a sbrk
+0000033a uptime
+000009e0 __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+0000031a dup
+000001e0 stat
+000009e0 _edata
+000009ec _end
+00000302 link
+000002a2 exit
+00000230 atoi
+000000e0 strlen
+000002e2 open
+00000130 strchr
+0000030a mkdir
+000002ca close
+000005a0 free
diff -ruN ./xv6-public-src/lapic.d ./xv6-public/lapic.d
--- ./xv6-public-src/lapic.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/lapic.d	2019-11-28 17:52:29.636790833 +0200
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files ./xv6-public-src/lapic.o and ./xv6-public/lapic.o differ
Binary files ./xv6-public-src/_ln and ./xv6-public/_ln differ
diff -ruN ./xv6-public-src/ln.asm ./xv6-public/ln.asm
--- ./xv6-public-src/ln.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ln.asm	2019-11-28 17:52:28.243934443 +0200
@@ -0,0 +1,1498 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  if(argc != 3){
+   7:	83 39 03             	cmpl   $0x3,(%ecx)
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   a:	ff 71 fc             	pushl  -0x4(%ecx)
+   d:	55                   	push   %ebp
+   e:	89 e5                	mov    %esp,%ebp
+  10:	53                   	push   %ebx
+  11:	51                   	push   %ecx
+  12:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  15:	74 14                	je     2b <main+0x2b>
+    printf(2, "Usage: ln old new\n");
+  17:	83 ec 08             	sub    $0x8,%esp
+  1a:	68 20 07 00 00       	push   $0x720
+  1f:	6a 02                	push   $0x2
+  21:	e8 da 03 00 00       	call   400 <printf>
+    exit();
+  26:	e8 77 02 00 00       	call   2a2 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2b:	50                   	push   %eax
+  2c:	50                   	push   %eax
+  2d:	ff 73 08             	pushl  0x8(%ebx)
+  30:	ff 73 04             	pushl  0x4(%ebx)
+  33:	e8 ca 02 00 00       	call   302 <link>
+  38:	83 c4 10             	add    $0x10,%esp
+  3b:	85 c0                	test   %eax,%eax
+  3d:	78 05                	js     44 <main+0x44>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  3f:	e8 5e 02 00 00       	call   2a2 <exit>
+  if(argc != 3){
+    printf(2, "Usage: ln old new\n");
+    exit();
+  }
+  if(link(argv[1], argv[2]) < 0)
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  44:	ff 73 08             	pushl  0x8(%ebx)
+  47:	ff 73 04             	pushl  0x4(%ebx)
+  4a:	68 33 07 00 00       	push   $0x733
+  4f:	6a 02                	push   $0x2
+  51:	e8 aa 03 00 00       	call   400 <printf>
+  56:	83 c4 10             	add    $0x10,%esp
+  59:	eb e4                	jmp    3f <main+0x3f>
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 55 08             	mov    0x8(%ebp),%edx
+  98:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9b:	0f b6 02             	movzbl (%edx),%eax
+  9e:	0f b6 19             	movzbl (%ecx),%ebx
+  a1:	84 c0                	test   %al,%al
+  a3:	75 1e                	jne    c3 <strcmp+0x33>
+  a5:	eb 29                	jmp    d0 <strcmp+0x40>
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	89 f1                	mov    %esi,%ecx
+  c3:	38 d8                	cmp    %bl,%al
+  c5:	74 e9                	je     b0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  c7:	29 d8                	sub    %ebx,%eax
+}
+  c9:	5b                   	pop    %ebx
+  ca:	5e                   	pop    %esi
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5e                   	pop    %esi
+  d6:	5d                   	pop    %ebp
+  d7:	c3                   	ret    
+  d8:	90                   	nop
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 12                	je     fd <strlen+0x1d>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+  ff:	5d                   	pop    %ebp
+ 100:	c3                   	ret    
+ 101:	eb 0d                	jmp    110 <memset>
+ 103:	90                   	nop
+ 104:	90                   	nop
+ 105:	90                   	nop
+ 106:	90                   	nop
+ 107:	90                   	nop
+ 108:	90                   	nop
+ 109:	90                   	nop
+ 10a:	90                   	nop
+ 10b:	90                   	nop
+ 10c:	90                   	nop
+ 10d:	90                   	nop
+ 10e:	90                   	nop
+ 10f:	90                   	nop
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 178:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 17b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 17e:	eb 29                	jmp    1a9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 180:	83 ec 04             	sub    $0x4,%esp
+ 183:	6a 01                	push   $0x1
+ 185:	57                   	push   %edi
+ 186:	6a 00                	push   $0x0
+ 188:	e8 2d 01 00 00       	call   2ba <read>
+    if(cc < 1)
+ 18d:	83 c4 10             	add    $0x10,%esp
+ 190:	85 c0                	test   %eax,%eax
+ 192:	7e 1d                	jle    1b1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 194:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 198:	8b 55 08             	mov    0x8(%ebp),%edx
+ 19b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 19d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 19f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1a3:	74 1b                	je     1c0 <gets+0x50>
+ 1a5:	3c 0d                	cmp    $0xd,%al
+ 1a7:	74 17                	je     1c0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1ac:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1af:	7c cf                	jl     180 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1bb:	5b                   	pop    %ebx
+ 1bc:	5e                   	pop    %esi
+ 1bd:	5f                   	pop    %edi
+ 1be:	5d                   	pop    %ebp
+ 1bf:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cc:	5b                   	pop    %ebx
+ 1cd:	5e                   	pop    %esi
+ 1ce:	5f                   	pop    %edi
+ 1cf:	5d                   	pop    %ebp
+ 1d0:	c3                   	ret    
+ 1d1:	eb 0d                	jmp    1e0 <stat>
+ 1d3:	90                   	nop
+ 1d4:	90                   	nop
+ 1d5:	90                   	nop
+ 1d6:	90                   	nop
+ 1d7:	90                   	nop
+ 1d8:	90                   	nop
+ 1d9:	90                   	nop
+ 1da:	90                   	nop
+ 1db:	90                   	nop
+ 1dc:	90                   	nop
+ 1dd:	90                   	nop
+ 1de:	90                   	nop
+ 1df:	90                   	nop
+
+000001e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	56                   	push   %esi
+ 1e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	6a 00                	push   $0x0
+ 1ea:	ff 75 08             	pushl  0x8(%ebp)
+ 1ed:	e8 f0 00 00 00       	call   2e2 <open>
+  if(fd < 0)
+ 1f2:	83 c4 10             	add    $0x10,%esp
+ 1f5:	85 c0                	test   %eax,%eax
+ 1f7:	78 27                	js     220 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1ff:	89 c3                	mov    %eax,%ebx
+ 201:	50                   	push   %eax
+ 202:	e8 f3 00 00 00       	call   2fa <fstat>
+ 207:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 209:	89 1c 24             	mov    %ebx,(%esp)
+ 20c:	e8 b9 00 00 00       	call   2ca <close>
+  return r;
+ 211:	83 c4 10             	add    $0x10,%esp
+ 214:	89 f0                	mov    %esi,%eax
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 220:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 225:	eb ef                	jmp    216 <stat+0x36>
+ 227:	89 f6                	mov    %esi,%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000230 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	53                   	push   %ebx
+ 234:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 237:	0f be 11             	movsbl (%ecx),%edx
+ 23a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 23d:	3c 09                	cmp    $0x9,%al
+ 23f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 244:	77 1f                	ja     265 <atoi+0x35>
+ 246:	8d 76 00             	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 250:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 253:	83 c1 01             	add    $0x1,%ecx
+ 256:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25a:	0f be 11             	movsbl (%ecx),%edx
+ 25d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 260:	80 fb 09             	cmp    $0x9,%bl
+ 263:	76 eb                	jbe    250 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 265:	5b                   	pop    %ebx
+ 266:	5d                   	pop    %ebp
+ 267:	c3                   	ret    
+ 268:	90                   	nop
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+ 275:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 278:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 27e:	85 db                	test   %ebx,%ebx
+ 280:	7e 14                	jle    296 <memmove+0x26>
+ 282:	31 d2                	xor    %edx,%edx
+ 284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 288:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 28c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 28f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 292:	39 da                	cmp    %ebx,%edx
+ 294:	75 f2                	jne    288 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 296:	5b                   	pop    %ebx
+ 297:	5e                   	pop    %esi
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+
+0000029a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 29a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <exit>:
+SYSCALL(exit)
+ 2a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <wait>:
+SYSCALL(wait)
+ 2aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <pipe>:
+SYSCALL(pipe)
+ 2b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <read>:
+SYSCALL(read)
+ 2ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <write>:
+SYSCALL(write)
+ 2c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <close>:
+SYSCALL(close)
+ 2ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <kill>:
+SYSCALL(kill)
+ 2d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <exec>:
+SYSCALL(exec)
+ 2da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <open>:
+SYSCALL(open)
+ 2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mknod>:
+SYSCALL(mknod)
+ 2ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <unlink>:
+SYSCALL(unlink)
+ 2f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <fstat>:
+SYSCALL(fstat)
+ 2fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <link>:
+SYSCALL(link)
+ 302:	b8 13 00 00 00       	mov    $0x13,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mkdir>:
+SYSCALL(mkdir)
+ 30a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <chdir>:
+SYSCALL(chdir)
+ 312:	b8 09 00 00 00       	mov    $0x9,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <dup>:
+SYSCALL(dup)
+ 31a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getpid>:
+SYSCALL(getpid)
+ 322:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <sbrk>:
+SYSCALL(sbrk)
+ 32a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <sleep>:
+SYSCALL(sleep)
+ 332:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <uptime>:
+SYSCALL(uptime)
+ 33a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <readcount>:
+SYSCALL(readcount)
+ 342:	b8 16 00 00 00       	mov    $0x16,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <callcount>:
+SYSCALL(callcount)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+ 352:	66 90                	xchg   %ax,%ax
+ 354:	66 90                	xchg   %ax,%ax
+ 356:	66 90                	xchg   %ax,%ax
+ 358:	66 90                	xchg   %ax,%ax
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	89 c6                	mov    %eax,%esi
+ 368:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 7e                	je     3f0 <printint+0x90>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	74 75                	je     3f0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 37b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 37d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 384:	f7 d8                	neg    %eax
+ 386:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 389:	31 ff                	xor    %edi,%edi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	89 ce                	mov    %ecx,%esi
+ 390:	eb 08                	jmp    39a <printint+0x3a>
+ 392:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 398:	89 cf                	mov    %ecx,%edi
+ 39a:	31 d2                	xor    %edx,%edx
+ 39c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 39f:	f7 f6                	div    %esi
+ 3a1:	0f b6 92 50 07 00 00 	movzbl 0x750(%edx),%edx
+  }while((x /= base) != 0);
+ 3a8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3aa:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3ad:	75 e9                	jne    398 <printint+0x38>
+  if(neg)
+ 3af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3b2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3b5:	85 c0                	test   %eax,%eax
+ 3b7:	74 08                	je     3c1 <printint+0x61>
+    buf[i++] = '-';
+ 3b9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3be:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3c1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3c5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3cb:	83 ec 04             	sub    $0x4,%esp
+ 3ce:	83 ef 01             	sub    $0x1,%edi
+ 3d1:	6a 01                	push   $0x1
+ 3d3:	53                   	push   %ebx
+ 3d4:	56                   	push   %esi
+ 3d5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3d8:	e8 e5 fe ff ff       	call   2c2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3dd:	83 c4 10             	add    $0x10,%esp
+ 3e0:	39 df                	cmp    %ebx,%edi
+ 3e2:	75 e4                	jne    3c8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 3e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3f0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3f2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3f9:	eb 8b                	jmp    386 <printint+0x26>
+ 3fb:	90                   	nop
+ 3fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000400 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 406:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 409:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 40c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 40f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 412:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 415:	0f b6 1e             	movzbl (%esi),%ebx
+ 418:	83 c6 01             	add    $0x1,%esi
+ 41b:	84 db                	test   %bl,%bl
+ 41d:	0f 84 b0 00 00 00    	je     4d3 <printf+0xd3>
+ 423:	31 d2                	xor    %edx,%edx
+ 425:	eb 39                	jmp    460 <printf+0x60>
+ 427:	89 f6                	mov    %esi,%esi
+ 429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 430:	83 f8 25             	cmp    $0x25,%eax
+ 433:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 436:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 43b:	74 18                	je     455 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 43d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 440:	83 ec 04             	sub    $0x4,%esp
+ 443:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 446:	6a 01                	push   $0x1
+ 448:	50                   	push   %eax
+ 449:	57                   	push   %edi
+ 44a:	e8 73 fe ff ff       	call   2c2 <write>
+ 44f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 452:	83 c4 10             	add    $0x10,%esp
+ 455:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 458:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45c:	84 db                	test   %bl,%bl
+ 45e:	74 73                	je     4d3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 460:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 462:	0f be cb             	movsbl %bl,%ecx
+ 465:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 468:	74 c6                	je     430 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 46a:	83 fa 25             	cmp    $0x25,%edx
+ 46d:	75 e6                	jne    455 <printf+0x55>
+      if(c == 'd'){
+ 46f:	83 f8 64             	cmp    $0x64,%eax
+ 472:	0f 84 f8 00 00 00    	je     570 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 478:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 47e:	83 f9 70             	cmp    $0x70,%ecx
+ 481:	74 5d                	je     4e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 483:	83 f8 73             	cmp    $0x73,%eax
+ 486:	0f 84 84 00 00 00    	je     510 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48c:	83 f8 63             	cmp    $0x63,%eax
+ 48f:	0f 84 ea 00 00 00    	je     57f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 495:	83 f8 25             	cmp    $0x25,%eax
+ 498:	0f 84 c2 00 00 00    	je     560 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 49e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a1:	83 ec 04             	sub    $0x4,%esp
+ 4a4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4a8:	6a 01                	push   $0x1
+ 4aa:	50                   	push   %eax
+ 4ab:	57                   	push   %edi
+ 4ac:	e8 11 fe ff ff       	call   2c2 <write>
+ 4b1:	83 c4 0c             	add    $0xc,%esp
+ 4b4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4b7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ba:	6a 01                	push   $0x1
+ 4bc:	50                   	push   %eax
+ 4bd:	57                   	push   %edi
+ 4be:	83 c6 01             	add    $0x1,%esi
+ 4c1:	e8 fc fd ff ff       	call   2c2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4c6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ca:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4cd:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4cf:	84 db                	test   %bl,%bl
+ 4d1:	75 8d                	jne    460 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d6:	5b                   	pop    %ebx
+ 4d7:	5e                   	pop    %esi
+ 4d8:	5f                   	pop    %edi
+ 4d9:	5d                   	pop    %ebp
+ 4da:	c3                   	ret    
+ 4db:	90                   	nop
+ 4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 4e0:	83 ec 0c             	sub    $0xc,%esp
+ 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4ed:	89 f8                	mov    %edi,%eax
+ 4ef:	8b 13                	mov    (%ebx),%edx
+ 4f1:	e8 6a fe ff ff       	call   360 <printint>
+        ap++;
+ 4f6:	89 d8                	mov    %ebx,%eax
+ 4f8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4fb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 4fd:	83 c0 04             	add    $0x4,%eax
+ 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 503:	e9 4d ff ff ff       	jmp    455 <printf+0x55>
+ 508:	90                   	nop
+ 509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 510:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 513:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 515:	83 c0 04             	add    $0x4,%eax
+ 518:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 51b:	b8 47 07 00 00       	mov    $0x747,%eax
+ 520:	85 db                	test   %ebx,%ebx
+ 522:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 525:	0f b6 03             	movzbl (%ebx),%eax
+ 528:	84 c0                	test   %al,%al
+ 52a:	74 23                	je     54f <printf+0x14f>
+ 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 530:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 533:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 536:	83 ec 04             	sub    $0x4,%esp
+ 539:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 53b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 53e:	50                   	push   %eax
+ 53f:	57                   	push   %edi
+ 540:	e8 7d fd ff ff       	call   2c2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 545:	0f b6 03             	movzbl (%ebx),%eax
+ 548:	83 c4 10             	add    $0x10,%esp
+ 54b:	84 c0                	test   %al,%al
+ 54d:	75 e1                	jne    530 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 54f:	31 d2                	xor    %edx,%edx
+ 551:	e9 ff fe ff ff       	jmp    455 <printf+0x55>
+ 556:	8d 76 00             	lea    0x0(%esi),%esi
+ 559:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 560:	83 ec 04             	sub    $0x4,%esp
+ 563:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 566:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 569:	6a 01                	push   $0x1
+ 56b:	e9 4c ff ff ff       	jmp    4bc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 6b ff ff ff       	jmp    4ea <printf+0xea>
+ 57f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 582:	83 ec 04             	sub    $0x4,%esp
+ 585:	8b 03                	mov    (%ebx),%eax
+ 587:	6a 01                	push   $0x1
+ 589:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 58c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 58f:	50                   	push   %eax
+ 590:	57                   	push   %edi
+ 591:	e8 2c fd ff ff       	call   2c2 <write>
+ 596:	e9 5b ff ff ff       	jmp    4f6 <printf+0xf6>
+ 59b:	66 90                	xchg   %ax,%ax
+ 59d:	66 90                	xchg   %ax,%ax
+ 59f:	90                   	nop
+
+000005a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5a1:	a1 ec 09 00 00       	mov    0x9ec,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ae:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5b0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b3:	39 c8                	cmp    %ecx,%eax
+ 5b5:	73 19                	jae    5d0 <free+0x30>
+ 5b7:	89 f6                	mov    %esi,%esi
+ 5b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5c0:	39 d1                	cmp    %edx,%ecx
+ 5c2:	72 1c                	jb     5e0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5c4:	39 d0                	cmp    %edx,%eax
+ 5c6:	73 18                	jae    5e0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ca:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5cc:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ce:	72 f0                	jb     5c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d0:	39 d0                	cmp    %edx,%eax
+ 5d2:	72 f4                	jb     5c8 <free+0x28>
+ 5d4:	39 d1                	cmp    %edx,%ecx
+ 5d6:	73 f0                	jae    5c8 <free+0x28>
+ 5d8:	90                   	nop
+ 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5e3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5e6:	39 d7                	cmp    %edx,%edi
+ 5e8:	74 19                	je     603 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 5f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5f3:	39 f1                	cmp    %esi,%ecx
+ 5f5:	74 23                	je     61a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5f7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5f9:	a3 ec 09 00 00       	mov    %eax,0x9ec
+}
+ 5fe:	5b                   	pop    %ebx
+ 5ff:	5e                   	pop    %esi
+ 600:	5f                   	pop    %edi
+ 601:	5d                   	pop    %ebp
+ 602:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 603:	03 72 04             	add    0x4(%edx),%esi
+ 606:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 609:	8b 10                	mov    (%eax),%edx
+ 60b:	8b 12                	mov    (%edx),%edx
+ 60d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 610:	8b 50 04             	mov    0x4(%eax),%edx
+ 613:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 616:	39 f1                	cmp    %esi,%ecx
+ 618:	75 dd                	jne    5f7 <free+0x57>
+    p->s.size += bp->s.size;
+ 61a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 61d:	a3 ec 09 00 00       	mov    %eax,0x9ec
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 622:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 625:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 628:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 62a:	5b                   	pop    %ebx
+ 62b:	5e                   	pop    %esi
+ 62c:	5f                   	pop    %edi
+ 62d:	5d                   	pop    %ebp
+ 62e:	c3                   	ret    
+ 62f:	90                   	nop
+
+00000630 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 63c:	8b 15 ec 09 00 00    	mov    0x9ec,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 642:	8d 78 07             	lea    0x7(%eax),%edi
+ 645:	c1 ef 03             	shr    $0x3,%edi
+ 648:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 64b:	85 d2                	test   %edx,%edx
+ 64d:	0f 84 a3 00 00 00    	je     6f6 <malloc+0xc6>
+ 653:	8b 02                	mov    (%edx),%eax
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 658:	39 cf                	cmp    %ecx,%edi
+ 65a:	76 74                	jbe    6d0 <malloc+0xa0>
+ 65c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 662:	be 00 10 00 00       	mov    $0x1000,%esi
+ 667:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 66e:	0f 43 f7             	cmovae %edi,%esi
+ 671:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 676:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 67c:	0f 46 da             	cmovbe %edx,%ebx
+ 67f:	eb 10                	jmp    691 <malloc+0x61>
+ 681:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 688:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 68a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68d:	39 cf                	cmp    %ecx,%edi
+ 68f:	76 3f                	jbe    6d0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 691:	39 05 ec 09 00 00    	cmp    %eax,0x9ec
+ 697:	89 c2                	mov    %eax,%edx
+ 699:	75 ed                	jne    688 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 69b:	83 ec 0c             	sub    $0xc,%esp
+ 69e:	53                   	push   %ebx
+ 69f:	e8 86 fc ff ff       	call   32a <sbrk>
+  if(p == (char*)-1)
+ 6a4:	83 c4 10             	add    $0x10,%esp
+ 6a7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6aa:	74 1c                	je     6c8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6ac:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6af:	83 ec 0c             	sub    $0xc,%esp
+ 6b2:	83 c0 08             	add    $0x8,%eax
+ 6b5:	50                   	push   %eax
+ 6b6:	e8 e5 fe ff ff       	call   5a0 <free>
+  return freep;
+ 6bb:	8b 15 ec 09 00 00    	mov    0x9ec,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6c1:	83 c4 10             	add    $0x10,%esp
+ 6c4:	85 d2                	test   %edx,%edx
+ 6c6:	75 c0                	jne    688 <malloc+0x58>
+        return 0;
+ 6c8:	31 c0                	xor    %eax,%eax
+ 6ca:	eb 1c                	jmp    6e8 <malloc+0xb8>
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6d0:	39 cf                	cmp    %ecx,%edi
+ 6d2:	74 1c                	je     6f0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6d4:	29 f9                	sub    %edi,%ecx
+ 6d6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6dc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6df:	89 15 ec 09 00 00    	mov    %edx,0x9ec
+      return (void*)(p + 1);
+ 6e5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 6e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6eb:	5b                   	pop    %ebx
+ 6ec:	5e                   	pop    %esi
+ 6ed:	5f                   	pop    %edi
+ 6ee:	5d                   	pop    %ebp
+ 6ef:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 6f0:	8b 08                	mov    (%eax),%ecx
+ 6f2:	89 0a                	mov    %ecx,(%edx)
+ 6f4:	eb e9                	jmp    6df <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 6f6:	c7 05 ec 09 00 00 f0 	movl   $0x9f0,0x9ec
+ 6fd:	09 00 00 
+ 700:	c7 05 f0 09 00 00 f0 	movl   $0x9f0,0x9f0
+ 707:	09 00 00 
+    base.s.size = 0;
+ 70a:	b8 f0 09 00 00       	mov    $0x9f0,%eax
+ 70f:	c7 05 f4 09 00 00 00 	movl   $0x0,0x9f4
+ 716:	00 00 00 
+ 719:	e9 3e ff ff ff       	jmp    65c <malloc+0x2c>
diff -ruN ./xv6-public-src/ln.d ./xv6-public/ln.d
--- ./xv6-public-src/ln.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ln.d	2019-11-28 17:52:28.227924572 +0200
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/ln.o and ./xv6-public/ln.o differ
diff -ruN ./xv6-public-src/ln.sym ./xv6-public/ln.sym
--- ./xv6-public-src/ln.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ln.sym	2019-11-28 17:52:28.243934443 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000720 .rodata
+00000764 .eh_frame
+000009ec .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+00000750 digits.1111
+00000000 umalloc.c
+000009ec freep
+000009f0 base
+00000060 strcpy
+00000400 printf
+00000270 memmove
+000002ea mknod
+00000170 gets
+00000322 getpid
+00000630 malloc
+00000332 sleep
+00000342 readcount
+0000034a callcount
+000002b2 pipe
+000002c2 write
+000002fa fstat
+000002d2 kill
+00000312 chdir
+000002da exec
+000002aa wait
+000002ba read
+000002f2 unlink
+0000029a fork
+0000032a sbrk
+0000033a uptime
+000009ec __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+0000031a dup
+000001e0 stat
+000009ec _edata
+000009f8 _end
+00000302 link
+000002a2 exit
+00000230 atoi
+000000e0 strlen
+000002e2 open
+00000130 strchr
+0000030a mkdir
+000002ca close
+000005a0 free
diff -ruN ./xv6-public-src/log.d ./xv6-public/log.d
--- ./xv6-public-src/log.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/log.d	2019-11-28 17:52:29.688822720 +0200
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files ./xv6-public-src/log.o and ./xv6-public/log.o differ
Binary files ./xv6-public-src/_ls and ./xv6-public/_ls differ
diff -ruN ./xv6-public-src/ls.asm ./xv6-public/ls.asm
--- ./xv6-public-src/ls.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ls.asm	2019-11-28 17:52:28.299968989 +0200
@@ -0,0 +1,1870 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bb 01 00 00 00       	mov    $0x1,%ebx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  if(argc < 2){
+  1e:	83 fe 01             	cmp    $0x1,%esi
+  21:	7e 1f                	jle    42 <main+0x42>
+  23:	90                   	nop
+  24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 34 9f             	pushl  (%edi,%ebx,4)
+
+  if(argc < 2){
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+  2e:	83 c3 01             	add    $0x1,%ebx
+    ls(argv[i]);
+  31:	e8 ca 00 00 00       	call   100 <ls>
+
+  if(argc < 2){
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+  36:	83 c4 10             	add    $0x10,%esp
+  39:	39 de                	cmp    %ebx,%esi
+  3b:	75 eb                	jne    28 <main+0x28>
+    ls(argv[i]);
+  exit();
+  3d:	e8 40 05 00 00       	call   582 <exit>
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    ls(".");
+  42:	83 ec 0c             	sub    $0xc,%esp
+  45:	68 48 0a 00 00       	push   $0xa48
+  4a:	e8 b1 00 00 00       	call   100 <ls>
+    exit();
+  4f:	e8 2e 05 00 00       	call   582 <exit>
+  54:	66 90                	xchg   %ax,%ax
+  56:	66 90                	xchg   %ax,%ax
+  58:	66 90                	xchg   %ax,%ax
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <fmtname>:
+#include "user.h"
+#include "fs.h"
+
+char*
+fmtname(char *path)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  68:	83 ec 0c             	sub    $0xc,%esp
+  6b:	53                   	push   %ebx
+  6c:	e8 4f 03 00 00       	call   3c0 <strlen>
+  71:	83 c4 10             	add    $0x10,%esp
+  74:	01 d8                	add    %ebx,%eax
+  76:	73 0f                	jae    87 <fmtname+0x27>
+  78:	eb 12                	jmp    8c <fmtname+0x2c>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	83 e8 01             	sub    $0x1,%eax
+  83:	39 c3                	cmp    %eax,%ebx
+  85:	77 05                	ja     8c <fmtname+0x2c>
+  87:	80 38 2f             	cmpb   $0x2f,(%eax)
+  8a:	75 f4                	jne    80 <fmtname+0x20>
+    ;
+  p++;
+  8c:	8d 58 01             	lea    0x1(%eax),%ebx
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+  8f:	83 ec 0c             	sub    $0xc,%esp
+  92:	53                   	push   %ebx
+  93:	e8 28 03 00 00       	call   3c0 <strlen>
+  98:	83 c4 10             	add    $0x10,%esp
+  9b:	83 f8 0d             	cmp    $0xd,%eax
+  9e:	77 4a                	ja     ea <fmtname+0x8a>
+    return p;
+  memmove(buf, p, strlen(p));
+  a0:	83 ec 0c             	sub    $0xc,%esp
+  a3:	53                   	push   %ebx
+  a4:	e8 17 03 00 00       	call   3c0 <strlen>
+  a9:	83 c4 0c             	add    $0xc,%esp
+  ac:	50                   	push   %eax
+  ad:	53                   	push   %ebx
+  ae:	68 60 0d 00 00       	push   $0xd60
+  b3:	e8 98 04 00 00       	call   550 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  b8:	89 1c 24             	mov    %ebx,(%esp)
+  bb:	e8 00 03 00 00       	call   3c0 <strlen>
+  c0:	89 1c 24             	mov    %ebx,(%esp)
+  c3:	89 c6                	mov    %eax,%esi
+  return buf;
+  c5:	bb 60 0d 00 00       	mov    $0xd60,%ebx
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	e8 f1 02 00 00       	call   3c0 <strlen>
+  cf:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d4:	83 c4 0c             	add    $0xc,%esp
+  d7:	05 60 0d 00 00       	add    $0xd60,%eax
+  dc:	29 f2                	sub    %esi,%edx
+  de:	52                   	push   %edx
+  df:	6a 20                	push   $0x20
+  e1:	50                   	push   %eax
+  e2:	e8 09 03 00 00       	call   3f0 <memset>
+  return buf;
+  e7:	83 c4 10             	add    $0x10,%esp
+}
+  ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ed:	89 d8                	mov    %ebx,%eax
+  ef:	5b                   	pop    %ebx
+  f0:	5e                   	pop    %esi
+  f1:	5d                   	pop    %ebp
+  f2:	c3                   	ret    
+  f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <ls>:
+
+void
+ls(char *path)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	56                   	push   %esi
+ 105:	53                   	push   %ebx
+ 106:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 10c:	8b 7d 08             	mov    0x8(%ebp),%edi
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, 0)) < 0){
+ 10f:	6a 00                	push   $0x0
+ 111:	57                   	push   %edi
+ 112:	e8 ab 04 00 00       	call   5c2 <open>
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	0f 88 9e 01 00 00    	js     2c0 <ls+0x1c0>
+    printf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+ 122:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 128:	83 ec 08             	sub    $0x8,%esp
+ 12b:	89 c3                	mov    %eax,%ebx
+ 12d:	56                   	push   %esi
+ 12e:	50                   	push   %eax
+ 12f:	e8 a6 04 00 00       	call   5da <fstat>
+ 134:	83 c4 10             	add    $0x10,%esp
+ 137:	85 c0                	test   %eax,%eax
+ 139:	0f 88 c1 01 00 00    	js     300 <ls+0x200>
+    printf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+ 13f:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 146:	66 83 f8 01          	cmp    $0x1,%ax
+ 14a:	74 54                	je     1a0 <ls+0xa0>
+ 14c:	66 83 f8 02          	cmp    $0x2,%ax
+ 150:	75 37                	jne    189 <ls+0x89>
+  case T_FILE:
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 152:	83 ec 0c             	sub    $0xc,%esp
+ 155:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 15b:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 161:	57                   	push   %edi
+ 162:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 168:	e8 f3 fe ff ff       	call   60 <fmtname>
+ 16d:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 173:	59                   	pop    %ecx
+ 174:	5f                   	pop    %edi
+ 175:	52                   	push   %edx
+ 176:	56                   	push   %esi
+ 177:	6a 02                	push   $0x2
+ 179:	50                   	push   %eax
+ 17a:	68 28 0a 00 00       	push   $0xa28
+ 17f:	6a 01                	push   $0x1
+ 181:	e8 5a 05 00 00       	call   6e0 <printf>
+    break;
+ 186:	83 c4 20             	add    $0x20,%esp
+      }
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+    }
+    break;
+  }
+  close(fd);
+ 189:	83 ec 0c             	sub    $0xc,%esp
+ 18c:	53                   	push   %ebx
+ 18d:	e8 18 04 00 00       	call   5aa <close>
+ 192:	83 c4 10             	add    $0x10,%esp
+}
+ 195:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 198:	5b                   	pop    %ebx
+ 199:	5e                   	pop    %esi
+ 19a:	5f                   	pop    %edi
+ 19b:	5d                   	pop    %ebp
+ 19c:	c3                   	ret    
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+  case T_FILE:
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+    break;
+
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1a0:	83 ec 0c             	sub    $0xc,%esp
+ 1a3:	57                   	push   %edi
+ 1a4:	e8 17 02 00 00       	call   3c0 <strlen>
+ 1a9:	83 c0 10             	add    $0x10,%eax
+ 1ac:	83 c4 10             	add    $0x10,%esp
+ 1af:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1b4:	0f 87 26 01 00 00    	ja     2e0 <ls+0x1e0>
+      printf(1, "ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+ 1ba:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
+ 1c0:	83 ec 08             	sub    $0x8,%esp
+ 1c3:	57                   	push   %edi
+ 1c4:	8d bd c4 fd ff ff    	lea    -0x23c(%ebp),%edi
+ 1ca:	50                   	push   %eax
+ 1cb:	e8 70 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1d0:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
+ 1d6:	89 04 24             	mov    %eax,(%esp)
+ 1d9:	e8 e2 01 00 00       	call   3c0 <strlen>
+ 1de:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
+    *p++ = '/';
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e4:	83 c4 10             	add    $0x10,%esp
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf(1, "ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+ 1e7:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
+    *p++ = '/';
+ 1ea:	8d 84 05 e9 fd ff ff 	lea    -0x217(%ebp,%eax,1),%eax
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf(1, "ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+ 1f1:	89 8d a8 fd ff ff    	mov    %ecx,-0x258(%ebp)
+    *p++ = '/';
+ 1f7:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
+ 1fd:	c6 01 2f             	movb   $0x2f,(%ecx)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	6a 10                	push   $0x10
+ 205:	57                   	push   %edi
+ 206:	53                   	push   %ebx
+ 207:	e8 8e 03 00 00       	call   59a <read>
+ 20c:	83 c4 10             	add    $0x10,%esp
+ 20f:	83 f8 10             	cmp    $0x10,%eax
+ 212:	0f 85 71 ff ff ff    	jne    189 <ls+0x89>
+      if(de.inum == 0)
+ 218:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 21f:	00 
+ 220:	74 de                	je     200 <ls+0x100>
+        continue;
+      memmove(p, de.name, DIRSIZ);
+ 222:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	6a 0e                	push   $0xe
+ 22d:	50                   	push   %eax
+ 22e:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 234:	e8 17 03 00 00       	call   550 <memmove>
+      p[DIRSIZ] = 0;
+ 239:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 23f:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 243:	58                   	pop    %eax
+ 244:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	50                   	push   %eax
+ 24d:	e8 6e 02 00 00       	call   4c0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 c3 00 00 00    	js     320 <ls+0x220>
+        printf(1, "ls: cannot stat %s\n", buf);
+        continue;
+      }
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 263:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 26a:	83 ec 0c             	sub    $0xc,%esp
+ 26d:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 273:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 279:	8d 8d e8 fd ff ff    	lea    -0x218(%ebp),%ecx
+ 27f:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 285:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 28b:	51                   	push   %ecx
+ 28c:	e8 cf fd ff ff       	call   60 <fmtname>
+ 291:	5a                   	pop    %edx
+ 292:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 298:	59                   	pop    %ecx
+ 299:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 29f:	51                   	push   %ecx
+ 2a0:	52                   	push   %edx
+ 2a1:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2a7:	50                   	push   %eax
+ 2a8:	68 28 0a 00 00       	push   $0xa28
+ 2ad:	6a 01                	push   $0x1
+ 2af:	e8 2c 04 00 00       	call   6e0 <printf>
+ 2b4:	83 c4 20             	add    $0x20,%esp
+ 2b7:	e9 44 ff ff ff       	jmp    200 <ls+0x100>
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, 0)) < 0){
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 00 0a 00 00       	push   $0xa00
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 10 04 00 00       	call   6e0 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+    }
+    break;
+  }
+  close(fd);
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	90                   	nop
+ 2dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+    break;
+
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 35 0a 00 00       	push   $0xa35
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 f1 03 00 00       	call   6e0 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 92 fe ff ff       	jmp    189 <ls+0x89>
+ 2f7:	89 f6                	mov    %esi,%esi
+ 2f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 14 0a 00 00       	push   $0xa14
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 d0 03 00 00       	call   6e0 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 92 02 00 00       	call   5aa <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+ 31b:	e9 75 fe ff ff       	jmp    195 <ls+0x95>
+      if(de.inum == 0)
+        continue;
+      memmove(p, de.name, DIRSIZ);
+      p[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+        printf(1, "ls: cannot stat %s\n", buf);
+ 320:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
+ 326:	83 ec 04             	sub    $0x4,%esp
+ 329:	50                   	push   %eax
+ 32a:	68 14 0a 00 00       	push   $0xa14
+ 32f:	6a 01                	push   $0x1
+ 331:	e8 aa 03 00 00       	call   6e0 <printf>
+        continue;
+ 336:	83 c4 10             	add    $0x10,%esp
+ 339:	e9 c2 fe ff ff       	jmp    200 <ls+0x100>
+ 33e:	66 90                	xchg   %ax,%ax
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	55                   	push   %ebp
+ 341:	89 e5                	mov    %esp,%ebp
+ 343:	53                   	push   %ebx
+ 344:	8b 45 08             	mov    0x8(%ebp),%eax
+ 347:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 34a:	89 c2                	mov    %eax,%edx
+ 34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 350:	83 c1 01             	add    $0x1,%ecx
+ 353:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 357:	83 c2 01             	add    $0x1,%edx
+ 35a:	84 db                	test   %bl,%bl
+ 35c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 35f:	75 ef                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 361:	5b                   	pop    %ebx
+ 362:	5d                   	pop    %ebp
+ 363:	c3                   	ret    
+ 364:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 36a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	56                   	push   %esi
+ 374:	53                   	push   %ebx
+ 375:	8b 55 08             	mov    0x8(%ebp),%edx
+ 378:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 37b:	0f b6 02             	movzbl (%edx),%eax
+ 37e:	0f b6 19             	movzbl (%ecx),%ebx
+ 381:	84 c0                	test   %al,%al
+ 383:	75 1e                	jne    3a3 <strcmp+0x33>
+ 385:	eb 29                	jmp    3b0 <strcmp+0x40>
+ 387:	89 f6                	mov    %esi,%esi
+ 389:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 390:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 393:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 396:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 399:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	89 f1                	mov    %esi,%ecx
+ 3a3:	38 d8                	cmp    %bl,%al
+ 3a5:	74 e9                	je     390 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 3a7:	29 d8                	sub    %ebx,%eax
+}
+ 3a9:	5b                   	pop    %ebx
+ 3aa:	5e                   	pop    %esi
+ 3ab:	5d                   	pop    %ebp
+ 3ac:	c3                   	ret    
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 3b0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5e                   	pop    %esi
+ 3b6:	5d                   	pop    %ebp
+ 3b7:	c3                   	ret    
+ 3b8:	90                   	nop
+ 3b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 3c9:	74 12                	je     3dd <strlen+0x1d>
+ 3cb:	31 d2                	xor    %edx,%edx
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3d0:	83 c2 01             	add    $0x1,%edx
+ 3d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 3d7:	89 d0                	mov    %edx,%eax
+ 3d9:	75 f5                	jne    3d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3db:	5d                   	pop    %ebp
+ 3dc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3dd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 3df:	5d                   	pop    %ebp
+ 3e0:	c3                   	ret    
+ 3e1:	eb 0d                	jmp    3f0 <memset>
+ 3e3:	90                   	nop
+ 3e4:	90                   	nop
+ 3e5:	90                   	nop
+ 3e6:	90                   	nop
+ 3e7:	90                   	nop
+ 3e8:	90                   	nop
+ 3e9:	90                   	nop
+ 3ea:	90                   	nop
+ 3eb:	90                   	nop
+ 3ec:	90                   	nop
+ 3ed:	90                   	nop
+ 3ee:	90                   	nop
+ 3ef:	90                   	nop
+
+000003f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 3f0:	55                   	push   %ebp
+ 3f1:	89 e5                	mov    %esp,%ebp
+ 3f3:	57                   	push   %edi
+ 3f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 3f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 3fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 3fd:	89 d7                	mov    %edx,%edi
+ 3ff:	fc                   	cld    
+ 400:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 402:	89 d0                	mov    %edx,%eax
+ 404:	5f                   	pop    %edi
+ 405:	5d                   	pop    %ebp
+ 406:	c3                   	ret    
+ 407:	89 f6                	mov    %esi,%esi
+ 409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000410 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	53                   	push   %ebx
+ 414:	8b 45 08             	mov    0x8(%ebp),%eax
+ 417:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 41a:	0f b6 10             	movzbl (%eax),%edx
+ 41d:	84 d2                	test   %dl,%dl
+ 41f:	74 1d                	je     43e <strchr+0x2e>
+    if(*s == c)
+ 421:	38 d3                	cmp    %dl,%bl
+ 423:	89 d9                	mov    %ebx,%ecx
+ 425:	75 0d                	jne    434 <strchr+0x24>
+ 427:	eb 17                	jmp    440 <strchr+0x30>
+ 429:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 430:	38 ca                	cmp    %cl,%dl
+ 432:	74 0c                	je     440 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 434:	83 c0 01             	add    $0x1,%eax
+ 437:	0f b6 10             	movzbl (%eax),%edx
+ 43a:	84 d2                	test   %dl,%dl
+ 43c:	75 f2                	jne    430 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 43e:	31 c0                	xor    %eax,%eax
+}
+ 440:	5b                   	pop    %ebx
+ 441:	5d                   	pop    %ebp
+ 442:	c3                   	ret    
+ 443:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000450 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 456:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 458:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 45b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 45e:	eb 29                	jmp    489 <gets+0x39>
+    cc = read(0, &c, 1);
+ 460:	83 ec 04             	sub    $0x4,%esp
+ 463:	6a 01                	push   $0x1
+ 465:	57                   	push   %edi
+ 466:	6a 00                	push   $0x0
+ 468:	e8 2d 01 00 00       	call   59a <read>
+    if(cc < 1)
+ 46d:	83 c4 10             	add    $0x10,%esp
+ 470:	85 c0                	test   %eax,%eax
+ 472:	7e 1d                	jle    491 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 474:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 478:	8b 55 08             	mov    0x8(%ebp),%edx
+ 47b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 47d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 47f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 483:	74 1b                	je     4a0 <gets+0x50>
+ 485:	3c 0d                	cmp    $0xd,%al
+ 487:	74 17                	je     4a0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 489:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 48c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 48f:	7c cf                	jl     460 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 491:	8b 45 08             	mov    0x8(%ebp),%eax
+ 494:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 498:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49b:	5b                   	pop    %ebx
+ 49c:	5e                   	pop    %esi
+ 49d:	5f                   	pop    %edi
+ 49e:	5d                   	pop    %ebp
+ 49f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 4a0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 4a3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 4a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 4a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ac:	5b                   	pop    %ebx
+ 4ad:	5e                   	pop    %esi
+ 4ae:	5f                   	pop    %edi
+ 4af:	5d                   	pop    %ebp
+ 4b0:	c3                   	ret    
+ 4b1:	eb 0d                	jmp    4c0 <stat>
+ 4b3:	90                   	nop
+ 4b4:	90                   	nop
+ 4b5:	90                   	nop
+ 4b6:	90                   	nop
+ 4b7:	90                   	nop
+ 4b8:	90                   	nop
+ 4b9:	90                   	nop
+ 4ba:	90                   	nop
+ 4bb:	90                   	nop
+ 4bc:	90                   	nop
+ 4bd:	90                   	nop
+ 4be:	90                   	nop
+ 4bf:	90                   	nop
+
+000004c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	56                   	push   %esi
+ 4c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4c5:	83 ec 08             	sub    $0x8,%esp
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 f0 00 00 00       	call   5c2 <open>
+  if(fd < 0)
+ 4d2:	83 c4 10             	add    $0x10,%esp
+ 4d5:	85 c0                	test   %eax,%eax
+ 4d7:	78 27                	js     500 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4d9:	83 ec 08             	sub    $0x8,%esp
+ 4dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 4df:	89 c3                	mov    %eax,%ebx
+ 4e1:	50                   	push   %eax
+ 4e2:	e8 f3 00 00 00       	call   5da <fstat>
+ 4e7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4e9:	89 1c 24             	mov    %ebx,(%esp)
+ 4ec:	e8 b9 00 00 00       	call   5aa <close>
+  return r;
+ 4f1:	83 c4 10             	add    $0x10,%esp
+ 4f4:	89 f0                	mov    %esi,%eax
+}
+ 4f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 4f9:	5b                   	pop    %ebx
+ 4fa:	5e                   	pop    %esi
+ 4fb:	5d                   	pop    %ebp
+ 4fc:	c3                   	ret    
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 500:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 505:	eb ef                	jmp    4f6 <stat+0x36>
+ 507:	89 f6                	mov    %esi,%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000510 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	53                   	push   %ebx
+ 514:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 517:	0f be 11             	movsbl (%ecx),%edx
+ 51a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 51d:	3c 09                	cmp    $0x9,%al
+ 51f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 524:	77 1f                	ja     545 <atoi+0x35>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 530:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 533:	83 c1 01             	add    $0x1,%ecx
+ 536:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53a:	0f be 11             	movsbl (%ecx),%edx
+ 53d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 540:	80 fb 09             	cmp    $0x9,%bl
+ 543:	76 eb                	jbe    530 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 545:	5b                   	pop    %ebx
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	90                   	nop
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000550 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	56                   	push   %esi
+ 554:	53                   	push   %ebx
+ 555:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 558:	8b 45 08             	mov    0x8(%ebp),%eax
+ 55b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 55e:	85 db                	test   %ebx,%ebx
+ 560:	7e 14                	jle    576 <memmove+0x26>
+ 562:	31 d2                	xor    %edx,%edx
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 568:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 56c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 56f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 572:	39 da                	cmp    %ebx,%edx
+ 574:	75 f2                	jne    568 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 576:	5b                   	pop    %ebx
+ 577:	5e                   	pop    %esi
+ 578:	5d                   	pop    %ebp
+ 579:	c3                   	ret    
+
+0000057a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 57a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 57f:	cd 40                	int    $0x40
+ 581:	c3                   	ret    
+
+00000582 <exit>:
+SYSCALL(exit)
+ 582:	b8 02 00 00 00       	mov    $0x2,%eax
+ 587:	cd 40                	int    $0x40
+ 589:	c3                   	ret    
+
+0000058a <wait>:
+SYSCALL(wait)
+ 58a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 58f:	cd 40                	int    $0x40
+ 591:	c3                   	ret    
+
+00000592 <pipe>:
+SYSCALL(pipe)
+ 592:	b8 04 00 00 00       	mov    $0x4,%eax
+ 597:	cd 40                	int    $0x40
+ 599:	c3                   	ret    
+
+0000059a <read>:
+SYSCALL(read)
+ 59a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 59f:	cd 40                	int    $0x40
+ 5a1:	c3                   	ret    
+
+000005a2 <write>:
+SYSCALL(write)
+ 5a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5a7:	cd 40                	int    $0x40
+ 5a9:	c3                   	ret    
+
+000005aa <close>:
+SYSCALL(close)
+ 5aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5af:	cd 40                	int    $0x40
+ 5b1:	c3                   	ret    
+
+000005b2 <kill>:
+SYSCALL(kill)
+ 5b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5b7:	cd 40                	int    $0x40
+ 5b9:	c3                   	ret    
+
+000005ba <exec>:
+SYSCALL(exec)
+ 5ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5bf:	cd 40                	int    $0x40
+ 5c1:	c3                   	ret    
+
+000005c2 <open>:
+SYSCALL(open)
+ 5c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5c7:	cd 40                	int    $0x40
+ 5c9:	c3                   	ret    
+
+000005ca <mknod>:
+SYSCALL(mknod)
+ 5ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5cf:	cd 40                	int    $0x40
+ 5d1:	c3                   	ret    
+
+000005d2 <unlink>:
+SYSCALL(unlink)
+ 5d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5d7:	cd 40                	int    $0x40
+ 5d9:	c3                   	ret    
+
+000005da <fstat>:
+SYSCALL(fstat)
+ 5da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5df:	cd 40                	int    $0x40
+ 5e1:	c3                   	ret    
+
+000005e2 <link>:
+SYSCALL(link)
+ 5e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5e7:	cd 40                	int    $0x40
+ 5e9:	c3                   	ret    
+
+000005ea <mkdir>:
+SYSCALL(mkdir)
+ 5ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 5ef:	cd 40                	int    $0x40
+ 5f1:	c3                   	ret    
+
+000005f2 <chdir>:
+SYSCALL(chdir)
+ 5f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 5f7:	cd 40                	int    $0x40
+ 5f9:	c3                   	ret    
+
+000005fa <dup>:
+SYSCALL(dup)
+ 5fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 5ff:	cd 40                	int    $0x40
+ 601:	c3                   	ret    
+
+00000602 <getpid>:
+SYSCALL(getpid)
+ 602:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 607:	cd 40                	int    $0x40
+ 609:	c3                   	ret    
+
+0000060a <sbrk>:
+SYSCALL(sbrk)
+ 60a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 60f:	cd 40                	int    $0x40
+ 611:	c3                   	ret    
+
+00000612 <sleep>:
+SYSCALL(sleep)
+ 612:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 617:	cd 40                	int    $0x40
+ 619:	c3                   	ret    
+
+0000061a <uptime>:
+SYSCALL(uptime)
+ 61a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 61f:	cd 40                	int    $0x40
+ 621:	c3                   	ret    
+
+00000622 <readcount>:
+SYSCALL(readcount)
+ 622:	b8 16 00 00 00       	mov    $0x16,%eax
+ 627:	cd 40                	int    $0x40
+ 629:	c3                   	ret    
+
+0000062a <callcount>:
+SYSCALL(callcount)
+ 62a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 62f:	cd 40                	int    $0x40
+ 631:	c3                   	ret    
+ 632:	66 90                	xchg   %ax,%ax
+ 634:	66 90                	xchg   %ax,%ax
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	89 c6                	mov    %eax,%esi
+ 648:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 64b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 64e:	85 db                	test   %ebx,%ebx
+ 650:	74 7e                	je     6d0 <printint+0x90>
+ 652:	89 d0                	mov    %edx,%eax
+ 654:	c1 e8 1f             	shr    $0x1f,%eax
+ 657:	84 c0                	test   %al,%al
+ 659:	74 75                	je     6d0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 65b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 65d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 664:	f7 d8                	neg    %eax
+ 666:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 669:	31 ff                	xor    %edi,%edi
+ 66b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 66e:	89 ce                	mov    %ecx,%esi
+ 670:	eb 08                	jmp    67a <printint+0x3a>
+ 672:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 678:	89 cf                	mov    %ecx,%edi
+ 67a:	31 d2                	xor    %edx,%edx
+ 67c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 67f:	f7 f6                	div    %esi
+ 681:	0f b6 92 54 0a 00 00 	movzbl 0xa54(%edx),%edx
+  }while((x /= base) != 0);
+ 688:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 68a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 68d:	75 e9                	jne    678 <printint+0x38>
+  if(neg)
+ 68f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 692:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 695:	85 c0                	test   %eax,%eax
+ 697:	74 08                	je     6a1 <printint+0x61>
+    buf[i++] = '-';
+ 699:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 69e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 6a1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 6a5:	8d 76 00             	lea    0x0(%esi),%esi
+ 6a8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 6ab:	83 ec 04             	sub    $0x4,%esp
+ 6ae:	83 ef 01             	sub    $0x1,%edi
+ 6b1:	6a 01                	push   $0x1
+ 6b3:	53                   	push   %ebx
+ 6b4:	56                   	push   %esi
+ 6b5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 6b8:	e8 e5 fe ff ff       	call   5a2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 6bd:	83 c4 10             	add    $0x10,%esp
+ 6c0:	39 df                	cmp    %ebx,%edi
+ 6c2:	75 e4                	jne    6a8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 6c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 6d0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 6d2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 6d9:	eb 8b                	jmp    666 <printint+0x26>
+ 6db:	90                   	nop
+ 6dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006e0 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6e0:	55                   	push   %ebp
+ 6e1:	89 e5                	mov    %esp,%ebp
+ 6e3:	57                   	push   %edi
+ 6e4:	56                   	push   %esi
+ 6e5:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6e6:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6e9:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6ec:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 6ef:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 6f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 6f5:	0f b6 1e             	movzbl (%esi),%ebx
+ 6f8:	83 c6 01             	add    $0x1,%esi
+ 6fb:	84 db                	test   %bl,%bl
+ 6fd:	0f 84 b0 00 00 00    	je     7b3 <printf+0xd3>
+ 703:	31 d2                	xor    %edx,%edx
+ 705:	eb 39                	jmp    740 <printf+0x60>
+ 707:	89 f6                	mov    %esi,%esi
+ 709:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 710:	83 f8 25             	cmp    $0x25,%eax
+ 713:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 716:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 71b:	74 18                	je     735 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 71d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 720:	83 ec 04             	sub    $0x4,%esp
+ 723:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 726:	6a 01                	push   $0x1
+ 728:	50                   	push   %eax
+ 729:	57                   	push   %edi
+ 72a:	e8 73 fe ff ff       	call   5a2 <write>
+ 72f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 732:	83 c4 10             	add    $0x10,%esp
+ 735:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 738:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 73c:	84 db                	test   %bl,%bl
+ 73e:	74 73                	je     7b3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 740:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 742:	0f be cb             	movsbl %bl,%ecx
+ 745:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 748:	74 c6                	je     710 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 74a:	83 fa 25             	cmp    $0x25,%edx
+ 74d:	75 e6                	jne    735 <printf+0x55>
+      if(c == 'd'){
+ 74f:	83 f8 64             	cmp    $0x64,%eax
+ 752:	0f 84 f8 00 00 00    	je     850 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 758:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 75e:	83 f9 70             	cmp    $0x70,%ecx
+ 761:	74 5d                	je     7c0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 763:	83 f8 73             	cmp    $0x73,%eax
+ 766:	0f 84 84 00 00 00    	je     7f0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 76c:	83 f8 63             	cmp    $0x63,%eax
+ 76f:	0f 84 ea 00 00 00    	je     85f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 775:	83 f8 25             	cmp    $0x25,%eax
+ 778:	0f 84 c2 00 00 00    	je     840 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 77e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 781:	83 ec 04             	sub    $0x4,%esp
+ 784:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 788:	6a 01                	push   $0x1
+ 78a:	50                   	push   %eax
+ 78b:	57                   	push   %edi
+ 78c:	e8 11 fe ff ff       	call   5a2 <write>
+ 791:	83 c4 0c             	add    $0xc,%esp
+ 794:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 797:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 79a:	6a 01                	push   $0x1
+ 79c:	50                   	push   %eax
+ 79d:	57                   	push   %edi
+ 79e:	83 c6 01             	add    $0x1,%esi
+ 7a1:	e8 fc fd ff ff       	call   5a2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 7a6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 7aa:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7ad:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 7af:	84 db                	test   %bl,%bl
+ 7b1:	75 8d                	jne    740 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 7b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7b6:	5b                   	pop    %ebx
+ 7b7:	5e                   	pop    %esi
+ 7b8:	5f                   	pop    %edi
+ 7b9:	5d                   	pop    %ebp
+ 7ba:	c3                   	ret    
+ 7bb:	90                   	nop
+ 7bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 7c0:	83 ec 0c             	sub    $0xc,%esp
+ 7c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7c8:	6a 00                	push   $0x0
+ 7ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7cd:	89 f8                	mov    %edi,%eax
+ 7cf:	8b 13                	mov    (%ebx),%edx
+ 7d1:	e8 6a fe ff ff       	call   640 <printint>
+        ap++;
+ 7d6:	89 d8                	mov    %ebx,%eax
+ 7d8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 7db:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 7dd:	83 c0 04             	add    $0x4,%eax
+ 7e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 7e3:	e9 4d ff ff ff       	jmp    735 <printf+0x55>
+ 7e8:	90                   	nop
+ 7e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 7f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7f3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 7f5:	83 c0 04             	add    $0x4,%eax
+ 7f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 7fb:	b8 4a 0a 00 00       	mov    $0xa4a,%eax
+ 800:	85 db                	test   %ebx,%ebx
+ 802:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 805:	0f b6 03             	movzbl (%ebx),%eax
+ 808:	84 c0                	test   %al,%al
+ 80a:	74 23                	je     82f <printf+0x14f>
+ 80c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 810:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 813:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 816:	83 ec 04             	sub    $0x4,%esp
+ 819:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 81b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 81e:	50                   	push   %eax
+ 81f:	57                   	push   %edi
+ 820:	e8 7d fd ff ff       	call   5a2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 825:	0f b6 03             	movzbl (%ebx),%eax
+ 828:	83 c4 10             	add    $0x10,%esp
+ 82b:	84 c0                	test   %al,%al
+ 82d:	75 e1                	jne    810 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 82f:	31 d2                	xor    %edx,%edx
+ 831:	e9 ff fe ff ff       	jmp    735 <printf+0x55>
+ 836:	8d 76 00             	lea    0x0(%esi),%esi
+ 839:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 840:	83 ec 04             	sub    $0x4,%esp
+ 843:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 846:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 849:	6a 01                	push   $0x1
+ 84b:	e9 4c ff ff ff       	jmp    79c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 850:	83 ec 0c             	sub    $0xc,%esp
+ 853:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 858:	6a 01                	push   $0x1
+ 85a:	e9 6b ff ff ff       	jmp    7ca <printf+0xea>
+ 85f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 862:	83 ec 04             	sub    $0x4,%esp
+ 865:	8b 03                	mov    (%ebx),%eax
+ 867:	6a 01                	push   $0x1
+ 869:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 86c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 86f:	50                   	push   %eax
+ 870:	57                   	push   %edi
+ 871:	e8 2c fd ff ff       	call   5a2 <write>
+ 876:	e9 5b ff ff ff       	jmp    7d6 <printf+0xf6>
+ 87b:	66 90                	xchg   %ax,%ax
+ 87d:	66 90                	xchg   %ax,%ax
+ 87f:	90                   	nop
+
+00000880 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 880:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 881:	a1 70 0d 00 00       	mov    0xd70,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 886:	89 e5                	mov    %esp,%ebp
+ 888:	57                   	push   %edi
+ 889:	56                   	push   %esi
+ 88a:	53                   	push   %ebx
+ 88b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 88e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 890:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 893:	39 c8                	cmp    %ecx,%eax
+ 895:	73 19                	jae    8b0 <free+0x30>
+ 897:	89 f6                	mov    %esi,%esi
+ 899:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 8a0:	39 d1                	cmp    %edx,%ecx
+ 8a2:	72 1c                	jb     8c0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8a4:	39 d0                	cmp    %edx,%eax
+ 8a6:	73 18                	jae    8c0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8a8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8aa:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8ac:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8ae:	72 f0                	jb     8a0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8b0:	39 d0                	cmp    %edx,%eax
+ 8b2:	72 f4                	jb     8a8 <free+0x28>
+ 8b4:	39 d1                	cmp    %edx,%ecx
+ 8b6:	73 f0                	jae    8a8 <free+0x28>
+ 8b8:	90                   	nop
+ 8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8c0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8c3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8c6:	39 d7                	cmp    %edx,%edi
+ 8c8:	74 19                	je     8e3 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 8ca:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8cd:	8b 50 04             	mov    0x4(%eax),%edx
+ 8d0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8d3:	39 f1                	cmp    %esi,%ecx
+ 8d5:	74 23                	je     8fa <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 8d7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 8d9:	a3 70 0d 00 00       	mov    %eax,0xd70
+}
+ 8de:	5b                   	pop    %ebx
+ 8df:	5e                   	pop    %esi
+ 8e0:	5f                   	pop    %edi
+ 8e1:	5d                   	pop    %ebp
+ 8e2:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 8e3:	03 72 04             	add    0x4(%edx),%esi
+ 8e6:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8e9:	8b 10                	mov    (%eax),%edx
+ 8eb:	8b 12                	mov    (%edx),%edx
+ 8ed:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 8f0:	8b 50 04             	mov    0x4(%eax),%edx
+ 8f3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8f6:	39 f1                	cmp    %esi,%ecx
+ 8f8:	75 dd                	jne    8d7 <free+0x57>
+    p->s.size += bp->s.size;
+ 8fa:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 8fd:	a3 70 0d 00 00       	mov    %eax,0xd70
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 902:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 905:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 908:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 90a:	5b                   	pop    %ebx
+ 90b:	5e                   	pop    %esi
+ 90c:	5f                   	pop    %edi
+ 90d:	5d                   	pop    %ebp
+ 90e:	c3                   	ret    
+ 90f:	90                   	nop
+
+00000910 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 910:	55                   	push   %ebp
+ 911:	89 e5                	mov    %esp,%ebp
+ 913:	57                   	push   %edi
+ 914:	56                   	push   %esi
+ 915:	53                   	push   %ebx
+ 916:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 919:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 91c:	8b 15 70 0d 00 00    	mov    0xd70,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 922:	8d 78 07             	lea    0x7(%eax),%edi
+ 925:	c1 ef 03             	shr    $0x3,%edi
+ 928:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 92b:	85 d2                	test   %edx,%edx
+ 92d:	0f 84 a3 00 00 00    	je     9d6 <malloc+0xc6>
+ 933:	8b 02                	mov    (%edx),%eax
+ 935:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 938:	39 cf                	cmp    %ecx,%edi
+ 93a:	76 74                	jbe    9b0 <malloc+0xa0>
+ 93c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 942:	be 00 10 00 00       	mov    $0x1000,%esi
+ 947:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 94e:	0f 43 f7             	cmovae %edi,%esi
+ 951:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 956:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 95c:	0f 46 da             	cmovbe %edx,%ebx
+ 95f:	eb 10                	jmp    971 <malloc+0x61>
+ 961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 968:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 96a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 96d:	39 cf                	cmp    %ecx,%edi
+ 96f:	76 3f                	jbe    9b0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 971:	39 05 70 0d 00 00    	cmp    %eax,0xd70
+ 977:	89 c2                	mov    %eax,%edx
+ 979:	75 ed                	jne    968 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 97b:	83 ec 0c             	sub    $0xc,%esp
+ 97e:	53                   	push   %ebx
+ 97f:	e8 86 fc ff ff       	call   60a <sbrk>
+  if(p == (char*)-1)
+ 984:	83 c4 10             	add    $0x10,%esp
+ 987:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 98a:	74 1c                	je     9a8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 98c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 98f:	83 ec 0c             	sub    $0xc,%esp
+ 992:	83 c0 08             	add    $0x8,%eax
+ 995:	50                   	push   %eax
+ 996:	e8 e5 fe ff ff       	call   880 <free>
+  return freep;
+ 99b:	8b 15 70 0d 00 00    	mov    0xd70,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 9a1:	83 c4 10             	add    $0x10,%esp
+ 9a4:	85 d2                	test   %edx,%edx
+ 9a6:	75 c0                	jne    968 <malloc+0x58>
+        return 0;
+ 9a8:	31 c0                	xor    %eax,%eax
+ 9aa:	eb 1c                	jmp    9c8 <malloc+0xb8>
+ 9ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 9b0:	39 cf                	cmp    %ecx,%edi
+ 9b2:	74 1c                	je     9d0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 9b4:	29 f9                	sub    %edi,%ecx
+ 9b6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 9b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 9bc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 9bf:	89 15 70 0d 00 00    	mov    %edx,0xd70
+      return (void*)(p + 1);
+ 9c5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 9c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 9cb:	5b                   	pop    %ebx
+ 9cc:	5e                   	pop    %esi
+ 9cd:	5f                   	pop    %edi
+ 9ce:	5d                   	pop    %ebp
+ 9cf:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 9d0:	8b 08                	mov    (%eax),%ecx
+ 9d2:	89 0a                	mov    %ecx,(%edx)
+ 9d4:	eb e9                	jmp    9bf <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 9d6:	c7 05 70 0d 00 00 74 	movl   $0xd74,0xd70
+ 9dd:	0d 00 00 
+ 9e0:	c7 05 74 0d 00 00 74 	movl   $0xd74,0xd74
+ 9e7:	0d 00 00 
+    base.s.size = 0;
+ 9ea:	b8 74 0d 00 00       	mov    $0xd74,%eax
+ 9ef:	c7 05 78 0d 00 00 00 	movl   $0x0,0xd78
+ 9f6:	00 00 00 
+ 9f9:	e9 3e ff ff ff       	jmp    93c <malloc+0x2c>
diff -ruN ./xv6-public-src/ls.d ./xv6-public/ls.d
--- ./xv6-public-src/ls.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ls.d	2019-11-28 17:52:28.279956651 +0200
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files ./xv6-public-src/ls.o and ./xv6-public/ls.o differ
diff -ruN ./xv6-public-src/ls.sym ./xv6-public/ls.sym
--- ./xv6-public-src/ls.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ls.sym	2019-11-28 17:52:28.303971457 +0200
@@ -0,0 +1,62 @@
+00000000 .text
+00000a00 .rodata
+00000a68 .eh_frame
+00000d60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000d60 buf.1122
+00000000 ulib.c
+00000000 printf.c
+00000640 printint
+00000a54 digits.1111
+00000000 umalloc.c
+00000d70 freep
+00000d74 base
+00000340 strcpy
+00000060 fmtname
+000006e0 printf
+00000550 memmove
+000005ca mknod
+00000450 gets
+00000602 getpid
+00000910 malloc
+00000612 sleep
+00000622 readcount
+0000062a callcount
+00000592 pipe
+000005a2 write
+000005da fstat
+000005b2 kill
+000005f2 chdir
+000005ba exec
+0000058a wait
+0000059a read
+000005d2 unlink
+0000057a fork
+0000060a sbrk
+0000061a uptime
+00000d60 __bss_start
+000003f0 memset
+00000000 main
+00000370 strcmp
+000005fa dup
+000004c0 stat
+00000d60 _edata
+00000d7c _end
+000005e2 link
+00000100 ls
+00000582 exit
+00000510 atoi
+000003c0 strlen
+000005c2 open
+00000410 strchr
+000005ea mkdir
+000005aa close
+00000880 free
diff -ruN ./xv6-public-src/main.c ./xv6-public/main.c
--- ./xv6-public-src/main.c	2019-11-27 20:42:25.950688000 +0200
+++ ./xv6-public/main.c	2019-11-27 22:00:48.674659900 +0200
@@ -27,6 +27,7 @@
   consoleinit();   // console hardware
   uartinit();      // serial port
   pinit();         // process table
+  scinit();        // init syscall counter
   tvinit();        // trap vectors
   binit();         // buffer cache
   fileinit();      // file table
diff -ruN ./xv6-public-src/main.d ./xv6-public/main.d
--- ./xv6-public-src/main.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/main.d	2019-11-28 17:52:29.712837437 +0200
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files ./xv6-public-src/main.o and ./xv6-public/main.o differ
diff -ruN ./xv6-public-src/Makefile ./xv6-public/Makefile
--- ./xv6-public-src/Makefile	2019-11-27 20:42:25.950688000 +0200
+++ ./xv6-public/Makefile	2019-11-27 23:27:05.440937809 +0200
@@ -181,6 +181,9 @@
 	_usertests\
 	_wc\
 	_zombie\
+        _test_count\
+        _test_count_for\
+        _test_call_count\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
Binary files ./xv6-public-src/_mkdir and ./xv6-public/_mkdir differ
diff -ruN ./xv6-public-src/mkdir.asm ./xv6-public/mkdir.asm
--- ./xv6-public-src/mkdir.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/mkdir.asm	2019-11-28 17:52:28.335991198 +0200
@@ -0,0 +1,1526 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bf 01 00 00 00       	mov    $0x1,%edi
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d 76 00             	lea    0x0(%esi),%esi
+  29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 f0 02 00 00       	call   32a <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  if(argc < 2){
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 72 02 00 00       	call   2c2 <exit>
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 57 07 00 00       	push   $0x757
+  58:	6a 02                	push   $0x2
+  5a:	e8 c1 03 00 00       	call   420 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 40 07 00 00       	push   $0x740
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ae 03 00 00       	call   420 <printf>
+    exit();
+  72:	e8 4b 02 00 00       	call   2c2 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	56                   	push   %esi
+  b4:	53                   	push   %ebx
+  b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  bb:	0f b6 02             	movzbl (%edx),%eax
+  be:	0f b6 19             	movzbl (%ecx),%ebx
+  c1:	84 c0                	test   %al,%al
+  c3:	75 1e                	jne    e3 <strcmp+0x33>
+  c5:	eb 29                	jmp    f0 <strcmp+0x40>
+  c7:	89 f6                	mov    %esi,%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	89 f1                	mov    %esi,%ecx
+  e3:	38 d8                	cmp    %bl,%al
+  e5:	74 e9                	je     d0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  e7:	29 d8                	sub    %ebx,%eax
+}
+  e9:	5b                   	pop    %ebx
+  ea:	5e                   	pop    %esi
+  eb:	5d                   	pop    %ebp
+  ec:	c3                   	ret    
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  f0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5e                   	pop    %esi
+  f6:	5d                   	pop    %ebp
+  f7:	c3                   	ret    
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 12                	je     11d <strlen+0x1d>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 11d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 11f:	5d                   	pop    %ebp
+ 120:	c3                   	ret    
+ 121:	eb 0d                	jmp    130 <memset>
+ 123:	90                   	nop
+ 124:	90                   	nop
+ 125:	90                   	nop
+ 126:	90                   	nop
+ 127:	90                   	nop
+ 128:	90                   	nop
+ 129:	90                   	nop
+ 12a:	90                   	nop
+ 12b:	90                   	nop
+ 12c:	90                   	nop
+ 12d:	90                   	nop
+ 12e:	90                   	nop
+ 12f:	90                   	nop
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 198:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 19b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 19e:	eb 29                	jmp    1c9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	6a 01                	push   $0x1
+ 1a5:	57                   	push   %edi
+ 1a6:	6a 00                	push   $0x0
+ 1a8:	e8 2d 01 00 00       	call   2da <read>
+    if(cc < 1)
+ 1ad:	83 c4 10             	add    $0x10,%esp
+ 1b0:	85 c0                	test   %eax,%eax
+ 1b2:	7e 1d                	jle    1d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1bb:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 1bd:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 1bf:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1c3:	74 1b                	je     1e0 <gets+0x50>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 17                	je     1e0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1cf:	7c cf                	jl     1a0 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1db:	5b                   	pop    %ebx
+ 1dc:	5e                   	pop    %esi
+ 1dd:	5f                   	pop    %edi
+ 1de:	5d                   	pop    %ebp
+ 1df:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1e0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1e3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ec:	5b                   	pop    %ebx
+ 1ed:	5e                   	pop    %esi
+ 1ee:	5f                   	pop    %edi
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	eb 0d                	jmp    200 <stat>
+ 1f3:	90                   	nop
+ 1f4:	90                   	nop
+ 1f5:	90                   	nop
+ 1f6:	90                   	nop
+ 1f7:	90                   	nop
+ 1f8:	90                   	nop
+ 1f9:	90                   	nop
+ 1fa:	90                   	nop
+ 1fb:	90                   	nop
+ 1fc:	90                   	nop
+ 1fd:	90                   	nop
+ 1fe:	90                   	nop
+ 1ff:	90                   	nop
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 f0 00 00 00       	call   302 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f3 00 00 00       	call   31a <fstat>
+ 227:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 229:	89 1c 24             	mov    %ebx,(%esp)
+ 22c:	e8 b9 00 00 00       	call   2ea <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+ 234:	89 f0                	mov    %esi,%eax
+}
+ 236:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 240:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 245:	eb ef                	jmp    236 <stat+0x36>
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d 76 00             	lea    0x0(%esi),%esi
+ 269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 270:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 273:	83 c1 01             	add    $0x1,%ecx
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	90                   	nop
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 298:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 db                	test   %ebx,%ebx
+ 2a0:	7e 14                	jle    2b6 <memmove+0x26>
+ 2a2:	31 d2                	xor    %edx,%edx
+ 2a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2af:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	39 da                	cmp    %ebx,%edx
+ 2b4:	75 f2                	jne    2a8 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+
+000002ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <exit>:
+SYSCALL(exit)
+ 2c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <wait>:
+SYSCALL(wait)
+ 2ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <pipe>:
+SYSCALL(pipe)
+ 2d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <read>:
+SYSCALL(read)
+ 2da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <write>:
+SYSCALL(write)
+ 2e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <close>:
+SYSCALL(close)
+ 2ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <kill>:
+SYSCALL(kill)
+ 2f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <exec>:
+SYSCALL(exec)
+ 2fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <open>:
+SYSCALL(open)
+ 302:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mknod>:
+SYSCALL(mknod)
+ 30a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <unlink>:
+SYSCALL(unlink)
+ 312:	b8 12 00 00 00       	mov    $0x12,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <fstat>:
+SYSCALL(fstat)
+ 31a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <link>:
+SYSCALL(link)
+ 322:	b8 13 00 00 00       	mov    $0x13,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <mkdir>:
+SYSCALL(mkdir)
+ 32a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <chdir>:
+SYSCALL(chdir)
+ 332:	b8 09 00 00 00       	mov    $0x9,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <dup>:
+SYSCALL(dup)
+ 33a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getpid>:
+SYSCALL(getpid)
+ 342:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <sbrk>:
+SYSCALL(sbrk)
+ 34a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <sleep>:
+SYSCALL(sleep)
+ 352:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <uptime>:
+SYSCALL(uptime)
+ 35a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <readcount>:
+SYSCALL(readcount)
+ 362:	b8 16 00 00 00       	mov    $0x16,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <callcount>:
+SYSCALL(callcount)
+ 36a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+ 372:	66 90                	xchg   %ax,%ax
+ 374:	66 90                	xchg   %ax,%ax
+ 376:	66 90                	xchg   %ax,%ax
+ 378:	66 90                	xchg   %ax,%ax
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	89 c6                	mov    %eax,%esi
+ 388:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 38b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 38e:	85 db                	test   %ebx,%ebx
+ 390:	74 7e                	je     410 <printint+0x90>
+ 392:	89 d0                	mov    %edx,%eax
+ 394:	c1 e8 1f             	shr    $0x1f,%eax
+ 397:	84 c0                	test   %al,%al
+ 399:	74 75                	je     410 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 39b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 39d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 3a4:	f7 d8                	neg    %eax
+ 3a6:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a9:	31 ff                	xor    %edi,%edi
+ 3ab:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3ae:	89 ce                	mov    %ecx,%esi
+ 3b0:	eb 08                	jmp    3ba <printint+0x3a>
+ 3b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b8:	89 cf                	mov    %ecx,%edi
+ 3ba:	31 d2                	xor    %edx,%edx
+ 3bc:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 3bf:	f7 f6                	div    %esi
+ 3c1:	0f b6 92 7c 07 00 00 	movzbl 0x77c(%edx),%edx
+  }while((x /= base) != 0);
+ 3c8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3ca:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3cd:	75 e9                	jne    3b8 <printint+0x38>
+  if(neg)
+ 3cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3d2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3d5:	85 c0                	test   %eax,%eax
+ 3d7:	74 08                	je     3e1 <printint+0x61>
+    buf[i++] = '-';
+ 3d9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3de:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3e1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3e5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3eb:	83 ec 04             	sub    $0x4,%esp
+ 3ee:	83 ef 01             	sub    $0x1,%edi
+ 3f1:	6a 01                	push   $0x1
+ 3f3:	53                   	push   %ebx
+ 3f4:	56                   	push   %esi
+ 3f5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f8:	e8 e5 fe ff ff       	call   2e2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3fd:	83 c4 10             	add    $0x10,%esp
+ 400:	39 df                	cmp    %ebx,%edi
+ 402:	75 e4                	jne    3e8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 404:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 407:	5b                   	pop    %ebx
+ 408:	5e                   	pop    %esi
+ 409:	5f                   	pop    %edi
+ 40a:	5d                   	pop    %ebp
+ 40b:	c3                   	ret    
+ 40c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 410:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 412:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 419:	eb 8b                	jmp    3a6 <printint+0x26>
+ 41b:	90                   	nop
+ 41c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000420 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 426:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 429:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 42c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 42f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 432:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 435:	0f b6 1e             	movzbl (%esi),%ebx
+ 438:	83 c6 01             	add    $0x1,%esi
+ 43b:	84 db                	test   %bl,%bl
+ 43d:	0f 84 b0 00 00 00    	je     4f3 <printf+0xd3>
+ 443:	31 d2                	xor    %edx,%edx
+ 445:	eb 39                	jmp    480 <printf+0x60>
+ 447:	89 f6                	mov    %esi,%esi
+ 449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 450:	83 f8 25             	cmp    $0x25,%eax
+ 453:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 456:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 45b:	74 18                	je     475 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 45d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 460:	83 ec 04             	sub    $0x4,%esp
+ 463:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 466:	6a 01                	push   $0x1
+ 468:	50                   	push   %eax
+ 469:	57                   	push   %edi
+ 46a:	e8 73 fe ff ff       	call   2e2 <write>
+ 46f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 472:	83 c4 10             	add    $0x10,%esp
+ 475:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 478:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47c:	84 db                	test   %bl,%bl
+ 47e:	74 73                	je     4f3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 480:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 482:	0f be cb             	movsbl %bl,%ecx
+ 485:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 488:	74 c6                	je     450 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 48a:	83 fa 25             	cmp    $0x25,%edx
+ 48d:	75 e6                	jne    475 <printf+0x55>
+      if(c == 'd'){
+ 48f:	83 f8 64             	cmp    $0x64,%eax
+ 492:	0f 84 f8 00 00 00    	je     590 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 498:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49e:	83 f9 70             	cmp    $0x70,%ecx
+ 4a1:	74 5d                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a3:	83 f8 73             	cmp    $0x73,%eax
+ 4a6:	0f 84 84 00 00 00    	je     530 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ac:	83 f8 63             	cmp    $0x63,%eax
+ 4af:	0f 84 ea 00 00 00    	je     59f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b5:	83 f8 25             	cmp    $0x25,%eax
+ 4b8:	0f 84 c2 00 00 00    	je     580 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	83 ec 04             	sub    $0x4,%esp
+ 4c4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c8:	6a 01                	push   $0x1
+ 4ca:	50                   	push   %eax
+ 4cb:	57                   	push   %edi
+ 4cc:	e8 11 fe ff ff       	call   2e2 <write>
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4d7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4da:	6a 01                	push   $0x1
+ 4dc:	50                   	push   %eax
+ 4dd:	57                   	push   %edi
+ 4de:	83 c6 01             	add    $0x1,%esi
+ 4e1:	e8 fc fd ff ff       	call   2e2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4e6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ea:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4ed:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4ef:	84 db                	test   %bl,%bl
+ 4f1:	75 8d                	jne    480 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f6:	5b                   	pop    %ebx
+ 4f7:	5e                   	pop    %esi
+ 4f8:	5f                   	pop    %edi
+ 4f9:	5d                   	pop    %ebp
+ 4fa:	c3                   	ret    
+ 4fb:	90                   	nop
+ 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	89 f8                	mov    %edi,%eax
+ 50f:	8b 13                	mov    (%ebx),%edx
+ 511:	e8 6a fe ff ff       	call   380 <printint>
+        ap++;
+ 516:	89 d8                	mov    %ebx,%eax
+ 518:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 51b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 523:	e9 4d ff ff ff       	jmp    475 <printf+0x55>
+ 528:	90                   	nop
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 530:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 533:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 535:	83 c0 04             	add    $0x4,%eax
+ 538:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 53b:	b8 73 07 00 00       	mov    $0x773,%eax
+ 540:	85 db                	test   %ebx,%ebx
+ 542:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 545:	0f b6 03             	movzbl (%ebx),%eax
+ 548:	84 c0                	test   %al,%al
+ 54a:	74 23                	je     56f <printf+0x14f>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 550:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 553:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 556:	83 ec 04             	sub    $0x4,%esp
+ 559:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 55b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 55e:	50                   	push   %eax
+ 55f:	57                   	push   %edi
+ 560:	e8 7d fd ff ff       	call   2e2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 565:	0f b6 03             	movzbl (%ebx),%eax
+ 568:	83 c4 10             	add    $0x10,%esp
+ 56b:	84 c0                	test   %al,%al
+ 56d:	75 e1                	jne    550 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 ff fe ff ff       	jmp    475 <printf+0x55>
+ 576:	8d 76 00             	lea    0x0(%esi),%esi
+ 579:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 586:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 589:	6a 01                	push   $0x1
+ 58b:	e9 4c ff ff ff       	jmp    4dc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 6b ff ff ff       	jmp    50a <printf+0xea>
+ 59f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5a2:	83 ec 04             	sub    $0x4,%esp
+ 5a5:	8b 03                	mov    (%ebx),%eax
+ 5a7:	6a 01                	push   $0x1
+ 5a9:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5ac:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5af:	50                   	push   %eax
+ 5b0:	57                   	push   %edi
+ 5b1:	e8 2c fd ff ff       	call   2e2 <write>
+ 5b6:	e9 5b ff ff ff       	jmp    516 <printf+0xf6>
+ 5bb:	66 90                	xchg   %ax,%ax
+ 5bd:	66 90                	xchg   %ax,%ax
+ 5bf:	90                   	nop
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 20 0a 00 00       	mov    0xa20,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ce:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5d0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d3:	39 c8                	cmp    %ecx,%eax
+ 5d5:	73 19                	jae    5f0 <free+0x30>
+ 5d7:	89 f6                	mov    %esi,%esi
+ 5d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5e0:	39 d1                	cmp    %edx,%ecx
+ 5e2:	72 1c                	jb     600 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e4:	39 d0                	cmp    %edx,%eax
+ 5e6:	73 18                	jae    600 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ea:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ec:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ee:	72 f0                	jb     5e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f0:	39 d0                	cmp    %edx,%eax
+ 5f2:	72 f4                	jb     5e8 <free+0x28>
+ 5f4:	39 d1                	cmp    %edx,%ecx
+ 5f6:	73 f0                	jae    5e8 <free+0x28>
+ 5f8:	90                   	nop
+ 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 600:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 603:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 606:	39 d7                	cmp    %edx,%edi
+ 608:	74 19                	je     623 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 60a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 60d:	8b 50 04             	mov    0x4(%eax),%edx
+ 610:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 613:	39 f1                	cmp    %esi,%ecx
+ 615:	74 23                	je     63a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 617:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 619:	a3 20 0a 00 00       	mov    %eax,0xa20
+}
+ 61e:	5b                   	pop    %ebx
+ 61f:	5e                   	pop    %esi
+ 620:	5f                   	pop    %edi
+ 621:	5d                   	pop    %ebp
+ 622:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 623:	03 72 04             	add    0x4(%edx),%esi
+ 626:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 629:	8b 10                	mov    (%eax),%edx
+ 62b:	8b 12                	mov    (%edx),%edx
+ 62d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 630:	8b 50 04             	mov    0x4(%eax),%edx
+ 633:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 636:	39 f1                	cmp    %esi,%ecx
+ 638:	75 dd                	jne    617 <free+0x57>
+    p->s.size += bp->s.size;
+ 63a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 63d:	a3 20 0a 00 00       	mov    %eax,0xa20
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 642:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 645:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 648:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 64a:	5b                   	pop    %ebx
+ 64b:	5e                   	pop    %esi
+ 64c:	5f                   	pop    %edi
+ 64d:	5d                   	pop    %ebp
+ 64e:	c3                   	ret    
+ 64f:	90                   	nop
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 15 20 0a 00 00    	mov    0xa20,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 78 07             	lea    0x7(%eax),%edi
+ 665:	c1 ef 03             	shr    $0x3,%edi
+ 668:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 66b:	85 d2                	test   %edx,%edx
+ 66d:	0f 84 a3 00 00 00    	je     716 <malloc+0xc6>
+ 673:	8b 02                	mov    (%edx),%eax
+ 675:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 678:	39 cf                	cmp    %ecx,%edi
+ 67a:	76 74                	jbe    6f0 <malloc+0xa0>
+ 67c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 682:	be 00 10 00 00       	mov    $0x1000,%esi
+ 687:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 68e:	0f 43 f7             	cmovae %edi,%esi
+ 691:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 696:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 69c:	0f 46 da             	cmovbe %edx,%ebx
+ 69f:	eb 10                	jmp    6b1 <malloc+0x61>
+ 6a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 cf                	cmp    %ecx,%edi
+ 6af:	76 3f                	jbe    6f0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	39 05 20 0a 00 00    	cmp    %eax,0xa20
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	75 ed                	jne    6a8 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 6bb:	83 ec 0c             	sub    $0xc,%esp
+ 6be:	53                   	push   %ebx
+ 6bf:	e8 86 fc ff ff       	call   34a <sbrk>
+  if(p == (char*)-1)
+ 6c4:	83 c4 10             	add    $0x10,%esp
+ 6c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ca:	74 1c                	je     6e8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6cc:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6cf:	83 ec 0c             	sub    $0xc,%esp
+ 6d2:	83 c0 08             	add    $0x8,%eax
+ 6d5:	50                   	push   %eax
+ 6d6:	e8 e5 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6db:	8b 15 20 0a 00 00    	mov    0xa20,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6e1:	83 c4 10             	add    $0x10,%esp
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	75 c0                	jne    6a8 <malloc+0x58>
+        return 0;
+ 6e8:	31 c0                	xor    %eax,%eax
+ 6ea:	eb 1c                	jmp    708 <malloc+0xb8>
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6f0:	39 cf                	cmp    %ecx,%edi
+ 6f2:	74 1c                	je     710 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6f4:	29 f9                	sub    %edi,%ecx
+ 6f6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6fc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6ff:	89 15 20 0a 00 00    	mov    %edx,0xa20
+      return (void*)(p + 1);
+ 705:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70b:	5b                   	pop    %ebx
+ 70c:	5e                   	pop    %esi
+ 70d:	5f                   	pop    %edi
+ 70e:	5d                   	pop    %ebp
+ 70f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 710:	8b 08                	mov    (%eax),%ecx
+ 712:	89 0a                	mov    %ecx,(%edx)
+ 714:	eb e9                	jmp    6ff <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 716:	c7 05 20 0a 00 00 24 	movl   $0xa24,0xa20
+ 71d:	0a 00 00 
+ 720:	c7 05 24 0a 00 00 24 	movl   $0xa24,0xa24
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	b8 24 0a 00 00       	mov    $0xa24,%eax
+ 72f:	c7 05 28 0a 00 00 00 	movl   $0x0,0xa28
+ 736:	00 00 00 
+ 739:	e9 3e ff ff ff       	jmp    67c <malloc+0x2c>
diff -ruN ./xv6-public-src/mkdir.d ./xv6-public/mkdir.d
--- ./xv6-public-src/mkdir.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/mkdir.d	2019-11-28 17:52:28.315978860 +0200
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/mkdir.o and ./xv6-public/mkdir.o differ
diff -ruN ./xv6-public-src/mkdir.sym ./xv6-public/mkdir.sym
--- ./xv6-public-src/mkdir.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/mkdir.sym	2019-11-28 17:52:28.339993666 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000740 .rodata
+00000790 .eh_frame
+00000a20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+0000077c digits.1111
+00000000 umalloc.c
+00000a20 freep
+00000a24 base
+00000080 strcpy
+00000420 printf
+00000290 memmove
+0000030a mknod
+00000190 gets
+00000342 getpid
+00000650 malloc
+00000352 sleep
+00000362 readcount
+0000036a callcount
+000002d2 pipe
+000002e2 write
+0000031a fstat
+000002f2 kill
+00000332 chdir
+000002fa exec
+000002ca wait
+000002da read
+00000312 unlink
+000002ba fork
+0000034a sbrk
+0000035a uptime
+00000a20 __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+0000033a dup
+00000200 stat
+00000a20 _edata
+00000a2c _end
+00000322 link
+000002c2 exit
+00000250 atoi
+00000100 strlen
+00000302 open
+00000150 strchr
+0000032a mkdir
+000002ea close
+000005c0 free
Binary files ./xv6-public-src/mkfs and ./xv6-public/mkfs differ
diff -ruN ./xv6-public-src/mp.d ./xv6-public/mp.d
--- ./xv6-public-src/mp.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/mp.d	2019-11-28 17:52:29.752861966 +0200
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files ./xv6-public-src/mp.o and ./xv6-public/mp.o differ
diff -ruN ./xv6-public-src/picirq.d ./xv6-public/picirq.d
--- ./xv6-public-src/picirq.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/picirq.d	2019-11-28 17:52:29.772874230 +0200
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files ./xv6-public-src/picirq.o and ./xv6-public/picirq.o differ
diff -ruN ./xv6-public-src/pipe.d ./xv6-public/pipe.d
--- ./xv6-public-src/pipe.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/pipe.d	2019-11-28 17:52:29.816901212 +0200
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files ./xv6-public-src/pipe.o and ./xv6-public/pipe.o differ
diff -ruN ./xv6-public-src/printf.d ./xv6-public/printf.d
--- ./xv6-public-src/printf.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/printf.d	2019-11-28 17:52:27.879709413 +0200
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/printf.o and ./xv6-public/printf.o differ
diff -ruN ./xv6-public-src/proc.d ./xv6-public/proc.d
--- ./xv6-public-src/proc.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/proc.d	2019-11-28 17:52:29.900952721 +0200
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
Binary files ./xv6-public-src/proc.o and ./xv6-public/proc.o differ
Binary files ./xv6-public-src/_rm and ./xv6-public/_rm differ
diff -ruN ./xv6-public-src/rm.asm ./xv6-public/rm.asm
--- ./xv6-public-src/rm.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/rm.asm	2019-11-28 17:52:28.384020810 +0200
@@ -0,0 +1,1526 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	bf 01 00 00 00       	mov    $0x1,%edi
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d 76 00             	lea    0x0(%esi),%esi
+  29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 d8 02 00 00       	call   312 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  if(argc < 2){
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 72 02 00 00       	call   2c2 <exit>
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 54 07 00 00       	push   $0x754
+  58:	6a 02                	push   $0x2
+  5a:	e8 c1 03 00 00       	call   420 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 40 07 00 00       	push   $0x740
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ae 03 00 00       	call   420 <printf>
+    exit();
+  72:	e8 4b 02 00 00       	call   2c2 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	56                   	push   %esi
+  b4:	53                   	push   %ebx
+  b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  bb:	0f b6 02             	movzbl (%edx),%eax
+  be:	0f b6 19             	movzbl (%ecx),%ebx
+  c1:	84 c0                	test   %al,%al
+  c3:	75 1e                	jne    e3 <strcmp+0x33>
+  c5:	eb 29                	jmp    f0 <strcmp+0x40>
+  c7:	89 f6                	mov    %esi,%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	89 f1                	mov    %esi,%ecx
+  e3:	38 d8                	cmp    %bl,%al
+  e5:	74 e9                	je     d0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  e7:	29 d8                	sub    %ebx,%eax
+}
+  e9:	5b                   	pop    %ebx
+  ea:	5e                   	pop    %esi
+  eb:	5d                   	pop    %ebp
+  ec:	c3                   	ret    
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  f0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5e                   	pop    %esi
+  f6:	5d                   	pop    %ebp
+  f7:	c3                   	ret    
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 12                	je     11d <strlen+0x1d>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 11d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 11f:	5d                   	pop    %ebp
+ 120:	c3                   	ret    
+ 121:	eb 0d                	jmp    130 <memset>
+ 123:	90                   	nop
+ 124:	90                   	nop
+ 125:	90                   	nop
+ 126:	90                   	nop
+ 127:	90                   	nop
+ 128:	90                   	nop
+ 129:	90                   	nop
+ 12a:	90                   	nop
+ 12b:	90                   	nop
+ 12c:	90                   	nop
+ 12d:	90                   	nop
+ 12e:	90                   	nop
+ 12f:	90                   	nop
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 198:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 19b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 19e:	eb 29                	jmp    1c9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	6a 01                	push   $0x1
+ 1a5:	57                   	push   %edi
+ 1a6:	6a 00                	push   $0x0
+ 1a8:	e8 2d 01 00 00       	call   2da <read>
+    if(cc < 1)
+ 1ad:	83 c4 10             	add    $0x10,%esp
+ 1b0:	85 c0                	test   %eax,%eax
+ 1b2:	7e 1d                	jle    1d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1bb:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 1bd:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 1bf:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1c3:	74 1b                	je     1e0 <gets+0x50>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 17                	je     1e0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1cf:	7c cf                	jl     1a0 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1db:	5b                   	pop    %ebx
+ 1dc:	5e                   	pop    %esi
+ 1dd:	5f                   	pop    %edi
+ 1de:	5d                   	pop    %ebp
+ 1df:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1e0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1e3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ec:	5b                   	pop    %ebx
+ 1ed:	5e                   	pop    %esi
+ 1ee:	5f                   	pop    %edi
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	eb 0d                	jmp    200 <stat>
+ 1f3:	90                   	nop
+ 1f4:	90                   	nop
+ 1f5:	90                   	nop
+ 1f6:	90                   	nop
+ 1f7:	90                   	nop
+ 1f8:	90                   	nop
+ 1f9:	90                   	nop
+ 1fa:	90                   	nop
+ 1fb:	90                   	nop
+ 1fc:	90                   	nop
+ 1fd:	90                   	nop
+ 1fe:	90                   	nop
+ 1ff:	90                   	nop
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 f0 00 00 00       	call   302 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f3 00 00 00       	call   31a <fstat>
+ 227:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 229:	89 1c 24             	mov    %ebx,(%esp)
+ 22c:	e8 b9 00 00 00       	call   2ea <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+ 234:	89 f0                	mov    %esi,%eax
+}
+ 236:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 240:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 245:	eb ef                	jmp    236 <stat+0x36>
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d 76 00             	lea    0x0(%esi),%esi
+ 269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 270:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 273:	83 c1 01             	add    $0x1,%ecx
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	90                   	nop
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 298:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 db                	test   %ebx,%ebx
+ 2a0:	7e 14                	jle    2b6 <memmove+0x26>
+ 2a2:	31 d2                	xor    %edx,%edx
+ 2a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2af:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	39 da                	cmp    %ebx,%edx
+ 2b4:	75 f2                	jne    2a8 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+
+000002ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <exit>:
+SYSCALL(exit)
+ 2c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <wait>:
+SYSCALL(wait)
+ 2ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <pipe>:
+SYSCALL(pipe)
+ 2d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <read>:
+SYSCALL(read)
+ 2da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <write>:
+SYSCALL(write)
+ 2e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <close>:
+SYSCALL(close)
+ 2ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <kill>:
+SYSCALL(kill)
+ 2f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <exec>:
+SYSCALL(exec)
+ 2fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <open>:
+SYSCALL(open)
+ 302:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mknod>:
+SYSCALL(mknod)
+ 30a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <unlink>:
+SYSCALL(unlink)
+ 312:	b8 12 00 00 00       	mov    $0x12,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <fstat>:
+SYSCALL(fstat)
+ 31a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <link>:
+SYSCALL(link)
+ 322:	b8 13 00 00 00       	mov    $0x13,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <mkdir>:
+SYSCALL(mkdir)
+ 32a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <chdir>:
+SYSCALL(chdir)
+ 332:	b8 09 00 00 00       	mov    $0x9,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <dup>:
+SYSCALL(dup)
+ 33a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getpid>:
+SYSCALL(getpid)
+ 342:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <sbrk>:
+SYSCALL(sbrk)
+ 34a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <sleep>:
+SYSCALL(sleep)
+ 352:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <uptime>:
+SYSCALL(uptime)
+ 35a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <readcount>:
+SYSCALL(readcount)
+ 362:	b8 16 00 00 00       	mov    $0x16,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <callcount>:
+SYSCALL(callcount)
+ 36a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+ 372:	66 90                	xchg   %ax,%ax
+ 374:	66 90                	xchg   %ax,%ax
+ 376:	66 90                	xchg   %ax,%ax
+ 378:	66 90                	xchg   %ax,%ax
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	89 c6                	mov    %eax,%esi
+ 388:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 38b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 38e:	85 db                	test   %ebx,%ebx
+ 390:	74 7e                	je     410 <printint+0x90>
+ 392:	89 d0                	mov    %edx,%eax
+ 394:	c1 e8 1f             	shr    $0x1f,%eax
+ 397:	84 c0                	test   %al,%al
+ 399:	74 75                	je     410 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 39b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 39d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 3a4:	f7 d8                	neg    %eax
+ 3a6:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a9:	31 ff                	xor    %edi,%edi
+ 3ab:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3ae:	89 ce                	mov    %ecx,%esi
+ 3b0:	eb 08                	jmp    3ba <printint+0x3a>
+ 3b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b8:	89 cf                	mov    %ecx,%edi
+ 3ba:	31 d2                	xor    %edx,%edx
+ 3bc:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 3bf:	f7 f6                	div    %esi
+ 3c1:	0f b6 92 74 07 00 00 	movzbl 0x774(%edx),%edx
+  }while((x /= base) != 0);
+ 3c8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3ca:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3cd:	75 e9                	jne    3b8 <printint+0x38>
+  if(neg)
+ 3cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3d2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3d5:	85 c0                	test   %eax,%eax
+ 3d7:	74 08                	je     3e1 <printint+0x61>
+    buf[i++] = '-';
+ 3d9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3de:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3e1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3e5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3eb:	83 ec 04             	sub    $0x4,%esp
+ 3ee:	83 ef 01             	sub    $0x1,%edi
+ 3f1:	6a 01                	push   $0x1
+ 3f3:	53                   	push   %ebx
+ 3f4:	56                   	push   %esi
+ 3f5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f8:	e8 e5 fe ff ff       	call   2e2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3fd:	83 c4 10             	add    $0x10,%esp
+ 400:	39 df                	cmp    %ebx,%edi
+ 402:	75 e4                	jne    3e8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 404:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 407:	5b                   	pop    %ebx
+ 408:	5e                   	pop    %esi
+ 409:	5f                   	pop    %edi
+ 40a:	5d                   	pop    %ebp
+ 40b:	c3                   	ret    
+ 40c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 410:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 412:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 419:	eb 8b                	jmp    3a6 <printint+0x26>
+ 41b:	90                   	nop
+ 41c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000420 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 426:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 429:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 42c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 42f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 432:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 435:	0f b6 1e             	movzbl (%esi),%ebx
+ 438:	83 c6 01             	add    $0x1,%esi
+ 43b:	84 db                	test   %bl,%bl
+ 43d:	0f 84 b0 00 00 00    	je     4f3 <printf+0xd3>
+ 443:	31 d2                	xor    %edx,%edx
+ 445:	eb 39                	jmp    480 <printf+0x60>
+ 447:	89 f6                	mov    %esi,%esi
+ 449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 450:	83 f8 25             	cmp    $0x25,%eax
+ 453:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 456:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 45b:	74 18                	je     475 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 45d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 460:	83 ec 04             	sub    $0x4,%esp
+ 463:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 466:	6a 01                	push   $0x1
+ 468:	50                   	push   %eax
+ 469:	57                   	push   %edi
+ 46a:	e8 73 fe ff ff       	call   2e2 <write>
+ 46f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 472:	83 c4 10             	add    $0x10,%esp
+ 475:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 478:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47c:	84 db                	test   %bl,%bl
+ 47e:	74 73                	je     4f3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 480:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 482:	0f be cb             	movsbl %bl,%ecx
+ 485:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 488:	74 c6                	je     450 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 48a:	83 fa 25             	cmp    $0x25,%edx
+ 48d:	75 e6                	jne    475 <printf+0x55>
+      if(c == 'd'){
+ 48f:	83 f8 64             	cmp    $0x64,%eax
+ 492:	0f 84 f8 00 00 00    	je     590 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 498:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49e:	83 f9 70             	cmp    $0x70,%ecx
+ 4a1:	74 5d                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a3:	83 f8 73             	cmp    $0x73,%eax
+ 4a6:	0f 84 84 00 00 00    	je     530 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ac:	83 f8 63             	cmp    $0x63,%eax
+ 4af:	0f 84 ea 00 00 00    	je     59f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b5:	83 f8 25             	cmp    $0x25,%eax
+ 4b8:	0f 84 c2 00 00 00    	je     580 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	83 ec 04             	sub    $0x4,%esp
+ 4c4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c8:	6a 01                	push   $0x1
+ 4ca:	50                   	push   %eax
+ 4cb:	57                   	push   %edi
+ 4cc:	e8 11 fe ff ff       	call   2e2 <write>
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4d7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4da:	6a 01                	push   $0x1
+ 4dc:	50                   	push   %eax
+ 4dd:	57                   	push   %edi
+ 4de:	83 c6 01             	add    $0x1,%esi
+ 4e1:	e8 fc fd ff ff       	call   2e2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4e6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ea:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4ed:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4ef:	84 db                	test   %bl,%bl
+ 4f1:	75 8d                	jne    480 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f6:	5b                   	pop    %ebx
+ 4f7:	5e                   	pop    %esi
+ 4f8:	5f                   	pop    %edi
+ 4f9:	5d                   	pop    %ebp
+ 4fa:	c3                   	ret    
+ 4fb:	90                   	nop
+ 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	89 f8                	mov    %edi,%eax
+ 50f:	8b 13                	mov    (%ebx),%edx
+ 511:	e8 6a fe ff ff       	call   380 <printint>
+        ap++;
+ 516:	89 d8                	mov    %ebx,%eax
+ 518:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 51b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 523:	e9 4d ff ff ff       	jmp    475 <printf+0x55>
+ 528:	90                   	nop
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 530:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 533:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 535:	83 c0 04             	add    $0x4,%eax
+ 538:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 53b:	b8 6d 07 00 00       	mov    $0x76d,%eax
+ 540:	85 db                	test   %ebx,%ebx
+ 542:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 545:	0f b6 03             	movzbl (%ebx),%eax
+ 548:	84 c0                	test   %al,%al
+ 54a:	74 23                	je     56f <printf+0x14f>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 550:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 553:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 556:	83 ec 04             	sub    $0x4,%esp
+ 559:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 55b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 55e:	50                   	push   %eax
+ 55f:	57                   	push   %edi
+ 560:	e8 7d fd ff ff       	call   2e2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 565:	0f b6 03             	movzbl (%ebx),%eax
+ 568:	83 c4 10             	add    $0x10,%esp
+ 56b:	84 c0                	test   %al,%al
+ 56d:	75 e1                	jne    550 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 ff fe ff ff       	jmp    475 <printf+0x55>
+ 576:	8d 76 00             	lea    0x0(%esi),%esi
+ 579:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 586:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 589:	6a 01                	push   $0x1
+ 58b:	e9 4c ff ff ff       	jmp    4dc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 6b ff ff ff       	jmp    50a <printf+0xea>
+ 59f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5a2:	83 ec 04             	sub    $0x4,%esp
+ 5a5:	8b 03                	mov    (%ebx),%eax
+ 5a7:	6a 01                	push   $0x1
+ 5a9:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5ac:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5af:	50                   	push   %eax
+ 5b0:	57                   	push   %edi
+ 5b1:	e8 2c fd ff ff       	call   2e2 <write>
+ 5b6:	e9 5b ff ff ff       	jmp    516 <printf+0xf6>
+ 5bb:	66 90                	xchg   %ax,%ax
+ 5bd:	66 90                	xchg   %ax,%ax
+ 5bf:	90                   	nop
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 18 0a 00 00       	mov    0xa18,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ce:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5d0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d3:	39 c8                	cmp    %ecx,%eax
+ 5d5:	73 19                	jae    5f0 <free+0x30>
+ 5d7:	89 f6                	mov    %esi,%esi
+ 5d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5e0:	39 d1                	cmp    %edx,%ecx
+ 5e2:	72 1c                	jb     600 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e4:	39 d0                	cmp    %edx,%eax
+ 5e6:	73 18                	jae    600 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ea:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ec:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ee:	72 f0                	jb     5e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f0:	39 d0                	cmp    %edx,%eax
+ 5f2:	72 f4                	jb     5e8 <free+0x28>
+ 5f4:	39 d1                	cmp    %edx,%ecx
+ 5f6:	73 f0                	jae    5e8 <free+0x28>
+ 5f8:	90                   	nop
+ 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 600:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 603:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 606:	39 d7                	cmp    %edx,%edi
+ 608:	74 19                	je     623 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 60a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 60d:	8b 50 04             	mov    0x4(%eax),%edx
+ 610:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 613:	39 f1                	cmp    %esi,%ecx
+ 615:	74 23                	je     63a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 617:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 619:	a3 18 0a 00 00       	mov    %eax,0xa18
+}
+ 61e:	5b                   	pop    %ebx
+ 61f:	5e                   	pop    %esi
+ 620:	5f                   	pop    %edi
+ 621:	5d                   	pop    %ebp
+ 622:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 623:	03 72 04             	add    0x4(%edx),%esi
+ 626:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 629:	8b 10                	mov    (%eax),%edx
+ 62b:	8b 12                	mov    (%edx),%edx
+ 62d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 630:	8b 50 04             	mov    0x4(%eax),%edx
+ 633:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 636:	39 f1                	cmp    %esi,%ecx
+ 638:	75 dd                	jne    617 <free+0x57>
+    p->s.size += bp->s.size;
+ 63a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 63d:	a3 18 0a 00 00       	mov    %eax,0xa18
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 642:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 645:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 648:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 64a:	5b                   	pop    %ebx
+ 64b:	5e                   	pop    %esi
+ 64c:	5f                   	pop    %edi
+ 64d:	5d                   	pop    %ebp
+ 64e:	c3                   	ret    
+ 64f:	90                   	nop
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 15 18 0a 00 00    	mov    0xa18,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 78 07             	lea    0x7(%eax),%edi
+ 665:	c1 ef 03             	shr    $0x3,%edi
+ 668:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 66b:	85 d2                	test   %edx,%edx
+ 66d:	0f 84 a3 00 00 00    	je     716 <malloc+0xc6>
+ 673:	8b 02                	mov    (%edx),%eax
+ 675:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 678:	39 cf                	cmp    %ecx,%edi
+ 67a:	76 74                	jbe    6f0 <malloc+0xa0>
+ 67c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 682:	be 00 10 00 00       	mov    $0x1000,%esi
+ 687:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 68e:	0f 43 f7             	cmovae %edi,%esi
+ 691:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 696:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 69c:	0f 46 da             	cmovbe %edx,%ebx
+ 69f:	eb 10                	jmp    6b1 <malloc+0x61>
+ 6a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 cf                	cmp    %ecx,%edi
+ 6af:	76 3f                	jbe    6f0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	39 05 18 0a 00 00    	cmp    %eax,0xa18
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	75 ed                	jne    6a8 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 6bb:	83 ec 0c             	sub    $0xc,%esp
+ 6be:	53                   	push   %ebx
+ 6bf:	e8 86 fc ff ff       	call   34a <sbrk>
+  if(p == (char*)-1)
+ 6c4:	83 c4 10             	add    $0x10,%esp
+ 6c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ca:	74 1c                	je     6e8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6cc:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6cf:	83 ec 0c             	sub    $0xc,%esp
+ 6d2:	83 c0 08             	add    $0x8,%eax
+ 6d5:	50                   	push   %eax
+ 6d6:	e8 e5 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6db:	8b 15 18 0a 00 00    	mov    0xa18,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6e1:	83 c4 10             	add    $0x10,%esp
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	75 c0                	jne    6a8 <malloc+0x58>
+        return 0;
+ 6e8:	31 c0                	xor    %eax,%eax
+ 6ea:	eb 1c                	jmp    708 <malloc+0xb8>
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6f0:	39 cf                	cmp    %ecx,%edi
+ 6f2:	74 1c                	je     710 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6f4:	29 f9                	sub    %edi,%ecx
+ 6f6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6fc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6ff:	89 15 18 0a 00 00    	mov    %edx,0xa18
+      return (void*)(p + 1);
+ 705:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70b:	5b                   	pop    %ebx
+ 70c:	5e                   	pop    %esi
+ 70d:	5f                   	pop    %edi
+ 70e:	5d                   	pop    %ebp
+ 70f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 710:	8b 08                	mov    (%eax),%ecx
+ 712:	89 0a                	mov    %ecx,(%edx)
+ 714:	eb e9                	jmp    6ff <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 716:	c7 05 18 0a 00 00 1c 	movl   $0xa1c,0xa18
+ 71d:	0a 00 00 
+ 720:	c7 05 1c 0a 00 00 1c 	movl   $0xa1c,0xa1c
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	b8 1c 0a 00 00       	mov    $0xa1c,%eax
+ 72f:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
+ 736:	00 00 00 
+ 739:	e9 3e ff ff ff       	jmp    67c <malloc+0x2c>
diff -ruN ./xv6-public-src/rm.d ./xv6-public/rm.d
--- ./xv6-public-src/rm.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/rm.d	2019-11-28 17:52:28.372013407 +0200
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/rm.o and ./xv6-public/rm.o differ
diff -ruN ./xv6-public-src/rm.sym ./xv6-public/rm.sym
--- ./xv6-public-src/rm.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/rm.sym	2019-11-28 17:52:28.388023277 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000740 .rodata
+00000788 .eh_frame
+00000a18 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+00000774 digits.1111
+00000000 umalloc.c
+00000a18 freep
+00000a1c base
+00000080 strcpy
+00000420 printf
+00000290 memmove
+0000030a mknod
+00000190 gets
+00000342 getpid
+00000650 malloc
+00000352 sleep
+00000362 readcount
+0000036a callcount
+000002d2 pipe
+000002e2 write
+0000031a fstat
+000002f2 kill
+00000332 chdir
+000002fa exec
+000002ca wait
+000002da read
+00000312 unlink
+000002ba fork
+0000034a sbrk
+0000035a uptime
+00000a18 __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+0000033a dup
+00000200 stat
+00000a18 _edata
+00000a24 _end
+00000322 link
+000002c2 exit
+00000250 atoi
+00000100 strlen
+00000302 open
+00000150 strchr
+0000032a mkdir
+000002ea close
+000005c0 free
Binary files ./xv6-public-src/_sh and ./xv6-public/_sh differ
diff -ruN ./xv6-public-src/sh.asm ./xv6-public/sh.asm
--- ./xv6-public-src/sh.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/sh.asm	2019-11-28 17:52:28.492087436 +0200
@@ -0,0 +1,3417 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      11:	eb 0e                	jmp    21 <main+0x21>
+      13:	90                   	nop
+      14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(fd >= 3){
+      18:	83 f8 02             	cmp    $0x2,%eax
+      1b:	0f 8f c3 00 00 00    	jg     e4 <main+0xe4>
+{
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      21:	83 ec 08             	sub    $0x8,%esp
+      24:	6a 02                	push   $0x2
+      26:	68 41 12 00 00       	push   $0x1241
+      2b:	e8 32 0d 00 00       	call   d62 <open>
+      30:	83 c4 10             	add    $0x10,%esp
+      33:	85 c0                	test   %eax,%eax
+      35:	79 e1                	jns    18 <main+0x18>
+      37:	eb 2e                	jmp    67 <main+0x67>
+      39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      40:	80 3d 62 18 00 00 20 	cmpb   $0x20,0x1862
+      47:	74 5d                	je     a6 <main+0xa6>
+      49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      50:	e8 c5 0c 00 00       	call   d1a <fork>
+  if(pid == -1)
+      55:	83 f8 ff             	cmp    $0xffffffff,%eax
+      58:	74 3f                	je     99 <main+0x99>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      if(chdir(buf+3) < 0)
+        printf(2, "cannot cd %s\n", buf+3);
+      continue;
+    }
+    if(fork1() == 0)
+      5a:	85 c0                	test   %eax,%eax
+      5c:	0f 84 98 00 00 00    	je     fa <main+0xfa>
+      runcmd(parsecmd(buf));
+    wait();
+      62:	e8 c3 0c 00 00       	call   d2a <wait>
+      break;
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      67:	83 ec 08             	sub    $0x8,%esp
+      6a:	6a 64                	push   $0x64
+      6c:	68 60 18 00 00       	push   $0x1860
+      71:	e8 9a 00 00 00       	call   110 <getcmd>
+      76:	83 c4 10             	add    $0x10,%esp
+      79:	85 c0                	test   %eax,%eax
+      7b:	78 78                	js     f5 <main+0xf5>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      7d:	80 3d 60 18 00 00 63 	cmpb   $0x63,0x1860
+      84:	75 ca                	jne    50 <main+0x50>
+      86:	80 3d 61 18 00 00 64 	cmpb   $0x64,0x1861
+      8d:	74 b1                	je     40 <main+0x40>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      8f:	e8 86 0c 00 00       	call   d1a <fork>
+  if(pid == -1)
+      94:	83 f8 ff             	cmp    $0xffffffff,%eax
+      97:	75 c1                	jne    5a <main+0x5a>
+    panic("fork");
+      99:	83 ec 0c             	sub    $0xc,%esp
+      9c:	68 ca 11 00 00       	push   $0x11ca
+      a1:	e8 ba 00 00 00       	call   160 <panic>
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      // Chdir must be called by the parent, not the child.
+      buf[strlen(buf)-1] = 0;  // chop \n
+      a6:	83 ec 0c             	sub    $0xc,%esp
+      a9:	68 60 18 00 00       	push   $0x1860
+      ae:	e8 ad 0a 00 00       	call   b60 <strlen>
+      if(chdir(buf+3) < 0)
+      b3:	c7 04 24 63 18 00 00 	movl   $0x1863,(%esp)
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      // Chdir must be called by the parent, not the child.
+      buf[strlen(buf)-1] = 0;  // chop \n
+      ba:	c6 80 5f 18 00 00 00 	movb   $0x0,0x185f(%eax)
+      if(chdir(buf+3) < 0)
+      c1:	e8 cc 0c 00 00       	call   d92 <chdir>
+      c6:	83 c4 10             	add    $0x10,%esp
+      c9:	85 c0                	test   %eax,%eax
+      cb:	79 9a                	jns    67 <main+0x67>
+        printf(2, "cannot cd %s\n", buf+3);
+      cd:	50                   	push   %eax
+      ce:	68 63 18 00 00       	push   $0x1863
+      d3:	68 49 12 00 00       	push   $0x1249
+      d8:	6a 02                	push   $0x2
+      da:	e8 a1 0d 00 00       	call   e80 <printf>
+      df:	83 c4 10             	add    $0x10,%esp
+      e2:	eb 83                	jmp    67 <main+0x67>
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+    if(fd >= 3){
+      close(fd);
+      e4:	83 ec 0c             	sub    $0xc,%esp
+      e7:	50                   	push   %eax
+      e8:	e8 5d 0c 00 00       	call   d4a <close>
+      break;
+      ed:	83 c4 10             	add    $0x10,%esp
+      f0:	e9 72 ff ff ff       	jmp    67 <main+0x67>
+    }
+    if(fork1() == 0)
+      runcmd(parsecmd(buf));
+    wait();
+  }
+  exit();
+      f5:	e8 28 0c 00 00       	call   d22 <exit>
+      if(chdir(buf+3) < 0)
+        printf(2, "cannot cd %s\n", buf+3);
+      continue;
+    }
+    if(fork1() == 0)
+      runcmd(parsecmd(buf));
+      fa:	83 ec 0c             	sub    $0xc,%esp
+      fd:	68 60 18 00 00       	push   $0x1860
+     102:	e8 69 09 00 00       	call   a70 <parsecmd>
+     107:	89 04 24             	mov    %eax,(%esp)
+     10a:	e8 71 00 00 00       	call   180 <runcmd>
+     10f:	90                   	nop
+
+00000110 <getcmd>:
+  exit();
+}
+
+int
+getcmd(char *buf, int nbuf)
+{
+     110:	55                   	push   %ebp
+     111:	89 e5                	mov    %esp,%ebp
+     113:	56                   	push   %esi
+     114:	53                   	push   %ebx
+     115:	8b 75 0c             	mov    0xc(%ebp),%esi
+     118:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     11b:	83 ec 08             	sub    $0x8,%esp
+     11e:	68 a0 11 00 00       	push   $0x11a0
+     123:	6a 02                	push   $0x2
+     125:	e8 56 0d 00 00       	call   e80 <printf>
+  memset(buf, 0, nbuf);
+     12a:	83 c4 0c             	add    $0xc,%esp
+     12d:	56                   	push   %esi
+     12e:	6a 00                	push   $0x0
+     130:	53                   	push   %ebx
+     131:	e8 5a 0a 00 00       	call   b90 <memset>
+  gets(buf, nbuf);
+     136:	58                   	pop    %eax
+     137:	5a                   	pop    %edx
+     138:	56                   	push   %esi
+     139:	53                   	push   %ebx
+     13a:	e8 b1 0a 00 00       	call   bf0 <gets>
+     13f:	83 c4 10             	add    $0x10,%esp
+     142:	31 c0                	xor    %eax,%eax
+     144:	80 3b 00             	cmpb   $0x0,(%ebx)
+     147:	0f 94 c0             	sete   %al
+  if(buf[0] == 0) // EOF
+    return -1;
+  return 0;
+}
+     14a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     14d:	f7 d8                	neg    %eax
+     14f:	5b                   	pop    %ebx
+     150:	5e                   	pop    %esi
+     151:	5d                   	pop    %ebp
+     152:	c3                   	ret    
+     153:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     159:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000160 <panic>:
+  exit();
+}
+
+void
+panic(char *s)
+{
+     160:	55                   	push   %ebp
+     161:	89 e5                	mov    %esp,%ebp
+     163:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     166:	ff 75 08             	pushl  0x8(%ebp)
+     169:	68 3d 12 00 00       	push   $0x123d
+     16e:	6a 02                	push   $0x2
+     170:	e8 0b 0d 00 00       	call   e80 <printf>
+  exit();
+     175:	e8 a8 0b 00 00       	call   d22 <exit>
+     17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <runcmd>:
+struct cmd *parsecmd(char*);
+
+// Execute cmd.  Never returns.
+void
+runcmd(struct cmd *cmd)
+{
+     180:	55                   	push   %ebp
+     181:	89 e5                	mov    %esp,%ebp
+     183:	53                   	push   %ebx
+     184:	83 ec 14             	sub    $0x14,%esp
+     187:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     18a:	85 db                	test   %ebx,%ebx
+     18c:	74 76                	je     204 <runcmd+0x84>
+    exit();
+
+  switch(cmd->type){
+     18e:	83 3b 05             	cmpl   $0x5,(%ebx)
+     191:	0f 87 f8 00 00 00    	ja     28f <runcmd+0x10f>
+     197:	8b 03                	mov    (%ebx),%eax
+     199:	ff 24 85 58 12 00 00 	jmp    *0x1258(,%eax,4)
+    runcmd(lcmd->right);
+    break;
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    if(pipe(p) < 0)
+     1a0:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     1a3:	83 ec 0c             	sub    $0xc,%esp
+     1a6:	50                   	push   %eax
+     1a7:	e8 86 0b 00 00       	call   d32 <pipe>
+     1ac:	83 c4 10             	add    $0x10,%esp
+     1af:	85 c0                	test   %eax,%eax
+     1b1:	0f 88 07 01 00 00    	js     2be <runcmd+0x13e>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+     1b7:	e8 5e 0b 00 00       	call   d1a <fork>
+  if(pid == -1)
+     1bc:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1bf:	0f 84 d7 00 00 00    	je     29c <runcmd+0x11c>
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    if(pipe(p) < 0)
+      panic("pipe");
+    if(fork1() == 0){
+     1c5:	85 c0                	test   %eax,%eax
+     1c7:	0f 84 fe 00 00 00    	je     2cb <runcmd+0x14b>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+     1cd:	e8 48 0b 00 00       	call   d1a <fork>
+  if(pid == -1)
+     1d2:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1d5:	0f 84 c1 00 00 00    	je     29c <runcmd+0x11c>
+      dup(p[1]);
+      close(p[0]);
+      close(p[1]);
+      runcmd(pcmd->left);
+    }
+    if(fork1() == 0){
+     1db:	85 c0                	test   %eax,%eax
+     1dd:	0f 84 16 01 00 00    	je     2f9 <runcmd+0x179>
+      dup(p[0]);
+      close(p[0]);
+      close(p[1]);
+      runcmd(pcmd->right);
+    }
+    close(p[0]);
+     1e3:	83 ec 0c             	sub    $0xc,%esp
+     1e6:	ff 75 f0             	pushl  -0x10(%ebp)
+     1e9:	e8 5c 0b 00 00       	call   d4a <close>
+    close(p[1]);
+     1ee:	58                   	pop    %eax
+     1ef:	ff 75 f4             	pushl  -0xc(%ebp)
+     1f2:	e8 53 0b 00 00       	call   d4a <close>
+    wait();
+     1f7:	e8 2e 0b 00 00       	call   d2a <wait>
+    wait();
+     1fc:	e8 29 0b 00 00       	call   d2a <wait>
+    break;
+     201:	83 c4 10             	add    $0x10,%esp
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    exit();
+     204:	e8 19 0b 00 00       	call   d22 <exit>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+     209:	e8 0c 0b 00 00       	call   d1a <fork>
+  if(pid == -1)
+     20e:	83 f8 ff             	cmp    $0xffffffff,%eax
+     211:	0f 84 85 00 00 00    	je     29c <runcmd+0x11c>
+    wait();
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    if(fork1() == 0)
+     217:	85 c0                	test   %eax,%eax
+     219:	75 e9                	jne    204 <runcmd+0x84>
+     21b:	eb 49                	jmp    266 <runcmd+0xe6>
+  default:
+    panic("runcmd");
+
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    if(ecmd->argv[0] == 0)
+     21d:	8b 43 04             	mov    0x4(%ebx),%eax
+     220:	85 c0                	test   %eax,%eax
+     222:	74 e0                	je     204 <runcmd+0x84>
+      exit();
+    exec(ecmd->argv[0], ecmd->argv);
+     224:	52                   	push   %edx
+     225:	52                   	push   %edx
+     226:	8d 53 04             	lea    0x4(%ebx),%edx
+     229:	52                   	push   %edx
+     22a:	50                   	push   %eax
+     22b:	e8 2a 0b 00 00       	call   d5a <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     230:	83 c4 0c             	add    $0xc,%esp
+     233:	ff 73 04             	pushl  0x4(%ebx)
+     236:	68 aa 11 00 00       	push   $0x11aa
+     23b:	6a 02                	push   $0x2
+     23d:	e8 3e 0c 00 00       	call   e80 <printf>
+    break;
+     242:	83 c4 10             	add    $0x10,%esp
+     245:	eb bd                	jmp    204 <runcmd+0x84>
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    close(rcmd->fd);
+     247:	83 ec 0c             	sub    $0xc,%esp
+     24a:	ff 73 14             	pushl  0x14(%ebx)
+     24d:	e8 f8 0a 00 00       	call   d4a <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     252:	59                   	pop    %ecx
+     253:	58                   	pop    %eax
+     254:	ff 73 10             	pushl  0x10(%ebx)
+     257:	ff 73 08             	pushl  0x8(%ebx)
+     25a:	e8 03 0b 00 00       	call   d62 <open>
+     25f:	83 c4 10             	add    $0x10,%esp
+     262:	85 c0                	test   %eax,%eax
+     264:	78 43                	js     2a9 <runcmd+0x129>
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    if(fork1() == 0)
+      runcmd(bcmd->cmd);
+     266:	83 ec 0c             	sub    $0xc,%esp
+     269:	ff 73 04             	pushl  0x4(%ebx)
+     26c:	e8 0f ff ff ff       	call   180 <runcmd>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+     271:	e8 a4 0a 00 00       	call   d1a <fork>
+  if(pid == -1)
+     276:	83 f8 ff             	cmp    $0xffffffff,%eax
+     279:	74 21                	je     29c <runcmd+0x11c>
+    runcmd(rcmd->cmd);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    if(fork1() == 0)
+     27b:	85 c0                	test   %eax,%eax
+     27d:	74 e7                	je     266 <runcmd+0xe6>
+      runcmd(lcmd->left);
+    wait();
+     27f:	e8 a6 0a 00 00       	call   d2a <wait>
+    runcmd(lcmd->right);
+     284:	83 ec 0c             	sub    $0xc,%esp
+     287:	ff 73 08             	pushl  0x8(%ebx)
+     28a:	e8 f1 fe ff ff       	call   180 <runcmd>
+  if(cmd == 0)
+    exit();
+
+  switch(cmd->type){
+  default:
+    panic("runcmd");
+     28f:	83 ec 0c             	sub    $0xc,%esp
+     292:	68 a3 11 00 00       	push   $0x11a3
+     297:	e8 c4 fe ff ff       	call   160 <panic>
+{
+  int pid;
+
+  pid = fork();
+  if(pid == -1)
+    panic("fork");
+     29c:	83 ec 0c             	sub    $0xc,%esp
+     29f:	68 ca 11 00 00       	push   $0x11ca
+     2a4:	e8 b7 fe ff ff       	call   160 <panic>
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    close(rcmd->fd);
+    if(open(rcmd->file, rcmd->mode) < 0){
+      printf(2, "open %s failed\n", rcmd->file);
+     2a9:	52                   	push   %edx
+     2aa:	ff 73 08             	pushl  0x8(%ebx)
+     2ad:	68 ba 11 00 00       	push   $0x11ba
+     2b2:	6a 02                	push   $0x2
+     2b4:	e8 c7 0b 00 00       	call   e80 <printf>
+      exit();
+     2b9:	e8 64 0a 00 00       	call   d22 <exit>
+    break;
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    if(pipe(p) < 0)
+      panic("pipe");
+     2be:	83 ec 0c             	sub    $0xc,%esp
+     2c1:	68 cf 11 00 00       	push   $0x11cf
+     2c6:	e8 95 fe ff ff       	call   160 <panic>
+    if(fork1() == 0){
+      close(1);
+     2cb:	83 ec 0c             	sub    $0xc,%esp
+     2ce:	6a 01                	push   $0x1
+     2d0:	e8 75 0a 00 00       	call   d4a <close>
+      dup(p[1]);
+     2d5:	58                   	pop    %eax
+     2d6:	ff 75 f4             	pushl  -0xc(%ebp)
+     2d9:	e8 bc 0a 00 00       	call   d9a <dup>
+      close(p[0]);
+     2de:	58                   	pop    %eax
+     2df:	ff 75 f0             	pushl  -0x10(%ebp)
+     2e2:	e8 63 0a 00 00       	call   d4a <close>
+      close(p[1]);
+     2e7:	58                   	pop    %eax
+     2e8:	ff 75 f4             	pushl  -0xc(%ebp)
+     2eb:	e8 5a 0a 00 00       	call   d4a <close>
+      runcmd(pcmd->left);
+     2f0:	58                   	pop    %eax
+     2f1:	ff 73 04             	pushl  0x4(%ebx)
+     2f4:	e8 87 fe ff ff       	call   180 <runcmd>
+    }
+    if(fork1() == 0){
+      close(0);
+     2f9:	83 ec 0c             	sub    $0xc,%esp
+     2fc:	6a 00                	push   $0x0
+     2fe:	e8 47 0a 00 00       	call   d4a <close>
+      dup(p[0]);
+     303:	5a                   	pop    %edx
+     304:	ff 75 f0             	pushl  -0x10(%ebp)
+     307:	e8 8e 0a 00 00       	call   d9a <dup>
+      close(p[0]);
+     30c:	59                   	pop    %ecx
+     30d:	ff 75 f0             	pushl  -0x10(%ebp)
+     310:	e8 35 0a 00 00       	call   d4a <close>
+      close(p[1]);
+     315:	58                   	pop    %eax
+     316:	ff 75 f4             	pushl  -0xc(%ebp)
+     319:	e8 2c 0a 00 00       	call   d4a <close>
+      runcmd(pcmd->right);
+     31e:	58                   	pop    %eax
+     31f:	ff 73 08             	pushl  0x8(%ebx)
+     322:	e8 59 fe ff ff       	call   180 <runcmd>
+     327:	89 f6                	mov    %esi,%esi
+     329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000330 <fork1>:
+  exit();
+}
+
+int
+fork1(void)
+{
+     330:	55                   	push   %ebp
+     331:	89 e5                	mov    %esp,%ebp
+     333:	83 ec 08             	sub    $0x8,%esp
+  int pid;
+
+  pid = fork();
+     336:	e8 df 09 00 00       	call   d1a <fork>
+  if(pid == -1)
+     33b:	83 f8 ff             	cmp    $0xffffffff,%eax
+     33e:	74 02                	je     342 <fork1+0x12>
+    panic("fork");
+  return pid;
+}
+     340:	c9                   	leave  
+     341:	c3                   	ret    
+{
+  int pid;
+
+  pid = fork();
+  if(pid == -1)
+    panic("fork");
+     342:	83 ec 0c             	sub    $0xc,%esp
+     345:	68 ca 11 00 00       	push   $0x11ca
+     34a:	e8 11 fe ff ff       	call   160 <panic>
+     34f:	90                   	nop
+
+00000350 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     350:	55                   	push   %ebp
+     351:	89 e5                	mov    %esp,%ebp
+     353:	53                   	push   %ebx
+     354:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     357:	6a 54                	push   $0x54
+     359:	e8 52 0d 00 00       	call   10b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     35e:	83 c4 0c             	add    $0xc,%esp
+struct cmd*
+execcmd(void)
+{
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     361:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     363:	6a 54                	push   $0x54
+     365:	6a 00                	push   $0x0
+     367:	50                   	push   %eax
+     368:	e8 23 08 00 00       	call   b90 <memset>
+  cmd->type = EXEC;
+     36d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     373:	89 d8                	mov    %ebx,%eax
+     375:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     378:	c9                   	leave  
+     379:	c3                   	ret    
+     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     380:	55                   	push   %ebp
+     381:	89 e5                	mov    %esp,%ebp
+     383:	53                   	push   %ebx
+     384:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     387:	6a 18                	push   $0x18
+     389:	e8 22 0d 00 00       	call   10b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     38e:	83 c4 0c             	add    $0xc,%esp
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     391:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     393:	6a 18                	push   $0x18
+     395:	6a 00                	push   $0x0
+     397:	50                   	push   %eax
+     398:	e8 f3 07 00 00       	call   b90 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     39d:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = REDIR;
+     3a0:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     3a6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     3a9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3ac:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     3af:	8b 45 10             	mov    0x10(%ebp),%eax
+     3b2:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     3b5:	8b 45 14             	mov    0x14(%ebp),%eax
+     3b8:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     3bb:	8b 45 18             	mov    0x18(%ebp),%eax
+     3be:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3c1:	89 d8                	mov    %ebx,%eax
+     3c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3c6:	c9                   	leave  
+     3c7:	c3                   	ret    
+     3c8:	90                   	nop
+     3c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000003d0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3d0:	55                   	push   %ebp
+     3d1:	89 e5                	mov    %esp,%ebp
+     3d3:	53                   	push   %ebx
+     3d4:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3d7:	6a 0c                	push   $0xc
+     3d9:	e8 d2 0c 00 00       	call   10b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3de:	83 c4 0c             	add    $0xc,%esp
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3e1:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3e3:	6a 0c                	push   $0xc
+     3e5:	6a 00                	push   $0x0
+     3e7:	50                   	push   %eax
+     3e8:	e8 a3 07 00 00       	call   b90 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     3ed:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = PIPE;
+     3f0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     3f6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     3f9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3fc:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     3ff:	89 d8                	mov    %ebx,%eax
+     401:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     404:	c9                   	leave  
+     405:	c3                   	ret    
+     406:	8d 76 00             	lea    0x0(%esi),%esi
+     409:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000410 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     410:	55                   	push   %ebp
+     411:	89 e5                	mov    %esp,%ebp
+     413:	53                   	push   %ebx
+     414:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     417:	6a 0c                	push   $0xc
+     419:	e8 92 0c 00 00       	call   10b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     41e:	83 c4 0c             	add    $0xc,%esp
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     421:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     423:	6a 0c                	push   $0xc
+     425:	6a 00                	push   $0x0
+     427:	50                   	push   %eax
+     428:	e8 63 07 00 00       	call   b90 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     42d:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = LIST;
+     430:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     436:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     439:	8b 45 0c             	mov    0xc(%ebp),%eax
+     43c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     43f:	89 d8                	mov    %ebx,%eax
+     441:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     444:	c9                   	leave  
+     445:	c3                   	ret    
+     446:	8d 76 00             	lea    0x0(%esi),%esi
+     449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000450 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     450:	55                   	push   %ebp
+     451:	89 e5                	mov    %esp,%ebp
+     453:	53                   	push   %ebx
+     454:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     457:	6a 08                	push   $0x8
+     459:	e8 52 0c 00 00       	call   10b0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     45e:	83 c4 0c             	add    $0xc,%esp
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     461:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     463:	6a 08                	push   $0x8
+     465:	6a 00                	push   $0x0
+     467:	50                   	push   %eax
+     468:	e8 23 07 00 00       	call   b90 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     46d:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = BACK;
+     470:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     476:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     479:	89 d8                	mov    %ebx,%eax
+     47b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     47e:	c9                   	leave  
+     47f:	c3                   	ret    
+
+00000480 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     480:	55                   	push   %ebp
+     481:	89 e5                	mov    %esp,%ebp
+     483:	57                   	push   %edi
+     484:	56                   	push   %esi
+     485:	53                   	push   %ebx
+     486:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     489:	8b 45 08             	mov    0x8(%ebp),%eax
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     48c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     48f:	8b 75 10             	mov    0x10(%ebp),%esi
+  char *s;
+  int ret;
+
+  s = *ps;
+     492:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     494:	39 df                	cmp    %ebx,%edi
+     496:	72 13                	jb     4ab <gettoken+0x2b>
+     498:	eb 29                	jmp    4c3 <gettoken+0x43>
+     49a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    s++;
+     4a0:	83 c7 01             	add    $0x1,%edi
+{
+  char *s;
+  int ret;
+
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+     4a3:	39 fb                	cmp    %edi,%ebx
+     4a5:	0f 84 ed 00 00 00    	je     598 <gettoken+0x118>
+     4ab:	0f be 07             	movsbl (%edi),%eax
+     4ae:	83 ec 08             	sub    $0x8,%esp
+     4b1:	50                   	push   %eax
+     4b2:	68 48 18 00 00       	push   $0x1848
+     4b7:	e8 f4 06 00 00       	call   bb0 <strchr>
+     4bc:	83 c4 10             	add    $0x10,%esp
+     4bf:	85 c0                	test   %eax,%eax
+     4c1:	75 dd                	jne    4a0 <gettoken+0x20>
+    s++;
+  if(q)
+     4c3:	85 f6                	test   %esi,%esi
+     4c5:	74 02                	je     4c9 <gettoken+0x49>
+    *q = s;
+     4c7:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     4c9:	0f be 37             	movsbl (%edi),%esi
+     4cc:	89 f1                	mov    %esi,%ecx
+     4ce:	89 f0                	mov    %esi,%eax
+  switch(*s){
+     4d0:	80 f9 29             	cmp    $0x29,%cl
+     4d3:	7f 5b                	jg     530 <gettoken+0xb0>
+     4d5:	80 f9 28             	cmp    $0x28,%cl
+     4d8:	7d 61                	jge    53b <gettoken+0xbb>
+     4da:	84 c9                	test   %cl,%cl
+     4dc:	0f 85 de 00 00 00    	jne    5c0 <gettoken+0x140>
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     4e2:	8b 55 14             	mov    0x14(%ebp),%edx
+     4e5:	85 d2                	test   %edx,%edx
+     4e7:	74 05                	je     4ee <gettoken+0x6e>
+    *eq = s;
+     4e9:	8b 45 14             	mov    0x14(%ebp),%eax
+     4ec:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     4ee:	39 fb                	cmp    %edi,%ebx
+     4f0:	77 0d                	ja     4ff <gettoken+0x7f>
+     4f2:	eb 23                	jmp    517 <gettoken+0x97>
+     4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    s++;
+     4f8:	83 c7 01             	add    $0x1,%edi
+    break;
+  }
+  if(eq)
+    *eq = s;
+
+  while(s < es && strchr(whitespace, *s))
+     4fb:	39 fb                	cmp    %edi,%ebx
+     4fd:	74 18                	je     517 <gettoken+0x97>
+     4ff:	0f be 07             	movsbl (%edi),%eax
+     502:	83 ec 08             	sub    $0x8,%esp
+     505:	50                   	push   %eax
+     506:	68 48 18 00 00       	push   $0x1848
+     50b:	e8 a0 06 00 00       	call   bb0 <strchr>
+     510:	83 c4 10             	add    $0x10,%esp
+     513:	85 c0                	test   %eax,%eax
+     515:	75 e1                	jne    4f8 <gettoken+0x78>
+    s++;
+  *ps = s;
+     517:	8b 45 08             	mov    0x8(%ebp),%eax
+     51a:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     51c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     51f:	89 f0                	mov    %esi,%eax
+     521:	5b                   	pop    %ebx
+     522:	5e                   	pop    %esi
+     523:	5f                   	pop    %edi
+     524:	5d                   	pop    %ebp
+     525:	c3                   	ret    
+     526:	8d 76 00             	lea    0x0(%esi),%esi
+     529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+     530:	80 f9 3e             	cmp    $0x3e,%cl
+     533:	75 0b                	jne    540 <gettoken+0xc0>
+  case '<':
+    s++;
+    break;
+  case '>':
+    s++;
+    if(*s == '>'){
+     535:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+     539:	74 75                	je     5b0 <gettoken+0x130>
+  case '&':
+  case '<':
+    s++;
+    break;
+  case '>':
+    s++;
+     53b:	83 c7 01             	add    $0x1,%edi
+     53e:	eb a2                	jmp    4e2 <gettoken+0x62>
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+     540:	7f 5e                	jg     5a0 <gettoken+0x120>
+     542:	83 e9 3b             	sub    $0x3b,%ecx
+     545:	80 f9 01             	cmp    $0x1,%cl
+     548:	76 f1                	jbe    53b <gettoken+0xbb>
+      s++;
+    }
+    break;
+  default:
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     54a:	39 fb                	cmp    %edi,%ebx
+     54c:	77 24                	ja     572 <gettoken+0xf2>
+     54e:	eb 7c                	jmp    5cc <gettoken+0x14c>
+     550:	0f be 07             	movsbl (%edi),%eax
+     553:	83 ec 08             	sub    $0x8,%esp
+     556:	50                   	push   %eax
+     557:	68 40 18 00 00       	push   $0x1840
+     55c:	e8 4f 06 00 00       	call   bb0 <strchr>
+     561:	83 c4 10             	add    $0x10,%esp
+     564:	85 c0                	test   %eax,%eax
+     566:	75 1f                	jne    587 <gettoken+0x107>
+      s++;
+     568:	83 c7 01             	add    $0x1,%edi
+      s++;
+    }
+    break;
+  default:
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     56b:	39 fb                	cmp    %edi,%ebx
+     56d:	74 5b                	je     5ca <gettoken+0x14a>
+     56f:	0f be 07             	movsbl (%edi),%eax
+     572:	83 ec 08             	sub    $0x8,%esp
+     575:	50                   	push   %eax
+     576:	68 48 18 00 00       	push   $0x1848
+     57b:	e8 30 06 00 00       	call   bb0 <strchr>
+     580:	83 c4 10             	add    $0x10,%esp
+     583:	85 c0                	test   %eax,%eax
+     585:	74 c9                	je     550 <gettoken+0xd0>
+      ret = '+';
+      s++;
+    }
+    break;
+  default:
+    ret = 'a';
+     587:	be 61 00 00 00       	mov    $0x61,%esi
+     58c:	e9 51 ff ff ff       	jmp    4e2 <gettoken+0x62>
+     591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     598:	89 df                	mov    %ebx,%edi
+     59a:	e9 24 ff ff ff       	jmp    4c3 <gettoken+0x43>
+     59f:	90                   	nop
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+     5a0:	80 f9 7c             	cmp    $0x7c,%cl
+     5a3:	74 96                	je     53b <gettoken+0xbb>
+     5a5:	eb a3                	jmp    54a <gettoken+0xca>
+     5a7:	89 f6                	mov    %esi,%esi
+     5a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    break;
+  case '>':
+    s++;
+    if(*s == '>'){
+      ret = '+';
+      s++;
+     5b0:	83 c7 02             	add    $0x2,%edi
+    s++;
+    break;
+  case '>':
+    s++;
+    if(*s == '>'){
+      ret = '+';
+     5b3:	be 2b 00 00 00       	mov    $0x2b,%esi
+     5b8:	e9 25 ff ff ff       	jmp    4e2 <gettoken+0x62>
+     5bd:	8d 76 00             	lea    0x0(%esi),%esi
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+     5c0:	80 f9 26             	cmp    $0x26,%cl
+     5c3:	75 85                	jne    54a <gettoken+0xca>
+     5c5:	e9 71 ff ff ff       	jmp    53b <gettoken+0xbb>
+     5ca:	89 df                	mov    %ebx,%edi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     5cc:	8b 45 14             	mov    0x14(%ebp),%eax
+     5cf:	be 61 00 00 00       	mov    $0x61,%esi
+     5d4:	85 c0                	test   %eax,%eax
+     5d6:	0f 85 0d ff ff ff    	jne    4e9 <gettoken+0x69>
+     5dc:	e9 36 ff ff ff       	jmp    517 <gettoken+0x97>
+     5e1:	eb 0d                	jmp    5f0 <peek>
+     5e3:	90                   	nop
+     5e4:	90                   	nop
+     5e5:	90                   	nop
+     5e6:	90                   	nop
+     5e7:	90                   	nop
+     5e8:	90                   	nop
+     5e9:	90                   	nop
+     5ea:	90                   	nop
+     5eb:	90                   	nop
+     5ec:	90                   	nop
+     5ed:	90                   	nop
+     5ee:	90                   	nop
+     5ef:	90                   	nop
+
+000005f0 <peek>:
+  return ret;
+}
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     5f0:	55                   	push   %ebp
+     5f1:	89 e5                	mov    %esp,%ebp
+     5f3:	57                   	push   %edi
+     5f4:	56                   	push   %esi
+     5f5:	53                   	push   %ebx
+     5f6:	83 ec 0c             	sub    $0xc,%esp
+     5f9:	8b 7d 08             	mov    0x8(%ebp),%edi
+     5fc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     5ff:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     601:	39 f3                	cmp    %esi,%ebx
+     603:	72 12                	jb     617 <peek+0x27>
+     605:	eb 28                	jmp    62f <peek+0x3f>
+     607:	89 f6                	mov    %esi,%esi
+     609:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    s++;
+     610:	83 c3 01             	add    $0x1,%ebx
+peek(char **ps, char *es, char *toks)
+{
+  char *s;
+
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+     613:	39 de                	cmp    %ebx,%esi
+     615:	74 18                	je     62f <peek+0x3f>
+     617:	0f be 03             	movsbl (%ebx),%eax
+     61a:	83 ec 08             	sub    $0x8,%esp
+     61d:	50                   	push   %eax
+     61e:	68 48 18 00 00       	push   $0x1848
+     623:	e8 88 05 00 00       	call   bb0 <strchr>
+     628:	83 c4 10             	add    $0x10,%esp
+     62b:	85 c0                	test   %eax,%eax
+     62d:	75 e1                	jne    610 <peek+0x20>
+    s++;
+  *ps = s;
+     62f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     631:	0f be 13             	movsbl (%ebx),%edx
+     634:	31 c0                	xor    %eax,%eax
+     636:	84 d2                	test   %dl,%dl
+     638:	74 17                	je     651 <peek+0x61>
+     63a:	83 ec 08             	sub    $0x8,%esp
+     63d:	52                   	push   %edx
+     63e:	ff 75 10             	pushl  0x10(%ebp)
+     641:	e8 6a 05 00 00       	call   bb0 <strchr>
+     646:	83 c4 10             	add    $0x10,%esp
+     649:	85 c0                	test   %eax,%eax
+     64b:	0f 95 c0             	setne  %al
+     64e:	0f b6 c0             	movzbl %al,%eax
+}
+     651:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     654:	5b                   	pop    %ebx
+     655:	5e                   	pop    %esi
+     656:	5f                   	pop    %edi
+     657:	5d                   	pop    %ebp
+     658:	c3                   	ret    
+     659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000660 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     660:	55                   	push   %ebp
+     661:	89 e5                	mov    %esp,%ebp
+     663:	57                   	push   %edi
+     664:	56                   	push   %esi
+     665:	53                   	push   %ebx
+     666:	83 ec 1c             	sub    $0x1c,%esp
+     669:	8b 75 0c             	mov    0xc(%ebp),%esi
+     66c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     66f:	90                   	nop
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     670:	83 ec 04             	sub    $0x4,%esp
+     673:	68 f1 11 00 00       	push   $0x11f1
+     678:	53                   	push   %ebx
+     679:	56                   	push   %esi
+     67a:	e8 71 ff ff ff       	call   5f0 <peek>
+     67f:	83 c4 10             	add    $0x10,%esp
+     682:	85 c0                	test   %eax,%eax
+     684:	74 6a                	je     6f0 <parseredirs+0x90>
+    tok = gettoken(ps, es, 0, 0);
+     686:	6a 00                	push   $0x0
+     688:	6a 00                	push   $0x0
+     68a:	53                   	push   %ebx
+     68b:	56                   	push   %esi
+     68c:	e8 ef fd ff ff       	call   480 <gettoken>
+     691:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     693:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     696:	50                   	push   %eax
+     697:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     69a:	50                   	push   %eax
+     69b:	53                   	push   %ebx
+     69c:	56                   	push   %esi
+     69d:	e8 de fd ff ff       	call   480 <gettoken>
+     6a2:	83 c4 20             	add    $0x20,%esp
+     6a5:	83 f8 61             	cmp    $0x61,%eax
+     6a8:	75 51                	jne    6fb <parseredirs+0x9b>
+      panic("missing file for redirection");
+    switch(tok){
+     6aa:	83 ff 3c             	cmp    $0x3c,%edi
+     6ad:	74 31                	je     6e0 <parseredirs+0x80>
+     6af:	83 ff 3e             	cmp    $0x3e,%edi
+     6b2:	74 05                	je     6b9 <parseredirs+0x59>
+     6b4:	83 ff 2b             	cmp    $0x2b,%edi
+     6b7:	75 b7                	jne    670 <parseredirs+0x10>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6b9:	83 ec 0c             	sub    $0xc,%esp
+     6bc:	6a 01                	push   $0x1
+     6be:	68 01 02 00 00       	push   $0x201
+     6c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6c6:	ff 75 e0             	pushl  -0x20(%ebp)
+     6c9:	ff 75 08             	pushl  0x8(%ebp)
+     6cc:	e8 af fc ff ff       	call   380 <redircmd>
+      break;
+     6d1:	83 c4 20             	add    $0x20,%esp
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6d4:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     6d7:	eb 97                	jmp    670 <parseredirs+0x10>
+     6d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    tok = gettoken(ps, es, 0, 0);
+    if(gettoken(ps, es, &q, &eq) != 'a')
+      panic("missing file for redirection");
+    switch(tok){
+    case '<':
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     6e0:	83 ec 0c             	sub    $0xc,%esp
+     6e3:	6a 00                	push   $0x0
+     6e5:	6a 00                	push   $0x0
+     6e7:	eb da                	jmp    6c3 <parseredirs+0x63>
+     6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    }
+  }
+  return cmd;
+}
+     6f0:	8b 45 08             	mov    0x8(%ebp),%eax
+     6f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     6f6:	5b                   	pop    %ebx
+     6f7:	5e                   	pop    %esi
+     6f8:	5f                   	pop    %edi
+     6f9:	5d                   	pop    %ebp
+     6fa:	c3                   	ret    
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+    tok = gettoken(ps, es, 0, 0);
+    if(gettoken(ps, es, &q, &eq) != 'a')
+      panic("missing file for redirection");
+     6fb:	83 ec 0c             	sub    $0xc,%esp
+     6fe:	68 d4 11 00 00       	push   $0x11d4
+     703:	e8 58 fa ff ff       	call   160 <panic>
+     708:	90                   	nop
+     709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000710 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     710:	55                   	push   %ebp
+     711:	89 e5                	mov    %esp,%ebp
+     713:	57                   	push   %edi
+     714:	56                   	push   %esi
+     715:	53                   	push   %ebx
+     716:	83 ec 30             	sub    $0x30,%esp
+     719:	8b 75 08             	mov    0x8(%ebp),%esi
+     71c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     71f:	68 f4 11 00 00       	push   $0x11f4
+     724:	57                   	push   %edi
+     725:	56                   	push   %esi
+     726:	e8 c5 fe ff ff       	call   5f0 <peek>
+     72b:	83 c4 10             	add    $0x10,%esp
+     72e:	85 c0                	test   %eax,%eax
+     730:	0f 85 9a 00 00 00    	jne    7d0 <parseexec+0xc0>
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     736:	e8 15 fc ff ff       	call   350 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     73b:	83 ec 04             	sub    $0x4,%esp
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     73e:	89 c3                	mov    %eax,%ebx
+     740:	89 45 cc             	mov    %eax,-0x34(%ebp)
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     743:	57                   	push   %edi
+     744:	56                   	push   %esi
+     745:	8d 5b 04             	lea    0x4(%ebx),%ebx
+     748:	50                   	push   %eax
+     749:	e8 12 ff ff ff       	call   660 <parseredirs>
+     74e:	83 c4 10             	add    $0x10,%esp
+     751:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    return parseblock(ps, es);
+
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+     754:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+     75b:	eb 16                	jmp    773 <parseexec+0x63>
+     75d:	8d 76 00             	lea    0x0(%esi),%esi
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     760:	83 ec 04             	sub    $0x4,%esp
+     763:	57                   	push   %edi
+     764:	56                   	push   %esi
+     765:	ff 75 d0             	pushl  -0x30(%ebp)
+     768:	e8 f3 fe ff ff       	call   660 <parseredirs>
+     76d:	83 c4 10             	add    $0x10,%esp
+     770:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+  while(!peek(ps, es, "|)&;")){
+     773:	83 ec 04             	sub    $0x4,%esp
+     776:	68 0b 12 00 00       	push   $0x120b
+     77b:	57                   	push   %edi
+     77c:	56                   	push   %esi
+     77d:	e8 6e fe ff ff       	call   5f0 <peek>
+     782:	83 c4 10             	add    $0x10,%esp
+     785:	85 c0                	test   %eax,%eax
+     787:	75 5f                	jne    7e8 <parseexec+0xd8>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     789:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     78c:	50                   	push   %eax
+     78d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     790:	50                   	push   %eax
+     791:	57                   	push   %edi
+     792:	56                   	push   %esi
+     793:	e8 e8 fc ff ff       	call   480 <gettoken>
+     798:	83 c4 10             	add    $0x10,%esp
+     79b:	85 c0                	test   %eax,%eax
+     79d:	74 49                	je     7e8 <parseexec+0xd8>
+      break;
+    if(tok != 'a')
+     79f:	83 f8 61             	cmp    $0x61,%eax
+     7a2:	75 66                	jne    80a <parseexec+0xfa>
+      panic("syntax");
+    cmd->argv[argc] = q;
+     7a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+    cmd->eargv[argc] = eq;
+    argc++;
+     7a7:	83 45 d4 01          	addl   $0x1,-0x2c(%ebp)
+     7ab:	83 c3 04             	add    $0x4,%ebx
+  while(!peek(ps, es, "|)&;")){
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+    if(tok != 'a')
+      panic("syntax");
+    cmd->argv[argc] = q;
+     7ae:	89 43 fc             	mov    %eax,-0x4(%ebx)
+    cmd->eargv[argc] = eq;
+     7b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     7b4:	89 43 24             	mov    %eax,0x24(%ebx)
+    argc++;
+     7b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+    if(argc >= MAXARGS)
+     7ba:	83 f8 0a             	cmp    $0xa,%eax
+     7bd:	75 a1                	jne    760 <parseexec+0x50>
+      panic("too many args");
+     7bf:	83 ec 0c             	sub    $0xc,%esp
+     7c2:	68 fd 11 00 00       	push   $0x11fd
+     7c7:	e8 94 f9 ff ff       	call   160 <panic>
+     7cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+    return parseblock(ps, es);
+     7d0:	83 ec 08             	sub    $0x8,%esp
+     7d3:	57                   	push   %edi
+     7d4:	56                   	push   %esi
+     7d5:	e8 56 01 00 00       	call   930 <parseblock>
+     7da:	83 c4 10             	add    $0x10,%esp
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     7dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7e0:	5b                   	pop    %ebx
+     7e1:	5e                   	pop    %esi
+     7e2:	5f                   	pop    %edi
+     7e3:	5d                   	pop    %ebp
+     7e4:	c3                   	ret    
+     7e5:	8d 76 00             	lea    0x0(%esi),%esi
+     7e8:	8b 45 cc             	mov    -0x34(%ebp),%eax
+     7eb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     7ee:	8d 04 90             	lea    (%eax,%edx,4),%eax
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+     7f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     7f8:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+     7ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  return ret;
+}
+     802:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     805:	5b                   	pop    %ebx
+     806:	5e                   	pop    %esi
+     807:	5f                   	pop    %edi
+     808:	5d                   	pop    %ebp
+     809:	c3                   	ret    
+  ret = parseredirs(ret, ps, es);
+  while(!peek(ps, es, "|)&;")){
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+    if(tok != 'a')
+      panic("syntax");
+     80a:	83 ec 0c             	sub    $0xc,%esp
+     80d:	68 f6 11 00 00       	push   $0x11f6
+     812:	e8 49 f9 ff ff       	call   160 <panic>
+     817:	89 f6                	mov    %esi,%esi
+     819:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000820 <parsepipe>:
+  return cmd;
+}
+
+struct cmd*
+parsepipe(char **ps, char *es)
+{
+     820:	55                   	push   %ebp
+     821:	89 e5                	mov    %esp,%ebp
+     823:	57                   	push   %edi
+     824:	56                   	push   %esi
+     825:	53                   	push   %ebx
+     826:	83 ec 14             	sub    $0x14,%esp
+     829:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     82c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+     82f:	56                   	push   %esi
+     830:	53                   	push   %ebx
+     831:	e8 da fe ff ff       	call   710 <parseexec>
+  if(peek(ps, es, "|")){
+     836:	83 c4 0c             	add    $0xc,%esp
+struct cmd*
+parsepipe(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+     839:	89 c7                	mov    %eax,%edi
+  if(peek(ps, es, "|")){
+     83b:	68 10 12 00 00       	push   $0x1210
+     840:	56                   	push   %esi
+     841:	53                   	push   %ebx
+     842:	e8 a9 fd ff ff       	call   5f0 <peek>
+     847:	83 c4 10             	add    $0x10,%esp
+     84a:	85 c0                	test   %eax,%eax
+     84c:	75 12                	jne    860 <parsepipe+0x40>
+    gettoken(ps, es, 0, 0);
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+  }
+  return cmd;
+}
+     84e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     851:	89 f8                	mov    %edi,%eax
+     853:	5b                   	pop    %ebx
+     854:	5e                   	pop    %esi
+     855:	5f                   	pop    %edi
+     856:	5d                   	pop    %ebp
+     857:	c3                   	ret    
+     858:	90                   	nop
+     859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+  if(peek(ps, es, "|")){
+    gettoken(ps, es, 0, 0);
+     860:	6a 00                	push   $0x0
+     862:	6a 00                	push   $0x0
+     864:	56                   	push   %esi
+     865:	53                   	push   %ebx
+     866:	e8 15 fc ff ff       	call   480 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     86b:	58                   	pop    %eax
+     86c:	5a                   	pop    %edx
+     86d:	56                   	push   %esi
+     86e:	53                   	push   %ebx
+     86f:	e8 ac ff ff ff       	call   820 <parsepipe>
+     874:	89 7d 08             	mov    %edi,0x8(%ebp)
+     877:	89 45 0c             	mov    %eax,0xc(%ebp)
+     87a:	83 c4 10             	add    $0x10,%esp
+  }
+  return cmd;
+}
+     87d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     880:	5b                   	pop    %ebx
+     881:	5e                   	pop    %esi
+     882:	5f                   	pop    %edi
+     883:	5d                   	pop    %ebp
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+  if(peek(ps, es, "|")){
+    gettoken(ps, es, 0, 0);
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     884:	e9 47 fb ff ff       	jmp    3d0 <pipecmd>
+     889:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000890 <parseline>:
+  return cmd;
+}
+
+struct cmd*
+parseline(char **ps, char *es)
+{
+     890:	55                   	push   %ebp
+     891:	89 e5                	mov    %esp,%ebp
+     893:	57                   	push   %edi
+     894:	56                   	push   %esi
+     895:	53                   	push   %ebx
+     896:	83 ec 14             	sub    $0x14,%esp
+     899:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     89c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+     89f:	56                   	push   %esi
+     8a0:	53                   	push   %ebx
+     8a1:	e8 7a ff ff ff       	call   820 <parsepipe>
+  while(peek(ps, es, "&")){
+     8a6:	83 c4 10             	add    $0x10,%esp
+struct cmd*
+parseline(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+     8a9:	89 c7                	mov    %eax,%edi
+  while(peek(ps, es, "&")){
+     8ab:	eb 1b                	jmp    8c8 <parseline+0x38>
+     8ad:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     8b0:	6a 00                	push   $0x0
+     8b2:	6a 00                	push   $0x0
+     8b4:	56                   	push   %esi
+     8b5:	53                   	push   %ebx
+     8b6:	e8 c5 fb ff ff       	call   480 <gettoken>
+    cmd = backcmd(cmd);
+     8bb:	89 3c 24             	mov    %edi,(%esp)
+     8be:	e8 8d fb ff ff       	call   450 <backcmd>
+     8c3:	83 c4 10             	add    $0x10,%esp
+     8c6:	89 c7                	mov    %eax,%edi
+parseline(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+  while(peek(ps, es, "&")){
+     8c8:	83 ec 04             	sub    $0x4,%esp
+     8cb:	68 12 12 00 00       	push   $0x1212
+     8d0:	56                   	push   %esi
+     8d1:	53                   	push   %ebx
+     8d2:	e8 19 fd ff ff       	call   5f0 <peek>
+     8d7:	83 c4 10             	add    $0x10,%esp
+     8da:	85 c0                	test   %eax,%eax
+     8dc:	75 d2                	jne    8b0 <parseline+0x20>
+    gettoken(ps, es, 0, 0);
+    cmd = backcmd(cmd);
+  }
+  if(peek(ps, es, ";")){
+     8de:	83 ec 04             	sub    $0x4,%esp
+     8e1:	68 0e 12 00 00       	push   $0x120e
+     8e6:	56                   	push   %esi
+     8e7:	53                   	push   %ebx
+     8e8:	e8 03 fd ff ff       	call   5f0 <peek>
+     8ed:	83 c4 10             	add    $0x10,%esp
+     8f0:	85 c0                	test   %eax,%eax
+     8f2:	75 0c                	jne    900 <parseline+0x70>
+    gettoken(ps, es, 0, 0);
+    cmd = listcmd(cmd, parseline(ps, es));
+  }
+  return cmd;
+}
+     8f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8f7:	89 f8                	mov    %edi,%eax
+     8f9:	5b                   	pop    %ebx
+     8fa:	5e                   	pop    %esi
+     8fb:	5f                   	pop    %edi
+     8fc:	5d                   	pop    %ebp
+     8fd:	c3                   	ret    
+     8fe:	66 90                	xchg   %ax,%ax
+  while(peek(ps, es, "&")){
+    gettoken(ps, es, 0, 0);
+    cmd = backcmd(cmd);
+  }
+  if(peek(ps, es, ";")){
+    gettoken(ps, es, 0, 0);
+     900:	6a 00                	push   $0x0
+     902:	6a 00                	push   $0x0
+     904:	56                   	push   %esi
+     905:	53                   	push   %ebx
+     906:	e8 75 fb ff ff       	call   480 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     90b:	58                   	pop    %eax
+     90c:	5a                   	pop    %edx
+     90d:	56                   	push   %esi
+     90e:	53                   	push   %ebx
+     90f:	e8 7c ff ff ff       	call   890 <parseline>
+     914:	89 7d 08             	mov    %edi,0x8(%ebp)
+     917:	89 45 0c             	mov    %eax,0xc(%ebp)
+     91a:	83 c4 10             	add    $0x10,%esp
+  }
+  return cmd;
+}
+     91d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     920:	5b                   	pop    %ebx
+     921:	5e                   	pop    %esi
+     922:	5f                   	pop    %edi
+     923:	5d                   	pop    %ebp
+    gettoken(ps, es, 0, 0);
+    cmd = backcmd(cmd);
+  }
+  if(peek(ps, es, ";")){
+    gettoken(ps, es, 0, 0);
+    cmd = listcmd(cmd, parseline(ps, es));
+     924:	e9 e7 fa ff ff       	jmp    410 <listcmd>
+     929:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000930 <parseblock>:
+  return cmd;
+}
+
+struct cmd*
+parseblock(char **ps, char *es)
+{
+     930:	55                   	push   %ebp
+     931:	89 e5                	mov    %esp,%ebp
+     933:	57                   	push   %edi
+     934:	56                   	push   %esi
+     935:	53                   	push   %ebx
+     936:	83 ec 10             	sub    $0x10,%esp
+     939:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     93c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct cmd *cmd;
+
+  if(!peek(ps, es, "("))
+     93f:	68 f4 11 00 00       	push   $0x11f4
+     944:	56                   	push   %esi
+     945:	53                   	push   %ebx
+     946:	e8 a5 fc ff ff       	call   5f0 <peek>
+     94b:	83 c4 10             	add    $0x10,%esp
+     94e:	85 c0                	test   %eax,%eax
+     950:	74 4a                	je     99c <parseblock+0x6c>
+    panic("parseblock");
+  gettoken(ps, es, 0, 0);
+     952:	6a 00                	push   $0x0
+     954:	6a 00                	push   $0x0
+     956:	56                   	push   %esi
+     957:	53                   	push   %ebx
+     958:	e8 23 fb ff ff       	call   480 <gettoken>
+  cmd = parseline(ps, es);
+     95d:	58                   	pop    %eax
+     95e:	5a                   	pop    %edx
+     95f:	56                   	push   %esi
+     960:	53                   	push   %ebx
+     961:	e8 2a ff ff ff       	call   890 <parseline>
+  if(!peek(ps, es, ")"))
+     966:	83 c4 0c             	add    $0xc,%esp
+  struct cmd *cmd;
+
+  if(!peek(ps, es, "("))
+    panic("parseblock");
+  gettoken(ps, es, 0, 0);
+  cmd = parseline(ps, es);
+     969:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     96b:	68 30 12 00 00       	push   $0x1230
+     970:	56                   	push   %esi
+     971:	53                   	push   %ebx
+     972:	e8 79 fc ff ff       	call   5f0 <peek>
+     977:	83 c4 10             	add    $0x10,%esp
+     97a:	85 c0                	test   %eax,%eax
+     97c:	74 2b                	je     9a9 <parseblock+0x79>
+    panic("syntax - missing )");
+  gettoken(ps, es, 0, 0);
+     97e:	6a 00                	push   $0x0
+     980:	6a 00                	push   $0x0
+     982:	56                   	push   %esi
+     983:	53                   	push   %ebx
+     984:	e8 f7 fa ff ff       	call   480 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     989:	83 c4 0c             	add    $0xc,%esp
+     98c:	56                   	push   %esi
+     98d:	53                   	push   %ebx
+     98e:	57                   	push   %edi
+     98f:	e8 cc fc ff ff       	call   660 <parseredirs>
+  return cmd;
+}
+     994:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     997:	5b                   	pop    %ebx
+     998:	5e                   	pop    %esi
+     999:	5f                   	pop    %edi
+     99a:	5d                   	pop    %ebp
+     99b:	c3                   	ret    
+parseblock(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  if(!peek(ps, es, "("))
+    panic("parseblock");
+     99c:	83 ec 0c             	sub    $0xc,%esp
+     99f:	68 14 12 00 00       	push   $0x1214
+     9a4:	e8 b7 f7 ff ff       	call   160 <panic>
+  gettoken(ps, es, 0, 0);
+  cmd = parseline(ps, es);
+  if(!peek(ps, es, ")"))
+    panic("syntax - missing )");
+     9a9:	83 ec 0c             	sub    $0xc,%esp
+     9ac:	68 1f 12 00 00       	push   $0x121f
+     9b1:	e8 aa f7 ff ff       	call   160 <panic>
+     9b6:	8d 76 00             	lea    0x0(%esi),%esi
+     9b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000009c0 <nulterminate>:
+}
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	53                   	push   %ebx
+     9c4:	83 ec 04             	sub    $0x4,%esp
+     9c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     9ca:	85 db                	test   %ebx,%ebx
+     9cc:	0f 84 96 00 00 00    	je     a68 <nulterminate+0xa8>
+    return 0;
+
+  switch(cmd->type){
+     9d2:	83 3b 05             	cmpl   $0x5,(%ebx)
+     9d5:	77 48                	ja     a1f <nulterminate+0x5f>
+     9d7:	8b 03                	mov    (%ebx),%eax
+     9d9:	ff 24 85 70 12 00 00 	jmp    *0x1270(,%eax,4)
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     9e0:	83 ec 0c             	sub    $0xc,%esp
+     9e3:	ff 73 04             	pushl  0x4(%ebx)
+     9e6:	e8 d5 ff ff ff       	call   9c0 <nulterminate>
+    nulterminate(lcmd->right);
+     9eb:	58                   	pop    %eax
+     9ec:	ff 73 08             	pushl  0x8(%ebx)
+     9ef:	e8 cc ff ff ff       	call   9c0 <nulterminate>
+    break;
+     9f4:	83 c4 10             	add    $0x10,%esp
+     9f7:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     9f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     9fc:	c9                   	leave  
+     9fd:	c3                   	ret    
+     9fe:	66 90                	xchg   %ax,%ax
+    return 0;
+
+  switch(cmd->type){
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+     a00:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a03:	8d 43 2c             	lea    0x2c(%ebx),%eax
+     a06:	85 c9                	test   %ecx,%ecx
+     a08:	74 15                	je     a1f <nulterminate+0x5f>
+     a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     a10:	8b 10                	mov    (%eax),%edx
+     a12:	83 c0 04             	add    $0x4,%eax
+     a15:	c6 02 00             	movb   $0x0,(%edx)
+    return 0;
+
+  switch(cmd->type){
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+     a18:	8b 50 d8             	mov    -0x28(%eax),%edx
+     a1b:	85 d2                	test   %edx,%edx
+     a1d:	75 f1                	jne    a10 <nulterminate+0x50>
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    return 0;
+
+  switch(cmd->type){
+     a1f:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     a21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a24:	c9                   	leave  
+     a25:	c3                   	ret    
+     a26:	8d 76 00             	lea    0x0(%esi),%esi
+     a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    nulterminate(lcmd->right);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+     a30:	83 ec 0c             	sub    $0xc,%esp
+     a33:	ff 73 04             	pushl  0x4(%ebx)
+     a36:	e8 85 ff ff ff       	call   9c0 <nulterminate>
+    break;
+     a3b:	89 d8                	mov    %ebx,%eax
+     a3d:	83 c4 10             	add    $0x10,%esp
+  }
+  return cmd;
+}
+     a40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a43:	c9                   	leave  
+     a44:	c3                   	ret    
+     a45:	8d 76 00             	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    nulterminate(rcmd->cmd);
+     a48:	83 ec 0c             	sub    $0xc,%esp
+     a4b:	ff 73 04             	pushl  0x4(%ebx)
+     a4e:	e8 6d ff ff ff       	call   9c0 <nulterminate>
+    *rcmd->efile = 0;
+     a53:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     a56:	83 c4 10             	add    $0x10,%esp
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    nulterminate(rcmd->cmd);
+    *rcmd->efile = 0;
+     a59:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     a5c:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     a5e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a61:	c9                   	leave  
+     a62:	c3                   	ret    
+     a63:	90                   	nop
+     a64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    return 0;
+     a68:	31 c0                	xor    %eax,%eax
+     a6a:	eb 8d                	jmp    9f9 <nulterminate+0x39>
+     a6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a70 <parsecmd>:
+struct cmd *parseexec(char**, char*);
+struct cmd *nulterminate(struct cmd*);
+
+struct cmd*
+parsecmd(char *s)
+{
+     a70:	55                   	push   %ebp
+     a71:	89 e5                	mov    %esp,%ebp
+     a73:	56                   	push   %esi
+     a74:	53                   	push   %ebx
+  char *es;
+  struct cmd *cmd;
+
+  es = s + strlen(s);
+     a75:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a78:	83 ec 0c             	sub    $0xc,%esp
+     a7b:	53                   	push   %ebx
+     a7c:	e8 df 00 00 00       	call   b60 <strlen>
+  cmd = parseline(&s, es);
+     a81:	59                   	pop    %ecx
+parsecmd(char *s)
+{
+  char *es;
+  struct cmd *cmd;
+
+  es = s + strlen(s);
+     a82:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     a84:	8d 45 08             	lea    0x8(%ebp),%eax
+     a87:	5e                   	pop    %esi
+     a88:	53                   	push   %ebx
+     a89:	50                   	push   %eax
+     a8a:	e8 01 fe ff ff       	call   890 <parseline>
+     a8f:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     a91:	8d 45 08             	lea    0x8(%ebp),%eax
+     a94:	83 c4 0c             	add    $0xc,%esp
+     a97:	68 b9 11 00 00       	push   $0x11b9
+     a9c:	53                   	push   %ebx
+     a9d:	50                   	push   %eax
+     a9e:	e8 4d fb ff ff       	call   5f0 <peek>
+  if(s != es){
+     aa3:	8b 45 08             	mov    0x8(%ebp),%eax
+     aa6:	83 c4 10             	add    $0x10,%esp
+     aa9:	39 c3                	cmp    %eax,%ebx
+     aab:	75 12                	jne    abf <parsecmd+0x4f>
+    printf(2, "leftovers: %s\n", s);
+    panic("syntax");
+  }
+  nulterminate(cmd);
+     aad:	83 ec 0c             	sub    $0xc,%esp
+     ab0:	56                   	push   %esi
+     ab1:	e8 0a ff ff ff       	call   9c0 <nulterminate>
+  return cmd;
+}
+     ab6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ab9:	89 f0                	mov    %esi,%eax
+     abb:	5b                   	pop    %ebx
+     abc:	5e                   	pop    %esi
+     abd:	5d                   	pop    %ebp
+     abe:	c3                   	ret    
+
+  es = s + strlen(s);
+  cmd = parseline(&s, es);
+  peek(&s, es, "");
+  if(s != es){
+    printf(2, "leftovers: %s\n", s);
+     abf:	52                   	push   %edx
+     ac0:	50                   	push   %eax
+     ac1:	68 32 12 00 00       	push   $0x1232
+     ac6:	6a 02                	push   $0x2
+     ac8:	e8 b3 03 00 00       	call   e80 <printf>
+    panic("syntax");
+     acd:	c7 04 24 f6 11 00 00 	movl   $0x11f6,(%esp)
+     ad4:	e8 87 f6 ff ff       	call   160 <panic>
+     ad9:	66 90                	xchg   %ax,%ax
+     adb:	66 90                	xchg   %ax,%ax
+     add:	66 90                	xchg   %ax,%ax
+     adf:	90                   	nop
+
+00000ae0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     ae0:	55                   	push   %ebp
+     ae1:	89 e5                	mov    %esp,%ebp
+     ae3:	53                   	push   %ebx
+     ae4:	8b 45 08             	mov    0x8(%ebp),%eax
+     ae7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     aea:	89 c2                	mov    %eax,%edx
+     aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     af0:	83 c1 01             	add    $0x1,%ecx
+     af3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+     af7:	83 c2 01             	add    $0x1,%edx
+     afa:	84 db                	test   %bl,%bl
+     afc:	88 5a ff             	mov    %bl,-0x1(%edx)
+     aff:	75 ef                	jne    af0 <strcpy+0x10>
+    ;
+  return os;
+}
+     b01:	5b                   	pop    %ebx
+     b02:	5d                   	pop    %ebp
+     b03:	c3                   	ret    
+     b04:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b0a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000b10 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     b10:	55                   	push   %ebp
+     b11:	89 e5                	mov    %esp,%ebp
+     b13:	56                   	push   %esi
+     b14:	53                   	push   %ebx
+     b15:	8b 55 08             	mov    0x8(%ebp),%edx
+     b18:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+     b1b:	0f b6 02             	movzbl (%edx),%eax
+     b1e:	0f b6 19             	movzbl (%ecx),%ebx
+     b21:	84 c0                	test   %al,%al
+     b23:	75 1e                	jne    b43 <strcmp+0x33>
+     b25:	eb 29                	jmp    b50 <strcmp+0x40>
+     b27:	89 f6                	mov    %esi,%esi
+     b29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+     b30:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+     b33:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+     b36:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+     b39:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+     b3d:	84 c0                	test   %al,%al
+     b3f:	74 0f                	je     b50 <strcmp+0x40>
+     b41:	89 f1                	mov    %esi,%ecx
+     b43:	38 d8                	cmp    %bl,%al
+     b45:	74 e9                	je     b30 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+     b47:	29 d8                	sub    %ebx,%eax
+}
+     b49:	5b                   	pop    %ebx
+     b4a:	5e                   	pop    %esi
+     b4b:	5d                   	pop    %ebp
+     b4c:	c3                   	ret    
+     b4d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+     b50:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+     b52:	29 d8                	sub    %ebx,%eax
+}
+     b54:	5b                   	pop    %ebx
+     b55:	5e                   	pop    %esi
+     b56:	5d                   	pop    %ebp
+     b57:	c3                   	ret    
+     b58:	90                   	nop
+     b59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000b60 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     b60:	55                   	push   %ebp
+     b61:	89 e5                	mov    %esp,%ebp
+     b63:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     b66:	80 39 00             	cmpb   $0x0,(%ecx)
+     b69:	74 12                	je     b7d <strlen+0x1d>
+     b6b:	31 d2                	xor    %edx,%edx
+     b6d:	8d 76 00             	lea    0x0(%esi),%esi
+     b70:	83 c2 01             	add    $0x1,%edx
+     b73:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+     b77:	89 d0                	mov    %edx,%eax
+     b79:	75 f5                	jne    b70 <strlen+0x10>
+    ;
+  return n;
+}
+     b7b:	5d                   	pop    %ebp
+     b7c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+     b7d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+     b7f:	5d                   	pop    %ebp
+     b80:	c3                   	ret    
+     b81:	eb 0d                	jmp    b90 <memset>
+     b83:	90                   	nop
+     b84:	90                   	nop
+     b85:	90                   	nop
+     b86:	90                   	nop
+     b87:	90                   	nop
+     b88:	90                   	nop
+     b89:	90                   	nop
+     b8a:	90                   	nop
+     b8b:	90                   	nop
+     b8c:	90                   	nop
+     b8d:	90                   	nop
+     b8e:	90                   	nop
+     b8f:	90                   	nop
+
+00000b90 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     b90:	55                   	push   %ebp
+     b91:	89 e5                	mov    %esp,%ebp
+     b93:	57                   	push   %edi
+     b94:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     b97:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     b9d:	89 d7                	mov    %edx,%edi
+     b9f:	fc                   	cld    
+     ba0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     ba2:	89 d0                	mov    %edx,%eax
+     ba4:	5f                   	pop    %edi
+     ba5:	5d                   	pop    %ebp
+     ba6:	c3                   	ret    
+     ba7:	89 f6                	mov    %esi,%esi
+     ba9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000bb0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	53                   	push   %ebx
+     bb4:	8b 45 08             	mov    0x8(%ebp),%eax
+     bb7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+     bba:	0f b6 10             	movzbl (%eax),%edx
+     bbd:	84 d2                	test   %dl,%dl
+     bbf:	74 1d                	je     bde <strchr+0x2e>
+    if(*s == c)
+     bc1:	38 d3                	cmp    %dl,%bl
+     bc3:	89 d9                	mov    %ebx,%ecx
+     bc5:	75 0d                	jne    bd4 <strchr+0x24>
+     bc7:	eb 17                	jmp    be0 <strchr+0x30>
+     bc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bd0:	38 ca                	cmp    %cl,%dl
+     bd2:	74 0c                	je     be0 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+     bd4:	83 c0 01             	add    $0x1,%eax
+     bd7:	0f b6 10             	movzbl (%eax),%edx
+     bda:	84 d2                	test   %dl,%dl
+     bdc:	75 f2                	jne    bd0 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+     bde:	31 c0                	xor    %eax,%eax
+}
+     be0:	5b                   	pop    %ebx
+     be1:	5d                   	pop    %ebp
+     be2:	c3                   	ret    
+     be3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     be9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000bf0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     bf0:	55                   	push   %ebp
+     bf1:	89 e5                	mov    %esp,%ebp
+     bf3:	57                   	push   %edi
+     bf4:	56                   	push   %esi
+     bf5:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     bf6:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+     bf8:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+     bfb:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     bfe:	eb 29                	jmp    c29 <gets+0x39>
+    cc = read(0, &c, 1);
+     c00:	83 ec 04             	sub    $0x4,%esp
+     c03:	6a 01                	push   $0x1
+     c05:	57                   	push   %edi
+     c06:	6a 00                	push   $0x0
+     c08:	e8 2d 01 00 00       	call   d3a <read>
+    if(cc < 1)
+     c0d:	83 c4 10             	add    $0x10,%esp
+     c10:	85 c0                	test   %eax,%eax
+     c12:	7e 1d                	jle    c31 <gets+0x41>
+      break;
+    buf[i++] = c;
+     c14:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c18:	8b 55 08             	mov    0x8(%ebp),%edx
+     c1b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+     c1d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+     c1f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+     c23:	74 1b                	je     c40 <gets+0x50>
+     c25:	3c 0d                	cmp    $0xd,%al
+     c27:	74 17                	je     c40 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     c29:	8d 5e 01             	lea    0x1(%esi),%ebx
+     c2c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     c2f:	7c cf                	jl     c00 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+     c31:	8b 45 08             	mov    0x8(%ebp),%eax
+     c34:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+     c38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c3b:	5b                   	pop    %ebx
+     c3c:	5e                   	pop    %esi
+     c3d:	5f                   	pop    %edi
+     c3e:	5d                   	pop    %ebp
+     c3f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+     c40:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     c43:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+     c45:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+     c49:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c4c:	5b                   	pop    %ebx
+     c4d:	5e                   	pop    %esi
+     c4e:	5f                   	pop    %edi
+     c4f:	5d                   	pop    %ebp
+     c50:	c3                   	ret    
+     c51:	eb 0d                	jmp    c60 <stat>
+     c53:	90                   	nop
+     c54:	90                   	nop
+     c55:	90                   	nop
+     c56:	90                   	nop
+     c57:	90                   	nop
+     c58:	90                   	nop
+     c59:	90                   	nop
+     c5a:	90                   	nop
+     c5b:	90                   	nop
+     c5c:	90                   	nop
+     c5d:	90                   	nop
+     c5e:	90                   	nop
+     c5f:	90                   	nop
+
+00000c60 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     c60:	55                   	push   %ebp
+     c61:	89 e5                	mov    %esp,%ebp
+     c63:	56                   	push   %esi
+     c64:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     c65:	83 ec 08             	sub    $0x8,%esp
+     c68:	6a 00                	push   $0x0
+     c6a:	ff 75 08             	pushl  0x8(%ebp)
+     c6d:	e8 f0 00 00 00       	call   d62 <open>
+  if(fd < 0)
+     c72:	83 c4 10             	add    $0x10,%esp
+     c75:	85 c0                	test   %eax,%eax
+     c77:	78 27                	js     ca0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+     c79:	83 ec 08             	sub    $0x8,%esp
+     c7c:	ff 75 0c             	pushl  0xc(%ebp)
+     c7f:	89 c3                	mov    %eax,%ebx
+     c81:	50                   	push   %eax
+     c82:	e8 f3 00 00 00       	call   d7a <fstat>
+     c87:	89 c6                	mov    %eax,%esi
+  close(fd);
+     c89:	89 1c 24             	mov    %ebx,(%esp)
+     c8c:	e8 b9 00 00 00       	call   d4a <close>
+  return r;
+     c91:	83 c4 10             	add    $0x10,%esp
+     c94:	89 f0                	mov    %esi,%eax
+}
+     c96:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     c99:	5b                   	pop    %ebx
+     c9a:	5e                   	pop    %esi
+     c9b:	5d                   	pop    %ebp
+     c9c:	c3                   	ret    
+     c9d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+     ca0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+     ca5:	eb ef                	jmp    c96 <stat+0x36>
+     ca7:	89 f6                	mov    %esi,%esi
+     ca9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000cb0 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+     cb0:	55                   	push   %ebp
+     cb1:	89 e5                	mov    %esp,%ebp
+     cb3:	53                   	push   %ebx
+     cb4:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     cb7:	0f be 11             	movsbl (%ecx),%edx
+     cba:	8d 42 d0             	lea    -0x30(%edx),%eax
+     cbd:	3c 09                	cmp    $0x9,%al
+     cbf:	b8 00 00 00 00       	mov    $0x0,%eax
+     cc4:	77 1f                	ja     ce5 <atoi+0x35>
+     cc6:	8d 76 00             	lea    0x0(%esi),%esi
+     cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+     cd0:	8d 04 80             	lea    (%eax,%eax,4),%eax
+     cd3:	83 c1 01             	add    $0x1,%ecx
+     cd6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     cda:	0f be 11             	movsbl (%ecx),%edx
+     cdd:	8d 5a d0             	lea    -0x30(%edx),%ebx
+     ce0:	80 fb 09             	cmp    $0x9,%bl
+     ce3:	76 eb                	jbe    cd0 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+     ce5:	5b                   	pop    %ebx
+     ce6:	5d                   	pop    %ebp
+     ce7:	c3                   	ret    
+     ce8:	90                   	nop
+     ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000cf0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	56                   	push   %esi
+     cf4:	53                   	push   %ebx
+     cf5:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     cf8:	8b 45 08             	mov    0x8(%ebp),%eax
+     cfb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     cfe:	85 db                	test   %ebx,%ebx
+     d00:	7e 14                	jle    d16 <memmove+0x26>
+     d02:	31 d2                	xor    %edx,%edx
+     d04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+     d08:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+     d0c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+     d0f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     d12:	39 da                	cmp    %ebx,%edx
+     d14:	75 f2                	jne    d08 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+     d16:	5b                   	pop    %ebx
+     d17:	5e                   	pop    %esi
+     d18:	5d                   	pop    %ebp
+     d19:	c3                   	ret    
+
+00000d1a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     d1a:	b8 01 00 00 00       	mov    $0x1,%eax
+     d1f:	cd 40                	int    $0x40
+     d21:	c3                   	ret    
+
+00000d22 <exit>:
+SYSCALL(exit)
+     d22:	b8 02 00 00 00       	mov    $0x2,%eax
+     d27:	cd 40                	int    $0x40
+     d29:	c3                   	ret    
+
+00000d2a <wait>:
+SYSCALL(wait)
+     d2a:	b8 03 00 00 00       	mov    $0x3,%eax
+     d2f:	cd 40                	int    $0x40
+     d31:	c3                   	ret    
+
+00000d32 <pipe>:
+SYSCALL(pipe)
+     d32:	b8 04 00 00 00       	mov    $0x4,%eax
+     d37:	cd 40                	int    $0x40
+     d39:	c3                   	ret    
+
+00000d3a <read>:
+SYSCALL(read)
+     d3a:	b8 05 00 00 00       	mov    $0x5,%eax
+     d3f:	cd 40                	int    $0x40
+     d41:	c3                   	ret    
+
+00000d42 <write>:
+SYSCALL(write)
+     d42:	b8 10 00 00 00       	mov    $0x10,%eax
+     d47:	cd 40                	int    $0x40
+     d49:	c3                   	ret    
+
+00000d4a <close>:
+SYSCALL(close)
+     d4a:	b8 15 00 00 00       	mov    $0x15,%eax
+     d4f:	cd 40                	int    $0x40
+     d51:	c3                   	ret    
+
+00000d52 <kill>:
+SYSCALL(kill)
+     d52:	b8 06 00 00 00       	mov    $0x6,%eax
+     d57:	cd 40                	int    $0x40
+     d59:	c3                   	ret    
+
+00000d5a <exec>:
+SYSCALL(exec)
+     d5a:	b8 07 00 00 00       	mov    $0x7,%eax
+     d5f:	cd 40                	int    $0x40
+     d61:	c3                   	ret    
+
+00000d62 <open>:
+SYSCALL(open)
+     d62:	b8 0f 00 00 00       	mov    $0xf,%eax
+     d67:	cd 40                	int    $0x40
+     d69:	c3                   	ret    
+
+00000d6a <mknod>:
+SYSCALL(mknod)
+     d6a:	b8 11 00 00 00       	mov    $0x11,%eax
+     d6f:	cd 40                	int    $0x40
+     d71:	c3                   	ret    
+
+00000d72 <unlink>:
+SYSCALL(unlink)
+     d72:	b8 12 00 00 00       	mov    $0x12,%eax
+     d77:	cd 40                	int    $0x40
+     d79:	c3                   	ret    
+
+00000d7a <fstat>:
+SYSCALL(fstat)
+     d7a:	b8 08 00 00 00       	mov    $0x8,%eax
+     d7f:	cd 40                	int    $0x40
+     d81:	c3                   	ret    
+
+00000d82 <link>:
+SYSCALL(link)
+     d82:	b8 13 00 00 00       	mov    $0x13,%eax
+     d87:	cd 40                	int    $0x40
+     d89:	c3                   	ret    
+
+00000d8a <mkdir>:
+SYSCALL(mkdir)
+     d8a:	b8 14 00 00 00       	mov    $0x14,%eax
+     d8f:	cd 40                	int    $0x40
+     d91:	c3                   	ret    
+
+00000d92 <chdir>:
+SYSCALL(chdir)
+     d92:	b8 09 00 00 00       	mov    $0x9,%eax
+     d97:	cd 40                	int    $0x40
+     d99:	c3                   	ret    
+
+00000d9a <dup>:
+SYSCALL(dup)
+     d9a:	b8 0a 00 00 00       	mov    $0xa,%eax
+     d9f:	cd 40                	int    $0x40
+     da1:	c3                   	ret    
+
+00000da2 <getpid>:
+SYSCALL(getpid)
+     da2:	b8 0b 00 00 00       	mov    $0xb,%eax
+     da7:	cd 40                	int    $0x40
+     da9:	c3                   	ret    
+
+00000daa <sbrk>:
+SYSCALL(sbrk)
+     daa:	b8 0c 00 00 00       	mov    $0xc,%eax
+     daf:	cd 40                	int    $0x40
+     db1:	c3                   	ret    
+
+00000db2 <sleep>:
+SYSCALL(sleep)
+     db2:	b8 0d 00 00 00       	mov    $0xd,%eax
+     db7:	cd 40                	int    $0x40
+     db9:	c3                   	ret    
+
+00000dba <uptime>:
+SYSCALL(uptime)
+     dba:	b8 0e 00 00 00       	mov    $0xe,%eax
+     dbf:	cd 40                	int    $0x40
+     dc1:	c3                   	ret    
+
+00000dc2 <readcount>:
+SYSCALL(readcount)
+     dc2:	b8 16 00 00 00       	mov    $0x16,%eax
+     dc7:	cd 40                	int    $0x40
+     dc9:	c3                   	ret    
+
+00000dca <callcount>:
+SYSCALL(callcount)
+     dca:	b8 17 00 00 00       	mov    $0x17,%eax
+     dcf:	cd 40                	int    $0x40
+     dd1:	c3                   	ret    
+     dd2:	66 90                	xchg   %ax,%ax
+     dd4:	66 90                	xchg   %ax,%ax
+     dd6:	66 90                	xchg   %ax,%ax
+     dd8:	66 90                	xchg   %ax,%ax
+     dda:	66 90                	xchg   %ax,%ax
+     ddc:	66 90                	xchg   %ax,%ax
+     dde:	66 90                	xchg   %ax,%ax
+
+00000de0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     de0:	55                   	push   %ebp
+     de1:	89 e5                	mov    %esp,%ebp
+     de3:	57                   	push   %edi
+     de4:	56                   	push   %esi
+     de5:	53                   	push   %ebx
+     de6:	89 c6                	mov    %eax,%esi
+     de8:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     deb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     dee:	85 db                	test   %ebx,%ebx
+     df0:	74 7e                	je     e70 <printint+0x90>
+     df2:	89 d0                	mov    %edx,%eax
+     df4:	c1 e8 1f             	shr    $0x1f,%eax
+     df7:	84 c0                	test   %al,%al
+     df9:	74 75                	je     e70 <printint+0x90>
+    neg = 1;
+    x = -xx;
+     dfb:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+     dfd:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+     e04:	f7 d8                	neg    %eax
+     e06:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     e09:	31 ff                	xor    %edi,%edi
+     e0b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+     e0e:	89 ce                	mov    %ecx,%esi
+     e10:	eb 08                	jmp    e1a <printint+0x3a>
+     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     e18:	89 cf                	mov    %ecx,%edi
+     e1a:	31 d2                	xor    %edx,%edx
+     e1c:	8d 4f 01             	lea    0x1(%edi),%ecx
+     e1f:	f7 f6                	div    %esi
+     e21:	0f b6 92 90 12 00 00 	movzbl 0x1290(%edx),%edx
+  }while((x /= base) != 0);
+     e28:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+     e2a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+     e2d:	75 e9                	jne    e18 <printint+0x38>
+  if(neg)
+     e2f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+     e32:	8b 75 c0             	mov    -0x40(%ebp),%esi
+     e35:	85 c0                	test   %eax,%eax
+     e37:	74 08                	je     e41 <printint+0x61>
+    buf[i++] = '-';
+     e39:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+     e3e:	8d 4f 02             	lea    0x2(%edi),%ecx
+     e41:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+     e45:	8d 76 00             	lea    0x0(%esi),%esi
+     e48:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     e4b:	83 ec 04             	sub    $0x4,%esp
+     e4e:	83 ef 01             	sub    $0x1,%edi
+     e51:	6a 01                	push   $0x1
+     e53:	53                   	push   %ebx
+     e54:	56                   	push   %esi
+     e55:	88 45 d7             	mov    %al,-0x29(%ebp)
+     e58:	e8 e5 fe ff ff       	call   d42 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+     e5d:	83 c4 10             	add    $0x10,%esp
+     e60:	39 df                	cmp    %ebx,%edi
+     e62:	75 e4                	jne    e48 <printint+0x68>
+    putc(fd, buf[i]);
+}
+     e64:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e67:	5b                   	pop    %ebx
+     e68:	5e                   	pop    %esi
+     e69:	5f                   	pop    %edi
+     e6a:	5d                   	pop    %ebp
+     e6b:	c3                   	ret    
+     e6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+     e70:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+     e72:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+     e79:	eb 8b                	jmp    e06 <printint+0x26>
+     e7b:	90                   	nop
+     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000e80 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     e80:	55                   	push   %ebp
+     e81:	89 e5                	mov    %esp,%ebp
+     e83:	57                   	push   %edi
+     e84:	56                   	push   %esi
+     e85:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     e86:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     e89:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     e8c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     e8f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     e92:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     e95:	0f b6 1e             	movzbl (%esi),%ebx
+     e98:	83 c6 01             	add    $0x1,%esi
+     e9b:	84 db                	test   %bl,%bl
+     e9d:	0f 84 b0 00 00 00    	je     f53 <printf+0xd3>
+     ea3:	31 d2                	xor    %edx,%edx
+     ea5:	eb 39                	jmp    ee0 <printf+0x60>
+     ea7:	89 f6                	mov    %esi,%esi
+     ea9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+     eb0:	83 f8 25             	cmp    $0x25,%eax
+     eb3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+     eb6:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+     ebb:	74 18                	je     ed5 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     ebd:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+     ec0:	83 ec 04             	sub    $0x4,%esp
+     ec3:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+     ec6:	6a 01                	push   $0x1
+     ec8:	50                   	push   %eax
+     ec9:	57                   	push   %edi
+     eca:	e8 73 fe ff ff       	call   d42 <write>
+     ecf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     ed2:	83 c4 10             	add    $0x10,%esp
+     ed5:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     ed8:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     edc:	84 db                	test   %bl,%bl
+     ede:	74 73                	je     f53 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+     ee0:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+     ee2:	0f be cb             	movsbl %bl,%ecx
+     ee5:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+     ee8:	74 c6                	je     eb0 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+     eea:	83 fa 25             	cmp    $0x25,%edx
+     eed:	75 e6                	jne    ed5 <printf+0x55>
+      if(c == 'd'){
+     eef:	83 f8 64             	cmp    $0x64,%eax
+     ef2:	0f 84 f8 00 00 00    	je     ff0 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+     ef8:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     efe:	83 f9 70             	cmp    $0x70,%ecx
+     f01:	74 5d                	je     f60 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+     f03:	83 f8 73             	cmp    $0x73,%eax
+     f06:	0f 84 84 00 00 00    	je     f90 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+     f0c:	83 f8 63             	cmp    $0x63,%eax
+     f0f:	0f 84 ea 00 00 00    	je     fff <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+     f15:	83 f8 25             	cmp    $0x25,%eax
+     f18:	0f 84 c2 00 00 00    	je     fe0 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     f1e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     f21:	83 ec 04             	sub    $0x4,%esp
+     f24:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     f28:	6a 01                	push   $0x1
+     f2a:	50                   	push   %eax
+     f2b:	57                   	push   %edi
+     f2c:	e8 11 fe ff ff       	call   d42 <write>
+     f31:	83 c4 0c             	add    $0xc,%esp
+     f34:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+     f37:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+     f3a:	6a 01                	push   $0x1
+     f3c:	50                   	push   %eax
+     f3d:	57                   	push   %edi
+     f3e:	83 c6 01             	add    $0x1,%esi
+     f41:	e8 fc fd ff ff       	call   d42 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     f46:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     f4a:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+     f4d:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     f4f:	84 db                	test   %bl,%bl
+     f51:	75 8d                	jne    ee0 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+     f53:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f56:	5b                   	pop    %ebx
+     f57:	5e                   	pop    %esi
+     f58:	5f                   	pop    %edi
+     f59:	5d                   	pop    %ebp
+     f5a:	c3                   	ret    
+     f5b:	90                   	nop
+     f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+     f60:	83 ec 0c             	sub    $0xc,%esp
+     f63:	b9 10 00 00 00       	mov    $0x10,%ecx
+     f68:	6a 00                	push   $0x0
+     f6a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+     f6d:	89 f8                	mov    %edi,%eax
+     f6f:	8b 13                	mov    (%ebx),%edx
+     f71:	e8 6a fe ff ff       	call   de0 <printint>
+        ap++;
+     f76:	89 d8                	mov    %ebx,%eax
+     f78:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+     f7b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+     f7d:	83 c0 04             	add    $0x4,%eax
+     f80:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     f83:	e9 4d ff ff ff       	jmp    ed5 <printf+0x55>
+     f88:	90                   	nop
+     f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+     f90:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     f93:	8b 18                	mov    (%eax),%ebx
+        ap++;
+     f95:	83 c0 04             	add    $0x4,%eax
+     f98:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+     f9b:	b8 88 12 00 00       	mov    $0x1288,%eax
+     fa0:	85 db                	test   %ebx,%ebx
+     fa2:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+     fa5:	0f b6 03             	movzbl (%ebx),%eax
+     fa8:	84 c0                	test   %al,%al
+     faa:	74 23                	je     fcf <printf+0x14f>
+     fac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     fb0:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     fb3:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+     fb6:	83 ec 04             	sub    $0x4,%esp
+     fb9:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+     fbb:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     fbe:	50                   	push   %eax
+     fbf:	57                   	push   %edi
+     fc0:	e8 7d fd ff ff       	call   d42 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+     fc5:	0f b6 03             	movzbl (%ebx),%eax
+     fc8:	83 c4 10             	add    $0x10,%esp
+     fcb:	84 c0                	test   %al,%al
+     fcd:	75 e1                	jne    fb0 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+     fcf:	31 d2                	xor    %edx,%edx
+     fd1:	e9 ff fe ff ff       	jmp    ed5 <printf+0x55>
+     fd6:	8d 76 00             	lea    0x0(%esi),%esi
+     fd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+     fe0:	83 ec 04             	sub    $0x4,%esp
+     fe3:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+     fe6:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+     fe9:	6a 01                	push   $0x1
+     feb:	e9 4c ff ff ff       	jmp    f3c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+     ff0:	83 ec 0c             	sub    $0xc,%esp
+     ff3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+     ff8:	6a 01                	push   $0x1
+     ffa:	e9 6b ff ff ff       	jmp    f6a <printf+0xea>
+     fff:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    1002:	83 ec 04             	sub    $0x4,%esp
+    1005:	8b 03                	mov    (%ebx),%eax
+    1007:	6a 01                	push   $0x1
+    1009:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    100c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    100f:	50                   	push   %eax
+    1010:	57                   	push   %edi
+    1011:	e8 2c fd ff ff       	call   d42 <write>
+    1016:	e9 5b ff ff ff       	jmp    f76 <printf+0xf6>
+    101b:	66 90                	xchg   %ax,%ax
+    101d:	66 90                	xchg   %ax,%ax
+    101f:	90                   	nop
+
+00001020 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1020:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1021:	a1 c4 18 00 00       	mov    0x18c4,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1026:	89 e5                	mov    %esp,%ebp
+    1028:	57                   	push   %edi
+    1029:	56                   	push   %esi
+    102a:	53                   	push   %ebx
+    102b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    102e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    1030:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1033:	39 c8                	cmp    %ecx,%eax
+    1035:	73 19                	jae    1050 <free+0x30>
+    1037:	89 f6                	mov    %esi,%esi
+    1039:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    1040:	39 d1                	cmp    %edx,%ecx
+    1042:	72 1c                	jb     1060 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1044:	39 d0                	cmp    %edx,%eax
+    1046:	73 18                	jae    1060 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1048:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    104a:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    104c:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    104e:	72 f0                	jb     1040 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1050:	39 d0                	cmp    %edx,%eax
+    1052:	72 f4                	jb     1048 <free+0x28>
+    1054:	39 d1                	cmp    %edx,%ecx
+    1056:	73 f0                	jae    1048 <free+0x28>
+    1058:	90                   	nop
+    1059:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1060:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    1063:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    1066:	39 d7                	cmp    %edx,%edi
+    1068:	74 19                	je     1083 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    106a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    106d:	8b 50 04             	mov    0x4(%eax),%edx
+    1070:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1073:	39 f1                	cmp    %esi,%ecx
+    1075:	74 23                	je     109a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    1077:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    1079:	a3 c4 18 00 00       	mov    %eax,0x18c4
+}
+    107e:	5b                   	pop    %ebx
+    107f:	5e                   	pop    %esi
+    1080:	5f                   	pop    %edi
+    1081:	5d                   	pop    %ebp
+    1082:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    1083:	03 72 04             	add    0x4(%edx),%esi
+    1086:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1089:	8b 10                	mov    (%eax),%edx
+    108b:	8b 12                	mov    (%edx),%edx
+    108d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    1090:	8b 50 04             	mov    0x4(%eax),%edx
+    1093:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1096:	39 f1                	cmp    %esi,%ecx
+    1098:	75 dd                	jne    1077 <free+0x57>
+    p->s.size += bp->s.size;
+    109a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    109d:	a3 c4 18 00 00       	mov    %eax,0x18c4
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    10a2:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    10a5:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    10a8:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+    10aa:	5b                   	pop    %ebx
+    10ab:	5e                   	pop    %esi
+    10ac:	5f                   	pop    %edi
+    10ad:	5d                   	pop    %ebp
+    10ae:	c3                   	ret    
+    10af:	90                   	nop
+
+000010b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    10b0:	55                   	push   %ebp
+    10b1:	89 e5                	mov    %esp,%ebp
+    10b3:	57                   	push   %edi
+    10b4:	56                   	push   %esi
+    10b5:	53                   	push   %ebx
+    10b6:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    10b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    10bc:	8b 15 c4 18 00 00    	mov    0x18c4,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    10c2:	8d 78 07             	lea    0x7(%eax),%edi
+    10c5:	c1 ef 03             	shr    $0x3,%edi
+    10c8:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    10cb:	85 d2                	test   %edx,%edx
+    10cd:	0f 84 a3 00 00 00    	je     1176 <malloc+0xc6>
+    10d3:	8b 02                	mov    (%edx),%eax
+    10d5:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    10d8:	39 cf                	cmp    %ecx,%edi
+    10da:	76 74                	jbe    1150 <malloc+0xa0>
+    10dc:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    10e2:	be 00 10 00 00       	mov    $0x1000,%esi
+    10e7:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+    10ee:	0f 43 f7             	cmovae %edi,%esi
+    10f1:	ba 00 80 00 00       	mov    $0x8000,%edx
+    10f6:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+    10fc:	0f 46 da             	cmovbe %edx,%ebx
+    10ff:	eb 10                	jmp    1111 <malloc+0x61>
+    1101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1108:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    110a:	8b 48 04             	mov    0x4(%eax),%ecx
+    110d:	39 cf                	cmp    %ecx,%edi
+    110f:	76 3f                	jbe    1150 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1111:	39 05 c4 18 00 00    	cmp    %eax,0x18c4
+    1117:	89 c2                	mov    %eax,%edx
+    1119:	75 ed                	jne    1108 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+    111b:	83 ec 0c             	sub    $0xc,%esp
+    111e:	53                   	push   %ebx
+    111f:	e8 86 fc ff ff       	call   daa <sbrk>
+  if(p == (char*)-1)
+    1124:	83 c4 10             	add    $0x10,%esp
+    1127:	83 f8 ff             	cmp    $0xffffffff,%eax
+    112a:	74 1c                	je     1148 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+    112c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+    112f:	83 ec 0c             	sub    $0xc,%esp
+    1132:	83 c0 08             	add    $0x8,%eax
+    1135:	50                   	push   %eax
+    1136:	e8 e5 fe ff ff       	call   1020 <free>
+  return freep;
+    113b:	8b 15 c4 18 00 00    	mov    0x18c4,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+    1141:	83 c4 10             	add    $0x10,%esp
+    1144:	85 d2                	test   %edx,%edx
+    1146:	75 c0                	jne    1108 <malloc+0x58>
+        return 0;
+    1148:	31 c0                	xor    %eax,%eax
+    114a:	eb 1c                	jmp    1168 <malloc+0xb8>
+    114c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+    1150:	39 cf                	cmp    %ecx,%edi
+    1152:	74 1c                	je     1170 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+    1154:	29 f9                	sub    %edi,%ecx
+    1156:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    1159:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    115c:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+    115f:	89 15 c4 18 00 00    	mov    %edx,0x18c4
+      return (void*)(p + 1);
+    1165:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+    1168:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    116b:	5b                   	pop    %ebx
+    116c:	5e                   	pop    %esi
+    116d:	5f                   	pop    %edi
+    116e:	5d                   	pop    %ebp
+    116f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+    1170:	8b 08                	mov    (%eax),%ecx
+    1172:	89 0a                	mov    %ecx,(%edx)
+    1174:	eb e9                	jmp    115f <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    1176:	c7 05 c4 18 00 00 c8 	movl   $0x18c8,0x18c4
+    117d:	18 00 00 
+    1180:	c7 05 c8 18 00 00 c8 	movl   $0x18c8,0x18c8
+    1187:	18 00 00 
+    base.s.size = 0;
+    118a:	b8 c8 18 00 00       	mov    $0x18c8,%eax
+    118f:	c7 05 cc 18 00 00 00 	movl   $0x0,0x18cc
+    1196:	00 00 00 
+    1199:	e9 3e ff ff ff       	jmp    10dc <malloc+0x2c>
diff -ruN ./xv6-public-src/sh.d ./xv6-public/sh.d
--- ./xv6-public-src/sh.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/sh.d	2019-11-28 17:52:28.468072630 +0200
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files ./xv6-public-src/sh.o and ./xv6-public/sh.o differ
diff -ruN ./xv6-public-src/sh.sym ./xv6-public/sh.sym
--- ./xv6-public-src/sh.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/sh.sym	2019-11-28 17:52:28.500092371 +0200
@@ -0,0 +1,81 @@
+00000000 .text
+000011a0 .rodata
+000012a4 .eh_frame
+00001840 .data
+00001860 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+00001860 buf.1149
+00000000 ulib.c
+00000000 printf.c
+00000de0 printint
+00001290 digits.1111
+00000000 umalloc.c
+000018c4 freep
+000018c8 base
+00000ae0 strcpy
+00000e80 printf
+00000cf0 memmove
+00000d6a mknod
+00000350 execcmd
+00000bf0 gets
+00000da2 getpid
+00000820 parsepipe
+00000a70 parsecmd
+00000450 backcmd
+000005f0 peek
+00000660 parseredirs
+00000480 gettoken
+000010b0 malloc
+00000db2 sleep
+00001848 whitespace
+00000dc2 readcount
+00000330 fork1
+00000dca callcount
+000009c0 nulterminate
+00000d32 pipe
+00000110 getcmd
+00000d42 write
+00000d7a fstat
+00000d52 kill
+00000d92 chdir
+00000890 parseline
+00000180 runcmd
+00000930 parseblock
+00000d5a exec
+00000d2a wait
+00001840 symbols
+00000d3a read
+00000710 parseexec
+00000d72 unlink
+00000160 panic
+00000d1a fork
+00000daa sbrk
+00000dba uptime
+0000184e __bss_start
+00000b90 memset
+00000000 main
+00000b10 strcmp
+00000d9a dup
+000003d0 pipecmd
+00000380 redircmd
+00000c60 stat
+0000184e _edata
+000018d0 _end
+00000d82 link
+00000d22 exit
+00000cb0 atoi
+00000b60 strlen
+00000d62 open
+00000bb0 strchr
+00000d8a mkdir
+00000d4a close
+00000410 listcmd
+00001020 free
diff -ruN ./xv6-public-src/sleeplock.d ./xv6-public/sleeplock.d
--- ./xv6-public-src/sleeplock.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/sleeplock.d	2019-11-28 17:52:29.928969891 +0200
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files ./xv6-public-src/sleeplock.o and ./xv6-public/sleeplock.o differ
diff -ruN ./xv6-public-src/spinlock.d ./xv6-public/spinlock.d
--- ./xv6-public-src/spinlock.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/spinlock.d	2019-11-28 17:52:29.964991967 +0200
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files ./xv6-public-src/spinlock.o and ./xv6-public/spinlock.o differ
Binary files ./xv6-public-src/_stressfs and ./xv6-public/_stressfs differ
diff -ruN ./xv6-public-src/stressfs.asm ./xv6-public/stressfs.asm
--- ./xv6-public-src/stressfs.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/stressfs.asm	2019-11-28 17:52:28.540117047 +0200
@@ -0,0 +1,1637 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   7:	b8 30 00 00 00       	mov    $0x30,%eax
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   c:	ff 71 fc             	pushl  -0x4(%ecx)
+   f:	55                   	push   %ebp
+  10:	89 e5                	mov    %esp,%ebp
+  12:	57                   	push   %edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  int fd, i;
+  char path[] = "stressfs0";
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  16:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+
+  for(i = 0; i < 4; i++)
+  1c:	31 db                	xor    %ebx,%ebx
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  2b:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  32:	74 72 65 
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  35:	68 00 08 00 00       	push   $0x800
+  3a:	6a 01                	push   $0x1
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+  char path[] = "stressfs0";
+  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  43:	73 66 73 
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  46:	e8 95 04 00 00       	call   4e0 <printf>
+  memset(data, 'a', sizeof(data));
+  4b:	83 c4 0c             	add    $0xc,%esp
+  4e:	68 00 02 00 00       	push   $0x200
+  53:	6a 61                	push   $0x61
+  55:	56                   	push   %esi
+  56:	e8 95 01 00 00       	call   1f0 <memset>
+  5b:	83 c4 10             	add    $0x10,%esp
+
+  for(i = 0; i < 4; i++)
+    if(fork() > 0)
+  5e:	e8 17 03 00 00       	call   37a <fork>
+  63:	85 c0                	test   %eax,%eax
+  65:	0f 8f bf 00 00 00    	jg     12a <main+0x12a>
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+
+  for(i = 0; i < 4; i++)
+  6b:	83 c3 01             	add    $0x1,%ebx
+  6e:	83 fb 04             	cmp    $0x4,%ebx
+  71:	75 eb                	jne    5e <main+0x5e>
+  73:	bf 04 00 00 00       	mov    $0x4,%edi
+    if(fork() > 0)
+      break;
+
+  printf(1, "write %d\n", i);
+  78:	83 ec 04             	sub    $0x4,%esp
+  7b:	53                   	push   %ebx
+  7c:	68 13 08 00 00       	push   $0x813
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  81:	bb 14 00 00 00       	mov    $0x14,%ebx
+
+  for(i = 0; i < 4; i++)
+    if(fork() > 0)
+      break;
+
+  printf(1, "write %d\n", i);
+  86:	6a 01                	push   $0x1
+  88:	e8 53 04 00 00       	call   4e0 <printf>
+
+  path[8] += i;
+  8d:	89 f8                	mov    %edi,%eax
+  8f:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  95:	5f                   	pop    %edi
+  96:	58                   	pop    %eax
+  97:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  9d:	68 02 02 00 00       	push   $0x202
+  a2:	50                   	push   %eax
+  a3:	e8 1a 03 00 00       	call   3c2 <open>
+  a8:	83 c4 10             	add    $0x10,%esp
+  ab:	89 c7                	mov    %eax,%edi
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b0:	83 ec 04             	sub    $0x4,%esp
+  b3:	68 00 02 00 00       	push   $0x200
+  b8:	56                   	push   %esi
+  b9:	57                   	push   %edi
+  ba:	e8 e3 02 00 00       	call   3a2 <write>
+
+  printf(1, "write %d\n", i);
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  for(i = 0; i < 20; i++)
+  bf:	83 c4 10             	add    $0x10,%esp
+  c2:	83 eb 01             	sub    $0x1,%ebx
+  c5:	75 e9                	jne    b0 <main+0xb0>
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  close(fd);
+  c7:	83 ec 0c             	sub    $0xc,%esp
+  ca:	57                   	push   %edi
+  cb:	e8 da 02 00 00       	call   3aa <close>
+
+  printf(1, "read\n");
+  d0:	58                   	pop    %eax
+  d1:	5a                   	pop    %edx
+  d2:	68 1d 08 00 00       	push   $0x81d
+  d7:	6a 01                	push   $0x1
+  d9:	e8 02 04 00 00       	call   4e0 <printf>
+
+  fd = open(path, O_RDONLY);
+  de:	59                   	pop    %ecx
+  df:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  e5:	5b                   	pop    %ebx
+  e6:	6a 00                	push   $0x0
+  e8:	50                   	push   %eax
+  e9:	bb 14 00 00 00       	mov    $0x14,%ebx
+  ee:	e8 cf 02 00 00       	call   3c2 <open>
+  f3:	83 c4 10             	add    $0x10,%esp
+  f6:	89 c7                	mov    %eax,%edi
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 8b 02 00 00       	call   39a <read>
+  close(fd);
+
+  printf(1, "read\n");
+
+  fd = open(path, O_RDONLY);
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+    read(fd, data, sizeof(data));
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 8a 02 00 00       	call   3aa <close>
+
+  wait();
+ 120:	e8 65 02 00 00       	call   38a <wait>
+
+  exit();
+ 125:	e8 58 02 00 00       	call   382 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 47 ff ff ff       	jmp    78 <main+0x78>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 45 08             	mov    0x8(%ebp),%eax
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 14a:	89 c2                	mov    %eax,%edx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 150:	83 c1 01             	add    $0x1,%ecx
+ 153:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 157:	83 c2 01             	add    $0x1,%edx
+ 15a:	84 db                	test   %bl,%bl
+ 15c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 15f:	75 ef                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 161:	5b                   	pop    %ebx
+ 162:	5d                   	pop    %ebp
+ 163:	c3                   	ret    
+ 164:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 16a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	56                   	push   %esi
+ 174:	53                   	push   %ebx
+ 175:	8b 55 08             	mov    0x8(%ebp),%edx
+ 178:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 17b:	0f b6 02             	movzbl (%edx),%eax
+ 17e:	0f b6 19             	movzbl (%ecx),%ebx
+ 181:	84 c0                	test   %al,%al
+ 183:	75 1e                	jne    1a3 <strcmp+0x33>
+ 185:	eb 29                	jmp    1b0 <strcmp+0x40>
+ 187:	89 f6                	mov    %esi,%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 190:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 193:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 196:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 199:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 19d:	84 c0                	test   %al,%al
+ 19f:	74 0f                	je     1b0 <strcmp+0x40>
+ 1a1:	89 f1                	mov    %esi,%ecx
+ 1a3:	38 d8                	cmp    %bl,%al
+ 1a5:	74 e9                	je     190 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1a7:	29 d8                	sub    %ebx,%eax
+}
+ 1a9:	5b                   	pop    %ebx
+ 1aa:	5e                   	pop    %esi
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1b0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5e                   	pop    %esi
+ 1b6:	5d                   	pop    %ebp
+ 1b7:	c3                   	ret    
+ 1b8:	90                   	nop
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1c6:	80 39 00             	cmpb   $0x0,(%ecx)
+ 1c9:	74 12                	je     1dd <strlen+0x1d>
+ 1cb:	31 d2                	xor    %edx,%edx
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1d0:	83 c2 01             	add    $0x1,%edx
+ 1d3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 1d7:	89 d0                	mov    %edx,%eax
+ 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1db:	5d                   	pop    %ebp
+ 1dc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1dd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 1df:	5d                   	pop    %ebp
+ 1e0:	c3                   	ret    
+ 1e1:	eb 0d                	jmp    1f0 <memset>
+ 1e3:	90                   	nop
+ 1e4:	90                   	nop
+ 1e5:	90                   	nop
+ 1e6:	90                   	nop
+ 1e7:	90                   	nop
+ 1e8:	90                   	nop
+ 1e9:	90                   	nop
+ 1ea:	90                   	nop
+ 1eb:	90                   	nop
+ 1ec:	90                   	nop
+ 1ed:	90                   	nop
+ 1ee:	90                   	nop
+ 1ef:	90                   	nop
+
+000001f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	89 d7                	mov    %edx,%edi
+ 1ff:	fc                   	cld    
+ 200:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 202:	89 d0                	mov    %edx,%eax
+ 204:	5f                   	pop    %edi
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	89 f6                	mov    %esi,%esi
+ 209:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000210 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 45 08             	mov    0x8(%ebp),%eax
+ 217:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 21a:	0f b6 10             	movzbl (%eax),%edx
+ 21d:	84 d2                	test   %dl,%dl
+ 21f:	74 1d                	je     23e <strchr+0x2e>
+    if(*s == c)
+ 221:	38 d3                	cmp    %dl,%bl
+ 223:	89 d9                	mov    %ebx,%ecx
+ 225:	75 0d                	jne    234 <strchr+0x24>
+ 227:	eb 17                	jmp    240 <strchr+0x30>
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 230:	38 ca                	cmp    %cl,%dl
+ 232:	74 0c                	je     240 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 234:	83 c0 01             	add    $0x1,%eax
+ 237:	0f b6 10             	movzbl (%eax),%edx
+ 23a:	84 d2                	test   %dl,%dl
+ 23c:	75 f2                	jne    230 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 23e:	31 c0                	xor    %eax,%eax
+}
+ 240:	5b                   	pop    %ebx
+ 241:	5d                   	pop    %ebp
+ 242:	c3                   	ret    
+ 243:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	56                   	push   %esi
+ 255:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 256:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 258:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 25b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 25e:	eb 29                	jmp    289 <gets+0x39>
+    cc = read(0, &c, 1);
+ 260:	83 ec 04             	sub    $0x4,%esp
+ 263:	6a 01                	push   $0x1
+ 265:	57                   	push   %edi
+ 266:	6a 00                	push   $0x0
+ 268:	e8 2d 01 00 00       	call   39a <read>
+    if(cc < 1)
+ 26d:	83 c4 10             	add    $0x10,%esp
+ 270:	85 c0                	test   %eax,%eax
+ 272:	7e 1d                	jle    291 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 274:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+ 27b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 27d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 27f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 283:	74 1b                	je     2a0 <gets+0x50>
+ 285:	3c 0d                	cmp    $0xd,%al
+ 287:	74 17                	je     2a0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 289:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 28c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 28f:	7c cf                	jl     260 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 291:	8b 45 08             	mov    0x8(%ebp),%eax
+ 294:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 298:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 29b:	5b                   	pop    %ebx
+ 29c:	5e                   	pop    %esi
+ 29d:	5f                   	pop    %edi
+ 29e:	5d                   	pop    %ebp
+ 29f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2a0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2a3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ac:	5b                   	pop    %ebx
+ 2ad:	5e                   	pop    %esi
+ 2ae:	5f                   	pop    %edi
+ 2af:	5d                   	pop    %ebp
+ 2b0:	c3                   	ret    
+ 2b1:	eb 0d                	jmp    2c0 <stat>
+ 2b3:	90                   	nop
+ 2b4:	90                   	nop
+ 2b5:	90                   	nop
+ 2b6:	90                   	nop
+ 2b7:	90                   	nop
+ 2b8:	90                   	nop
+ 2b9:	90                   	nop
+ 2ba:	90                   	nop
+ 2bb:	90                   	nop
+ 2bc:	90                   	nop
+ 2bd:	90                   	nop
+ 2be:	90                   	nop
+ 2bf:	90                   	nop
+
+000002c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	56                   	push   %esi
+ 2c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2c5:	83 ec 08             	sub    $0x8,%esp
+ 2c8:	6a 00                	push   $0x0
+ 2ca:	ff 75 08             	pushl  0x8(%ebp)
+ 2cd:	e8 f0 00 00 00       	call   3c2 <open>
+  if(fd < 0)
+ 2d2:	83 c4 10             	add    $0x10,%esp
+ 2d5:	85 c0                	test   %eax,%eax
+ 2d7:	78 27                	js     300 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2d9:	83 ec 08             	sub    $0x8,%esp
+ 2dc:	ff 75 0c             	pushl  0xc(%ebp)
+ 2df:	89 c3                	mov    %eax,%ebx
+ 2e1:	50                   	push   %eax
+ 2e2:	e8 f3 00 00 00       	call   3da <fstat>
+ 2e7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2e9:	89 1c 24             	mov    %ebx,(%esp)
+ 2ec:	e8 b9 00 00 00       	call   3aa <close>
+  return r;
+ 2f1:	83 c4 10             	add    $0x10,%esp
+ 2f4:	89 f0                	mov    %esi,%eax
+}
+ 2f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2f9:	5b                   	pop    %ebx
+ 2fa:	5e                   	pop    %esi
+ 2fb:	5d                   	pop    %ebp
+ 2fc:	c3                   	ret    
+ 2fd:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 300:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 305:	eb ef                	jmp    2f6 <stat+0x36>
+ 307:	89 f6                	mov    %esi,%esi
+ 309:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000310 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	53                   	push   %ebx
+ 314:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 317:	0f be 11             	movsbl (%ecx),%edx
+ 31a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 31d:	3c 09                	cmp    $0x9,%al
+ 31f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 324:	77 1f                	ja     345 <atoi+0x35>
+ 326:	8d 76 00             	lea    0x0(%esi),%esi
+ 329:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 330:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 333:	83 c1 01             	add    $0x1,%ecx
+ 336:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 33a:	0f be 11             	movsbl (%ecx),%edx
+ 33d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 340:	80 fb 09             	cmp    $0x9,%bl
+ 343:	76 eb                	jbe    330 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 345:	5b                   	pop    %ebx
+ 346:	5d                   	pop    %ebp
+ 347:	c3                   	ret    
+ 348:	90                   	nop
+ 349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000350 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	56                   	push   %esi
+ 354:	53                   	push   %ebx
+ 355:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 358:	8b 45 08             	mov    0x8(%ebp),%eax
+ 35b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 35e:	85 db                	test   %ebx,%ebx
+ 360:	7e 14                	jle    376 <memmove+0x26>
+ 362:	31 d2                	xor    %edx,%edx
+ 364:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 368:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 36c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 36f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 372:	39 da                	cmp    %ebx,%edx
+ 374:	75 f2                	jne    368 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 376:	5b                   	pop    %ebx
+ 377:	5e                   	pop    %esi
+ 378:	5d                   	pop    %ebp
+ 379:	c3                   	ret    
+
+0000037a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 37a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 37f:	cd 40                	int    $0x40
+ 381:	c3                   	ret    
+
+00000382 <exit>:
+SYSCALL(exit)
+ 382:	b8 02 00 00 00       	mov    $0x2,%eax
+ 387:	cd 40                	int    $0x40
+ 389:	c3                   	ret    
+
+0000038a <wait>:
+SYSCALL(wait)
+ 38a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 38f:	cd 40                	int    $0x40
+ 391:	c3                   	ret    
+
+00000392 <pipe>:
+SYSCALL(pipe)
+ 392:	b8 04 00 00 00       	mov    $0x4,%eax
+ 397:	cd 40                	int    $0x40
+ 399:	c3                   	ret    
+
+0000039a <read>:
+SYSCALL(read)
+ 39a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 39f:	cd 40                	int    $0x40
+ 3a1:	c3                   	ret    
+
+000003a2 <write>:
+SYSCALL(write)
+ 3a2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3a7:	cd 40                	int    $0x40
+ 3a9:	c3                   	ret    
+
+000003aa <close>:
+SYSCALL(close)
+ 3aa:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3af:	cd 40                	int    $0x40
+ 3b1:	c3                   	ret    
+
+000003b2 <kill>:
+SYSCALL(kill)
+ 3b2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3b7:	cd 40                	int    $0x40
+ 3b9:	c3                   	ret    
+
+000003ba <exec>:
+SYSCALL(exec)
+ 3ba:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <open>:
+SYSCALL(open)
+ 3c2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <mknod>:
+SYSCALL(mknod)
+ 3ca:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <unlink>:
+SYSCALL(unlink)
+ 3d2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <fstat>:
+SYSCALL(fstat)
+ 3da:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <link>:
+SYSCALL(link)
+ 3e2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <mkdir>:
+SYSCALL(mkdir)
+ 3ea:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <chdir>:
+SYSCALL(chdir)
+ 3f2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <dup>:
+SYSCALL(dup)
+ 3fa:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <getpid>:
+SYSCALL(getpid)
+ 402:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <sbrk>:
+SYSCALL(sbrk)
+ 40a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <sleep>:
+SYSCALL(sleep)
+ 412:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <uptime>:
+SYSCALL(uptime)
+ 41a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <readcount>:
+SYSCALL(readcount)
+ 422:	b8 16 00 00 00       	mov    $0x16,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <callcount>:
+SYSCALL(callcount)
+ 42a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+ 432:	66 90                	xchg   %ax,%ax
+ 434:	66 90                	xchg   %ax,%ax
+ 436:	66 90                	xchg   %ax,%ax
+ 438:	66 90                	xchg   %ax,%ax
+ 43a:	66 90                	xchg   %ax,%ax
+ 43c:	66 90                	xchg   %ax,%ax
+ 43e:	66 90                	xchg   %ax,%ax
+
+00000440 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	89 c6                	mov    %eax,%esi
+ 448:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 44b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 44e:	85 db                	test   %ebx,%ebx
+ 450:	74 7e                	je     4d0 <printint+0x90>
+ 452:	89 d0                	mov    %edx,%eax
+ 454:	c1 e8 1f             	shr    $0x1f,%eax
+ 457:	84 c0                	test   %al,%al
+ 459:	74 75                	je     4d0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 45b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 45d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 464:	f7 d8                	neg    %eax
+ 466:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 469:	31 ff                	xor    %edi,%edi
+ 46b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 46e:	89 ce                	mov    %ecx,%esi
+ 470:	eb 08                	jmp    47a <printint+0x3a>
+ 472:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 478:	89 cf                	mov    %ecx,%edi
+ 47a:	31 d2                	xor    %edx,%edx
+ 47c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 47f:	f7 f6                	div    %esi
+ 481:	0f b6 92 2c 08 00 00 	movzbl 0x82c(%edx),%edx
+  }while((x /= base) != 0);
+ 488:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 48a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 48d:	75 e9                	jne    478 <printint+0x38>
+  if(neg)
+ 48f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 492:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 495:	85 c0                	test   %eax,%eax
+ 497:	74 08                	je     4a1 <printint+0x61>
+    buf[i++] = '-';
+ 499:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 49e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 4a1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 4a5:	8d 76 00             	lea    0x0(%esi),%esi
+ 4a8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ab:	83 ec 04             	sub    $0x4,%esp
+ 4ae:	83 ef 01             	sub    $0x1,%edi
+ 4b1:	6a 01                	push   $0x1
+ 4b3:	53                   	push   %ebx
+ 4b4:	56                   	push   %esi
+ 4b5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4b8:	e8 e5 fe ff ff       	call   3a2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 4bd:	83 c4 10             	add    $0x10,%esp
+ 4c0:	39 df                	cmp    %ebx,%edi
+ 4c2:	75 e4                	jne    4a8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 4c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4c7:	5b                   	pop    %ebx
+ 4c8:	5e                   	pop    %esi
+ 4c9:	5f                   	pop    %edi
+ 4ca:	5d                   	pop    %ebp
+ 4cb:	c3                   	ret    
+ 4cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 4d0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 4d2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 4d9:	eb 8b                	jmp    466 <printint+0x26>
+ 4db:	90                   	nop
+ 4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000004e0 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4e0:	55                   	push   %ebp
+ 4e1:	89 e5                	mov    %esp,%ebp
+ 4e3:	57                   	push   %edi
+ 4e4:	56                   	push   %esi
+ 4e5:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4e6:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4e9:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4ec:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4ef:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4f5:	0f b6 1e             	movzbl (%esi),%ebx
+ 4f8:	83 c6 01             	add    $0x1,%esi
+ 4fb:	84 db                	test   %bl,%bl
+ 4fd:	0f 84 b0 00 00 00    	je     5b3 <printf+0xd3>
+ 503:	31 d2                	xor    %edx,%edx
+ 505:	eb 39                	jmp    540 <printf+0x60>
+ 507:	89 f6                	mov    %esi,%esi
+ 509:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 510:	83 f8 25             	cmp    $0x25,%eax
+ 513:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 516:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 51b:	74 18                	je     535 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 51d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 520:	83 ec 04             	sub    $0x4,%esp
+ 523:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 526:	6a 01                	push   $0x1
+ 528:	50                   	push   %eax
+ 529:	57                   	push   %edi
+ 52a:	e8 73 fe ff ff       	call   3a2 <write>
+ 52f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 532:	83 c4 10             	add    $0x10,%esp
+ 535:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 538:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 53c:	84 db                	test   %bl,%bl
+ 53e:	74 73                	je     5b3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 540:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 542:	0f be cb             	movsbl %bl,%ecx
+ 545:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 548:	74 c6                	je     510 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 54a:	83 fa 25             	cmp    $0x25,%edx
+ 54d:	75 e6                	jne    535 <printf+0x55>
+      if(c == 'd'){
+ 54f:	83 f8 64             	cmp    $0x64,%eax
+ 552:	0f 84 f8 00 00 00    	je     650 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 558:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 55e:	83 f9 70             	cmp    $0x70,%ecx
+ 561:	74 5d                	je     5c0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 563:	83 f8 73             	cmp    $0x73,%eax
+ 566:	0f 84 84 00 00 00    	je     5f0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 56c:	83 f8 63             	cmp    $0x63,%eax
+ 56f:	0f 84 ea 00 00 00    	je     65f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 575:	83 f8 25             	cmp    $0x25,%eax
+ 578:	0f 84 c2 00 00 00    	je     640 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 57e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 581:	83 ec 04             	sub    $0x4,%esp
+ 584:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 588:	6a 01                	push   $0x1
+ 58a:	50                   	push   %eax
+ 58b:	57                   	push   %edi
+ 58c:	e8 11 fe ff ff       	call   3a2 <write>
+ 591:	83 c4 0c             	add    $0xc,%esp
+ 594:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 597:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 59a:	6a 01                	push   $0x1
+ 59c:	50                   	push   %eax
+ 59d:	57                   	push   %edi
+ 59e:	83 c6 01             	add    $0x1,%esi
+ 5a1:	e8 fc fd ff ff       	call   3a2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5a6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5aa:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5ad:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5af:	84 db                	test   %bl,%bl
+ 5b1:	75 8d                	jne    540 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5b6:	5b                   	pop    %ebx
+ 5b7:	5e                   	pop    %esi
+ 5b8:	5f                   	pop    %edi
+ 5b9:	5d                   	pop    %ebp
+ 5ba:	c3                   	ret    
+ 5bb:	90                   	nop
+ 5bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c8:	6a 00                	push   $0x0
+ 5ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5cd:	89 f8                	mov    %edi,%eax
+ 5cf:	8b 13                	mov    (%ebx),%edx
+ 5d1:	e8 6a fe ff ff       	call   440 <printint>
+        ap++;
+ 5d6:	89 d8                	mov    %ebx,%eax
+ 5d8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5db:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 5dd:	83 c0 04             	add    $0x4,%eax
+ 5e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e3:	e9 4d ff ff ff       	jmp    535 <printf+0x55>
+ 5e8:	90                   	nop
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 5f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5f3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5f5:	83 c0 04             	add    $0x4,%eax
+ 5f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 5fb:	b8 23 08 00 00       	mov    $0x823,%eax
+ 600:	85 db                	test   %ebx,%ebx
+ 602:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 605:	0f b6 03             	movzbl (%ebx),%eax
+ 608:	84 c0                	test   %al,%al
+ 60a:	74 23                	je     62f <printf+0x14f>
+ 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 610:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 613:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 616:	83 ec 04             	sub    $0x4,%esp
+ 619:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 61b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 61e:	50                   	push   %eax
+ 61f:	57                   	push   %edi
+ 620:	e8 7d fd ff ff       	call   3a2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 625:	0f b6 03             	movzbl (%ebx),%eax
+ 628:	83 c4 10             	add    $0x10,%esp
+ 62b:	84 c0                	test   %al,%al
+ 62d:	75 e1                	jne    610 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 ff fe ff ff       	jmp    535 <printf+0x55>
+ 636:	8d 76 00             	lea    0x0(%esi),%esi
+ 639:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 640:	83 ec 04             	sub    $0x4,%esp
+ 643:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 646:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 649:	6a 01                	push   $0x1
+ 64b:	e9 4c ff ff ff       	jmp    59c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 658:	6a 01                	push   $0x1
+ 65a:	e9 6b ff ff ff       	jmp    5ca <printf+0xea>
+ 65f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 662:	83 ec 04             	sub    $0x4,%esp
+ 665:	8b 03                	mov    (%ebx),%eax
+ 667:	6a 01                	push   $0x1
+ 669:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 66c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 66f:	50                   	push   %eax
+ 670:	57                   	push   %edi
+ 671:	e8 2c fd ff ff       	call   3a2 <write>
+ 676:	e9 5b ff ff ff       	jmp    5d6 <printf+0xf6>
+ 67b:	66 90                	xchg   %ax,%ax
+ 67d:	66 90                	xchg   %ax,%ax
+ 67f:	90                   	nop
+
+00000680 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 680:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 681:	a1 d0 0a 00 00       	mov    0xad0,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 68e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 690:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 693:	39 c8                	cmp    %ecx,%eax
+ 695:	73 19                	jae    6b0 <free+0x30>
+ 697:	89 f6                	mov    %esi,%esi
+ 699:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 6a0:	39 d1                	cmp    %edx,%ecx
+ 6a2:	72 1c                	jb     6c0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a4:	39 d0                	cmp    %edx,%eax
+ 6a6:	73 18                	jae    6c0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6aa:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6ac:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ae:	72 f0                	jb     6a0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b0:	39 d0                	cmp    %edx,%eax
+ 6b2:	72 f4                	jb     6a8 <free+0x28>
+ 6b4:	39 d1                	cmp    %edx,%ecx
+ 6b6:	73 f0                	jae    6a8 <free+0x28>
+ 6b8:	90                   	nop
+ 6b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6c3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6c6:	39 d7                	cmp    %edx,%edi
+ 6c8:	74 19                	je     6e3 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6ca:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6cd:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6d3:	39 f1                	cmp    %esi,%ecx
+ 6d5:	74 23                	je     6fa <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6d7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 6d9:	a3 d0 0a 00 00       	mov    %eax,0xad0
+}
+ 6de:	5b                   	pop    %ebx
+ 6df:	5e                   	pop    %esi
+ 6e0:	5f                   	pop    %edi
+ 6e1:	5d                   	pop    %ebp
+ 6e2:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6e3:	03 72 04             	add    0x4(%edx),%esi
+ 6e6:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e9:	8b 10                	mov    (%eax),%edx
+ 6eb:	8b 12                	mov    (%edx),%edx
+ 6ed:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6f0:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f6:	39 f1                	cmp    %esi,%ecx
+ 6f8:	75 dd                	jne    6d7 <free+0x57>
+    p->s.size += bp->s.size;
+ 6fa:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 6fd:	a3 d0 0a 00 00       	mov    %eax,0xad0
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 702:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 705:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 708:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 70a:	5b                   	pop    %ebx
+ 70b:	5e                   	pop    %esi
+ 70c:	5f                   	pop    %edi
+ 70d:	5d                   	pop    %ebp
+ 70e:	c3                   	ret    
+ 70f:	90                   	nop
+
+00000710 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 71c:	8b 15 d0 0a 00 00    	mov    0xad0,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 722:	8d 78 07             	lea    0x7(%eax),%edi
+ 725:	c1 ef 03             	shr    $0x3,%edi
+ 728:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 72b:	85 d2                	test   %edx,%edx
+ 72d:	0f 84 a3 00 00 00    	je     7d6 <malloc+0xc6>
+ 733:	8b 02                	mov    (%edx),%eax
+ 735:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 738:	39 cf                	cmp    %ecx,%edi
+ 73a:	76 74                	jbe    7b0 <malloc+0xa0>
+ 73c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 742:	be 00 10 00 00       	mov    $0x1000,%esi
+ 747:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 74e:	0f 43 f7             	cmovae %edi,%esi
+ 751:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 756:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 75c:	0f 46 da             	cmovbe %edx,%ebx
+ 75f:	eb 10                	jmp    771 <malloc+0x61>
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 768:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 76a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76d:	39 cf                	cmp    %ecx,%edi
+ 76f:	76 3f                	jbe    7b0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 771:	39 05 d0 0a 00 00    	cmp    %eax,0xad0
+ 777:	89 c2                	mov    %eax,%edx
+ 779:	75 ed                	jne    768 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 77b:	83 ec 0c             	sub    $0xc,%esp
+ 77e:	53                   	push   %ebx
+ 77f:	e8 86 fc ff ff       	call   40a <sbrk>
+  if(p == (char*)-1)
+ 784:	83 c4 10             	add    $0x10,%esp
+ 787:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 78a:	74 1c                	je     7a8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 78c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 78f:	83 ec 0c             	sub    $0xc,%esp
+ 792:	83 c0 08             	add    $0x8,%eax
+ 795:	50                   	push   %eax
+ 796:	e8 e5 fe ff ff       	call   680 <free>
+  return freep;
+ 79b:	8b 15 d0 0a 00 00    	mov    0xad0,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 7a1:	83 c4 10             	add    $0x10,%esp
+ 7a4:	85 d2                	test   %edx,%edx
+ 7a6:	75 c0                	jne    768 <malloc+0x58>
+        return 0;
+ 7a8:	31 c0                	xor    %eax,%eax
+ 7aa:	eb 1c                	jmp    7c8 <malloc+0xb8>
+ 7ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 7b0:	39 cf                	cmp    %ecx,%edi
+ 7b2:	74 1c                	je     7d0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 7b4:	29 f9                	sub    %edi,%ecx
+ 7b6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7bc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 7bf:	89 15 d0 0a 00 00    	mov    %edx,0xad0
+      return (void*)(p + 1);
+ 7c5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 7c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7cb:	5b                   	pop    %ebx
+ 7cc:	5e                   	pop    %esi
+ 7cd:	5f                   	pop    %edi
+ 7ce:	5d                   	pop    %ebp
+ 7cf:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 08                	mov    (%eax),%ecx
+ 7d2:	89 0a                	mov    %ecx,(%edx)
+ 7d4:	eb e9                	jmp    7bf <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 7d6:	c7 05 d0 0a 00 00 d4 	movl   $0xad4,0xad0
+ 7dd:	0a 00 00 
+ 7e0:	c7 05 d4 0a 00 00 d4 	movl   $0xad4,0xad4
+ 7e7:	0a 00 00 
+    base.s.size = 0;
+ 7ea:	b8 d4 0a 00 00       	mov    $0xad4,%eax
+ 7ef:	c7 05 d8 0a 00 00 00 	movl   $0x0,0xad8
+ 7f6:	00 00 00 
+ 7f9:	e9 3e ff ff ff       	jmp    73c <malloc+0x2c>
diff -ruN ./xv6-public-src/stressfs.d ./xv6-public/stressfs.d
--- ./xv6-public-src/stressfs.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/stressfs.d	2019-11-28 17:52:28.528109644 +0200
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files ./xv6-public-src/stressfs.o and ./xv6-public/stressfs.o differ
diff -ruN ./xv6-public-src/stressfs.sym ./xv6-public/stressfs.sym
--- ./xv6-public-src/stressfs.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/stressfs.sym	2019-11-28 17:52:28.544119515 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000800 .rodata
+00000840 .eh_frame
+00000ad0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000440 printint
+0000082c digits.1111
+00000000 umalloc.c
+00000ad0 freep
+00000ad4 base
+00000140 strcpy
+000004e0 printf
+00000350 memmove
+000003ca mknod
+00000250 gets
+00000402 getpid
+00000710 malloc
+00000412 sleep
+00000422 readcount
+0000042a callcount
+00000392 pipe
+000003a2 write
+000003da fstat
+000003b2 kill
+000003f2 chdir
+000003ba exec
+0000038a wait
+0000039a read
+000003d2 unlink
+0000037a fork
+0000040a sbrk
+0000041a uptime
+00000ad0 __bss_start
+000001f0 memset
+00000000 main
+00000170 strcmp
+000003fa dup
+000002c0 stat
+00000ad0 _edata
+00000adc _end
+000003e2 link
+00000382 exit
+00000310 atoi
+000001c0 strlen
+000003c2 open
+00000210 strchr
+000003ea mkdir
+000003aa close
+00000680 free
diff -ruN ./xv6-public-src/string.d ./xv6-public/string.d
--- ./xv6-public-src/string.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/string.d	2019-11-28 17:52:30.009018931 +0200
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files ./xv6-public-src/string.o and ./xv6-public/string.o differ
Binary files ./xv6-public-src/swtch.o and ./xv6-public/swtch.o differ
diff -ruN ./xv6-public-src/syscall.c ./xv6-public/syscall.c
--- ./xv6-public-src/syscall.c	2019-11-27 20:42:25.954688000 +0200
+++ ./xv6-public/syscall.c	2019-11-27 23:26:13.888863551 +0200
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "x86.h"
 #include "syscall.h"
+#include "spinlock.h"
 
 // User code makes a system call with INT T_SYSCALL.
 // System call number in %eax.
@@ -13,6 +14,23 @@
 // library system call function. The saved user %esp points
 // to a saved program counter, and then the first argument.
 
+struct spinlock readslock;
+uint reads;
+struct spinlock calllock;
+uint calls[SYS_CALL_AMOUNT + 1];
+
+// Init syscall counter
+void
+scinit(void)
+{
+  reads = 0;
+  for (int i = 0; i < SYS_CALL_AMOUNT + 1; i++) {
+    calls[i] = 0;
+  }
+  initlock(&readslock, "time");
+  initlock(&calllock, "calls");
+}
+
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
@@ -103,6 +121,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_readcount(void);
+extern int sys_callcount(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +146,8 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_readcount] sys_readcount,
+[SYS_callcount] sys_callcount,
 };
 
 void
@@ -135,6 +157,18 @@
   struct proc *curproc = myproc();
 
   num = curproc->tf->eax;
+  // If call is read add it to the counter
+  if (syscalls[num] == sys_read) {
+      acquire(&readslock);
+      reads++;
+      release(&readslock);
+  }
+  // Calculate all syscall amount
+  if (num < SYS_CALL_AMOUNT + 1)  {
+    acquire(&calllock);
+    calls[num]++;
+    release(&calllock);
+  }
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     curproc->tf->eax = syscalls[num]();
   } else {
diff -ruN ./xv6-public-src/syscall.d ./xv6-public/syscall.d
--- ./xv6-public-src/syscall.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/syscall.d	2019-11-28 17:52:30.057048200 +0200
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h spinlock.h
diff -ruN ./xv6-public-src/syscall.h ./xv6-public/syscall.h
--- ./xv6-public-src/syscall.h	2019-11-27 20:42:25.954688000 +0200
+++ ./xv6-public/syscall.h	2019-11-28 00:05:34.835032055 +0200
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_readcount  22
+#define SYS_callcount  23
+
+#define SYS_CALL_AMOUNT 23
Binary files ./xv6-public-src/syscall.o and ./xv6-public/syscall.o differ
diff -ruN ./xv6-public-src/sysfile.d ./xv6-public/sysfile.d
--- ./xv6-public-src/sysfile.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/sysfile.d	2019-11-28 17:52:30.145101858 +0200
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files ./xv6-public-src/sysfile.o and ./xv6-public/sysfile.o differ
diff -ruN ./xv6-public-src/sysproc.c ./xv6-public/sysproc.c
--- ./xv6-public-src/sysproc.c	2019-11-27 20:42:25.954688000 +0200
+++ ./xv6-public/sysproc.c	2019-11-28 18:00:19.759366219 +0200
@@ -6,6 +6,8 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "syscall.h"
+#include "spinlock.h"
 
 int
 sys_fork(void)
@@ -89,3 +91,33 @@
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_readcount(void)
+{
+  return reads;
+}
+
+struct spinlock calllock;
+
+int
+sys_callcount(void)
+{
+  int arg = 0;
+  argint(0, &arg);
+  // Check for resets
+  if (arg > 100 && arg < 100 + SYS_CALL_AMOUNT + 1) {
+    arg -= 100;
+    acquire(&calllock);
+    calls[arg] = 0;
+    release(&calllock);
+    return 0;
+  }
+  if (arg < SYS_CALL_AMOUNT + 1) {
+    return calls[arg];
+  }
+  else {
+    return -1;
+  }
+}
+
diff -ruN ./xv6-public-src/sysproc.d ./xv6-public/sysproc.d
--- ./xv6-public-src/sysproc.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/sysproc.d	2019-11-28 18:00:21.452937467 +0200
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h syscall.h spinlock.h
Binary files ./xv6-public-src/sysproc.o and ./xv6-public/sysproc.o differ
Binary files ./xv6-public-src/_test_call_count and ./xv6-public/_test_call_count differ
diff -ruN ./xv6-public-src/test_call_count.asm ./xv6-public/test_call_count.asm
--- ./xv6-public-src/test_call_count.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_call_count.asm	2019-11-28 17:52:29.048430264 +0200
@@ -0,0 +1,1500 @@
+
+_test_call_count:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  // Print call count acording to argument
+  if (argc == 1) {
+  11:	83 39 01             	cmpl   $0x1,(%ecx)
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  14:	8b 41 04             	mov    0x4(%ecx),%eax
+  // Print call count acording to argument
+  if (argc == 1) {
+  17:	74 28                	je     41 <main+0x41>
+    printf(1, "This program requires numeric argument.\n");
+    exit();
+  }
+  int argument = atoi(argv[1]);
+  19:	83 ec 0c             	sub    $0xc,%esp
+  1c:	ff 70 04             	pushl  0x4(%eax)
+  1f:	e8 0c 02 00 00       	call   230 <atoi>
+  printf(1, "Callcount: %d\n", callcount(argument));
+  24:	89 04 24             	mov    %eax,(%esp)
+  27:	e8 1e 03 00 00       	call   34a <callcount>
+  2c:	83 c4 0c             	add    $0xc,%esp
+  2f:	50                   	push   %eax
+  30:	68 4c 07 00 00       	push   $0x74c
+  35:	6a 01                	push   $0x1
+  37:	e8 c4 03 00 00       	call   400 <printf>
+  exit();
+  3c:	e8 61 02 00 00       	call   2a2 <exit>
+int
+main(int argc, char *argv[])
+{
+  // Print call count acording to argument
+  if (argc == 1) {
+    printf(1, "This program requires numeric argument.\n");
+  41:	50                   	push   %eax
+  42:	50                   	push   %eax
+  43:	68 20 07 00 00       	push   $0x720
+  48:	6a 01                	push   $0x1
+  4a:	e8 b1 03 00 00       	call   400 <printf>
+    exit();
+  4f:	e8 4e 02 00 00       	call   2a2 <exit>
+  54:	66 90                	xchg   %ax,%ax
+  56:	66 90                	xchg   %ax,%ax
+  58:	66 90                	xchg   %ax,%ax
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 45 08             	mov    0x8(%ebp),%eax
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6a:	89 c2                	mov    %eax,%edx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  70:	83 c1 01             	add    $0x1,%ecx
+  73:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  77:	83 c2 01             	add    $0x1,%edx
+  7a:	84 db                	test   %bl,%bl
+  7c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  7f:	75 ef                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  81:	5b                   	pop    %ebx
+  82:	5d                   	pop    %ebp
+  83:	c3                   	ret    
+  84:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  8a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	53                   	push   %ebx
+  95:	8b 55 08             	mov    0x8(%ebp),%edx
+  98:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9b:	0f b6 02             	movzbl (%edx),%eax
+  9e:	0f b6 19             	movzbl (%ecx),%ebx
+  a1:	84 c0                	test   %al,%al
+  a3:	75 1e                	jne    c3 <strcmp+0x33>
+  a5:	eb 29                	jmp    d0 <strcmp+0x40>
+  a7:	89 f6                	mov    %esi,%esi
+  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  b0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  b6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	89 f1                	mov    %esi,%ecx
+  c3:	38 d8                	cmp    %bl,%al
+  c5:	74 e9                	je     b0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  c7:	29 d8                	sub    %ebx,%eax
+}
+  c9:	5b                   	pop    %ebx
+  ca:	5e                   	pop    %esi
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5e                   	pop    %esi
+  d6:	5d                   	pop    %ebp
+  d7:	c3                   	ret    
+  d8:	90                   	nop
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  e6:	80 39 00             	cmpb   $0x0,(%ecx)
+  e9:	74 12                	je     fd <strlen+0x1d>
+  eb:	31 d2                	xor    %edx,%edx
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  f0:	83 c2 01             	add    $0x1,%edx
+  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  f7:	89 d0                	mov    %edx,%eax
+  f9:	75 f5                	jne    f0 <strlen+0x10>
+    ;
+  return n;
+}
+  fb:	5d                   	pop    %ebp
+  fc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+  ff:	5d                   	pop    %ebp
+ 100:	c3                   	ret    
+ 101:	eb 0d                	jmp    110 <memset>
+ 103:	90                   	nop
+ 104:	90                   	nop
+ 105:	90                   	nop
+ 106:	90                   	nop
+ 107:	90                   	nop
+ 108:	90                   	nop
+ 109:	90                   	nop
+ 10a:	90                   	nop
+ 10b:	90                   	nop
+ 10c:	90                   	nop
+ 10d:	90                   	nop
+ 10e:	90                   	nop
+ 10f:	90                   	nop
+
+00000110 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	57                   	push   %edi
+ 114:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 117:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 11a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 11d:	89 d7                	mov    %edx,%edi
+ 11f:	fc                   	cld    
+ 120:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 122:	89 d0                	mov    %edx,%eax
+ 124:	5f                   	pop    %edi
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	89 f6                	mov    %esi,%esi
+ 129:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000130 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	53                   	push   %ebx
+ 134:	8b 45 08             	mov    0x8(%ebp),%eax
+ 137:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 13a:	0f b6 10             	movzbl (%eax),%edx
+ 13d:	84 d2                	test   %dl,%dl
+ 13f:	74 1d                	je     15e <strchr+0x2e>
+    if(*s == c)
+ 141:	38 d3                	cmp    %dl,%bl
+ 143:	89 d9                	mov    %ebx,%ecx
+ 145:	75 0d                	jne    154 <strchr+0x24>
+ 147:	eb 17                	jmp    160 <strchr+0x30>
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 150:	38 ca                	cmp    %cl,%dl
+ 152:	74 0c                	je     160 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 154:	83 c0 01             	add    $0x1,%eax
+ 157:	0f b6 10             	movzbl (%eax),%edx
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 15e:	31 c0                	xor    %eax,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 169:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000170 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	56                   	push   %esi
+ 175:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 176:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 178:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 17b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 17e:	eb 29                	jmp    1a9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 180:	83 ec 04             	sub    $0x4,%esp
+ 183:	6a 01                	push   $0x1
+ 185:	57                   	push   %edi
+ 186:	6a 00                	push   $0x0
+ 188:	e8 2d 01 00 00       	call   2ba <read>
+    if(cc < 1)
+ 18d:	83 c4 10             	add    $0x10,%esp
+ 190:	85 c0                	test   %eax,%eax
+ 192:	7e 1d                	jle    1b1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 194:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 198:	8b 55 08             	mov    0x8(%ebp),%edx
+ 19b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 19d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 19f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1a3:	74 1b                	je     1c0 <gets+0x50>
+ 1a5:	3c 0d                	cmp    $0xd,%al
+ 1a7:	74 17                	je     1c0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1ac:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1af:	7c cf                	jl     180 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1b1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1bb:	5b                   	pop    %ebx
+ 1bc:	5e                   	pop    %esi
+ 1bd:	5f                   	pop    %edi
+ 1be:	5d                   	pop    %ebp
+ 1bf:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1c5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cc:	5b                   	pop    %ebx
+ 1cd:	5e                   	pop    %esi
+ 1ce:	5f                   	pop    %edi
+ 1cf:	5d                   	pop    %ebp
+ 1d0:	c3                   	ret    
+ 1d1:	eb 0d                	jmp    1e0 <stat>
+ 1d3:	90                   	nop
+ 1d4:	90                   	nop
+ 1d5:	90                   	nop
+ 1d6:	90                   	nop
+ 1d7:	90                   	nop
+ 1d8:	90                   	nop
+ 1d9:	90                   	nop
+ 1da:	90                   	nop
+ 1db:	90                   	nop
+ 1dc:	90                   	nop
+ 1dd:	90                   	nop
+ 1de:	90                   	nop
+ 1df:	90                   	nop
+
+000001e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	56                   	push   %esi
+ 1e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1e5:	83 ec 08             	sub    $0x8,%esp
+ 1e8:	6a 00                	push   $0x0
+ 1ea:	ff 75 08             	pushl  0x8(%ebp)
+ 1ed:	e8 f0 00 00 00       	call   2e2 <open>
+  if(fd < 0)
+ 1f2:	83 c4 10             	add    $0x10,%esp
+ 1f5:	85 c0                	test   %eax,%eax
+ 1f7:	78 27                	js     220 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1f9:	83 ec 08             	sub    $0x8,%esp
+ 1fc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1ff:	89 c3                	mov    %eax,%ebx
+ 201:	50                   	push   %eax
+ 202:	e8 f3 00 00 00       	call   2fa <fstat>
+ 207:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 209:	89 1c 24             	mov    %ebx,(%esp)
+ 20c:	e8 b9 00 00 00       	call   2ca <close>
+  return r;
+ 211:	83 c4 10             	add    $0x10,%esp
+ 214:	89 f0                	mov    %esi,%eax
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 220:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 225:	eb ef                	jmp    216 <stat+0x36>
+ 227:	89 f6                	mov    %esi,%esi
+ 229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000230 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	53                   	push   %ebx
+ 234:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 237:	0f be 11             	movsbl (%ecx),%edx
+ 23a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 23d:	3c 09                	cmp    $0x9,%al
+ 23f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 244:	77 1f                	ja     265 <atoi+0x35>
+ 246:	8d 76 00             	lea    0x0(%esi),%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 250:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 253:	83 c1 01             	add    $0x1,%ecx
+ 256:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25a:	0f be 11             	movsbl (%ecx),%edx
+ 25d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 260:	80 fb 09             	cmp    $0x9,%bl
+ 263:	76 eb                	jbe    250 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 265:	5b                   	pop    %ebx
+ 266:	5d                   	pop    %ebp
+ 267:	c3                   	ret    
+ 268:	90                   	nop
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 270:	55                   	push   %ebp
+ 271:	89 e5                	mov    %esp,%ebp
+ 273:	56                   	push   %esi
+ 274:	53                   	push   %ebx
+ 275:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 278:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 27e:	85 db                	test   %ebx,%ebx
+ 280:	7e 14                	jle    296 <memmove+0x26>
+ 282:	31 d2                	xor    %edx,%edx
+ 284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 288:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 28c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 28f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 292:	39 da                	cmp    %ebx,%edx
+ 294:	75 f2                	jne    288 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 296:	5b                   	pop    %ebx
+ 297:	5e                   	pop    %esi
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+
+0000029a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 29a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <exit>:
+SYSCALL(exit)
+ 2a2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <wait>:
+SYSCALL(wait)
+ 2aa:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <pipe>:
+SYSCALL(pipe)
+ 2b2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <read>:
+SYSCALL(read)
+ 2ba:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <write>:
+SYSCALL(write)
+ 2c2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <close>:
+SYSCALL(close)
+ 2ca:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <kill>:
+SYSCALL(kill)
+ 2d2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <exec>:
+SYSCALL(exec)
+ 2da:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <open>:
+SYSCALL(open)
+ 2e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <mknod>:
+SYSCALL(mknod)
+ 2ea:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <unlink>:
+SYSCALL(unlink)
+ 2f2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <fstat>:
+SYSCALL(fstat)
+ 2fa:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <link>:
+SYSCALL(link)
+ 302:	b8 13 00 00 00       	mov    $0x13,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mkdir>:
+SYSCALL(mkdir)
+ 30a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <chdir>:
+SYSCALL(chdir)
+ 312:	b8 09 00 00 00       	mov    $0x9,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <dup>:
+SYSCALL(dup)
+ 31a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <getpid>:
+SYSCALL(getpid)
+ 322:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <sbrk>:
+SYSCALL(sbrk)
+ 32a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <sleep>:
+SYSCALL(sleep)
+ 332:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <uptime>:
+SYSCALL(uptime)
+ 33a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <readcount>:
+SYSCALL(readcount)
+ 342:	b8 16 00 00 00       	mov    $0x16,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <callcount>:
+SYSCALL(callcount)
+ 34a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+ 352:	66 90                	xchg   %ax,%ax
+ 354:	66 90                	xchg   %ax,%ax
+ 356:	66 90                	xchg   %ax,%ax
+ 358:	66 90                	xchg   %ax,%ax
+ 35a:	66 90                	xchg   %ax,%ax
+ 35c:	66 90                	xchg   %ax,%ax
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	89 c6                	mov    %eax,%esi
+ 368:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 36b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 36e:	85 db                	test   %ebx,%ebx
+ 370:	74 7e                	je     3f0 <printint+0x90>
+ 372:	89 d0                	mov    %edx,%eax
+ 374:	c1 e8 1f             	shr    $0x1f,%eax
+ 377:	84 c0                	test   %al,%al
+ 379:	74 75                	je     3f0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 37b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 37d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 384:	f7 d8                	neg    %eax
+ 386:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 389:	31 ff                	xor    %edi,%edi
+ 38b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 38e:	89 ce                	mov    %ecx,%esi
+ 390:	eb 08                	jmp    39a <printint+0x3a>
+ 392:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 398:	89 cf                	mov    %ecx,%edi
+ 39a:	31 d2                	xor    %edx,%edx
+ 39c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 39f:	f7 f6                	div    %esi
+ 3a1:	0f b6 92 64 07 00 00 	movzbl 0x764(%edx),%edx
+  }while((x /= base) != 0);
+ 3a8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3aa:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3ad:	75 e9                	jne    398 <printint+0x38>
+  if(neg)
+ 3af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3b2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3b5:	85 c0                	test   %eax,%eax
+ 3b7:	74 08                	je     3c1 <printint+0x61>
+    buf[i++] = '-';
+ 3b9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3be:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3c1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3c5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3c8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3cb:	83 ec 04             	sub    $0x4,%esp
+ 3ce:	83 ef 01             	sub    $0x1,%edi
+ 3d1:	6a 01                	push   $0x1
+ 3d3:	53                   	push   %ebx
+ 3d4:	56                   	push   %esi
+ 3d5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3d8:	e8 e5 fe ff ff       	call   2c2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3dd:	83 c4 10             	add    $0x10,%esp
+ 3e0:	39 df                	cmp    %ebx,%edi
+ 3e2:	75 e4                	jne    3c8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 3e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3e7:	5b                   	pop    %ebx
+ 3e8:	5e                   	pop    %esi
+ 3e9:	5f                   	pop    %edi
+ 3ea:	5d                   	pop    %ebp
+ 3eb:	c3                   	ret    
+ 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3f0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3f2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3f9:	eb 8b                	jmp    386 <printint+0x26>
+ 3fb:	90                   	nop
+ 3fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000400 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 406:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 409:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 40c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 40f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 412:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 415:	0f b6 1e             	movzbl (%esi),%ebx
+ 418:	83 c6 01             	add    $0x1,%esi
+ 41b:	84 db                	test   %bl,%bl
+ 41d:	0f 84 b0 00 00 00    	je     4d3 <printf+0xd3>
+ 423:	31 d2                	xor    %edx,%edx
+ 425:	eb 39                	jmp    460 <printf+0x60>
+ 427:	89 f6                	mov    %esi,%esi
+ 429:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 430:	83 f8 25             	cmp    $0x25,%eax
+ 433:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 436:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 43b:	74 18                	je     455 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 43d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 440:	83 ec 04             	sub    $0x4,%esp
+ 443:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 446:	6a 01                	push   $0x1
+ 448:	50                   	push   %eax
+ 449:	57                   	push   %edi
+ 44a:	e8 73 fe ff ff       	call   2c2 <write>
+ 44f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 452:	83 c4 10             	add    $0x10,%esp
+ 455:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 458:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 45c:	84 db                	test   %bl,%bl
+ 45e:	74 73                	je     4d3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 460:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 462:	0f be cb             	movsbl %bl,%ecx
+ 465:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 468:	74 c6                	je     430 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 46a:	83 fa 25             	cmp    $0x25,%edx
+ 46d:	75 e6                	jne    455 <printf+0x55>
+      if(c == 'd'){
+ 46f:	83 f8 64             	cmp    $0x64,%eax
+ 472:	0f 84 f8 00 00 00    	je     570 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 478:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 47e:	83 f9 70             	cmp    $0x70,%ecx
+ 481:	74 5d                	je     4e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 483:	83 f8 73             	cmp    $0x73,%eax
+ 486:	0f 84 84 00 00 00    	je     510 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48c:	83 f8 63             	cmp    $0x63,%eax
+ 48f:	0f 84 ea 00 00 00    	je     57f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 495:	83 f8 25             	cmp    $0x25,%eax
+ 498:	0f 84 c2 00 00 00    	je     560 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 49e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4a1:	83 ec 04             	sub    $0x4,%esp
+ 4a4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4a8:	6a 01                	push   $0x1
+ 4aa:	50                   	push   %eax
+ 4ab:	57                   	push   %edi
+ 4ac:	e8 11 fe ff ff       	call   2c2 <write>
+ 4b1:	83 c4 0c             	add    $0xc,%esp
+ 4b4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4b7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4ba:	6a 01                	push   $0x1
+ 4bc:	50                   	push   %eax
+ 4bd:	57                   	push   %edi
+ 4be:	83 c6 01             	add    $0x1,%esi
+ 4c1:	e8 fc fd ff ff       	call   2c2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4c6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ca:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4cd:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4cf:	84 db                	test   %bl,%bl
+ 4d1:	75 8d                	jne    460 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d6:	5b                   	pop    %ebx
+ 4d7:	5e                   	pop    %esi
+ 4d8:	5f                   	pop    %edi
+ 4d9:	5d                   	pop    %ebp
+ 4da:	c3                   	ret    
+ 4db:	90                   	nop
+ 4dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 4e0:	83 ec 0c             	sub    $0xc,%esp
+ 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4ed:	89 f8                	mov    %edi,%eax
+ 4ef:	8b 13                	mov    (%ebx),%edx
+ 4f1:	e8 6a fe ff ff       	call   360 <printint>
+        ap++;
+ 4f6:	89 d8                	mov    %ebx,%eax
+ 4f8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4fb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 4fd:	83 c0 04             	add    $0x4,%eax
+ 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 503:	e9 4d ff ff ff       	jmp    455 <printf+0x55>
+ 508:	90                   	nop
+ 509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 510:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 513:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 515:	83 c0 04             	add    $0x4,%eax
+ 518:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 51b:	b8 5b 07 00 00       	mov    $0x75b,%eax
+ 520:	85 db                	test   %ebx,%ebx
+ 522:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 525:	0f b6 03             	movzbl (%ebx),%eax
+ 528:	84 c0                	test   %al,%al
+ 52a:	74 23                	je     54f <printf+0x14f>
+ 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 530:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 533:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 536:	83 ec 04             	sub    $0x4,%esp
+ 539:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 53b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 53e:	50                   	push   %eax
+ 53f:	57                   	push   %edi
+ 540:	e8 7d fd ff ff       	call   2c2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 545:	0f b6 03             	movzbl (%ebx),%eax
+ 548:	83 c4 10             	add    $0x10,%esp
+ 54b:	84 c0                	test   %al,%al
+ 54d:	75 e1                	jne    530 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 54f:	31 d2                	xor    %edx,%edx
+ 551:	e9 ff fe ff ff       	jmp    455 <printf+0x55>
+ 556:	8d 76 00             	lea    0x0(%esi),%esi
+ 559:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 560:	83 ec 04             	sub    $0x4,%esp
+ 563:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 566:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 569:	6a 01                	push   $0x1
+ 56b:	e9 4c ff ff ff       	jmp    4bc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 6b ff ff ff       	jmp    4ea <printf+0xea>
+ 57f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 582:	83 ec 04             	sub    $0x4,%esp
+ 585:	8b 03                	mov    (%ebx),%eax
+ 587:	6a 01                	push   $0x1
+ 589:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 58c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 58f:	50                   	push   %eax
+ 590:	57                   	push   %edi
+ 591:	e8 2c fd ff ff       	call   2c2 <write>
+ 596:	e9 5b ff ff ff       	jmp    4f6 <printf+0xf6>
+ 59b:	66 90                	xchg   %ax,%ax
+ 59d:	66 90                	xchg   %ax,%ax
+ 59f:	90                   	nop
+
+000005a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5a1:	a1 fc 09 00 00       	mov    0x9fc,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ae:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5b0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b3:	39 c8                	cmp    %ecx,%eax
+ 5b5:	73 19                	jae    5d0 <free+0x30>
+ 5b7:	89 f6                	mov    %esi,%esi
+ 5b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5c0:	39 d1                	cmp    %edx,%ecx
+ 5c2:	72 1c                	jb     5e0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5c4:	39 d0                	cmp    %edx,%eax
+ 5c6:	73 18                	jae    5e0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ca:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5cc:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ce:	72 f0                	jb     5c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d0:	39 d0                	cmp    %edx,%eax
+ 5d2:	72 f4                	jb     5c8 <free+0x28>
+ 5d4:	39 d1                	cmp    %edx,%ecx
+ 5d6:	73 f0                	jae    5c8 <free+0x28>
+ 5d8:	90                   	nop
+ 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5e0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5e3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5e6:	39 d7                	cmp    %edx,%edi
+ 5e8:	74 19                	je     603 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 5f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5f3:	39 f1                	cmp    %esi,%ecx
+ 5f5:	74 23                	je     61a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5f7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5f9:	a3 fc 09 00 00       	mov    %eax,0x9fc
+}
+ 5fe:	5b                   	pop    %ebx
+ 5ff:	5e                   	pop    %esi
+ 600:	5f                   	pop    %edi
+ 601:	5d                   	pop    %ebp
+ 602:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 603:	03 72 04             	add    0x4(%edx),%esi
+ 606:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 609:	8b 10                	mov    (%eax),%edx
+ 60b:	8b 12                	mov    (%edx),%edx
+ 60d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 610:	8b 50 04             	mov    0x4(%eax),%edx
+ 613:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 616:	39 f1                	cmp    %esi,%ecx
+ 618:	75 dd                	jne    5f7 <free+0x57>
+    p->s.size += bp->s.size;
+ 61a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 61d:	a3 fc 09 00 00       	mov    %eax,0x9fc
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 622:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 625:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 628:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 62a:	5b                   	pop    %ebx
+ 62b:	5e                   	pop    %esi
+ 62c:	5f                   	pop    %edi
+ 62d:	5d                   	pop    %ebp
+ 62e:	c3                   	ret    
+ 62f:	90                   	nop
+
+00000630 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 63c:	8b 15 fc 09 00 00    	mov    0x9fc,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 642:	8d 78 07             	lea    0x7(%eax),%edi
+ 645:	c1 ef 03             	shr    $0x3,%edi
+ 648:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 64b:	85 d2                	test   %edx,%edx
+ 64d:	0f 84 a3 00 00 00    	je     6f6 <malloc+0xc6>
+ 653:	8b 02                	mov    (%edx),%eax
+ 655:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 658:	39 cf                	cmp    %ecx,%edi
+ 65a:	76 74                	jbe    6d0 <malloc+0xa0>
+ 65c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 662:	be 00 10 00 00       	mov    $0x1000,%esi
+ 667:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 66e:	0f 43 f7             	cmovae %edi,%esi
+ 671:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 676:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 67c:	0f 46 da             	cmovbe %edx,%ebx
+ 67f:	eb 10                	jmp    691 <malloc+0x61>
+ 681:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 688:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 68a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68d:	39 cf                	cmp    %ecx,%edi
+ 68f:	76 3f                	jbe    6d0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 691:	39 05 fc 09 00 00    	cmp    %eax,0x9fc
+ 697:	89 c2                	mov    %eax,%edx
+ 699:	75 ed                	jne    688 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 69b:	83 ec 0c             	sub    $0xc,%esp
+ 69e:	53                   	push   %ebx
+ 69f:	e8 86 fc ff ff       	call   32a <sbrk>
+  if(p == (char*)-1)
+ 6a4:	83 c4 10             	add    $0x10,%esp
+ 6a7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6aa:	74 1c                	je     6c8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6ac:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6af:	83 ec 0c             	sub    $0xc,%esp
+ 6b2:	83 c0 08             	add    $0x8,%eax
+ 6b5:	50                   	push   %eax
+ 6b6:	e8 e5 fe ff ff       	call   5a0 <free>
+  return freep;
+ 6bb:	8b 15 fc 09 00 00    	mov    0x9fc,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6c1:	83 c4 10             	add    $0x10,%esp
+ 6c4:	85 d2                	test   %edx,%edx
+ 6c6:	75 c0                	jne    688 <malloc+0x58>
+        return 0;
+ 6c8:	31 c0                	xor    %eax,%eax
+ 6ca:	eb 1c                	jmp    6e8 <malloc+0xb8>
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6d0:	39 cf                	cmp    %ecx,%edi
+ 6d2:	74 1c                	je     6f0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6d4:	29 f9                	sub    %edi,%ecx
+ 6d6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6dc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6df:	89 15 fc 09 00 00    	mov    %edx,0x9fc
+      return (void*)(p + 1);
+ 6e5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 6e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6eb:	5b                   	pop    %ebx
+ 6ec:	5e                   	pop    %esi
+ 6ed:	5f                   	pop    %edi
+ 6ee:	5d                   	pop    %ebp
+ 6ef:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 6f0:	8b 08                	mov    (%eax),%ecx
+ 6f2:	89 0a                	mov    %ecx,(%edx)
+ 6f4:	eb e9                	jmp    6df <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 6f6:	c7 05 fc 09 00 00 00 	movl   $0xa00,0x9fc
+ 6fd:	0a 00 00 
+ 700:	c7 05 00 0a 00 00 00 	movl   $0xa00,0xa00
+ 707:	0a 00 00 
+    base.s.size = 0;
+ 70a:	b8 00 0a 00 00       	mov    $0xa00,%eax
+ 70f:	c7 05 04 0a 00 00 00 	movl   $0x0,0xa04
+ 716:	00 00 00 
+ 719:	e9 3e ff ff ff       	jmp    65c <malloc+0x2c>
diff -ruN ./xv6-public-src/test_call_count.c ./xv6-public/test_call_count.c
--- ./xv6-public-src/test_call_count.c	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_call_count.c	2019-11-28 00:02:42.249869522 +0200
@@ -0,0 +1,16 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  // Print call count acording to argument
+  if (argc == 1) {
+    printf(1, "This program requires numeric argument.\n");
+    exit();
+  }
+  int argument = atoi(argv[1]);
+  printf(1, "Callcount: %d\n", callcount(argument));
+  exit();
+}
diff -ruN ./xv6-public-src/test_call_count.d ./xv6-public/test_call_count.d
--- ./xv6-public-src/test_call_count.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_call_count.d	2019-11-28 17:52:29.028418000 +0200
@@ -0,0 +1,2 @@
+test_call_count.o: test_call_count.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h
Binary files ./xv6-public-src/test_call_count.o and ./xv6-public/test_call_count.o differ
diff -ruN ./xv6-public-src/test_call_count.sym ./xv6-public/test_call_count.sym
--- ./xv6-public-src/test_call_count.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_call_count.sym	2019-11-28 17:52:29.048430264 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+00000720 .rodata
+00000778 .eh_frame
+000009fc .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_call_count.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+00000764 digits.1111
+00000000 umalloc.c
+000009fc freep
+00000a00 base
+00000060 strcpy
+00000400 printf
+00000270 memmove
+000002ea mknod
+00000170 gets
+00000322 getpid
+00000630 malloc
+00000332 sleep
+00000342 readcount
+0000034a callcount
+000002b2 pipe
+000002c2 write
+000002fa fstat
+000002d2 kill
+00000312 chdir
+000002da exec
+000002aa wait
+000002ba read
+000002f2 unlink
+0000029a fork
+0000032a sbrk
+0000033a uptime
+000009fc __bss_start
+00000110 memset
+00000000 main
+00000090 strcmp
+0000031a dup
+000001e0 stat
+000009fc _edata
+00000a08 _end
+00000302 link
+000002a2 exit
+00000230 atoi
+000000e0 strlen
+000002e2 open
+00000130 strchr
+0000030a mkdir
+000002ca close
+000005a0 free
Binary files ./xv6-public-src/_test_count and ./xv6-public/_test_count differ
diff -ruN ./xv6-public-src/test_count.asm ./xv6-public/test_count.asm
--- ./xv6-public-src/test_count.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count.asm	2019-11-28 17:52:28.956373681 +0200
@@ -0,0 +1,1463 @@
+
+_test_count:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  printf(1, "Readcount: %d\n", readcount());
+  11:	e8 fc 02 00 00       	call   312 <readcount>
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 f0 06 00 00       	push   $0x6f0
+  1f:	6a 01                	push   $0x1
+  21:	e8 aa 03 00 00       	call   3d0 <printf>
+  exit();
+  26:	e8 47 02 00 00       	call   272 <exit>
+  2b:	66 90                	xchg   %ax,%ax
+  2d:	66 90                	xchg   %ax,%ax
+  2f:	90                   	nop
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	8b 45 08             	mov    0x8(%ebp),%eax
+  37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  40:	83 c1 01             	add    $0x1,%ecx
+  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 db                	test   %bl,%bl
+  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  4f:	75 ef                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  51:	5b                   	pop    %ebx
+  52:	5d                   	pop    %ebp
+  53:	c3                   	ret    
+  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 55 08             	mov    0x8(%ebp),%edx
+  68:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6b:	0f b6 02             	movzbl (%edx),%eax
+  6e:	0f b6 19             	movzbl (%ecx),%ebx
+  71:	84 c0                	test   %al,%al
+  73:	75 1e                	jne    93 <strcmp+0x33>
+  75:	eb 29                	jmp    a0 <strcmp+0x40>
+  77:	89 f6                	mov    %esi,%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  80:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  83:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  86:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  89:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	89 f1                	mov    %esi,%ecx
+  93:	38 d8                	cmp    %bl,%al
+  95:	74 e9                	je     80 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  97:	29 d8                	sub    %ebx,%eax
+}
+  99:	5b                   	pop    %ebx
+  9a:	5e                   	pop    %esi
+  9b:	5d                   	pop    %ebp
+  9c:	c3                   	ret    
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  a0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5e                   	pop    %esi
+  a6:	5d                   	pop    %ebp
+  a7:	c3                   	ret    
+  a8:	90                   	nop
+  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 12                	je     cd <strlen+0x1d>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+  cd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+  cf:	5d                   	pop    %ebp
+  d0:	c3                   	ret    
+  d1:	eb 0d                	jmp    e0 <memset>
+  d3:	90                   	nop
+  d4:	90                   	nop
+  d5:	90                   	nop
+  d6:	90                   	nop
+  d7:	90                   	nop
+  d8:	90                   	nop
+  d9:	90                   	nop
+  da:	90                   	nop
+  db:	90                   	nop
+  dc:	90                   	nop
+  dd:	90                   	nop
+  de:	90                   	nop
+  df:	90                   	nop
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 10a:	0f b6 10             	movzbl (%eax),%edx
+ 10d:	84 d2                	test   %dl,%dl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+    if(*s == c)
+ 111:	38 d3                	cmp    %dl,%bl
+ 113:	89 d9                	mov    %ebx,%ecx
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+ 145:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 146:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 148:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 14b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 14e:	eb 29                	jmp    179 <gets+0x39>
+    cc = read(0, &c, 1);
+ 150:	83 ec 04             	sub    $0x4,%esp
+ 153:	6a 01                	push   $0x1
+ 155:	57                   	push   %edi
+ 156:	6a 00                	push   $0x0
+ 158:	e8 2d 01 00 00       	call   28a <read>
+    if(cc < 1)
+ 15d:	83 c4 10             	add    $0x10,%esp
+ 160:	85 c0                	test   %eax,%eax
+ 162:	7e 1d                	jle    181 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 164:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 168:	8b 55 08             	mov    0x8(%ebp),%edx
+ 16b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 16d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 16f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 173:	74 1b                	je     190 <gets+0x50>
+ 175:	3c 0d                	cmp    $0xd,%al
+ 177:	74 17                	je     190 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 179:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 17c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 17f:	7c cf                	jl     150 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 181:	8b 45 08             	mov    0x8(%ebp),%eax
+ 184:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 188:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 18b:	5b                   	pop    %ebx
+ 18c:	5e                   	pop    %esi
+ 18d:	5f                   	pop    %edi
+ 18e:	5d                   	pop    %ebp
+ 18f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 190:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 193:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 195:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 199:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19c:	5b                   	pop    %ebx
+ 19d:	5e                   	pop    %esi
+ 19e:	5f                   	pop    %edi
+ 19f:	5d                   	pop    %ebp
+ 1a0:	c3                   	ret    
+ 1a1:	eb 0d                	jmp    1b0 <stat>
+ 1a3:	90                   	nop
+ 1a4:	90                   	nop
+ 1a5:	90                   	nop
+ 1a6:	90                   	nop
+ 1a7:	90                   	nop
+ 1a8:	90                   	nop
+ 1a9:	90                   	nop
+ 1aa:	90                   	nop
+ 1ab:	90                   	nop
+ 1ac:	90                   	nop
+ 1ad:	90                   	nop
+ 1ae:	90                   	nop
+ 1af:	90                   	nop
+
+000001b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	56                   	push   %esi
+ 1b4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1b5:	83 ec 08             	sub    $0x8,%esp
+ 1b8:	6a 00                	push   $0x0
+ 1ba:	ff 75 08             	pushl  0x8(%ebp)
+ 1bd:	e8 f0 00 00 00       	call   2b2 <open>
+  if(fd < 0)
+ 1c2:	83 c4 10             	add    $0x10,%esp
+ 1c5:	85 c0                	test   %eax,%eax
+ 1c7:	78 27                	js     1f0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1c9:	83 ec 08             	sub    $0x8,%esp
+ 1cc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1cf:	89 c3                	mov    %eax,%ebx
+ 1d1:	50                   	push   %eax
+ 1d2:	e8 f3 00 00 00       	call   2ca <fstat>
+ 1d7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1d9:	89 1c 24             	mov    %ebx,(%esp)
+ 1dc:	e8 b9 00 00 00       	call   29a <close>
+  return r;
+ 1e1:	83 c4 10             	add    $0x10,%esp
+ 1e4:	89 f0                	mov    %esi,%eax
+}
+ 1e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1e9:	5b                   	pop    %ebx
+ 1ea:	5e                   	pop    %esi
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 1f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 1f5:	eb ef                	jmp    1e6 <stat+0x36>
+ 1f7:	89 f6                	mov    %esi,%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	53                   	push   %ebx
+ 204:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 207:	0f be 11             	movsbl (%ecx),%edx
+ 20a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 20d:	3c 09                	cmp    $0x9,%al
+ 20f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 214:	77 1f                	ja     235 <atoi+0x35>
+ 216:	8d 76 00             	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 220:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 223:	83 c1 01             	add    $0x1,%ecx
+ 226:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22a:	0f be 11             	movsbl (%ecx),%edx
+ 22d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 230:	80 fb 09             	cmp    $0x9,%bl
+ 233:	76 eb                	jbe    220 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 235:	5b                   	pop    %ebx
+ 236:	5d                   	pop    %ebp
+ 237:	c3                   	ret    
+ 238:	90                   	nop
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000240 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	56                   	push   %esi
+ 244:	53                   	push   %ebx
+ 245:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 248:	8b 45 08             	mov    0x8(%ebp),%eax
+ 24b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 24e:	85 db                	test   %ebx,%ebx
+ 250:	7e 14                	jle    266 <memmove+0x26>
+ 252:	31 d2                	xor    %edx,%edx
+ 254:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 258:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 25c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 25f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 262:	39 da                	cmp    %ebx,%edx
+ 264:	75 f2                	jne    258 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 266:	5b                   	pop    %ebx
+ 267:	5e                   	pop    %esi
+ 268:	5d                   	pop    %ebp
+ 269:	c3                   	ret    
+
+0000026a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 26a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 26f:	cd 40                	int    $0x40
+ 271:	c3                   	ret    
+
+00000272 <exit>:
+SYSCALL(exit)
+ 272:	b8 02 00 00 00       	mov    $0x2,%eax
+ 277:	cd 40                	int    $0x40
+ 279:	c3                   	ret    
+
+0000027a <wait>:
+SYSCALL(wait)
+ 27a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <pipe>:
+SYSCALL(pipe)
+ 282:	b8 04 00 00 00       	mov    $0x4,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <read>:
+SYSCALL(read)
+ 28a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <write>:
+SYSCALL(write)
+ 292:	b8 10 00 00 00       	mov    $0x10,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <close>:
+SYSCALL(close)
+ 29a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <kill>:
+SYSCALL(kill)
+ 2a2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <exec>:
+SYSCALL(exec)
+ 2aa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <open>:
+SYSCALL(open)
+ 2b2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <mknod>:
+SYSCALL(mknod)
+ 2ba:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <unlink>:
+SYSCALL(unlink)
+ 2c2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <fstat>:
+SYSCALL(fstat)
+ 2ca:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <link>:
+SYSCALL(link)
+ 2d2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <mkdir>:
+SYSCALL(mkdir)
+ 2da:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <chdir>:
+SYSCALL(chdir)
+ 2e2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <dup>:
+SYSCALL(dup)
+ 2ea:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <getpid>:
+SYSCALL(getpid)
+ 2f2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <sbrk>:
+SYSCALL(sbrk)
+ 2fa:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <sleep>:
+SYSCALL(sleep)
+ 302:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <uptime>:
+SYSCALL(uptime)
+ 30a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <readcount>:
+SYSCALL(readcount)
+ 312:	b8 16 00 00 00       	mov    $0x16,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <callcount>:
+SYSCALL(callcount)
+ 31a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+ 322:	66 90                	xchg   %ax,%ax
+ 324:	66 90                	xchg   %ax,%ax
+ 326:	66 90                	xchg   %ax,%ax
+ 328:	66 90                	xchg   %ax,%ax
+ 32a:	66 90                	xchg   %ax,%ax
+ 32c:	66 90                	xchg   %ax,%ax
+ 32e:	66 90                	xchg   %ax,%ax
+
+00000330 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	56                   	push   %esi
+ 335:	53                   	push   %ebx
+ 336:	89 c6                	mov    %eax,%esi
+ 338:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 33b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 33e:	85 db                	test   %ebx,%ebx
+ 340:	74 7e                	je     3c0 <printint+0x90>
+ 342:	89 d0                	mov    %edx,%eax
+ 344:	c1 e8 1f             	shr    $0x1f,%eax
+ 347:	84 c0                	test   %al,%al
+ 349:	74 75                	je     3c0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 34b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 34d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 354:	f7 d8                	neg    %eax
+ 356:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 359:	31 ff                	xor    %edi,%edi
+ 35b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 35e:	89 ce                	mov    %ecx,%esi
+ 360:	eb 08                	jmp    36a <printint+0x3a>
+ 362:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 368:	89 cf                	mov    %ecx,%edi
+ 36a:	31 d2                	xor    %edx,%edx
+ 36c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 36f:	f7 f6                	div    %esi
+ 371:	0f b6 92 08 07 00 00 	movzbl 0x708(%edx),%edx
+  }while((x /= base) != 0);
+ 378:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 37a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 37d:	75 e9                	jne    368 <printint+0x38>
+  if(neg)
+ 37f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 382:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 385:	85 c0                	test   %eax,%eax
+ 387:	74 08                	je     391 <printint+0x61>
+    buf[i++] = '-';
+ 389:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 38e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 391:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 395:	8d 76 00             	lea    0x0(%esi),%esi
+ 398:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 39b:	83 ec 04             	sub    $0x4,%esp
+ 39e:	83 ef 01             	sub    $0x1,%edi
+ 3a1:	6a 01                	push   $0x1
+ 3a3:	53                   	push   %ebx
+ 3a4:	56                   	push   %esi
+ 3a5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3a8:	e8 e5 fe ff ff       	call   292 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3ad:	83 c4 10             	add    $0x10,%esp
+ 3b0:	39 df                	cmp    %ebx,%edi
+ 3b2:	75 e4                	jne    398 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 3b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5e                   	pop    %esi
+ 3b9:	5f                   	pop    %edi
+ 3ba:	5d                   	pop    %ebp
+ 3bb:	c3                   	ret    
+ 3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3c0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3c2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3c9:	eb 8b                	jmp    356 <printint+0x26>
+ 3cb:	90                   	nop
+ 3cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003d0 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3d6:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3d9:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3df:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 3e5:	0f b6 1e             	movzbl (%esi),%ebx
+ 3e8:	83 c6 01             	add    $0x1,%esi
+ 3eb:	84 db                	test   %bl,%bl
+ 3ed:	0f 84 b0 00 00 00    	je     4a3 <printf+0xd3>
+ 3f3:	31 d2                	xor    %edx,%edx
+ 3f5:	eb 39                	jmp    430 <printf+0x60>
+ 3f7:	89 f6                	mov    %esi,%esi
+ 3f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 400:	83 f8 25             	cmp    $0x25,%eax
+ 403:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 406:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 40b:	74 18                	je     425 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 40d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 410:	83 ec 04             	sub    $0x4,%esp
+ 413:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 416:	6a 01                	push   $0x1
+ 418:	50                   	push   %eax
+ 419:	57                   	push   %edi
+ 41a:	e8 73 fe ff ff       	call   292 <write>
+ 41f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 422:	83 c4 10             	add    $0x10,%esp
+ 425:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 428:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 42c:	84 db                	test   %bl,%bl
+ 42e:	74 73                	je     4a3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 430:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 432:	0f be cb             	movsbl %bl,%ecx
+ 435:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 438:	74 c6                	je     400 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 43a:	83 fa 25             	cmp    $0x25,%edx
+ 43d:	75 e6                	jne    425 <printf+0x55>
+      if(c == 'd'){
+ 43f:	83 f8 64             	cmp    $0x64,%eax
+ 442:	0f 84 f8 00 00 00    	je     540 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 448:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 44e:	83 f9 70             	cmp    $0x70,%ecx
+ 451:	74 5d                	je     4b0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 453:	83 f8 73             	cmp    $0x73,%eax
+ 456:	0f 84 84 00 00 00    	je     4e0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 45c:	83 f8 63             	cmp    $0x63,%eax
+ 45f:	0f 84 ea 00 00 00    	je     54f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 465:	83 f8 25             	cmp    $0x25,%eax
+ 468:	0f 84 c2 00 00 00    	je     530 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 46e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 471:	83 ec 04             	sub    $0x4,%esp
+ 474:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 478:	6a 01                	push   $0x1
+ 47a:	50                   	push   %eax
+ 47b:	57                   	push   %edi
+ 47c:	e8 11 fe ff ff       	call   292 <write>
+ 481:	83 c4 0c             	add    $0xc,%esp
+ 484:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 487:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 48a:	6a 01                	push   $0x1
+ 48c:	50                   	push   %eax
+ 48d:	57                   	push   %edi
+ 48e:	83 c6 01             	add    $0x1,%esi
+ 491:	e8 fc fd ff ff       	call   292 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 496:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 49a:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 49d:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 49f:	84 db                	test   %bl,%bl
+ 4a1:	75 8d                	jne    430 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4a6:	5b                   	pop    %ebx
+ 4a7:	5e                   	pop    %esi
+ 4a8:	5f                   	pop    %edi
+ 4a9:	5d                   	pop    %ebp
+ 4aa:	c3                   	ret    
+ 4ab:	90                   	nop
+ 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 4b0:	83 ec 0c             	sub    $0xc,%esp
+ 4b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4b8:	6a 00                	push   $0x0
+ 4ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4bd:	89 f8                	mov    %edi,%eax
+ 4bf:	8b 13                	mov    (%ebx),%edx
+ 4c1:	e8 6a fe ff ff       	call   330 <printint>
+        ap++;
+ 4c6:	89 d8                	mov    %ebx,%eax
+ 4c8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4cb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 4cd:	83 c0 04             	add    $0x4,%eax
+ 4d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4d3:	e9 4d ff ff ff       	jmp    425 <printf+0x55>
+ 4d8:	90                   	nop
+ 4d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 4e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4e3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 4e5:	83 c0 04             	add    $0x4,%eax
+ 4e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 4eb:	b8 ff 06 00 00       	mov    $0x6ff,%eax
+ 4f0:	85 db                	test   %ebx,%ebx
+ 4f2:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 4f5:	0f b6 03             	movzbl (%ebx),%eax
+ 4f8:	84 c0                	test   %al,%al
+ 4fa:	74 23                	je     51f <printf+0x14f>
+ 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 500:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 503:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 506:	83 ec 04             	sub    $0x4,%esp
+ 509:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 50b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 50e:	50                   	push   %eax
+ 50f:	57                   	push   %edi
+ 510:	e8 7d fd ff ff       	call   292 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 515:	0f b6 03             	movzbl (%ebx),%eax
+ 518:	83 c4 10             	add    $0x10,%esp
+ 51b:	84 c0                	test   %al,%al
+ 51d:	75 e1                	jne    500 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 51f:	31 d2                	xor    %edx,%edx
+ 521:	e9 ff fe ff ff       	jmp    425 <printf+0x55>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 530:	83 ec 04             	sub    $0x4,%esp
+ 533:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 536:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 539:	6a 01                	push   $0x1
+ 53b:	e9 4c ff ff ff       	jmp    48c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	e9 6b ff ff ff       	jmp    4ba <printf+0xea>
+ 54f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 552:	83 ec 04             	sub    $0x4,%esp
+ 555:	8b 03                	mov    (%ebx),%eax
+ 557:	6a 01                	push   $0x1
+ 559:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 55c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 55f:	50                   	push   %eax
+ 560:	57                   	push   %edi
+ 561:	e8 2c fd ff ff       	call   292 <write>
+ 566:	e9 5b ff ff ff       	jmp    4c6 <printf+0xf6>
+ 56b:	66 90                	xchg   %ax,%ax
+ 56d:	66 90                	xchg   %ax,%ax
+ 56f:	90                   	nop
+
+00000570 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 570:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 571:	a1 a0 09 00 00       	mov    0x9a0,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 576:	89 e5                	mov    %esp,%ebp
+ 578:	57                   	push   %edi
+ 579:	56                   	push   %esi
+ 57a:	53                   	push   %ebx
+ 57b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 57e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 580:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 583:	39 c8                	cmp    %ecx,%eax
+ 585:	73 19                	jae    5a0 <free+0x30>
+ 587:	89 f6                	mov    %esi,%esi
+ 589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 590:	39 d1                	cmp    %edx,%ecx
+ 592:	72 1c                	jb     5b0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 594:	39 d0                	cmp    %edx,%eax
+ 596:	73 18                	jae    5b0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 598:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 59a:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 59c:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 59e:	72 f0                	jb     590 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5a0:	39 d0                	cmp    %edx,%eax
+ 5a2:	72 f4                	jb     598 <free+0x28>
+ 5a4:	39 d1                	cmp    %edx,%ecx
+ 5a6:	73 f0                	jae    598 <free+0x28>
+ 5a8:	90                   	nop
+ 5a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5b0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5b3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5b6:	39 d7                	cmp    %edx,%edi
+ 5b8:	74 19                	je     5d3 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 5c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5c3:	39 f1                	cmp    %esi,%ecx
+ 5c5:	74 23                	je     5ea <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5c7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5c9:	a3 a0 09 00 00       	mov    %eax,0x9a0
+}
+ 5ce:	5b                   	pop    %ebx
+ 5cf:	5e                   	pop    %esi
+ 5d0:	5f                   	pop    %edi
+ 5d1:	5d                   	pop    %ebp
+ 5d2:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 5d3:	03 72 04             	add    0x4(%edx),%esi
+ 5d6:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5d9:	8b 10                	mov    (%eax),%edx
+ 5db:	8b 12                	mov    (%edx),%edx
+ 5dd:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5e0:	8b 50 04             	mov    0x4(%eax),%edx
+ 5e3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5e6:	39 f1                	cmp    %esi,%ecx
+ 5e8:	75 dd                	jne    5c7 <free+0x57>
+    p->s.size += bp->s.size;
+ 5ea:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 5ed:	a3 a0 09 00 00       	mov    %eax,0x9a0
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 5f2:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 5f5:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 5f8:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5fa:	5b                   	pop    %ebx
+ 5fb:	5e                   	pop    %esi
+ 5fc:	5f                   	pop    %edi
+ 5fd:	5d                   	pop    %ebp
+ 5fe:	c3                   	ret    
+ 5ff:	90                   	nop
+
+00000600 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 600:	55                   	push   %ebp
+ 601:	89 e5                	mov    %esp,%ebp
+ 603:	57                   	push   %edi
+ 604:	56                   	push   %esi
+ 605:	53                   	push   %ebx
+ 606:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 609:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 60c:	8b 15 a0 09 00 00    	mov    0x9a0,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 612:	8d 78 07             	lea    0x7(%eax),%edi
+ 615:	c1 ef 03             	shr    $0x3,%edi
+ 618:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 61b:	85 d2                	test   %edx,%edx
+ 61d:	0f 84 a3 00 00 00    	je     6c6 <malloc+0xc6>
+ 623:	8b 02                	mov    (%edx),%eax
+ 625:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 628:	39 cf                	cmp    %ecx,%edi
+ 62a:	76 74                	jbe    6a0 <malloc+0xa0>
+ 62c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 632:	be 00 10 00 00       	mov    $0x1000,%esi
+ 637:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 63e:	0f 43 f7             	cmovae %edi,%esi
+ 641:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 646:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 64c:	0f 46 da             	cmovbe %edx,%ebx
+ 64f:	eb 10                	jmp    661 <malloc+0x61>
+ 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 658:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 65a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 65d:	39 cf                	cmp    %ecx,%edi
+ 65f:	76 3f                	jbe    6a0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 661:	39 05 a0 09 00 00    	cmp    %eax,0x9a0
+ 667:	89 c2                	mov    %eax,%edx
+ 669:	75 ed                	jne    658 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 66b:	83 ec 0c             	sub    $0xc,%esp
+ 66e:	53                   	push   %ebx
+ 66f:	e8 86 fc ff ff       	call   2fa <sbrk>
+  if(p == (char*)-1)
+ 674:	83 c4 10             	add    $0x10,%esp
+ 677:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 67a:	74 1c                	je     698 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 67c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 67f:	83 ec 0c             	sub    $0xc,%esp
+ 682:	83 c0 08             	add    $0x8,%eax
+ 685:	50                   	push   %eax
+ 686:	e8 e5 fe ff ff       	call   570 <free>
+  return freep;
+ 68b:	8b 15 a0 09 00 00    	mov    0x9a0,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 691:	83 c4 10             	add    $0x10,%esp
+ 694:	85 d2                	test   %edx,%edx
+ 696:	75 c0                	jne    658 <malloc+0x58>
+        return 0;
+ 698:	31 c0                	xor    %eax,%eax
+ 69a:	eb 1c                	jmp    6b8 <malloc+0xb8>
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6a0:	39 cf                	cmp    %ecx,%edi
+ 6a2:	74 1c                	je     6c0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6a4:	29 f9                	sub    %edi,%ecx
+ 6a6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6a9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6ac:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6af:	89 15 a0 09 00 00    	mov    %edx,0x9a0
+      return (void*)(p + 1);
+ 6b5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 6b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6bb:	5b                   	pop    %ebx
+ 6bc:	5e                   	pop    %esi
+ 6bd:	5f                   	pop    %edi
+ 6be:	5d                   	pop    %ebp
+ 6bf:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 6c0:	8b 08                	mov    (%eax),%ecx
+ 6c2:	89 0a                	mov    %ecx,(%edx)
+ 6c4:	eb e9                	jmp    6af <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 6c6:	c7 05 a0 09 00 00 a4 	movl   $0x9a4,0x9a0
+ 6cd:	09 00 00 
+ 6d0:	c7 05 a4 09 00 00 a4 	movl   $0x9a4,0x9a4
+ 6d7:	09 00 00 
+    base.s.size = 0;
+ 6da:	b8 a4 09 00 00       	mov    $0x9a4,%eax
+ 6df:	c7 05 a8 09 00 00 00 	movl   $0x0,0x9a8
+ 6e6:	00 00 00 
+ 6e9:	e9 3e ff ff ff       	jmp    62c <malloc+0x2c>
diff -ruN ./xv6-public-src/test_count.c ./xv6-public/test_count.c
--- ./xv6-public-src/test_count.c	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count.c	2019-11-27 21:13:48.490457360 +0200
@@ -0,0 +1,10 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  printf(1, "Readcount: %d\n", readcount());
+  exit();
+}
diff -ruN ./xv6-public-src/test_count.d ./xv6-public/test_count.d
--- ./xv6-public-src/test_count.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count.d	2019-11-28 17:52:28.940363811 +0200
@@ -0,0 +1,2 @@
+test_count.o: test_count.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h
Binary files ./xv6-public-src/_test_count_for and ./xv6-public/_test_count_for differ
diff -ruN ./xv6-public-src/test_count_for.asm ./xv6-public/test_count_for.asm
--- ./xv6-public-src/test_count_for.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count_for.asm	2019-11-28 17:52:29.004403282 +0200
@@ -0,0 +1,1514 @@
+
+_test_count_for:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char buf[2];
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	56                   	push   %esi
+   e:	53                   	push   %ebx
+   f:	51                   	push   %ecx
+  10:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  15:	83 ec 14             	sub    $0x14,%esp
+  int fd;
+  if((fd = open("cat", 0)) < 0){
+  18:	6a 00                	push   $0x0
+  1a:	68 40 07 00 00       	push   $0x740
+  1f:	e8 de 02 00 00       	call   302 <open>
+  24:	83 c4 10             	add    $0x10,%esp
+  27:	85 c0                	test   %eax,%eax
+  29:	89 c6                	mov    %eax,%esi
+  2b:	78 35                	js     62 <main+0x62>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(1, "readcount_test_for: cannot open cat\n");
+      exit();
+  }
+  // Read exactly 100 times.
+  for (int i = 0; i < 1000; i++) {
+    read(fd, buf, sizeof(buf));
+  30:	83 ec 04             	sub    $0x4,%esp
+  33:	6a 02                	push   $0x2
+  35:	68 30 0a 00 00       	push   $0xa30
+  3a:	56                   	push   %esi
+  3b:	e8 9a 02 00 00       	call   2da <read>
+  if((fd = open("cat", 0)) < 0){
+      printf(1, "readcount_test_for: cannot open cat\n");
+      exit();
+  }
+  // Read exactly 100 times.
+  for (int i = 0; i < 1000; i++) {
+  40:	83 c4 10             	add    $0x10,%esp
+  43:	83 eb 01             	sub    $0x1,%ebx
+  46:	75 e8                	jne    30 <main+0x30>
+    read(fd, buf, sizeof(buf));
+  }
+  printf(1, "Readcount: %d\n", readcount());
+  48:	e8 15 03 00 00       	call   362 <readcount>
+  4d:	83 ec 04             	sub    $0x4,%esp
+  50:	50                   	push   %eax
+  51:	68 44 07 00 00       	push   $0x744
+  56:	6a 01                	push   $0x1
+  58:	e8 c3 03 00 00       	call   420 <printf>
+  exit();
+  5d:	e8 60 02 00 00       	call   2c2 <exit>
+int
+main(int argc, char *argv[])
+{
+  int fd;
+  if((fd = open("cat", 0)) < 0){
+      printf(1, "readcount_test_for: cannot open cat\n");
+  62:	50                   	push   %eax
+  63:	50                   	push   %eax
+  64:	68 54 07 00 00       	push   $0x754
+  69:	6a 01                	push   $0x1
+  6b:	e8 b0 03 00 00       	call   420 <printf>
+      exit();
+  70:	e8 4d 02 00 00       	call   2c2 <exit>
+  75:	66 90                	xchg   %ax,%ax
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  81:	89 e5                	mov    %esp,%ebp
+  83:	53                   	push   %ebx
+  84:	8b 45 08             	mov    0x8(%ebp),%eax
+  87:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  8a:	89 c2                	mov    %eax,%edx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  90:	83 c1 01             	add    $0x1,%ecx
+  93:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  97:	83 c2 01             	add    $0x1,%edx
+  9a:	84 db                	test   %bl,%bl
+  9c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  9f:	75 ef                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  a1:	5b                   	pop    %ebx
+  a2:	5d                   	pop    %ebp
+  a3:	c3                   	ret    
+  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	56                   	push   %esi
+  b4:	53                   	push   %ebx
+  b5:	8b 55 08             	mov    0x8(%ebp),%edx
+  b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  bb:	0f b6 02             	movzbl (%edx),%eax
+  be:	0f b6 19             	movzbl (%ecx),%ebx
+  c1:	84 c0                	test   %al,%al
+  c3:	75 1e                	jne    e3 <strcmp+0x33>
+  c5:	eb 29                	jmp    f0 <strcmp+0x40>
+  c7:	89 f6                	mov    %esi,%esi
+  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  d0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  d6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	89 f1                	mov    %esi,%ecx
+  e3:	38 d8                	cmp    %bl,%al
+  e5:	74 e9                	je     d0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  e7:	29 d8                	sub    %ebx,%eax
+}
+  e9:	5b                   	pop    %ebx
+  ea:	5e                   	pop    %esi
+  eb:	5d                   	pop    %ebp
+  ec:	c3                   	ret    
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  f0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5e                   	pop    %esi
+  f6:	5d                   	pop    %ebp
+  f7:	c3                   	ret    
+  f8:	90                   	nop
+  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 39 00             	cmpb   $0x0,(%ecx)
+ 109:	74 12                	je     11d <strlen+0x1d>
+ 10b:	31 d2                	xor    %edx,%edx
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c2 01             	add    $0x1,%edx
+ 113:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 117:	89 d0                	mov    %edx,%eax
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 11d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 11f:	5d                   	pop    %ebp
+ 120:	c3                   	ret    
+ 121:	eb 0d                	jmp    130 <memset>
+ 123:	90                   	nop
+ 124:	90                   	nop
+ 125:	90                   	nop
+ 126:	90                   	nop
+ 127:	90                   	nop
+ 128:	90                   	nop
+ 129:	90                   	nop
+ 12a:	90                   	nop
+ 12b:	90                   	nop
+ 12c:	90                   	nop
+ 12d:	90                   	nop
+ 12e:	90                   	nop
+ 12f:	90                   	nop
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	89 d0                	mov    %edx,%eax
+ 144:	5f                   	pop    %edi
+ 145:	5d                   	pop    %ebp
+ 146:	c3                   	ret    
+ 147:	89 f6                	mov    %esi,%esi
+ 149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 45 08             	mov    0x8(%ebp),%eax
+ 157:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	74 1d                	je     17e <strchr+0x2e>
+    if(*s == c)
+ 161:	38 d3                	cmp    %dl,%bl
+ 163:	89 d9                	mov    %ebx,%ecx
+ 165:	75 0d                	jne    174 <strchr+0x24>
+ 167:	eb 17                	jmp    180 <strchr+0x30>
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 170:	38 ca                	cmp    %cl,%dl
+ 172:	74 0c                	je     180 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	0f b6 10             	movzbl (%eax),%edx
+ 17a:	84 d2                	test   %dl,%dl
+ 17c:	75 f2                	jne    170 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 17e:	31 c0                	xor    %eax,%eax
+}
+ 180:	5b                   	pop    %ebx
+ 181:	5d                   	pop    %ebp
+ 182:	c3                   	ret    
+ 183:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 189:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 196:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 198:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 19b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 19e:	eb 29                	jmp    1c9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	6a 01                	push   $0x1
+ 1a5:	57                   	push   %edi
+ 1a6:	6a 00                	push   $0x0
+ 1a8:	e8 2d 01 00 00       	call   2da <read>
+    if(cc < 1)
+ 1ad:	83 c4 10             	add    $0x10,%esp
+ 1b0:	85 c0                	test   %eax,%eax
+ 1b2:	7e 1d                	jle    1d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1bb:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 1bd:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 1bf:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1c3:	74 1b                	je     1e0 <gets+0x50>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 17                	je     1e0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1c9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 1cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1cf:	7c cf                	jl     1a0 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1db:	5b                   	pop    %ebx
+ 1dc:	5e                   	pop    %esi
+ 1dd:	5f                   	pop    %edi
+ 1de:	5d                   	pop    %ebp
+ 1df:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1e0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1e3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 1e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ec:	5b                   	pop    %ebx
+ 1ed:	5e                   	pop    %esi
+ 1ee:	5f                   	pop    %edi
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	eb 0d                	jmp    200 <stat>
+ 1f3:	90                   	nop
+ 1f4:	90                   	nop
+ 1f5:	90                   	nop
+ 1f6:	90                   	nop
+ 1f7:	90                   	nop
+ 1f8:	90                   	nop
+ 1f9:	90                   	nop
+ 1fa:	90                   	nop
+ 1fb:	90                   	nop
+ 1fc:	90                   	nop
+ 1fd:	90                   	nop
+ 1fe:	90                   	nop
+ 1ff:	90                   	nop
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	pushl  0x8(%ebp)
+ 20d:	e8 f0 00 00 00       	call   302 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	pushl  0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f3 00 00 00       	call   31a <fstat>
+ 227:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 229:	89 1c 24             	mov    %ebx,(%esp)
+ 22c:	e8 b9 00 00 00       	call   2ea <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+ 234:	89 f0                	mov    %esi,%eax
+}
+ 236:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 240:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 245:	eb ef                	jmp    236 <stat+0x36>
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 11             	movsbl (%ecx),%edx
+ 25a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 25d:	3c 09                	cmp    $0x9,%al
+ 25f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 264:	77 1f                	ja     285 <atoi+0x35>
+ 266:	8d 76 00             	lea    0x0(%esi),%esi
+ 269:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 270:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 273:	83 c1 01             	add    $0x1,%ecx
+ 276:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 11             	movsbl (%ecx),%edx
+ 27d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 285:	5b                   	pop    %ebx
+ 286:	5d                   	pop    %ebp
+ 287:	c3                   	ret    
+ 288:	90                   	nop
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	56                   	push   %esi
+ 294:	53                   	push   %ebx
+ 295:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 298:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 db                	test   %ebx,%ebx
+ 2a0:	7e 14                	jle    2b6 <memmove+0x26>
+ 2a2:	31 d2                	xor    %edx,%edx
+ 2a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 2a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 2ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 2af:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	39 da                	cmp    %ebx,%edx
+ 2b4:	75 f2                	jne    2a8 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 2b6:	5b                   	pop    %ebx
+ 2b7:	5e                   	pop    %esi
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+
+000002ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <exit>:
+SYSCALL(exit)
+ 2c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <wait>:
+SYSCALL(wait)
+ 2ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <pipe>:
+SYSCALL(pipe)
+ 2d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <read>:
+SYSCALL(read)
+ 2da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <write>:
+SYSCALL(write)
+ 2e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <close>:
+SYSCALL(close)
+ 2ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <kill>:
+SYSCALL(kill)
+ 2f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <exec>:
+SYSCALL(exec)
+ 2fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <open>:
+SYSCALL(open)
+ 302:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <mknod>:
+SYSCALL(mknod)
+ 30a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <unlink>:
+SYSCALL(unlink)
+ 312:	b8 12 00 00 00       	mov    $0x12,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <fstat>:
+SYSCALL(fstat)
+ 31a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+
+00000322 <link>:
+SYSCALL(link)
+ 322:	b8 13 00 00 00       	mov    $0x13,%eax
+ 327:	cd 40                	int    $0x40
+ 329:	c3                   	ret    
+
+0000032a <mkdir>:
+SYSCALL(mkdir)
+ 32a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 32f:	cd 40                	int    $0x40
+ 331:	c3                   	ret    
+
+00000332 <chdir>:
+SYSCALL(chdir)
+ 332:	b8 09 00 00 00       	mov    $0x9,%eax
+ 337:	cd 40                	int    $0x40
+ 339:	c3                   	ret    
+
+0000033a <dup>:
+SYSCALL(dup)
+ 33a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 33f:	cd 40                	int    $0x40
+ 341:	c3                   	ret    
+
+00000342 <getpid>:
+SYSCALL(getpid)
+ 342:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 347:	cd 40                	int    $0x40
+ 349:	c3                   	ret    
+
+0000034a <sbrk>:
+SYSCALL(sbrk)
+ 34a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 34f:	cd 40                	int    $0x40
+ 351:	c3                   	ret    
+
+00000352 <sleep>:
+SYSCALL(sleep)
+ 352:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 357:	cd 40                	int    $0x40
+ 359:	c3                   	ret    
+
+0000035a <uptime>:
+SYSCALL(uptime)
+ 35a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 35f:	cd 40                	int    $0x40
+ 361:	c3                   	ret    
+
+00000362 <readcount>:
+SYSCALL(readcount)
+ 362:	b8 16 00 00 00       	mov    $0x16,%eax
+ 367:	cd 40                	int    $0x40
+ 369:	c3                   	ret    
+
+0000036a <callcount>:
+SYSCALL(callcount)
+ 36a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 36f:	cd 40                	int    $0x40
+ 371:	c3                   	ret    
+ 372:	66 90                	xchg   %ax,%ax
+ 374:	66 90                	xchg   %ax,%ax
+ 376:	66 90                	xchg   %ax,%ax
+ 378:	66 90                	xchg   %ax,%ax
+ 37a:	66 90                	xchg   %ax,%ax
+ 37c:	66 90                	xchg   %ax,%ax
+ 37e:	66 90                	xchg   %ax,%ax
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	89 c6                	mov    %eax,%esi
+ 388:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 38b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 38e:	85 db                	test   %ebx,%ebx
+ 390:	74 7e                	je     410 <printint+0x90>
+ 392:	89 d0                	mov    %edx,%eax
+ 394:	c1 e8 1f             	shr    $0x1f,%eax
+ 397:	84 c0                	test   %al,%al
+ 399:	74 75                	je     410 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 39b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 39d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 3a4:	f7 d8                	neg    %eax
+ 3a6:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a9:	31 ff                	xor    %edi,%edi
+ 3ab:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 3ae:	89 ce                	mov    %ecx,%esi
+ 3b0:	eb 08                	jmp    3ba <printint+0x3a>
+ 3b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b8:	89 cf                	mov    %ecx,%edi
+ 3ba:	31 d2                	xor    %edx,%edx
+ 3bc:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 3bf:	f7 f6                	div    %esi
+ 3c1:	0f b6 92 84 07 00 00 	movzbl 0x784(%edx),%edx
+  }while((x /= base) != 0);
+ 3c8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 3ca:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 3cd:	75 e9                	jne    3b8 <printint+0x38>
+  if(neg)
+ 3cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 3d2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 3d5:	85 c0                	test   %eax,%eax
+ 3d7:	74 08                	je     3e1 <printint+0x61>
+    buf[i++] = '-';
+ 3d9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 3de:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 3e1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 3e5:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 3eb:	83 ec 04             	sub    $0x4,%esp
+ 3ee:	83 ef 01             	sub    $0x1,%edi
+ 3f1:	6a 01                	push   $0x1
+ 3f3:	53                   	push   %ebx
+ 3f4:	56                   	push   %esi
+ 3f5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3f8:	e8 e5 fe ff ff       	call   2e2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3fd:	83 c4 10             	add    $0x10,%esp
+ 400:	39 df                	cmp    %ebx,%edi
+ 402:	75 e4                	jne    3e8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 404:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 407:	5b                   	pop    %ebx
+ 408:	5e                   	pop    %esi
+ 409:	5f                   	pop    %edi
+ 40a:	5d                   	pop    %ebp
+ 40b:	c3                   	ret    
+ 40c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 410:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 412:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 419:	eb 8b                	jmp    3a6 <printint+0x26>
+ 41b:	90                   	nop
+ 41c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000420 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 426:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 429:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 42c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 42f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 432:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 435:	0f b6 1e             	movzbl (%esi),%ebx
+ 438:	83 c6 01             	add    $0x1,%esi
+ 43b:	84 db                	test   %bl,%bl
+ 43d:	0f 84 b0 00 00 00    	je     4f3 <printf+0xd3>
+ 443:	31 d2                	xor    %edx,%edx
+ 445:	eb 39                	jmp    480 <printf+0x60>
+ 447:	89 f6                	mov    %esi,%esi
+ 449:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 450:	83 f8 25             	cmp    $0x25,%eax
+ 453:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 456:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 45b:	74 18                	je     475 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 45d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 460:	83 ec 04             	sub    $0x4,%esp
+ 463:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 466:	6a 01                	push   $0x1
+ 468:	50                   	push   %eax
+ 469:	57                   	push   %edi
+ 46a:	e8 73 fe ff ff       	call   2e2 <write>
+ 46f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 472:	83 c4 10             	add    $0x10,%esp
+ 475:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 478:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 47c:	84 db                	test   %bl,%bl
+ 47e:	74 73                	je     4f3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 480:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 482:	0f be cb             	movsbl %bl,%ecx
+ 485:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 488:	74 c6                	je     450 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 48a:	83 fa 25             	cmp    $0x25,%edx
+ 48d:	75 e6                	jne    475 <printf+0x55>
+      if(c == 'd'){
+ 48f:	83 f8 64             	cmp    $0x64,%eax
+ 492:	0f 84 f8 00 00 00    	je     590 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 498:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 49e:	83 f9 70             	cmp    $0x70,%ecx
+ 4a1:	74 5d                	je     500 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4a3:	83 f8 73             	cmp    $0x73,%eax
+ 4a6:	0f 84 84 00 00 00    	je     530 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ac:	83 f8 63             	cmp    $0x63,%eax
+ 4af:	0f 84 ea 00 00 00    	je     59f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4b5:	83 f8 25             	cmp    $0x25,%eax
+ 4b8:	0f 84 c2 00 00 00    	je     580 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 4c1:	83 ec 04             	sub    $0x4,%esp
+ 4c4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4c8:	6a 01                	push   $0x1
+ 4ca:	50                   	push   %eax
+ 4cb:	57                   	push   %edi
+ 4cc:	e8 11 fe ff ff       	call   2e2 <write>
+ 4d1:	83 c4 0c             	add    $0xc,%esp
+ 4d4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 4d7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 4da:	6a 01                	push   $0x1
+ 4dc:	50                   	push   %eax
+ 4dd:	57                   	push   %edi
+ 4de:	83 c6 01             	add    $0x1,%esi
+ 4e1:	e8 fc fd ff ff       	call   2e2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4e6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4ea:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4ed:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4ef:	84 db                	test   %bl,%bl
+ 4f1:	75 8d                	jne    480 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f6:	5b                   	pop    %ebx
+ 4f7:	5e                   	pop    %esi
+ 4f8:	5f                   	pop    %edi
+ 4f9:	5d                   	pop    %ebp
+ 4fa:	c3                   	ret    
+ 4fb:	90                   	nop
+ 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 50d:	89 f8                	mov    %edi,%eax
+ 50f:	8b 13                	mov    (%ebx),%edx
+ 511:	e8 6a fe ff ff       	call   380 <printint>
+        ap++;
+ 516:	89 d8                	mov    %ebx,%eax
+ 518:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 51b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 523:	e9 4d ff ff ff       	jmp    475 <printf+0x55>
+ 528:	90                   	nop
+ 529:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 530:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 533:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 535:	83 c0 04             	add    $0x4,%eax
+ 538:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 53b:	b8 7c 07 00 00       	mov    $0x77c,%eax
+ 540:	85 db                	test   %ebx,%ebx
+ 542:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 545:	0f b6 03             	movzbl (%ebx),%eax
+ 548:	84 c0                	test   %al,%al
+ 54a:	74 23                	je     56f <printf+0x14f>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 550:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 553:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 556:	83 ec 04             	sub    $0x4,%esp
+ 559:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 55b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 55e:	50                   	push   %eax
+ 55f:	57                   	push   %edi
+ 560:	e8 7d fd ff ff       	call   2e2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 565:	0f b6 03             	movzbl (%ebx),%eax
+ 568:	83 c4 10             	add    $0x10,%esp
+ 56b:	84 c0                	test   %al,%al
+ 56d:	75 e1                	jne    550 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 ff fe ff ff       	jmp    475 <printf+0x55>
+ 576:	8d 76 00             	lea    0x0(%esi),%esi
+ 579:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 580:	83 ec 04             	sub    $0x4,%esp
+ 583:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 586:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 589:	6a 01                	push   $0x1
+ 58b:	e9 4c ff ff ff       	jmp    4dc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 6b ff ff ff       	jmp    50a <printf+0xea>
+ 59f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5a2:	83 ec 04             	sub    $0x4,%esp
+ 5a5:	8b 03                	mov    (%ebx),%eax
+ 5a7:	6a 01                	push   $0x1
+ 5a9:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 5ac:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 5af:	50                   	push   %eax
+ 5b0:	57                   	push   %edi
+ 5b1:	e8 2c fd ff ff       	call   2e2 <write>
+ 5b6:	e9 5b ff ff ff       	jmp    516 <printf+0xf6>
+ 5bb:	66 90                	xchg   %ax,%ax
+ 5bd:	66 90                	xchg   %ax,%ax
+ 5bf:	90                   	nop
+
+000005c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	a1 24 0a 00 00       	mov    0xa24,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5c6:	89 e5                	mov    %esp,%ebp
+ 5c8:	57                   	push   %edi
+ 5c9:	56                   	push   %esi
+ 5ca:	53                   	push   %ebx
+ 5cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ce:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 5d0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d3:	39 c8                	cmp    %ecx,%eax
+ 5d5:	73 19                	jae    5f0 <free+0x30>
+ 5d7:	89 f6                	mov    %esi,%esi
+ 5d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 5e0:	39 d1                	cmp    %edx,%ecx
+ 5e2:	72 1c                	jb     600 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5e4:	39 d0                	cmp    %edx,%eax
+ 5e6:	73 18                	jae    600 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ea:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5ec:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5ee:	72 f0                	jb     5e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f0:	39 d0                	cmp    %edx,%eax
+ 5f2:	72 f4                	jb     5e8 <free+0x28>
+ 5f4:	39 d1                	cmp    %edx,%ecx
+ 5f6:	73 f0                	jae    5e8 <free+0x28>
+ 5f8:	90                   	nop
+ 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 600:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 603:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 606:	39 d7                	cmp    %edx,%edi
+ 608:	74 19                	je     623 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 60a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 60d:	8b 50 04             	mov    0x4(%eax),%edx
+ 610:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 613:	39 f1                	cmp    %esi,%ecx
+ 615:	74 23                	je     63a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 617:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 619:	a3 24 0a 00 00       	mov    %eax,0xa24
+}
+ 61e:	5b                   	pop    %ebx
+ 61f:	5e                   	pop    %esi
+ 620:	5f                   	pop    %edi
+ 621:	5d                   	pop    %ebp
+ 622:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 623:	03 72 04             	add    0x4(%edx),%esi
+ 626:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 629:	8b 10                	mov    (%eax),%edx
+ 62b:	8b 12                	mov    (%edx),%edx
+ 62d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 630:	8b 50 04             	mov    0x4(%eax),%edx
+ 633:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 636:	39 f1                	cmp    %esi,%ecx
+ 638:	75 dd                	jne    617 <free+0x57>
+    p->s.size += bp->s.size;
+ 63a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 63d:	a3 24 0a 00 00       	mov    %eax,0xa24
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 642:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 645:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 648:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 64a:	5b                   	pop    %ebx
+ 64b:	5e                   	pop    %esi
+ 64c:	5f                   	pop    %edi
+ 64d:	5d                   	pop    %ebp
+ 64e:	c3                   	ret    
+ 64f:	90                   	nop
+
+00000650 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 650:	55                   	push   %ebp
+ 651:	89 e5                	mov    %esp,%ebp
+ 653:	57                   	push   %edi
+ 654:	56                   	push   %esi
+ 655:	53                   	push   %ebx
+ 656:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 659:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 65c:	8b 15 24 0a 00 00    	mov    0xa24,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 662:	8d 78 07             	lea    0x7(%eax),%edi
+ 665:	c1 ef 03             	shr    $0x3,%edi
+ 668:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 66b:	85 d2                	test   %edx,%edx
+ 66d:	0f 84 a3 00 00 00    	je     716 <malloc+0xc6>
+ 673:	8b 02                	mov    (%edx),%eax
+ 675:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 678:	39 cf                	cmp    %ecx,%edi
+ 67a:	76 74                	jbe    6f0 <malloc+0xa0>
+ 67c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 682:	be 00 10 00 00       	mov    $0x1000,%esi
+ 687:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 68e:	0f 43 f7             	cmovae %edi,%esi
+ 691:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 696:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 69c:	0f 46 da             	cmovbe %edx,%ebx
+ 69f:	eb 10                	jmp    6b1 <malloc+0x61>
+ 6a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 cf                	cmp    %ecx,%edi
+ 6af:	76 3f                	jbe    6f0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	39 05 24 0a 00 00    	cmp    %eax,0xa24
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	75 ed                	jne    6a8 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 6bb:	83 ec 0c             	sub    $0xc,%esp
+ 6be:	53                   	push   %ebx
+ 6bf:	e8 86 fc ff ff       	call   34a <sbrk>
+  if(p == (char*)-1)
+ 6c4:	83 c4 10             	add    $0x10,%esp
+ 6c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ca:	74 1c                	je     6e8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 6cc:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 6cf:	83 ec 0c             	sub    $0xc,%esp
+ 6d2:	83 c0 08             	add    $0x8,%eax
+ 6d5:	50                   	push   %eax
+ 6d6:	e8 e5 fe ff ff       	call   5c0 <free>
+  return freep;
+ 6db:	8b 15 24 0a 00 00    	mov    0xa24,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 6e1:	83 c4 10             	add    $0x10,%esp
+ 6e4:	85 d2                	test   %edx,%edx
+ 6e6:	75 c0                	jne    6a8 <malloc+0x58>
+        return 0;
+ 6e8:	31 c0                	xor    %eax,%eax
+ 6ea:	eb 1c                	jmp    708 <malloc+0xb8>
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6f0:	39 cf                	cmp    %ecx,%edi
+ 6f2:	74 1c                	je     710 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6f4:	29 f9                	sub    %edi,%ecx
+ 6f6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6fc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6ff:	89 15 24 0a 00 00    	mov    %edx,0xa24
+      return (void*)(p + 1);
+ 705:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 708:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 70b:	5b                   	pop    %ebx
+ 70c:	5e                   	pop    %esi
+ 70d:	5f                   	pop    %edi
+ 70e:	5d                   	pop    %ebp
+ 70f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 710:	8b 08                	mov    (%eax),%ecx
+ 712:	89 0a                	mov    %ecx,(%edx)
+ 714:	eb e9                	jmp    6ff <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 716:	c7 05 24 0a 00 00 28 	movl   $0xa28,0xa24
+ 71d:	0a 00 00 
+ 720:	c7 05 28 0a 00 00 28 	movl   $0xa28,0xa28
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	b8 28 0a 00 00       	mov    $0xa28,%eax
+ 72f:	c7 05 2c 0a 00 00 00 	movl   $0x0,0xa2c
+ 736:	00 00 00 
+ 739:	e9 3e ff ff ff       	jmp    67c <malloc+0x2c>
diff -ruN ./xv6-public-src/test_count_for.c ./xv6-public/test_count_for.c
--- ./xv6-public-src/test_count_for.c	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count_for.c	2019-11-27 22:15:03.266090208 +0200
@@ -0,0 +1,21 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+char buf[2];
+
+int
+main(int argc, char *argv[])
+{
+  int fd;
+  if((fd = open("cat", 0)) < 0){
+      printf(1, "readcount_test_for: cannot open cat\n");
+      exit();
+  }
+  // Read exactly 100 times.
+  for (int i = 0; i < 1000; i++) {
+    read(fd, buf, sizeof(buf));
+  }
+  printf(1, "Readcount: %d\n", readcount());
+  exit();
+}
diff -ruN ./xv6-public-src/test_count_for.d ./xv6-public/test_count_for.d
--- ./xv6-public-src/test_count_for.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count_for.d	2019-11-28 17:52:28.968381084 +0200
@@ -0,0 +1,2 @@
+test_count_for.o: test_count_for.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h
Binary files ./xv6-public-src/test_count_for.o and ./xv6-public/test_count_for.o differ
diff -ruN ./xv6-public-src/test_count_for.sym ./xv6-public/test_count_for.sym
--- ./xv6-public-src/test_count_for.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count_for.sym	2019-11-28 17:52:29.008405736 +0200
@@ -0,0 +1,60 @@
+00000000 .text
+00000740 .rodata
+00000798 .eh_frame
+00000a24 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_count_for.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+00000784 digits.1111
+00000000 umalloc.c
+00000a24 freep
+00000a28 base
+00000080 strcpy
+00000420 printf
+00000290 memmove
+0000030a mknod
+00000190 gets
+00000342 getpid
+00000650 malloc
+00000352 sleep
+00000362 readcount
+0000036a callcount
+000002d2 pipe
+000002e2 write
+0000031a fstat
+000002f2 kill
+00000332 chdir
+000002fa exec
+000002ca wait
+000002da read
+00000312 unlink
+000002ba fork
+0000034a sbrk
+0000035a uptime
+00000a24 __bss_start
+00000130 memset
+00000000 main
+000000b0 strcmp
+0000033a dup
+00000a30 buf
+00000200 stat
+00000a24 _edata
+00000a34 _end
+00000322 link
+000002c2 exit
+00000250 atoi
+00000100 strlen
+00000302 open
+00000150 strchr
+0000032a mkdir
+000002ea close
+000005c0 free
Binary files ./xv6-public-src/test_count.o and ./xv6-public/test_count.o differ
diff -ruN ./xv6-public-src/test_count.sym ./xv6-public/test_count.sym
--- ./xv6-public-src/test_count.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/test_count.sym	2019-11-28 17:52:28.956373681 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+000006f0 .rodata
+0000071c .eh_frame
+000009a0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 test_count.c
+00000000 ulib.c
+00000000 printf.c
+00000330 printint
+00000708 digits.1111
+00000000 umalloc.c
+000009a0 freep
+000009a4 base
+00000030 strcpy
+000003d0 printf
+00000240 memmove
+000002ba mknod
+00000140 gets
+000002f2 getpid
+00000600 malloc
+00000302 sleep
+00000312 readcount
+0000031a callcount
+00000282 pipe
+00000292 write
+000002ca fstat
+000002a2 kill
+000002e2 chdir
+000002aa exec
+0000027a wait
+0000028a read
+000002c2 unlink
+0000026a fork
+000002fa sbrk
+0000030a uptime
+000009a0 __bss_start
+000000e0 memset
+00000000 main
+00000060 strcmp
+000002ea dup
+000001b0 stat
+000009a0 _edata
+000009ac _end
+000002d2 link
+00000272 exit
+00000200 atoi
+000000b0 strlen
+000002b2 open
+00000100 strchr
+000002da mkdir
+0000029a close
+00000570 free
Binary files ./xv6-public-src/trapasm.o and ./xv6-public/trapasm.o differ
diff -ruN ./xv6-public-src/trap.d ./xv6-public/trap.d
--- ./xv6-public-src/trap.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/trap.d	2019-11-28 17:52:47.038996169 +0200
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files ./xv6-public-src/trap.o and ./xv6-public/trap.o differ
diff -ruN ./xv6-public-src/uart.d ./xv6-public/uart.d
--- ./xv6-public-src/uart.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/uart.d	2019-11-28 17:52:47.071014216 +0200
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files ./xv6-public-src/uart.o and ./xv6-public/uart.o differ
diff -ruN ./xv6-public-src/ulib.d ./xv6-public/ulib.d
--- ./xv6-public-src/ulib.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/ulib.d	2019-11-28 17:52:27.835682101 +0200
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files ./xv6-public-src/ulib.o and ./xv6-public/ulib.o differ
diff -ruN ./xv6-public-src/umalloc.d ./xv6-public/umalloc.d
--- ./xv6-public-src/umalloc.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/umalloc.d	2019-11-28 17:52:27.907726793 +0200
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files ./xv6-public-src/umalloc.o and ./xv6-public/umalloc.o differ
diff -ruN ./xv6-public-src/user.h ./xv6-public/user.h
--- ./xv6-public-src/user.h	2019-11-27 20:42:25.954688000 +0200
+++ ./xv6-public/user.h	2019-11-27 23:48:56.673168283 +0200
@@ -23,6 +23,8 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int readcount(void);
+int callcount(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
Binary files ./xv6-public-src/_usertests and ./xv6-public/_usertests differ
diff -ruN ./xv6-public-src/usertests.asm ./xv6-public/usertests.asm
--- ./xv6-public-src/usertests.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/usertests.asm	2019-11-28 17:52:28.824292249 +0200
@@ -0,0 +1,9906 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	pushl  -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 0e 4d 00 00       	push   $0x4d0e
+      16:	6a 01                	push   $0x1
+      18:	e8 e3 39 00 00       	call   3a00 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	5a                   	pop    %edx
+      1e:	59                   	pop    %ecx
+      1f:	6a 00                	push   $0x0
+      21:	68 22 4d 00 00       	push   $0x4d22
+      26:	e8 b7 38 00 00       	call   38e2 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 14                	js     46 <main+0x46>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	83 ec 08             	sub    $0x8,%esp
+      35:	68 8c 54 00 00       	push   $0x548c
+      3a:	6a 01                	push   $0x1
+      3c:	e8 bf 39 00 00       	call   3a00 <printf>
+    exit();
+      41:	e8 5c 38 00 00       	call   38a2 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      46:	50                   	push   %eax
+      47:	50                   	push   %eax
+      48:	68 00 02 00 00       	push   $0x200
+      4d:	68 22 4d 00 00       	push   $0x4d22
+      52:	e8 8b 38 00 00       	call   38e2 <open>
+      57:	89 04 24             	mov    %eax,(%esp)
+      5a:	e8 6b 38 00 00       	call   38ca <close>
+
+  argptest();
+      5f:	e8 6c 35 00 00       	call   35d0 <argptest>
+  createdelete();
+      64:	e8 87 11 00 00       	call   11f0 <createdelete>
+  linkunlink();
+      69:	e8 42 1a 00 00       	call   1ab0 <linkunlink>
+  concreate();
+      6e:	e8 2d 17 00 00       	call   17a0 <concreate>
+  fourfiles();
+      73:	e8 88 0f 00 00       	call   1000 <fourfiles>
+  sharedfd();
+      78:	e8 c3 0d 00 00       	call   e40 <sharedfd>
+
+  bigargtest();
+      7d:	e8 ee 31 00 00       	call   3270 <bigargtest>
+  bigwrite();
+      82:	e8 49 23 00 00       	call   23d0 <bigwrite>
+  bigargtest();
+      87:	e8 e4 31 00 00       	call   3270 <bigargtest>
+  bsstest();
+      8c:	e8 6f 31 00 00       	call   3200 <bsstest>
+  sbrktest();
+      91:	e8 8a 2c 00 00       	call   2d20 <sbrktest>
+  validatetest();
+      96:	e8 b5 30 00 00       	call   3150 <validatetest>
+
+  opentest();
+      9b:	e8 50 03 00 00       	call   3f0 <opentest>
+  writetest();
+      a0:	e8 db 03 00 00       	call   480 <writetest>
+  writetest1();
+      a5:	e8 b6 05 00 00       	call   660 <writetest1>
+  createtest();
+      aa:	e8 81 07 00 00       	call   830 <createtest>
+
+  openiputtest();
+      af:	e8 3c 02 00 00       	call   2f0 <openiputtest>
+  exitiputtest();
+      b4:	e8 47 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b9:	e8 62 00 00 00       	call   120 <iputtest>
+
+  mem();
+      be:	e8 ad 0c 00 00       	call   d70 <mem>
+  pipe1();
+      c3:	e8 48 09 00 00       	call   a10 <pipe1>
+  preempt();
+      c8:	e8 d3 0a 00 00       	call   ba0 <preempt>
+  exitwait();
+      cd:	e8 0e 0c 00 00       	call   ce0 <exitwait>
+
+  rmdot();
+      d2:	e8 e9 26 00 00       	call   27c0 <rmdot>
+  fourteen();
+      d7:	e8 a4 25 00 00       	call   2680 <fourteen>
+  bigfile();
+      dc:	e8 cf 23 00 00       	call   24b0 <bigfile>
+  subdir();
+      e1:	e8 0a 1c 00 00       	call   1cf0 <subdir>
+  linktest();
+      e6:	e8 a5 14 00 00       	call   1590 <linktest>
+  unlinkread();
+      eb:	e8 10 13 00 00       	call   1400 <unlinkread>
+  dirfile();
+      f0:	e8 4b 28 00 00       	call   2940 <dirfile>
+  iref();
+      f5:	e8 46 2a 00 00       	call   2b40 <iref>
+  forktest();
+      fa:	e8 61 2b 00 00       	call   2c60 <forktest>
+  bigdir(); // slow
+      ff:	e8 bc 1a 00 00       	call   1bc0 <bigdir>
+
+  uio();
+     104:	e8 57 34 00 00       	call   3560 <uio>
+
+  exectest();
+     109:	e8 b2 08 00 00       	call   9c0 <exectest>
+
+  exit();
+     10e:	e8 8f 37 00 00       	call   38a2 <exit>
+     113:	66 90                	xchg   %ax,%ax
+     115:	66 90                	xchg   %ax,%ax
+     117:	66 90                	xchg   %ax,%ax
+     119:	66 90                	xchg   %ax,%ax
+     11b:	66 90                	xchg   %ax,%ax
+     11d:	66 90                	xchg   %ax,%ax
+     11f:	90                   	nop
+
+00000120 <iputtest>:
+int stdout = 1;
+
+// does chdir() call iput(p->cwd) in a transaction?
+void
+iputtest(void)
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 b4 3d 00 00       	push   $0x3db4
+     12b:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     131:	e8 ca 38 00 00       	call   3a00 <printf>
+
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 47 3d 00 00 	movl   $0x3d47,(%esp)
+     13d:	e8 c8 37 00 00       	call   390a <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+    printf(stdout, "mkdir failed\n");
+    exit();
+  }
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 47 3d 00 00       	push   $0x3d47
+     151:	e8 bc 37 00 00       	call   3912 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+    printf(stdout, "chdir iputdir failed\n");
+    exit();
+  }
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 44 3d 00 00       	push   $0x3d44
+     169:	e8 84 37 00 00       	call   38f2 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+    printf(stdout, "unlink ../iputdir failed\n");
+    exit();
+  }
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 69 3d 00 00       	push   $0x3d69
+     17d:	e8 90 37 00 00       	call   3912 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+    printf(stdout, "chdir / failed\n");
+    exit();
+  }
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 ec 3d 00 00       	push   $0x3dec
+     191:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     197:	e8 64 38 00 00       	call   3a00 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+iputtest(void)
+{
+  printf(stdout, "iput test\n");
+
+  if(mkdir("iputdir") < 0){
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 20 3d 00 00       	push   $0x3d20
+     1a8:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     1ae:	e8 4d 38 00 00       	call   3a00 <printf>
+    exit();
+     1b3:	e8 ea 36 00 00       	call   38a2 <exit>
+  if(unlink("../iputdir") < 0){
+    printf(stdout, "unlink ../iputdir failed\n");
+    exit();
+  }
+  if(chdir("/") < 0){
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 6b 3d 00 00       	push   $0x3d6b
+     1bf:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     1c5:	e8 36 38 00 00       	call   3a00 <printf>
+    exit();
+     1ca:	e8 d3 36 00 00       	call   38a2 <exit>
+  if(chdir("iputdir") < 0){
+    printf(stdout, "chdir iputdir failed\n");
+    exit();
+  }
+  if(unlink("../iputdir") < 0){
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 4f 3d 00 00       	push   $0x3d4f
+     1d6:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     1dc:	e8 1f 38 00 00       	call   3a00 <printf>
+    exit();
+     1e1:	e8 bc 36 00 00       	call   38a2 <exit>
+  if(mkdir("iputdir") < 0){
+    printf(stdout, "mkdir failed\n");
+    exit();
+  }
+  if(chdir("iputdir") < 0){
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 2e 3d 00 00       	push   $0x3d2e
+     1ed:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     1f3:	e8 08 38 00 00       	call   3a00 <printf>
+    exit();
+     1f8:	e8 a5 36 00 00       	call   38a2 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+}
+
+// does exit() call iput(p->cwd) in a transaction?
+void
+exitiputtest(void)
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  int pid;
+
+  printf(stdout, "exitiput test\n");
+     206:	68 7b 3d 00 00       	push   $0x3d7b
+     20b:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     211:	e8 ea 37 00 00       	call   3a00 <printf>
+
+  pid = fork();
+     216:	e8 7f 36 00 00       	call   389a <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 82 00 00 00    	js     2a8 <exitiputtest+0xa8>
+    printf(stdout, "fork failed\n");
+    exit();
+  }
+  if(pid == 0){
+     226:	75 48                	jne    270 <exitiputtest+0x70>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 47 3d 00 00       	push   $0x3d47
+     230:	e8 d5 36 00 00       	call   390a <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 96 00 00 00    	js     2d6 <exitiputtest+0xd6>
+      printf(stdout, "mkdir failed\n");
+      exit();
+    }
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 47 3d 00 00       	push   $0x3d47
+     248:	e8 c5 36 00 00       	call   3912 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	78 6b                	js     2bf <exitiputtest+0xbf>
+      printf(stdout, "child chdir failed\n");
+      exit();
+    }
+    if(unlink("../iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 44 3d 00 00       	push   $0x3d44
+     25c:	e8 91 36 00 00       	call   38f2 <unlink>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	78 28                	js     290 <exitiputtest+0x90>
+      printf(stdout, "unlink ../iputdir failed\n");
+      exit();
+    }
+    exit();
+     268:	e8 35 36 00 00       	call   38a2 <exit>
+     26d:	8d 76 00             	lea    0x0(%esi),%esi
+  }
+  wait();
+     270:	e8 35 36 00 00       	call   38aa <wait>
+  printf(stdout, "exitiput test ok\n");
+     275:	83 ec 08             	sub    $0x8,%esp
+     278:	68 9e 3d 00 00       	push   $0x3d9e
+     27d:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     283:	e8 78 37 00 00       	call   3a00 <printf>
+}
+     288:	83 c4 10             	add    $0x10,%esp
+     28b:	c9                   	leave  
+     28c:	c3                   	ret    
+     28d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(chdir("iputdir") < 0){
+      printf(stdout, "child chdir failed\n");
+      exit();
+    }
+    if(unlink("../iputdir") < 0){
+      printf(stdout, "unlink ../iputdir failed\n");
+     290:	83 ec 08             	sub    $0x8,%esp
+     293:	68 4f 3d 00 00       	push   $0x3d4f
+     298:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     29e:	e8 5d 37 00 00       	call   3a00 <printf>
+      exit();
+     2a3:	e8 fa 35 00 00       	call   38a2 <exit>
+
+  printf(stdout, "exitiput test\n");
+
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "fork failed\n");
+     2a8:	51                   	push   %ecx
+     2a9:	51                   	push   %ecx
+     2aa:	68 61 4c 00 00       	push   $0x4c61
+     2af:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     2b5:	e8 46 37 00 00       	call   3a00 <printf>
+    exit();
+     2ba:	e8 e3 35 00 00       	call   38a2 <exit>
+    if(mkdir("iputdir") < 0){
+      printf(stdout, "mkdir failed\n");
+      exit();
+    }
+    if(chdir("iputdir") < 0){
+      printf(stdout, "child chdir failed\n");
+     2bf:	50                   	push   %eax
+     2c0:	50                   	push   %eax
+     2c1:	68 8a 3d 00 00       	push   $0x3d8a
+     2c6:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     2cc:	e8 2f 37 00 00       	call   3a00 <printf>
+      exit();
+     2d1:	e8 cc 35 00 00       	call   38a2 <exit>
+    printf(stdout, "fork failed\n");
+    exit();
+  }
+  if(pid == 0){
+    if(mkdir("iputdir") < 0){
+      printf(stdout, "mkdir failed\n");
+     2d6:	52                   	push   %edx
+     2d7:	52                   	push   %edx
+     2d8:	68 20 3d 00 00       	push   $0x3d20
+     2dd:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     2e3:	e8 18 37 00 00       	call   3a00 <printf>
+      exit();
+     2e8:	e8 b5 35 00 00       	call   38a2 <exit>
+     2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <openiputtest>:
+//      for(i = 0; i < 10000; i++)
+//        yield();
+//    }
+void
+openiputtest(void)
+{
+     2f0:	55                   	push   %ebp
+     2f1:	89 e5                	mov    %esp,%ebp
+     2f3:	83 ec 10             	sub    $0x10,%esp
+  int pid;
+
+  printf(stdout, "openiput test\n");
+     2f6:	68 b0 3d 00 00       	push   $0x3db0
+     2fb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     301:	e8 fa 36 00 00       	call   3a00 <printf>
+  if(mkdir("oidir") < 0){
+     306:	c7 04 24 bf 3d 00 00 	movl   $0x3dbf,(%esp)
+     30d:	e8 f8 35 00 00       	call   390a <mkdir>
+     312:	83 c4 10             	add    $0x10,%esp
+     315:	85 c0                	test   %eax,%eax
+     317:	0f 88 88 00 00 00    	js     3a5 <openiputtest+0xb5>
+    printf(stdout, "mkdir oidir failed\n");
+    exit();
+  }
+  pid = fork();
+     31d:	e8 78 35 00 00       	call   389a <fork>
+  if(pid < 0){
+     322:	85 c0                	test   %eax,%eax
+     324:	0f 88 92 00 00 00    	js     3bc <openiputtest+0xcc>
+    printf(stdout, "fork failed\n");
+    exit();
+  }
+  if(pid == 0){
+     32a:	75 34                	jne    360 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     32c:	83 ec 08             	sub    $0x8,%esp
+     32f:	6a 02                	push   $0x2
+     331:	68 bf 3d 00 00       	push   $0x3dbf
+     336:	e8 a7 35 00 00       	call   38e2 <open>
+    if(fd >= 0){
+     33b:	83 c4 10             	add    $0x10,%esp
+     33e:	85 c0                	test   %eax,%eax
+     340:	78 5e                	js     3a0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     342:	83 ec 08             	sub    $0x8,%esp
+     345:	68 44 4d 00 00       	push   $0x4d44
+     34a:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     350:	e8 ab 36 00 00       	call   3a00 <printf>
+      exit();
+     355:	e8 48 35 00 00       	call   38a2 <exit>
+     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    }
+    exit();
+  }
+  sleep(1);
+     360:	83 ec 0c             	sub    $0xc,%esp
+     363:	6a 01                	push   $0x1
+     365:	e8 c8 35 00 00       	call   3932 <sleep>
+  if(unlink("oidir") != 0){
+     36a:	c7 04 24 bf 3d 00 00 	movl   $0x3dbf,(%esp)
+     371:	e8 7c 35 00 00       	call   38f2 <unlink>
+     376:	83 c4 10             	add    $0x10,%esp
+     379:	85 c0                	test   %eax,%eax
+     37b:	75 56                	jne    3d3 <openiputtest+0xe3>
+    printf(stdout, "unlink failed\n");
+    exit();
+  }
+  wait();
+     37d:	e8 28 35 00 00       	call   38aa <wait>
+  printf(stdout, "openiput test ok\n");
+     382:	83 ec 08             	sub    $0x8,%esp
+     385:	68 e8 3d 00 00       	push   $0x3de8
+     38a:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     390:	e8 6b 36 00 00       	call   3a00 <printf>
+     395:	83 c4 10             	add    $0x10,%esp
+}
+     398:	c9                   	leave  
+     399:	c3                   	ret    
+     39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    int fd = open("oidir", O_RDWR);
+    if(fd >= 0){
+      printf(stdout, "open directory for write succeeded\n");
+      exit();
+    }
+    exit();
+     3a0:	e8 fd 34 00 00       	call   38a2 <exit>
+{
+  int pid;
+
+  printf(stdout, "openiput test\n");
+  if(mkdir("oidir") < 0){
+    printf(stdout, "mkdir oidir failed\n");
+     3a5:	51                   	push   %ecx
+     3a6:	51                   	push   %ecx
+     3a7:	68 c5 3d 00 00       	push   $0x3dc5
+     3ac:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     3b2:	e8 49 36 00 00       	call   3a00 <printf>
+    exit();
+     3b7:	e8 e6 34 00 00       	call   38a2 <exit>
+  }
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "fork failed\n");
+     3bc:	52                   	push   %edx
+     3bd:	52                   	push   %edx
+     3be:	68 61 4c 00 00       	push   $0x4c61
+     3c3:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     3c9:	e8 32 36 00 00       	call   3a00 <printf>
+    exit();
+     3ce:	e8 cf 34 00 00       	call   38a2 <exit>
+    }
+    exit();
+  }
+  sleep(1);
+  if(unlink("oidir") != 0){
+    printf(stdout, "unlink failed\n");
+     3d3:	50                   	push   %eax
+     3d4:	50                   	push   %eax
+     3d5:	68 d9 3d 00 00       	push   $0x3dd9
+     3da:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     3e0:	e8 1b 36 00 00       	call   3a00 <printf>
+    exit();
+     3e5:	e8 b8 34 00 00       	call   38a2 <exit>
+     3ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003f0 <opentest>:
+
+// simple file system tests
+
+void
+opentest(void)
+{
+     3f0:	55                   	push   %ebp
+     3f1:	89 e5                	mov    %esp,%ebp
+     3f3:	83 ec 10             	sub    $0x10,%esp
+  int fd;
+
+  printf(stdout, "open test\n");
+     3f6:	68 fa 3d 00 00       	push   $0x3dfa
+     3fb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     401:	e8 fa 35 00 00       	call   3a00 <printf>
+  fd = open("echo", 0);
+     406:	58                   	pop    %eax
+     407:	5a                   	pop    %edx
+     408:	6a 00                	push   $0x0
+     40a:	68 05 3e 00 00       	push   $0x3e05
+     40f:	e8 ce 34 00 00       	call   38e2 <open>
+  if(fd < 0){
+     414:	83 c4 10             	add    $0x10,%esp
+     417:	85 c0                	test   %eax,%eax
+     419:	78 36                	js     451 <opentest+0x61>
+    printf(stdout, "open echo failed!\n");
+    exit();
+  }
+  close(fd);
+     41b:	83 ec 0c             	sub    $0xc,%esp
+     41e:	50                   	push   %eax
+     41f:	e8 a6 34 00 00       	call   38ca <close>
+  fd = open("doesnotexist", 0);
+     424:	5a                   	pop    %edx
+     425:	59                   	pop    %ecx
+     426:	6a 00                	push   $0x0
+     428:	68 1d 3e 00 00       	push   $0x3e1d
+     42d:	e8 b0 34 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     432:	83 c4 10             	add    $0x10,%esp
+     435:	85 c0                	test   %eax,%eax
+     437:	79 2f                	jns    468 <opentest+0x78>
+    printf(stdout, "open doesnotexist succeeded!\n");
+    exit();
+  }
+  printf(stdout, "open test ok\n");
+     439:	83 ec 08             	sub    $0x8,%esp
+     43c:	68 48 3e 00 00       	push   $0x3e48
+     441:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     447:	e8 b4 35 00 00       	call   3a00 <printf>
+}
+     44c:	83 c4 10             	add    $0x10,%esp
+     44f:	c9                   	leave  
+     450:	c3                   	ret    
+  int fd;
+
+  printf(stdout, "open test\n");
+  fd = open("echo", 0);
+  if(fd < 0){
+    printf(stdout, "open echo failed!\n");
+     451:	50                   	push   %eax
+     452:	50                   	push   %eax
+     453:	68 0a 3e 00 00       	push   $0x3e0a
+     458:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     45e:	e8 9d 35 00 00       	call   3a00 <printf>
+    exit();
+     463:	e8 3a 34 00 00       	call   38a2 <exit>
+  }
+  close(fd);
+  fd = open("doesnotexist", 0);
+  if(fd >= 0){
+    printf(stdout, "open doesnotexist succeeded!\n");
+     468:	50                   	push   %eax
+     469:	50                   	push   %eax
+     46a:	68 2a 3e 00 00       	push   $0x3e2a
+     46f:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     475:	e8 86 35 00 00       	call   3a00 <printf>
+    exit();
+     47a:	e8 23 34 00 00       	call   38a2 <exit>
+     47f:	90                   	nop
+
+00000480 <writetest>:
+  printf(stdout, "open test ok\n");
+}
+
+void
+writetest(void)
+{
+     480:	55                   	push   %ebp
+     481:	89 e5                	mov    %esp,%ebp
+     483:	56                   	push   %esi
+     484:	53                   	push   %ebx
+  int fd;
+  int i;
+
+  printf(stdout, "small file test\n");
+     485:	83 ec 08             	sub    $0x8,%esp
+     488:	68 56 3e 00 00       	push   $0x3e56
+     48d:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     493:	e8 68 35 00 00       	call   3a00 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     498:	59                   	pop    %ecx
+     499:	5b                   	pop    %ebx
+     49a:	68 02 02 00 00       	push   $0x202
+     49f:	68 67 3e 00 00       	push   $0x3e67
+     4a4:	e8 39 34 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     4a9:	83 c4 10             	add    $0x10,%esp
+     4ac:	85 c0                	test   %eax,%eax
+     4ae:	0f 88 8b 01 00 00    	js     63f <writetest+0x1bf>
+    printf(stdout, "creat small succeeded; ok\n");
+     4b4:	83 ec 08             	sub    $0x8,%esp
+     4b7:	89 c6                	mov    %eax,%esi
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+     4b9:	31 db                	xor    %ebx,%ebx
+  int i;
+
+  printf(stdout, "small file test\n");
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd >= 0){
+    printf(stdout, "creat small succeeded; ok\n");
+     4bb:	68 6d 3e 00 00       	push   $0x3e6d
+     4c0:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     4c6:	e8 35 35 00 00       	call   3a00 <printf>
+     4cb:	83 c4 10             	add    $0x10,%esp
+     4ce:	66 90                	xchg   %ax,%ax
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4d0:	83 ec 04             	sub    $0x4,%esp
+     4d3:	6a 0a                	push   $0xa
+     4d5:	68 a4 3e 00 00       	push   $0x3ea4
+     4da:	56                   	push   %esi
+     4db:	e8 e2 33 00 00       	call   38c2 <write>
+     4e0:	83 c4 10             	add    $0x10,%esp
+     4e3:	83 f8 0a             	cmp    $0xa,%eax
+     4e6:	0f 85 d9 00 00 00    	jne    5c5 <writetest+0x145>
+      printf(stdout, "error: write aa %d new file failed\n", i);
+      exit();
+    }
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4ec:	83 ec 04             	sub    $0x4,%esp
+     4ef:	6a 0a                	push   $0xa
+     4f1:	68 af 3e 00 00       	push   $0x3eaf
+     4f6:	56                   	push   %esi
+     4f7:	e8 c6 33 00 00       	call   38c2 <write>
+     4fc:	83 c4 10             	add    $0x10,%esp
+     4ff:	83 f8 0a             	cmp    $0xa,%eax
+     502:	0f 85 d6 00 00 00    	jne    5de <writetest+0x15e>
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+     508:	83 c3 01             	add    $0x1,%ebx
+     50b:	83 fb 64             	cmp    $0x64,%ebx
+     50e:	75 c0                	jne    4d0 <writetest+0x50>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+      printf(stdout, "error: write bb %d new file failed\n", i);
+      exit();
+    }
+  }
+  printf(stdout, "writes ok\n");
+     510:	83 ec 08             	sub    $0x8,%esp
+     513:	68 ba 3e 00 00       	push   $0x3eba
+     518:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     51e:	e8 dd 34 00 00       	call   3a00 <printf>
+  close(fd);
+     523:	89 34 24             	mov    %esi,(%esp)
+     526:	e8 9f 33 00 00       	call   38ca <close>
+  fd = open("small", O_RDONLY);
+     52b:	58                   	pop    %eax
+     52c:	5a                   	pop    %edx
+     52d:	6a 00                	push   $0x0
+     52f:	68 67 3e 00 00       	push   $0x3e67
+     534:	e8 a9 33 00 00       	call   38e2 <open>
+  if(fd >= 0){
+     539:	83 c4 10             	add    $0x10,%esp
+     53c:	85 c0                	test   %eax,%eax
+      exit();
+    }
+  }
+  printf(stdout, "writes ok\n");
+  close(fd);
+  fd = open("small", O_RDONLY);
+     53e:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     540:	0f 88 b1 00 00 00    	js     5f7 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     546:	83 ec 08             	sub    $0x8,%esp
+     549:	68 c5 3e 00 00       	push   $0x3ec5
+     54e:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     554:	e8 a7 34 00 00       	call   3a00 <printf>
+  } else {
+    printf(stdout, "error: open small failed!\n");
+    exit();
+  }
+  i = read(fd, buf, 2000);
+     559:	83 c4 0c             	add    $0xc,%esp
+     55c:	68 d0 07 00 00       	push   $0x7d0
+     561:	68 a0 85 00 00       	push   $0x85a0
+     566:	53                   	push   %ebx
+     567:	e8 4e 33 00 00       	call   38ba <read>
+  if(i == 2000){
+     56c:	83 c4 10             	add    $0x10,%esp
+     56f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     574:	0f 85 95 00 00 00    	jne    60f <writetest+0x18f>
+    printf(stdout, "read succeeded ok\n");
+     57a:	83 ec 08             	sub    $0x8,%esp
+     57d:	68 f9 3e 00 00       	push   $0x3ef9
+     582:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     588:	e8 73 34 00 00       	call   3a00 <printf>
+  } else {
+    printf(stdout, "read failed\n");
+    exit();
+  }
+  close(fd);
+     58d:	89 1c 24             	mov    %ebx,(%esp)
+     590:	e8 35 33 00 00       	call   38ca <close>
+
+  if(unlink("small") < 0){
+     595:	c7 04 24 67 3e 00 00 	movl   $0x3e67,(%esp)
+     59c:	e8 51 33 00 00       	call   38f2 <unlink>
+     5a1:	83 c4 10             	add    $0x10,%esp
+     5a4:	85 c0                	test   %eax,%eax
+     5a6:	78 7f                	js     627 <writetest+0x1a7>
+    printf(stdout, "unlink small failed\n");
+    exit();
+  }
+  printf(stdout, "small file test ok\n");
+     5a8:	83 ec 08             	sub    $0x8,%esp
+     5ab:	68 21 3f 00 00       	push   $0x3f21
+     5b0:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     5b6:	e8 45 34 00 00       	call   3a00 <printf>
+}
+     5bb:	83 c4 10             	add    $0x10,%esp
+     5be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5c1:	5b                   	pop    %ebx
+     5c2:	5e                   	pop    %esi
+     5c3:	5d                   	pop    %ebp
+     5c4:	c3                   	ret    
+    printf(stdout, "error: creat small failed!\n");
+    exit();
+  }
+  for(i = 0; i < 100; i++){
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5c5:	83 ec 04             	sub    $0x4,%esp
+     5c8:	53                   	push   %ebx
+     5c9:	68 68 4d 00 00       	push   $0x4d68
+     5ce:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     5d4:	e8 27 34 00 00       	call   3a00 <printf>
+      exit();
+     5d9:	e8 c4 32 00 00       	call   38a2 <exit>
+    }
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5de:	83 ec 04             	sub    $0x4,%esp
+     5e1:	53                   	push   %ebx
+     5e2:	68 8c 4d 00 00       	push   $0x4d8c
+     5e7:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     5ed:	e8 0e 34 00 00       	call   3a00 <printf>
+      exit();
+     5f2:	e8 ab 32 00 00       	call   38a2 <exit>
+  close(fd);
+  fd = open("small", O_RDONLY);
+  if(fd >= 0){
+    printf(stdout, "open small succeeded ok\n");
+  } else {
+    printf(stdout, "error: open small failed!\n");
+     5f7:	83 ec 08             	sub    $0x8,%esp
+     5fa:	68 de 3e 00 00       	push   $0x3ede
+     5ff:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     605:	e8 f6 33 00 00       	call   3a00 <printf>
+    exit();
+     60a:	e8 93 32 00 00       	call   38a2 <exit>
+  }
+  i = read(fd, buf, 2000);
+  if(i == 2000){
+    printf(stdout, "read succeeded ok\n");
+  } else {
+    printf(stdout, "read failed\n");
+     60f:	83 ec 08             	sub    $0x8,%esp
+     612:	68 25 42 00 00       	push   $0x4225
+     617:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     61d:	e8 de 33 00 00       	call   3a00 <printf>
+    exit();
+     622:	e8 7b 32 00 00       	call   38a2 <exit>
+  }
+  close(fd);
+
+  if(unlink("small") < 0){
+    printf(stdout, "unlink small failed\n");
+     627:	83 ec 08             	sub    $0x8,%esp
+     62a:	68 0c 3f 00 00       	push   $0x3f0c
+     62f:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     635:	e8 c6 33 00 00       	call   3a00 <printf>
+    exit();
+     63a:	e8 63 32 00 00       	call   38a2 <exit>
+  printf(stdout, "small file test\n");
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd >= 0){
+    printf(stdout, "creat small succeeded; ok\n");
+  } else {
+    printf(stdout, "error: creat small failed!\n");
+     63f:	83 ec 08             	sub    $0x8,%esp
+     642:	68 88 3e 00 00       	push   $0x3e88
+     647:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     64d:	e8 ae 33 00 00       	call   3a00 <printf>
+    exit();
+     652:	e8 4b 32 00 00       	call   38a2 <exit>
+     657:	89 f6                	mov    %esi,%esi
+     659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000660 <writetest1>:
+  printf(stdout, "small file test ok\n");
+}
+
+void
+writetest1(void)
+{
+     660:	55                   	push   %ebp
+     661:	89 e5                	mov    %esp,%ebp
+     663:	56                   	push   %esi
+     664:	53                   	push   %ebx
+  int i, fd, n;
+
+  printf(stdout, "big files test\n");
+     665:	83 ec 08             	sub    $0x8,%esp
+     668:	68 35 3f 00 00       	push   $0x3f35
+     66d:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     673:	e8 88 33 00 00       	call   3a00 <printf>
+
+  fd = open("big", O_CREATE|O_RDWR);
+     678:	59                   	pop    %ecx
+     679:	5b                   	pop    %ebx
+     67a:	68 02 02 00 00       	push   $0x202
+     67f:	68 af 3f 00 00       	push   $0x3faf
+     684:	e8 59 32 00 00       	call   38e2 <open>
+  if(fd < 0){
+     689:	83 c4 10             	add    $0x10,%esp
+     68c:	85 c0                	test   %eax,%eax
+     68e:	0f 88 64 01 00 00    	js     7f8 <writetest1+0x198>
+     694:	89 c6                	mov    %eax,%esi
+     696:	31 db                	xor    %ebx,%ebx
+     698:	90                   	nop
+     699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+    ((int*)buf)[0] = i;
+    if(write(fd, buf, 512) != 512){
+     6a0:	83 ec 04             	sub    $0x4,%esp
+    printf(stdout, "error: creat big failed!\n");
+    exit();
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+    ((int*)buf)[0] = i;
+     6a3:	89 1d a0 85 00 00    	mov    %ebx,0x85a0
+    if(write(fd, buf, 512) != 512){
+     6a9:	68 00 02 00 00       	push   $0x200
+     6ae:	68 a0 85 00 00       	push   $0x85a0
+     6b3:	56                   	push   %esi
+     6b4:	e8 09 32 00 00       	call   38c2 <write>
+     6b9:	83 c4 10             	add    $0x10,%esp
+     6bc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6c1:	0f 85 b3 00 00 00    	jne    77a <writetest1+0x11a>
+  if(fd < 0){
+    printf(stdout, "error: creat big failed!\n");
+    exit();
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+     6c7:	83 c3 01             	add    $0x1,%ebx
+     6ca:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6d0:	75 ce                	jne    6a0 <writetest1+0x40>
+      printf(stdout, "error: write big file failed\n", i);
+      exit();
+    }
+  }
+
+  close(fd);
+     6d2:	83 ec 0c             	sub    $0xc,%esp
+     6d5:	56                   	push   %esi
+     6d6:	e8 ef 31 00 00       	call   38ca <close>
+
+  fd = open("big", O_RDONLY);
+     6db:	58                   	pop    %eax
+     6dc:	5a                   	pop    %edx
+     6dd:	6a 00                	push   $0x0
+     6df:	68 af 3f 00 00       	push   $0x3faf
+     6e4:	e8 f9 31 00 00       	call   38e2 <open>
+  if(fd < 0){
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	85 c0                	test   %eax,%eax
+    }
+  }
+
+  close(fd);
+
+  fd = open("big", O_RDONLY);
+     6ee:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+     6f0:	0f 88 ea 00 00 00    	js     7e0 <writetest1+0x180>
+     6f6:	31 db                	xor    %ebx,%ebx
+     6f8:	eb 1d                	jmp    717 <writetest1+0xb7>
+     6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(n == MAXFILE - 1){
+        printf(stdout, "read only %d blocks from big", n);
+        exit();
+      }
+      break;
+    } else if(i != 512){
+     700:	3d 00 02 00 00       	cmp    $0x200,%eax
+     705:	0f 85 9f 00 00 00    	jne    7aa <writetest1+0x14a>
+      printf(stdout, "read failed %d\n", i);
+      exit();
+    }
+    if(((int*)buf)[0] != n){
+     70b:	a1 a0 85 00 00       	mov    0x85a0,%eax
+     710:	39 c3                	cmp    %eax,%ebx
+     712:	75 7f                	jne    793 <writetest1+0x133>
+      printf(stdout, "read content of block %d is %d\n",
+             n, ((int*)buf)[0]);
+      exit();
+    }
+    n++;
+     714:	83 c3 01             	add    $0x1,%ebx
+    exit();
+  }
+
+  n = 0;
+  for(;;){
+    i = read(fd, buf, 512);
+     717:	83 ec 04             	sub    $0x4,%esp
+     71a:	68 00 02 00 00       	push   $0x200
+     71f:	68 a0 85 00 00       	push   $0x85a0
+     724:	56                   	push   %esi
+     725:	e8 90 31 00 00       	call   38ba <read>
+    if(i == 0){
+     72a:	83 c4 10             	add    $0x10,%esp
+     72d:	85 c0                	test   %eax,%eax
+     72f:	75 cf                	jne    700 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     731:	81 fb 8b 00 00 00    	cmp    $0x8b,%ebx
+     737:	0f 84 86 00 00 00    	je     7c3 <writetest1+0x163>
+             n, ((int*)buf)[0]);
+      exit();
+    }
+    n++;
+  }
+  close(fd);
+     73d:	83 ec 0c             	sub    $0xc,%esp
+     740:	56                   	push   %esi
+     741:	e8 84 31 00 00       	call   38ca <close>
+  if(unlink("big") < 0){
+     746:	c7 04 24 af 3f 00 00 	movl   $0x3faf,(%esp)
+     74d:	e8 a0 31 00 00       	call   38f2 <unlink>
+     752:	83 c4 10             	add    $0x10,%esp
+     755:	85 c0                	test   %eax,%eax
+     757:	0f 88 b3 00 00 00    	js     810 <writetest1+0x1b0>
+    printf(stdout, "unlink big failed\n");
+    exit();
+  }
+  printf(stdout, "big files ok\n");
+     75d:	83 ec 08             	sub    $0x8,%esp
+     760:	68 d6 3f 00 00       	push   $0x3fd6
+     765:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     76b:	e8 90 32 00 00       	call   3a00 <printf>
+}
+     770:	83 c4 10             	add    $0x10,%esp
+     773:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     776:	5b                   	pop    %ebx
+     777:	5e                   	pop    %esi
+     778:	5d                   	pop    %ebp
+     779:	c3                   	ret    
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+    ((int*)buf)[0] = i;
+    if(write(fd, buf, 512) != 512){
+      printf(stdout, "error: write big file failed\n", i);
+     77a:	83 ec 04             	sub    $0x4,%esp
+     77d:	53                   	push   %ebx
+     77e:	68 5f 3f 00 00       	push   $0x3f5f
+     783:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     789:	e8 72 32 00 00       	call   3a00 <printf>
+      exit();
+     78e:	e8 0f 31 00 00       	call   38a2 <exit>
+    } else if(i != 512){
+      printf(stdout, "read failed %d\n", i);
+      exit();
+    }
+    if(((int*)buf)[0] != n){
+      printf(stdout, "read content of block %d is %d\n",
+     793:	50                   	push   %eax
+     794:	53                   	push   %ebx
+     795:	68 b0 4d 00 00       	push   $0x4db0
+     79a:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     7a0:	e8 5b 32 00 00       	call   3a00 <printf>
+             n, ((int*)buf)[0]);
+      exit();
+     7a5:	e8 f8 30 00 00       	call   38a2 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+        exit();
+      }
+      break;
+    } else if(i != 512){
+      printf(stdout, "read failed %d\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	50                   	push   %eax
+     7ae:	68 b3 3f 00 00       	push   $0x3fb3
+     7b3:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     7b9:	e8 42 32 00 00       	call   3a00 <printf>
+      exit();
+     7be:	e8 df 30 00 00       	call   38a2 <exit>
+  n = 0;
+  for(;;){
+    i = read(fd, buf, 512);
+    if(i == 0){
+      if(n == MAXFILE - 1){
+        printf(stdout, "read only %d blocks from big", n);
+     7c3:	83 ec 04             	sub    $0x4,%esp
+     7c6:	68 8b 00 00 00       	push   $0x8b
+     7cb:	68 96 3f 00 00       	push   $0x3f96
+     7d0:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     7d6:	e8 25 32 00 00       	call   3a00 <printf>
+        exit();
+     7db:	e8 c2 30 00 00       	call   38a2 <exit>
+
+  close(fd);
+
+  fd = open("big", O_RDONLY);
+  if(fd < 0){
+    printf(stdout, "error: open big failed!\n");
+     7e0:	83 ec 08             	sub    $0x8,%esp
+     7e3:	68 7d 3f 00 00       	push   $0x3f7d
+     7e8:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     7ee:	e8 0d 32 00 00       	call   3a00 <printf>
+    exit();
+     7f3:	e8 aa 30 00 00       	call   38a2 <exit>
+
+  printf(stdout, "big files test\n");
+
+  fd = open("big", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(stdout, "error: creat big failed!\n");
+     7f8:	83 ec 08             	sub    $0x8,%esp
+     7fb:	68 45 3f 00 00       	push   $0x3f45
+     800:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     806:	e8 f5 31 00 00       	call   3a00 <printf>
+    exit();
+     80b:	e8 92 30 00 00       	call   38a2 <exit>
+    }
+    n++;
+  }
+  close(fd);
+  if(unlink("big") < 0){
+    printf(stdout, "unlink big failed\n");
+     810:	83 ec 08             	sub    $0x8,%esp
+     813:	68 c3 3f 00 00       	push   $0x3fc3
+     818:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     81e:	e8 dd 31 00 00       	call   3a00 <printf>
+    exit();
+     823:	e8 7a 30 00 00       	call   38a2 <exit>
+     828:	90                   	nop
+     829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000830 <createtest>:
+  printf(stdout, "big files ok\n");
+}
+
+void
+createtest(void)
+{
+     830:	55                   	push   %ebp
+     831:	89 e5                	mov    %esp,%ebp
+     833:	53                   	push   %ebx
+  int i, fd;
+
+  printf(stdout, "many creates, followed by unlink test\n");
+
+  name[0] = 'a';
+  name[2] = '\0';
+     834:	bb 30 00 00 00       	mov    $0x30,%ebx
+  printf(stdout, "big files ok\n");
+}
+
+void
+createtest(void)
+{
+     839:	83 ec 0c             	sub    $0xc,%esp
+  int i, fd;
+
+  printf(stdout, "many creates, followed by unlink test\n");
+     83c:	68 d0 4d 00 00       	push   $0x4dd0
+     841:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     847:	e8 b4 31 00 00       	call   3a00 <printf>
+
+  name[0] = 'a';
+     84c:	c6 05 a0 a5 00 00 61 	movb   $0x61,0xa5a0
+  name[2] = '\0';
+     853:	c6 05 a2 a5 00 00 00 	movb   $0x0,0xa5a2
+     85a:	83 c4 10             	add    $0x10,%esp
+     85d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+    fd = open(name, O_CREATE|O_RDWR);
+     860:	83 ec 08             	sub    $0x8,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+     863:	88 1d a1 a5 00 00    	mov    %bl,0xa5a1
+     869:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE|O_RDWR);
+     86c:	68 02 02 00 00       	push   $0x202
+     871:	68 a0 a5 00 00       	push   $0xa5a0
+     876:	e8 67 30 00 00       	call   38e2 <open>
+    close(fd);
+     87b:	89 04 24             	mov    %eax,(%esp)
+     87e:	e8 47 30 00 00       	call   38ca <close>
+
+  printf(stdout, "many creates, followed by unlink test\n");
+
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+     883:	83 c4 10             	add    $0x10,%esp
+     886:	80 fb 64             	cmp    $0x64,%bl
+     889:	75 d5                	jne    860 <createtest+0x30>
+    name[1] = '0' + i;
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+     88b:	c6 05 a0 a5 00 00 61 	movb   $0x61,0xa5a0
+  name[2] = '\0';
+     892:	c6 05 a2 a5 00 00 00 	movb   $0x0,0xa5a2
+     899:	bb 30 00 00 00       	mov    $0x30,%ebx
+     89e:	66 90                	xchg   %ax,%ax
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+    unlink(name);
+     8a0:	83 ec 0c             	sub    $0xc,%esp
+    close(fd);
+  }
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+    name[1] = '0' + i;
+     8a3:	88 1d a1 a5 00 00    	mov    %bl,0xa5a1
+     8a9:	83 c3 01             	add    $0x1,%ebx
+    unlink(name);
+     8ac:	68 a0 a5 00 00       	push   $0xa5a0
+     8b1:	e8 3c 30 00 00       	call   38f2 <unlink>
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < 52; i++){
+     8b6:	83 c4 10             	add    $0x10,%esp
+     8b9:	80 fb 64             	cmp    $0x64,%bl
+     8bc:	75 e2                	jne    8a0 <createtest+0x70>
+    name[1] = '0' + i;
+    unlink(name);
+  }
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8be:	83 ec 08             	sub    $0x8,%esp
+     8c1:	68 f8 4d 00 00       	push   $0x4df8
+     8c6:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     8cc:	e8 2f 31 00 00       	call   3a00 <printf>
+}
+     8d1:	83 c4 10             	add    $0x10,%esp
+     8d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8d7:	c9                   	leave  
+     8d8:	c3                   	ret    
+     8d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008e0 <dirtest>:
+
+void dirtest(void)
+{
+     8e0:	55                   	push   %ebp
+     8e1:	89 e5                	mov    %esp,%ebp
+     8e3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8e6:	68 e4 3f 00 00       	push   $0x3fe4
+     8eb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     8f1:	e8 0a 31 00 00       	call   3a00 <printf>
+
+  if(mkdir("dir0") < 0){
+     8f6:	c7 04 24 f0 3f 00 00 	movl   $0x3ff0,(%esp)
+     8fd:	e8 08 30 00 00       	call   390a <mkdir>
+     902:	83 c4 10             	add    $0x10,%esp
+     905:	85 c0                	test   %eax,%eax
+     907:	78 58                	js     961 <dirtest+0x81>
+    printf(stdout, "mkdir failed\n");
+    exit();
+  }
+
+  if(chdir("dir0") < 0){
+     909:	83 ec 0c             	sub    $0xc,%esp
+     90c:	68 f0 3f 00 00       	push   $0x3ff0
+     911:	e8 fc 2f 00 00       	call   3912 <chdir>
+     916:	83 c4 10             	add    $0x10,%esp
+     919:	85 c0                	test   %eax,%eax
+     91b:	0f 88 85 00 00 00    	js     9a6 <dirtest+0xc6>
+    printf(stdout, "chdir dir0 failed\n");
+    exit();
+  }
+
+  if(chdir("..") < 0){
+     921:	83 ec 0c             	sub    $0xc,%esp
+     924:	68 95 45 00 00       	push   $0x4595
+     929:	e8 e4 2f 00 00       	call   3912 <chdir>
+     92e:	83 c4 10             	add    $0x10,%esp
+     931:	85 c0                	test   %eax,%eax
+     933:	78 5a                	js     98f <dirtest+0xaf>
+    printf(stdout, "chdir .. failed\n");
+    exit();
+  }
+
+  if(unlink("dir0") < 0){
+     935:	83 ec 0c             	sub    $0xc,%esp
+     938:	68 f0 3f 00 00       	push   $0x3ff0
+     93d:	e8 b0 2f 00 00       	call   38f2 <unlink>
+     942:	83 c4 10             	add    $0x10,%esp
+     945:	85 c0                	test   %eax,%eax
+     947:	78 2f                	js     978 <dirtest+0x98>
+    printf(stdout, "unlink dir0 failed\n");
+    exit();
+  }
+  printf(stdout, "mkdir test ok\n");
+     949:	83 ec 08             	sub    $0x8,%esp
+     94c:	68 2d 40 00 00       	push   $0x402d
+     951:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     957:	e8 a4 30 00 00       	call   3a00 <printf>
+}
+     95c:	83 c4 10             	add    $0x10,%esp
+     95f:	c9                   	leave  
+     960:	c3                   	ret    
+void dirtest(void)
+{
+  printf(stdout, "mkdir test\n");
+
+  if(mkdir("dir0") < 0){
+    printf(stdout, "mkdir failed\n");
+     961:	50                   	push   %eax
+     962:	50                   	push   %eax
+     963:	68 20 3d 00 00       	push   $0x3d20
+     968:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     96e:	e8 8d 30 00 00       	call   3a00 <printf>
+    exit();
+     973:	e8 2a 2f 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir .. failed\n");
+    exit();
+  }
+
+  if(unlink("dir0") < 0){
+    printf(stdout, "unlink dir0 failed\n");
+     978:	50                   	push   %eax
+     979:	50                   	push   %eax
+     97a:	68 19 40 00 00       	push   $0x4019
+     97f:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     985:	e8 76 30 00 00       	call   3a00 <printf>
+    exit();
+     98a:	e8 13 2f 00 00       	call   38a2 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+    exit();
+  }
+
+  if(chdir("..") < 0){
+    printf(stdout, "chdir .. failed\n");
+     98f:	52                   	push   %edx
+     990:	52                   	push   %edx
+     991:	68 08 40 00 00       	push   $0x4008
+     996:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     99c:	e8 5f 30 00 00       	call   3a00 <printf>
+    exit();
+     9a1:	e8 fc 2e 00 00       	call   38a2 <exit>
+    printf(stdout, "mkdir failed\n");
+    exit();
+  }
+
+  if(chdir("dir0") < 0){
+    printf(stdout, "chdir dir0 failed\n");
+     9a6:	51                   	push   %ecx
+     9a7:	51                   	push   %ecx
+     9a8:	68 f5 3f 00 00       	push   $0x3ff5
+     9ad:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     9b3:	e8 48 30 00 00       	call   3a00 <printf>
+    exit();
+     9b8:	e8 e5 2e 00 00       	call   38a2 <exit>
+     9bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009c0 <exectest>:
+  printf(stdout, "mkdir test ok\n");
+}
+
+void
+exectest(void)
+{
+     9c0:	55                   	push   %ebp
+     9c1:	89 e5                	mov    %esp,%ebp
+     9c3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9c6:	68 3c 40 00 00       	push   $0x403c
+     9cb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     9d1:	e8 2a 30 00 00       	call   3a00 <printf>
+  if(exec("echo", echoargv) < 0){
+     9d6:	5a                   	pop    %edx
+     9d7:	59                   	pop    %ecx
+     9d8:	68 b8 5d 00 00       	push   $0x5db8
+     9dd:	68 05 3e 00 00       	push   $0x3e05
+     9e2:	e8 f3 2e 00 00       	call   38da <exec>
+     9e7:	83 c4 10             	add    $0x10,%esp
+     9ea:	85 c0                	test   %eax,%eax
+     9ec:	78 02                	js     9f0 <exectest+0x30>
+    printf(stdout, "exec echo failed\n");
+    exit();
+  }
+}
+     9ee:	c9                   	leave  
+     9ef:	c3                   	ret    
+void
+exectest(void)
+{
+  printf(stdout, "exec test\n");
+  if(exec("echo", echoargv) < 0){
+    printf(stdout, "exec echo failed\n");
+     9f0:	50                   	push   %eax
+     9f1:	50                   	push   %eax
+     9f2:	68 47 40 00 00       	push   $0x4047
+     9f7:	ff 35 b4 5d 00 00    	pushl  0x5db4
+     9fd:	e8 fe 2f 00 00       	call   3a00 <printf>
+    exit();
+     a02:	e8 9b 2e 00 00       	call   38a2 <exit>
+     a07:	89 f6                	mov    %esi,%esi
+     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000a10 <pipe1>:
+
+// simple fork and pipe read/write
+
+void
+pipe1(void)
+{
+     a10:	55                   	push   %ebp
+     a11:	89 e5                	mov    %esp,%ebp
+     a13:	57                   	push   %edi
+     a14:	56                   	push   %esi
+     a15:	53                   	push   %ebx
+  int fds[2], pid;
+  int seq, i, n, cc, total;
+
+  if(pipe(fds) != 0){
+     a16:	8d 45 e0             	lea    -0x20(%ebp),%eax
+
+// simple fork and pipe read/write
+
+void
+pipe1(void)
+{
+     a19:	83 ec 38             	sub    $0x38,%esp
+  int fds[2], pid;
+  int seq, i, n, cc, total;
+
+  if(pipe(fds) != 0){
+     a1c:	50                   	push   %eax
+     a1d:	e8 90 2e 00 00       	call   38b2 <pipe>
+     a22:	83 c4 10             	add    $0x10,%esp
+     a25:	85 c0                	test   %eax,%eax
+     a27:	0f 85 35 01 00 00    	jne    b62 <pipe1+0x152>
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  pid = fork();
+     a2d:	e8 68 2e 00 00       	call   389a <fork>
+  seq = 0;
+  if(pid == 0){
+     a32:	83 f8 00             	cmp    $0x0,%eax
+     a35:	0f 84 86 00 00 00    	je     ac1 <pipe1+0xb1>
+        printf(1, "pipe1 oops 1\n");
+        exit();
+      }
+    }
+    exit();
+  } else if(pid > 0){
+     a3b:	0f 8e 35 01 00 00    	jle    b76 <pipe1+0x166>
+    close(fds[1]);
+     a41:	83 ec 0c             	sub    $0xc,%esp
+     a44:	ff 75 e4             	pushl  -0x1c(%ebp)
+    total = 0;
+    cc = 1;
+     a47:	bf 01 00 00 00       	mov    $0x1,%edi
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  pid = fork();
+  seq = 0;
+     a4c:	31 db                	xor    %ebx,%ebx
+        exit();
+      }
+    }
+    exit();
+  } else if(pid > 0){
+    close(fds[1]);
+     a4e:	e8 77 2e 00 00       	call   38ca <close>
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+     a53:	83 c4 10             	add    $0x10,%esp
+      }
+    }
+    exit();
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+     a5d:	83 ec 04             	sub    $0x4,%esp
+     a60:	57                   	push   %edi
+     a61:	68 a0 85 00 00       	push   $0x85a0
+     a66:	ff 75 e0             	pushl  -0x20(%ebp)
+     a69:	e8 4c 2e 00 00       	call   38ba <read>
+     a6e:	83 c4 10             	add    $0x10,%esp
+     a71:	85 c0                	test   %eax,%eax
+     a73:	0f 8e a3 00 00 00    	jle    b1c <pipe1+0x10c>
+      for(i = 0; i < n; i++){
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a79:	89 d9                	mov    %ebx,%ecx
+     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+     a7e:	f7 d9                	neg    %ecx
+     a80:	38 9c 0b a0 85 00 00 	cmp    %bl,0x85a0(%ebx,%ecx,1)
+     a87:	8d 53 01             	lea    0x1(%ebx),%edx
+     a8a:	75 1b                	jne    aa7 <pipe1+0x97>
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+      for(i = 0; i < n; i++){
+     a8c:	39 f2                	cmp    %esi,%edx
+     a8e:	89 d3                	mov    %edx,%ebx
+     a90:	75 ee                	jne    a80 <pipe1+0x70>
+          printf(1, "pipe1 oops 2\n");
+          return;
+        }
+      }
+      total += n;
+      cc = cc * 2;
+     a92:	01 ff                	add    %edi,%edi
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+          printf(1, "pipe1 oops 2\n");
+          return;
+        }
+      }
+      total += n;
+     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)
+     a97:	b8 00 20 00 00       	mov    $0x2000,%eax
+     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edi
+     aa2:	0f 4f f8             	cmovg  %eax,%edi
+     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+      for(i = 0; i < n; i++){
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+          printf(1, "pipe1 oops 2\n");
+     aa7:	83 ec 08             	sub    $0x8,%esp
+     aaa:	68 76 40 00 00       	push   $0x4076
+     aaf:	6a 01                	push   $0x1
+     ab1:	e8 4a 2f 00 00       	call   3a00 <printf>
+          return;
+     ab6:	83 c4 10             	add    $0x10,%esp
+  } else {
+    printf(1, "fork() failed\n");
+    exit();
+  }
+  printf(1, "pipe1 ok\n");
+}
+     ab9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     abc:	5b                   	pop    %ebx
+     abd:	5e                   	pop    %esi
+     abe:	5f                   	pop    %edi
+     abf:	5d                   	pop    %ebp
+     ac0:	c3                   	ret    
+    exit();
+  }
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+     ac1:	83 ec 0c             	sub    $0xc,%esp
+     ac4:	ff 75 e0             	pushl  -0x20(%ebp)
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  pid = fork();
+  seq = 0;
+     ac7:	31 f6                	xor    %esi,%esi
+  if(pid == 0){
+    close(fds[0]);
+     ac9:	e8 fc 2d 00 00       	call   38ca <close>
+     ace:	83 c4 10             	add    $0x10,%esp
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+        buf[i] = seq++;
+     ad1:	89 f0                	mov    %esi,%eax
+     ad3:	8d 96 09 04 00 00    	lea    0x409(%esi),%edx
+
+// simple fork and pipe read/write
+
+void
+pipe1(void)
+{
+     ad9:	89 f3                	mov    %esi,%ebx
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+        buf[i] = seq++;
+     adb:	f7 d8                	neg    %eax
+     add:	8d 76 00             	lea    0x0(%esi),%esi
+     ae0:	88 9c 18 a0 85 00 00 	mov    %bl,0x85a0(%eax,%ebx,1)
+     ae7:	83 c3 01             	add    $0x1,%ebx
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+     aea:	39 d3                	cmp    %edx,%ebx
+     aec:	75 f2                	jne    ae0 <pipe1+0xd0>
+        buf[i] = seq++;
+      if(write(fds[1], buf, 1033) != 1033){
+     aee:	83 ec 04             	sub    $0x4,%esp
+     af1:	89 de                	mov    %ebx,%esi
+     af3:	68 09 04 00 00       	push   $0x409
+     af8:	68 a0 85 00 00       	push   $0x85a0
+     afd:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b00:	e8 bd 2d 00 00       	call   38c2 <write>
+     b05:	83 c4 10             	add    $0x10,%esp
+     b08:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b0d:	75 7b                	jne    b8a <pipe1+0x17a>
+  }
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+     b0f:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b15:	75 ba                	jne    ad1 <pipe1+0xc1>
+      if(write(fds[1], buf, 1033) != 1033){
+        printf(1, "pipe1 oops 1\n");
+        exit();
+      }
+    }
+    exit();
+     b17:	e8 86 2d 00 00       	call   38a2 <exit>
+      total += n;
+      cc = cc * 2;
+      if(cc > sizeof(buf))
+        cc = sizeof(buf);
+    }
+    if(total != 5 * 1033){
+     b1c:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b23:	75 26                	jne    b4b <pipe1+0x13b>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+      exit();
+    }
+    close(fds[0]);
+     b25:	83 ec 0c             	sub    $0xc,%esp
+     b28:	ff 75 e0             	pushl  -0x20(%ebp)
+     b2b:	e8 9a 2d 00 00       	call   38ca <close>
+    wait();
+     b30:	e8 75 2d 00 00       	call   38aa <wait>
+  } else {
+    printf(1, "fork() failed\n");
+    exit();
+  }
+  printf(1, "pipe1 ok\n");
+     b35:	58                   	pop    %eax
+     b36:	5a                   	pop    %edx
+     b37:	68 9b 40 00 00       	push   $0x409b
+     b3c:	6a 01                	push   $0x1
+     b3e:	e8 bd 2e 00 00       	call   3a00 <printf>
+     b43:	83 c4 10             	add    $0x10,%esp
+     b46:	e9 6e ff ff ff       	jmp    ab9 <pipe1+0xa9>
+      cc = cc * 2;
+      if(cc > sizeof(buf))
+        cc = sizeof(buf);
+    }
+    if(total != 5 * 1033){
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b4b:	83 ec 04             	sub    $0x4,%esp
+     b4e:	ff 75 d4             	pushl  -0x2c(%ebp)
+     b51:	68 84 40 00 00       	push   $0x4084
+     b56:	6a 01                	push   $0x1
+     b58:	e8 a3 2e 00 00       	call   3a00 <printf>
+      exit();
+     b5d:	e8 40 2d 00 00       	call   38a2 <exit>
+{
+  int fds[2], pid;
+  int seq, i, n, cc, total;
+
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+     b62:	83 ec 08             	sub    $0x8,%esp
+     b65:	68 59 40 00 00       	push   $0x4059
+     b6a:	6a 01                	push   $0x1
+     b6c:	e8 8f 2e 00 00       	call   3a00 <printf>
+    exit();
+     b71:	e8 2c 2d 00 00       	call   38a2 <exit>
+      exit();
+    }
+    close(fds[0]);
+    wait();
+  } else {
+    printf(1, "fork() failed\n");
+     b76:	83 ec 08             	sub    $0x8,%esp
+     b79:	68 a5 40 00 00       	push   $0x40a5
+     b7e:	6a 01                	push   $0x1
+     b80:	e8 7b 2e 00 00       	call   3a00 <printf>
+    exit();
+     b85:	e8 18 2d 00 00       	call   38a2 <exit>
+    close(fds[0]);
+    for(n = 0; n < 5; n++){
+      for(i = 0; i < 1033; i++)
+        buf[i] = seq++;
+      if(write(fds[1], buf, 1033) != 1033){
+        printf(1, "pipe1 oops 1\n");
+     b8a:	83 ec 08             	sub    $0x8,%esp
+     b8d:	68 68 40 00 00       	push   $0x4068
+     b92:	6a 01                	push   $0x1
+     b94:	e8 67 2e 00 00       	call   3a00 <printf>
+        exit();
+     b99:	e8 04 2d 00 00       	call   38a2 <exit>
+     b9e:	66 90                	xchg   %ax,%ax
+
+00000ba0 <preempt>:
+}
+
+// meant to be run w/ at most two CPUs
+void
+preempt(void)
+{
+     ba0:	55                   	push   %ebp
+     ba1:	89 e5                	mov    %esp,%ebp
+     ba3:	57                   	push   %edi
+     ba4:	56                   	push   %esi
+     ba5:	53                   	push   %ebx
+     ba6:	83 ec 24             	sub    $0x24,%esp
+  int pid1, pid2, pid3;
+  int pfds[2];
+
+  printf(1, "preempt: ");
+     ba9:	68 b4 40 00 00       	push   $0x40b4
+     bae:	6a 01                	push   $0x1
+     bb0:	e8 4b 2e 00 00       	call   3a00 <printf>
+  pid1 = fork();
+     bb5:	e8 e0 2c 00 00       	call   389a <fork>
+  if(pid1 == 0)
+     bba:	83 c4 10             	add    $0x10,%esp
+     bbd:	85 c0                	test   %eax,%eax
+     bbf:	75 02                	jne    bc3 <preempt+0x23>
+     bc1:	eb fe                	jmp    bc1 <preempt+0x21>
+     bc3:	89 c7                	mov    %eax,%edi
+    for(;;)
+      ;
+
+  pid2 = fork();
+     bc5:	e8 d0 2c 00 00       	call   389a <fork>
+  if(pid2 == 0)
+     bca:	85 c0                	test   %eax,%eax
+  pid1 = fork();
+  if(pid1 == 0)
+    for(;;)
+      ;
+
+  pid2 = fork();
+     bcc:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     bce:	75 02                	jne    bd2 <preempt+0x32>
+     bd0:	eb fe                	jmp    bd0 <preempt+0x30>
+    for(;;)
+      ;
+
+  pipe(pfds);
+     bd2:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     bd5:	83 ec 0c             	sub    $0xc,%esp
+     bd8:	50                   	push   %eax
+     bd9:	e8 d4 2c 00 00       	call   38b2 <pipe>
+  pid3 = fork();
+     bde:	e8 b7 2c 00 00       	call   389a <fork>
+  if(pid3 == 0){
+     be3:	83 c4 10             	add    $0x10,%esp
+     be6:	85 c0                	test   %eax,%eax
+  if(pid2 == 0)
+    for(;;)
+      ;
+
+  pipe(pfds);
+  pid3 = fork();
+     be8:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     bea:	75 47                	jne    c33 <preempt+0x93>
+    close(pfds[0]);
+     bec:	83 ec 0c             	sub    $0xc,%esp
+     bef:	ff 75 e0             	pushl  -0x20(%ebp)
+     bf2:	e8 d3 2c 00 00       	call   38ca <close>
+    if(write(pfds[1], "x", 1) != 1)
+     bf7:	83 c4 0c             	add    $0xc,%esp
+     bfa:	6a 01                	push   $0x1
+     bfc:	68 79 46 00 00       	push   $0x4679
+     c01:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c04:	e8 b9 2c 00 00       	call   38c2 <write>
+     c09:	83 c4 10             	add    $0x10,%esp
+     c0c:	83 f8 01             	cmp    $0x1,%eax
+     c0f:	74 12                	je     c23 <preempt+0x83>
+      printf(1, "preempt write error");
+     c11:	83 ec 08             	sub    $0x8,%esp
+     c14:	68 be 40 00 00       	push   $0x40be
+     c19:	6a 01                	push   $0x1
+     c1b:	e8 e0 2d 00 00       	call   3a00 <printf>
+     c20:	83 c4 10             	add    $0x10,%esp
+    close(pfds[1]);
+     c23:	83 ec 0c             	sub    $0xc,%esp
+     c26:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c29:	e8 9c 2c 00 00       	call   38ca <close>
+     c2e:	83 c4 10             	add    $0x10,%esp
+     c31:	eb fe                	jmp    c31 <preempt+0x91>
+    for(;;)
+      ;
+  }
+
+  close(pfds[1]);
+     c33:	83 ec 0c             	sub    $0xc,%esp
+     c36:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c39:	e8 8c 2c 00 00       	call   38ca <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c3e:	83 c4 0c             	add    $0xc,%esp
+     c41:	68 00 20 00 00       	push   $0x2000
+     c46:	68 a0 85 00 00       	push   $0x85a0
+     c4b:	ff 75 e0             	pushl  -0x20(%ebp)
+     c4e:	e8 67 2c 00 00       	call   38ba <read>
+     c53:	83 c4 10             	add    $0x10,%esp
+     c56:	83 f8 01             	cmp    $0x1,%eax
+     c59:	74 1a                	je     c75 <preempt+0xd5>
+    printf(1, "preempt read error");
+     c5b:	83 ec 08             	sub    $0x8,%esp
+     c5e:	68 d2 40 00 00       	push   $0x40d2
+     c63:	6a 01                	push   $0x1
+     c65:	e8 96 2d 00 00       	call   3a00 <printf>
+    return;
+     c6a:	83 c4 10             	add    $0x10,%esp
+  printf(1, "wait... ");
+  wait();
+  wait();
+  wait();
+  printf(1, "preempt ok\n");
+}
+     c6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     c70:	5b                   	pop    %ebx
+     c71:	5e                   	pop    %esi
+     c72:	5f                   	pop    %edi
+     c73:	5d                   	pop    %ebp
+     c74:	c3                   	ret    
+  close(pfds[1]);
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+    printf(1, "preempt read error");
+    return;
+  }
+  close(pfds[0]);
+     c75:	83 ec 0c             	sub    $0xc,%esp
+     c78:	ff 75 e0             	pushl  -0x20(%ebp)
+     c7b:	e8 4a 2c 00 00       	call   38ca <close>
+  printf(1, "kill... ");
+     c80:	58                   	pop    %eax
+     c81:	5a                   	pop    %edx
+     c82:	68 e5 40 00 00       	push   $0x40e5
+     c87:	6a 01                	push   $0x1
+     c89:	e8 72 2d 00 00       	call   3a00 <printf>
+  kill(pid1);
+     c8e:	89 3c 24             	mov    %edi,(%esp)
+     c91:	e8 3c 2c 00 00       	call   38d2 <kill>
+  kill(pid2);
+     c96:	89 34 24             	mov    %esi,(%esp)
+     c99:	e8 34 2c 00 00       	call   38d2 <kill>
+  kill(pid3);
+     c9e:	89 1c 24             	mov    %ebx,(%esp)
+     ca1:	e8 2c 2c 00 00       	call   38d2 <kill>
+  printf(1, "wait... ");
+     ca6:	59                   	pop    %ecx
+     ca7:	5b                   	pop    %ebx
+     ca8:	68 ee 40 00 00       	push   $0x40ee
+     cad:	6a 01                	push   $0x1
+     caf:	e8 4c 2d 00 00       	call   3a00 <printf>
+  wait();
+     cb4:	e8 f1 2b 00 00       	call   38aa <wait>
+  wait();
+     cb9:	e8 ec 2b 00 00       	call   38aa <wait>
+  wait();
+     cbe:	e8 e7 2b 00 00       	call   38aa <wait>
+  printf(1, "preempt ok\n");
+     cc3:	5e                   	pop    %esi
+     cc4:	5f                   	pop    %edi
+     cc5:	68 f7 40 00 00       	push   $0x40f7
+     cca:	6a 01                	push   $0x1
+     ccc:	e8 2f 2d 00 00       	call   3a00 <printf>
+     cd1:	83 c4 10             	add    $0x10,%esp
+     cd4:	eb 97                	jmp    c6d <preempt+0xcd>
+     cd6:	8d 76 00             	lea    0x0(%esi),%esi
+     cd9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000ce0 <exitwait>:
+}
+
+// try to find any races between exit and wait
+void
+exitwait(void)
+{
+     ce0:	55                   	push   %ebp
+     ce1:	89 e5                	mov    %esp,%ebp
+     ce3:	56                   	push   %esi
+     ce4:	be 64 00 00 00       	mov    $0x64,%esi
+     ce9:	53                   	push   %ebx
+     cea:	eb 14                	jmp    d00 <exitwait+0x20>
+     cec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      return;
+    }
+    if(pid){
+     cf0:	74 6f                	je     d61 <exitwait+0x81>
+      if(wait() != pid){
+     cf2:	e8 b3 2b 00 00       	call   38aa <wait>
+     cf7:	39 c3                	cmp    %eax,%ebx
+     cf9:	75 2d                	jne    d28 <exitwait+0x48>
+void
+exitwait(void)
+{
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+     cfb:	83 ee 01             	sub    $0x1,%esi
+     cfe:	74 48                	je     d48 <exitwait+0x68>
+    pid = fork();
+     d00:	e8 95 2b 00 00       	call   389a <fork>
+    if(pid < 0){
+     d05:	85 c0                	test   %eax,%eax
+exitwait(void)
+{
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+    pid = fork();
+     d07:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d09:	79 e5                	jns    cf0 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d0b:	83 ec 08             	sub    $0x8,%esp
+     d0e:	68 61 4c 00 00       	push   $0x4c61
+     d13:	6a 01                	push   $0x1
+     d15:	e8 e6 2c 00 00       	call   3a00 <printf>
+      return;
+     d1a:	83 c4 10             	add    $0x10,%esp
+    } else {
+      exit();
+    }
+  }
+  printf(1, "exitwait ok\n");
+}
+     d1d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d20:	5b                   	pop    %ebx
+     d21:	5e                   	pop    %esi
+     d22:	5d                   	pop    %ebp
+     d23:	c3                   	ret    
+     d24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "fork failed\n");
+      return;
+    }
+    if(pid){
+      if(wait() != pid){
+        printf(1, "wait wrong pid\n");
+     d28:	83 ec 08             	sub    $0x8,%esp
+     d2b:	68 03 41 00 00       	push   $0x4103
+     d30:	6a 01                	push   $0x1
+     d32:	e8 c9 2c 00 00       	call   3a00 <printf>
+        return;
+     d37:	83 c4 10             	add    $0x10,%esp
+    } else {
+      exit();
+    }
+  }
+  printf(1, "exitwait ok\n");
+}
+     d3a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d3d:	5b                   	pop    %ebx
+     d3e:	5e                   	pop    %esi
+     d3f:	5d                   	pop    %ebp
+     d40:	c3                   	ret    
+     d41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      }
+    } else {
+      exit();
+    }
+  }
+  printf(1, "exitwait ok\n");
+     d48:	83 ec 08             	sub    $0x8,%esp
+     d4b:	68 13 41 00 00       	push   $0x4113
+     d50:	6a 01                	push   $0x1
+     d52:	e8 a9 2c 00 00       	call   3a00 <printf>
+     d57:	83 c4 10             	add    $0x10,%esp
+}
+     d5a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d5d:	5b                   	pop    %ebx
+     d5e:	5e                   	pop    %esi
+     d5f:	5d                   	pop    %ebp
+     d60:	c3                   	ret    
+      if(wait() != pid){
+        printf(1, "wait wrong pid\n");
+        return;
+      }
+    } else {
+      exit();
+     d61:	e8 3c 2b 00 00       	call   38a2 <exit>
+     d66:	8d 76 00             	lea    0x0(%esi),%esi
+     d69:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000d70 <mem>:
+  printf(1, "exitwait ok\n");
+}
+
+void
+mem(void)
+{
+     d70:	55                   	push   %ebp
+     d71:	89 e5                	mov    %esp,%ebp
+     d73:	57                   	push   %edi
+     d74:	56                   	push   %esi
+     d75:	53                   	push   %ebx
+     d76:	83 ec 14             	sub    $0x14,%esp
+  void *m1, *m2;
+  int pid, ppid;
+
+  printf(1, "mem test\n");
+     d79:	68 20 41 00 00       	push   $0x4120
+     d7e:	6a 01                	push   $0x1
+     d80:	e8 7b 2c 00 00       	call   3a00 <printf>
+  ppid = getpid();
+     d85:	e8 98 2b 00 00       	call   3922 <getpid>
+     d8a:	89 c6                	mov    %eax,%esi
+  if((pid = fork()) == 0){
+     d8c:	e8 09 2b 00 00       	call   389a <fork>
+     d91:	83 c4 10             	add    $0x10,%esp
+     d94:	85 c0                	test   %eax,%eax
+     d96:	75 70                	jne    e08 <mem+0x98>
+     d98:	31 db                	xor    %ebx,%ebx
+     d9a:	eb 08                	jmp    da4 <mem+0x34>
+     d9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+      *(char**)m2 = m1;
+     da0:	89 18                	mov    %ebx,(%eax)
+     da2:	89 c3                	mov    %eax,%ebx
+
+  printf(1, "mem test\n");
+  ppid = getpid();
+  if((pid = fork()) == 0){
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+     da4:	83 ec 0c             	sub    $0xc,%esp
+     da7:	68 11 27 00 00       	push   $0x2711
+     dac:	e8 7f 2e 00 00       	call   3c30 <malloc>
+     db1:	83 c4 10             	add    $0x10,%esp
+     db4:	85 c0                	test   %eax,%eax
+     db6:	75 e8                	jne    da0 <mem+0x30>
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+     db8:	85 db                	test   %ebx,%ebx
+     dba:	74 18                	je     dd4 <mem+0x64>
+     dbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     dc0:	8b 3b                	mov    (%ebx),%edi
+      free(m1);
+     dc2:	83 ec 0c             	sub    $0xc,%esp
+     dc5:	53                   	push   %ebx
+     dc6:	89 fb                	mov    %edi,%ebx
+     dc8:	e8 d3 2d 00 00       	call   3ba0 <free>
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+     dcd:	83 c4 10             	add    $0x10,%esp
+     dd0:	85 db                	test   %ebx,%ebx
+     dd2:	75 ec                	jne    dc0 <mem+0x50>
+      m2 = *(char**)m1;
+      free(m1);
+      m1 = m2;
+    }
+    m1 = malloc(1024*20);
+     dd4:	83 ec 0c             	sub    $0xc,%esp
+     dd7:	68 00 50 00 00       	push   $0x5000
+     ddc:	e8 4f 2e 00 00       	call   3c30 <malloc>
+    if(m1 == 0){
+     de1:	83 c4 10             	add    $0x10,%esp
+     de4:	85 c0                	test   %eax,%eax
+     de6:	74 30                	je     e18 <mem+0xa8>
+      printf(1, "couldn't allocate mem?!!\n");
+      kill(ppid);
+      exit();
+    }
+    free(m1);
+     de8:	83 ec 0c             	sub    $0xc,%esp
+     deb:	50                   	push   %eax
+     dec:	e8 af 2d 00 00       	call   3ba0 <free>
+    printf(1, "mem ok\n");
+     df1:	58                   	pop    %eax
+     df2:	5a                   	pop    %edx
+     df3:	68 44 41 00 00       	push   $0x4144
+     df8:	6a 01                	push   $0x1
+     dfa:	e8 01 2c 00 00       	call   3a00 <printf>
+    exit();
+     dff:	e8 9e 2a 00 00       	call   38a2 <exit>
+     e04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  } else {
+    wait();
+  }
+}
+     e08:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     e0b:	5b                   	pop    %ebx
+     e0c:	5e                   	pop    %esi
+     e0d:	5f                   	pop    %edi
+     e0e:	5d                   	pop    %ebp
+    }
+    free(m1);
+    printf(1, "mem ok\n");
+    exit();
+  } else {
+    wait();
+     e0f:	e9 96 2a 00 00       	jmp    38aa <wait>
+     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      free(m1);
+      m1 = m2;
+    }
+    m1 = malloc(1024*20);
+    if(m1 == 0){
+      printf(1, "couldn't allocate mem?!!\n");
+     e18:	83 ec 08             	sub    $0x8,%esp
+     e1b:	68 2a 41 00 00       	push   $0x412a
+     e20:	6a 01                	push   $0x1
+     e22:	e8 d9 2b 00 00       	call   3a00 <printf>
+      kill(ppid);
+     e27:	89 34 24             	mov    %esi,(%esp)
+     e2a:	e8 a3 2a 00 00       	call   38d2 <kill>
+      exit();
+     e2f:	e8 6e 2a 00 00       	call   38a2 <exit>
+     e34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     e3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000e40 <sharedfd>:
+
+// two processes write to the same file descriptor
+// is the offset shared? does inode locking work?
+void
+sharedfd(void)
+{
+     e40:	55                   	push   %ebp
+     e41:	89 e5                	mov    %esp,%ebp
+     e43:	57                   	push   %edi
+     e44:	56                   	push   %esi
+     e45:	53                   	push   %ebx
+     e46:	83 ec 34             	sub    $0x34,%esp
+  int fd, pid, i, n, nc, np;
+  char buf[10];
+
+  printf(1, "sharedfd test\n");
+     e49:	68 4c 41 00 00       	push   $0x414c
+     e4e:	6a 01                	push   $0x1
+     e50:	e8 ab 2b 00 00       	call   3a00 <printf>
+
+  unlink("sharedfd");
+     e55:	c7 04 24 5b 41 00 00 	movl   $0x415b,(%esp)
+     e5c:	e8 91 2a 00 00       	call   38f2 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e61:	5b                   	pop    %ebx
+     e62:	5e                   	pop    %esi
+     e63:	68 02 02 00 00       	push   $0x202
+     e68:	68 5b 41 00 00       	push   $0x415b
+     e6d:	e8 70 2a 00 00       	call   38e2 <open>
+  if(fd < 0){
+     e72:	83 c4 10             	add    $0x10,%esp
+     e75:	85 c0                	test   %eax,%eax
+     e77:	0f 88 29 01 00 00    	js     fa6 <sharedfd+0x166>
+     e7d:	89 c7                	mov    %eax,%edi
+    printf(1, "fstests: cannot open sharedfd for writing");
+    return;
+  }
+  pid = fork();
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e7f:	8d 75 de             	lea    -0x22(%ebp),%esi
+     e82:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for writing");
+    return;
+  }
+  pid = fork();
+     e87:	e8 0e 2a 00 00       	call   389a <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e8c:	83 f8 01             	cmp    $0x1,%eax
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for writing");
+    return;
+  }
+  pid = fork();
+     e8f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e92:	19 c0                	sbb    %eax,%eax
+     e94:	83 ec 04             	sub    $0x4,%esp
+     e97:	83 e0 f3             	and    $0xfffffff3,%eax
+     e9a:	6a 0a                	push   $0xa
+     e9c:	83 c0 70             	add    $0x70,%eax
+     e9f:	50                   	push   %eax
+     ea0:	56                   	push   %esi
+     ea1:	e8 6a 28 00 00       	call   3710 <memset>
+     ea6:	83 c4 10             	add    $0x10,%esp
+     ea9:	eb 0a                	jmp    eb5 <sharedfd+0x75>
+     eab:	90                   	nop
+     eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(i = 0; i < 1000; i++){
+     eb0:	83 eb 01             	sub    $0x1,%ebx
+     eb3:	74 26                	je     edb <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     eb5:	83 ec 04             	sub    $0x4,%esp
+     eb8:	6a 0a                	push   $0xa
+     eba:	56                   	push   %esi
+     ebb:	57                   	push   %edi
+     ebc:	e8 01 2a 00 00       	call   38c2 <write>
+     ec1:	83 c4 10             	add    $0x10,%esp
+     ec4:	83 f8 0a             	cmp    $0xa,%eax
+     ec7:	74 e7                	je     eb0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     ec9:	83 ec 08             	sub    $0x8,%esp
+     ecc:	68 4c 4e 00 00       	push   $0x4e4c
+     ed1:	6a 01                	push   $0x1
+     ed3:	e8 28 2b 00 00       	call   3a00 <printf>
+      break;
+     ed8:	83 c4 10             	add    $0x10,%esp
+    }
+  }
+  if(pid == 0)
+     edb:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     ede:	85 c9                	test   %ecx,%ecx
+     ee0:	0f 84 f4 00 00 00    	je     fda <sharedfd+0x19a>
+    exit();
+  else
+    wait();
+     ee6:	e8 bf 29 00 00       	call   38aa <wait>
+  close(fd);
+     eeb:	83 ec 0c             	sub    $0xc,%esp
+     eee:	31 db                	xor    %ebx,%ebx
+     ef0:	57                   	push   %edi
+     ef1:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     ef4:	e8 d1 29 00 00       	call   38ca <close>
+  fd = open("sharedfd", 0);
+     ef9:	58                   	pop    %eax
+     efa:	5a                   	pop    %edx
+     efb:	6a 00                	push   $0x0
+     efd:	68 5b 41 00 00       	push   $0x415b
+     f02:	e8 db 29 00 00       	call   38e2 <open>
+  if(fd < 0){
+     f07:	83 c4 10             	add    $0x10,%esp
+     f0a:	31 d2                	xor    %edx,%edx
+     f0c:	85 c0                	test   %eax,%eax
+  if(pid == 0)
+    exit();
+  else
+    wait();
+  close(fd);
+  fd = open("sharedfd", 0);
+     f0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f11:	0f 88 a9 00 00 00    	js     fc0 <sharedfd+0x180>
+     f17:	89 f6                	mov    %esi,%esi
+     f19:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    return;
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f20:	83 ec 04             	sub    $0x4,%esp
+     f23:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f26:	6a 0a                	push   $0xa
+     f28:	56                   	push   %esi
+     f29:	ff 75 d0             	pushl  -0x30(%ebp)
+     f2c:	e8 89 29 00 00       	call   38ba <read>
+     f31:	83 c4 10             	add    $0x10,%esp
+     f34:	85 c0                	test   %eax,%eax
+     f36:	7e 27                	jle    f5f <sharedfd+0x11f>
+     f38:	89 f0                	mov    %esi,%eax
+     f3a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f3d:	eb 13                	jmp    f52 <sharedfd+0x112>
+     f3f:	90                   	nop
+    for(i = 0; i < sizeof(buf); i++){
+      if(buf[i] == 'c')
+        nc++;
+      if(buf[i] == 'p')
+        np++;
+     f40:	80 f9 70             	cmp    $0x70,%cl
+     f43:	0f 94 c1             	sete   %cl
+     f46:	0f b6 c9             	movzbl %cl,%ecx
+     f49:	01 cb                	add    %ecx,%ebx
+     f4b:	83 c0 01             	add    $0x1,%eax
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    return;
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i = 0; i < sizeof(buf); i++){
+     f4e:	39 c7                	cmp    %eax,%edi
+     f50:	74 ce                	je     f20 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f52:	0f b6 08             	movzbl (%eax),%ecx
+     f55:	80 f9 63             	cmp    $0x63,%cl
+     f58:	75 e6                	jne    f40 <sharedfd+0x100>
+        nc++;
+     f5a:	83 c2 01             	add    $0x1,%edx
+     f5d:	eb ec                	jmp    f4b <sharedfd+0x10b>
+      if(buf[i] == 'p')
+        np++;
+    }
+  }
+  close(fd);
+     f5f:	83 ec 0c             	sub    $0xc,%esp
+     f62:	ff 75 d0             	pushl  -0x30(%ebp)
+     f65:	e8 60 29 00 00       	call   38ca <close>
+  unlink("sharedfd");
+     f6a:	c7 04 24 5b 41 00 00 	movl   $0x415b,(%esp)
+     f71:	e8 7c 29 00 00       	call   38f2 <unlink>
+  if(nc == 10000 && np == 10000){
+     f76:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f79:	83 c4 10             	add    $0x10,%esp
+     f7c:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     f82:	75 5b                	jne    fdf <sharedfd+0x19f>
+     f84:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     f8a:	75 53                	jne    fdf <sharedfd+0x19f>
+    printf(1, "sharedfd ok\n");
+     f8c:	83 ec 08             	sub    $0x8,%esp
+     f8f:	68 64 41 00 00       	push   $0x4164
+     f94:	6a 01                	push   $0x1
+     f96:	e8 65 2a 00 00       	call   3a00 <printf>
+     f9b:	83 c4 10             	add    $0x10,%esp
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    exit();
+  }
+}
+     f9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fa1:	5b                   	pop    %ebx
+     fa2:	5e                   	pop    %esi
+     fa3:	5f                   	pop    %edi
+     fa4:	5d                   	pop    %ebp
+     fa5:	c3                   	ret    
+  printf(1, "sharedfd test\n");
+
+  unlink("sharedfd");
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fa6:	83 ec 08             	sub    $0x8,%esp
+     fa9:	68 20 4e 00 00       	push   $0x4e20
+     fae:	6a 01                	push   $0x1
+     fb0:	e8 4b 2a 00 00       	call   3a00 <printf>
+    return;
+     fb5:	83 c4 10             	add    $0x10,%esp
+    printf(1, "sharedfd ok\n");
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    exit();
+  }
+}
+     fb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fbb:	5b                   	pop    %ebx
+     fbc:	5e                   	pop    %esi
+     fbd:	5f                   	pop    %edi
+     fbe:	5d                   	pop    %ebp
+     fbf:	c3                   	ret    
+  else
+    wait();
+  close(fd);
+  fd = open("sharedfd", 0);
+  if(fd < 0){
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fc0:	83 ec 08             	sub    $0x8,%esp
+     fc3:	68 6c 4e 00 00       	push   $0x4e6c
+     fc8:	6a 01                	push   $0x1
+     fca:	e8 31 2a 00 00       	call   3a00 <printf>
+    return;
+     fcf:	83 c4 10             	add    $0x10,%esp
+    printf(1, "sharedfd ok\n");
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    exit();
+  }
+}
+     fd2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fd5:	5b                   	pop    %ebx
+     fd6:	5e                   	pop    %esi
+     fd7:	5f                   	pop    %edi
+     fd8:	5d                   	pop    %ebp
+     fd9:	c3                   	ret    
+      printf(1, "fstests: write sharedfd failed\n");
+      break;
+    }
+  }
+  if(pid == 0)
+    exit();
+     fda:	e8 c3 28 00 00       	call   38a2 <exit>
+  close(fd);
+  unlink("sharedfd");
+  if(nc == 10000 && np == 10000){
+    printf(1, "sharedfd ok\n");
+  } else {
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+     fdf:	53                   	push   %ebx
+     fe0:	52                   	push   %edx
+     fe1:	68 71 41 00 00       	push   $0x4171
+     fe6:	6a 01                	push   $0x1
+     fe8:	e8 13 2a 00 00       	call   3a00 <printf>
+    exit();
+     fed:	e8 b0 28 00 00       	call   38a2 <exit>
+     ff2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ff9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001000 <fourfiles>:
+
+// four processes write different files at the same
+// time, to test block allocation.
+void
+fourfiles(void)
+{
+    1000:	55                   	push   %ebp
+    1001:	89 e5                	mov    %esp,%ebp
+    1003:	57                   	push   %edi
+    1004:	56                   	push   %esi
+    1005:	53                   	push   %ebx
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+    1006:	be 86 41 00 00       	mov    $0x4186,%esi
+
+  for(pi = 0; pi < 4; pi++){
+    100b:	31 db                	xor    %ebx,%ebx
+
+// four processes write different files at the same
+// time, to test block allocation.
+void
+fourfiles(void)
+{
+    100d:	83 ec 34             	sub    $0x34,%esp
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1010:	c7 45 d8 86 41 00 00 	movl   $0x4186,-0x28(%ebp)
+    1017:	c7 45 dc cf 42 00 00 	movl   $0x42cf,-0x24(%ebp)
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+    101e:	68 8c 41 00 00       	push   $0x418c
+    1023:	6a 01                	push   $0x1
+// time, to test block allocation.
+void
+fourfiles(void)
+{
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1025:	c7 45 e0 d3 42 00 00 	movl   $0x42d3,-0x20(%ebp)
+    102c:	c7 45 e4 89 41 00 00 	movl   $0x4189,-0x1c(%ebp)
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+    1033:	e8 c8 29 00 00       	call   3a00 <printf>
+    1038:	83 c4 10             	add    $0x10,%esp
+
+  for(pi = 0; pi < 4; pi++){
+    fname = names[pi];
+    unlink(fname);
+    103b:	83 ec 0c             	sub    $0xc,%esp
+    103e:	56                   	push   %esi
+    103f:	e8 ae 28 00 00       	call   38f2 <unlink>
+
+    pid = fork();
+    1044:	e8 51 28 00 00       	call   389a <fork>
+    if(pid < 0){
+    1049:	83 c4 10             	add    $0x10,%esp
+    104c:	85 c0                	test   %eax,%eax
+    104e:	0f 88 83 01 00 00    	js     11d7 <fourfiles+0x1d7>
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+    1054:	0f 84 e3 00 00 00    	je     113d <fourfiles+0x13d>
+  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *fname;
+
+  printf(1, "fourfiles test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    105a:	83 c3 01             	add    $0x1,%ebx
+    105d:	83 fb 04             	cmp    $0x4,%ebx
+    1060:	74 06                	je     1068 <fourfiles+0x68>
+    1062:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1066:	eb d3                	jmp    103b <fourfiles+0x3b>
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    wait();
+    1068:	e8 3d 28 00 00       	call   38aa <wait>
+    106d:	bf 30 00 00 00       	mov    $0x30,%edi
+    1072:	e8 33 28 00 00       	call   38aa <wait>
+    1077:	e8 2e 28 00 00       	call   38aa <wait>
+    107c:	e8 29 28 00 00       	call   38aa <wait>
+    1081:	c7 45 d4 86 41 00 00 	movl   $0x4186,-0x2c(%ebp)
+  }
+
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    1088:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    108b:	31 db                	xor    %ebx,%ebx
+    wait();
+  }
+
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    108d:	6a 00                	push   $0x0
+    108f:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1092:	e8 4b 28 00 00       	call   38e2 <open>
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    1097:	83 c4 10             	add    $0x10,%esp
+    wait();
+  }
+
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    109a:	89 c6                	mov    %eax,%esi
+    109c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10a0:	83 ec 04             	sub    $0x4,%esp
+    10a3:	68 00 20 00 00       	push   $0x2000
+    10a8:	68 a0 85 00 00       	push   $0x85a0
+    10ad:	56                   	push   %esi
+    10ae:	e8 07 28 00 00       	call   38ba <read>
+    10b3:	83 c4 10             	add    $0x10,%esp
+    10b6:	85 c0                	test   %eax,%eax
+    10b8:	7e 1c                	jle    10d6 <fourfiles+0xd6>
+    10ba:	31 d2                	xor    %edx,%edx
+    10bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      for(j = 0; j < n; j++){
+        if(buf[j] != '0'+i){
+    10c0:	0f be 8a a0 85 00 00 	movsbl 0x85a0(%edx),%ecx
+    10c7:	39 cf                	cmp    %ecx,%edi
+    10c9:	75 5e                	jne    1129 <fourfiles+0x129>
+  for(i = 0; i < 2; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+      for(j = 0; j < n; j++){
+    10cb:	83 c2 01             	add    $0x1,%edx
+    10ce:	39 d0                	cmp    %edx,%eax
+    10d0:	75 ee                	jne    10c0 <fourfiles+0xc0>
+        if(buf[j] != '0'+i){
+          printf(1, "wrong char\n");
+          exit();
+        }
+      }
+      total += n;
+    10d2:	01 c3                	add    %eax,%ebx
+    10d4:	eb ca                	jmp    10a0 <fourfiles+0xa0>
+    }
+    close(fd);
+    10d6:	83 ec 0c             	sub    $0xc,%esp
+    10d9:	56                   	push   %esi
+    10da:	e8 eb 27 00 00       	call   38ca <close>
+    if(total != 12*500){
+    10df:	83 c4 10             	add    $0x10,%esp
+    10e2:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    10e8:	0f 85 d4 00 00 00    	jne    11c2 <fourfiles+0x1c2>
+      printf(1, "wrong length %d\n", total);
+      exit();
+    }
+    unlink(fname);
+    10ee:	83 ec 0c             	sub    $0xc,%esp
+    10f1:	ff 75 d4             	pushl  -0x2c(%ebp)
+    10f4:	83 c7 01             	add    $0x1,%edi
+    10f7:	e8 f6 27 00 00       	call   38f2 <unlink>
+
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  for(i = 0; i < 2; i++){
+    10fc:	83 c4 10             	add    $0x10,%esp
+    10ff:	83 ff 32             	cmp    $0x32,%edi
+    1102:	75 1a                	jne    111e <fourfiles+0x11e>
+      exit();
+    }
+    unlink(fname);
+  }
+
+  printf(1, "fourfiles ok\n");
+    1104:	83 ec 08             	sub    $0x8,%esp
+    1107:	68 ca 41 00 00       	push   $0x41ca
+    110c:	6a 01                	push   $0x1
+    110e:	e8 ed 28 00 00       	call   3a00 <printf>
+}
+    1113:	83 c4 10             	add    $0x10,%esp
+    1116:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1119:	5b                   	pop    %ebx
+    111a:	5e                   	pop    %esi
+    111b:	5f                   	pop    %edi
+    111c:	5d                   	pop    %ebp
+    111d:	c3                   	ret    
+    111e:	8b 45 dc             	mov    -0x24(%ebp),%eax
+    1121:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    1124:	e9 5f ff ff ff       	jmp    1088 <fourfiles+0x88>
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+      for(j = 0; j < n; j++){
+        if(buf[j] != '0'+i){
+          printf(1, "wrong char\n");
+    1129:	83 ec 08             	sub    $0x8,%esp
+    112c:	68 ad 41 00 00       	push   $0x41ad
+    1131:	6a 01                	push   $0x1
+    1133:	e8 c8 28 00 00       	call   3a00 <printf>
+          exit();
+    1138:	e8 65 27 00 00       	call   38a2 <exit>
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+      fd = open(fname, O_CREATE | O_RDWR);
+    113d:	83 ec 08             	sub    $0x8,%esp
+    1140:	68 02 02 00 00       	push   $0x202
+    1145:	56                   	push   %esi
+    1146:	e8 97 27 00 00       	call   38e2 <open>
+      if(fd < 0){
+    114b:	83 c4 10             	add    $0x10,%esp
+    114e:	85 c0                	test   %eax,%eax
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+      fd = open(fname, O_CREATE | O_RDWR);
+    1150:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    1152:	78 5a                	js     11ae <fourfiles+0x1ae>
+        printf(1, "create failed\n");
+        exit();
+      }
+
+      memset(buf, '0'+pi, 512);
+    1154:	83 ec 04             	sub    $0x4,%esp
+    1157:	83 c3 30             	add    $0x30,%ebx
+    115a:	68 00 02 00 00       	push   $0x200
+    115f:	53                   	push   %ebx
+    1160:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    1165:	68 a0 85 00 00       	push   $0x85a0
+    116a:	e8 a1 25 00 00       	call   3710 <memset>
+    116f:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 12; i++){
+        if((n = write(fd, buf, 500)) != 500){
+    1172:	83 ec 04             	sub    $0x4,%esp
+    1175:	68 f4 01 00 00       	push   $0x1f4
+    117a:	68 a0 85 00 00       	push   $0x85a0
+    117f:	56                   	push   %esi
+    1180:	e8 3d 27 00 00       	call   38c2 <write>
+    1185:	83 c4 10             	add    $0x10,%esp
+    1188:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    118d:	75 0a                	jne    1199 <fourfiles+0x199>
+        printf(1, "create failed\n");
+        exit();
+      }
+
+      memset(buf, '0'+pi, 512);
+      for(i = 0; i < 12; i++){
+    118f:	83 eb 01             	sub    $0x1,%ebx
+    1192:	75 de                	jne    1172 <fourfiles+0x172>
+        if((n = write(fd, buf, 500)) != 500){
+          printf(1, "write failed %d\n", n);
+          exit();
+        }
+      }
+      exit();
+    1194:	e8 09 27 00 00       	call   38a2 <exit>
+      }
+
+      memset(buf, '0'+pi, 512);
+      for(i = 0; i < 12; i++){
+        if((n = write(fd, buf, 500)) != 500){
+          printf(1, "write failed %d\n", n);
+    1199:	83 ec 04             	sub    $0x4,%esp
+    119c:	50                   	push   %eax
+    119d:	68 9c 41 00 00       	push   $0x419c
+    11a2:	6a 01                	push   $0x1
+    11a4:	e8 57 28 00 00       	call   3a00 <printf>
+          exit();
+    11a9:	e8 f4 26 00 00       	call   38a2 <exit>
+    }
+
+    if(pid == 0){
+      fd = open(fname, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "create failed\n");
+    11ae:	83 ec 08             	sub    $0x8,%esp
+    11b1:	68 27 44 00 00       	push   $0x4427
+    11b6:	6a 01                	push   $0x1
+    11b8:	e8 43 28 00 00       	call   3a00 <printf>
+        exit();
+    11bd:	e8 e0 26 00 00       	call   38a2 <exit>
+      }
+      total += n;
+    }
+    close(fd);
+    if(total != 12*500){
+      printf(1, "wrong length %d\n", total);
+    11c2:	83 ec 04             	sub    $0x4,%esp
+    11c5:	53                   	push   %ebx
+    11c6:	68 b9 41 00 00       	push   $0x41b9
+    11cb:	6a 01                	push   $0x1
+    11cd:	e8 2e 28 00 00       	call   3a00 <printf>
+      exit();
+    11d2:	e8 cb 26 00 00       	call   38a2 <exit>
+    fname = names[pi];
+    unlink(fname);
+
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+    11d7:	83 ec 08             	sub    $0x8,%esp
+    11da:	68 61 4c 00 00       	push   $0x4c61
+    11df:	6a 01                	push   $0x1
+    11e1:	e8 1a 28 00 00       	call   3a00 <printf>
+      exit();
+    11e6:	e8 b7 26 00 00       	call   38a2 <exit>
+    11eb:	90                   	nop
+    11ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000011f0 <createdelete>:
+}
+
+// four processes create and delete different files in same directory
+void
+createdelete(void)
+{
+    11f0:	55                   	push   %ebp
+    11f1:	89 e5                	mov    %esp,%ebp
+    11f3:	57                   	push   %edi
+    11f4:	56                   	push   %esi
+    11f5:	53                   	push   %ebx
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    11f6:	31 db                	xor    %ebx,%ebx
+}
+
+// four processes create and delete different files in same directory
+void
+createdelete(void)
+{
+    11f8:	83 ec 44             	sub    $0x44,%esp
+  enum { N = 20 };
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+    11fb:	68 d8 41 00 00       	push   $0x41d8
+    1200:	6a 01                	push   $0x1
+    1202:	e8 f9 27 00 00       	call   3a00 <printf>
+    1207:	83 c4 10             	add    $0x10,%esp
+
+  for(pi = 0; pi < 4; pi++){
+    pid = fork();
+    120a:	e8 8b 26 00 00       	call   389a <fork>
+    if(pid < 0){
+    120f:	85 c0                	test   %eax,%eax
+    1211:	0f 88 b7 01 00 00    	js     13ce <createdelete+0x1de>
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+    1217:	0f 84 f6 00 00 00    	je     1313 <createdelete+0x123>
+  int pid, i, fd, pi;
+  char name[32];
+
+  printf(1, "createdelete test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    121d:	83 c3 01             	add    $0x1,%ebx
+    1220:	83 fb 04             	cmp    $0x4,%ebx
+    1223:	75 e5                	jne    120a <createdelete+0x1a>
+    1225:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    1228:	31 f6                	xor    %esi,%esi
+      exit();
+    }
+  }
+
+  for(pi = 0; pi < 4; pi++){
+    wait();
+    122a:	e8 7b 26 00 00       	call   38aa <wait>
+    122f:	e8 76 26 00 00       	call   38aa <wait>
+    1234:	e8 71 26 00 00       	call   38aa <wait>
+    1239:	e8 6c 26 00 00       	call   38aa <wait>
+  }
+
+  name[0] = name[1] = name[2] = 0;
+    123e:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1242:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1248:	8d 46 30             	lea    0x30(%esi),%eax
+    124b:	83 fe 09             	cmp    $0x9,%esi
+      exit();
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+    124e:	bb 70 00 00 00       	mov    $0x70,%ebx
+    1253:	0f 9f c2             	setg   %dl
+    1256:	85 f6                	test   %esi,%esi
+    1258:	88 45 c7             	mov    %al,-0x39(%ebp)
+    125b:	0f 94 c0             	sete   %al
+    125e:	09 c2                	or     %eax,%edx
+      name[1] = '0' + i;
+      fd = open(name, 0);
+      if((i == 0 || i >= N/2) && fd < 0){
+        printf(1, "oops createdelete %s didn't exist\n", name);
+        exit();
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1260:	8d 46 ff             	lea    -0x1(%esi),%eax
+    1263:	88 55 c6             	mov    %dl,-0x3a(%ebp)
+    1266:	89 45 c0             	mov    %eax,-0x40(%ebp)
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+    1269:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      fd = open(name, 0);
+    126d:	83 ec 08             	sub    $0x8,%esp
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + pi;
+    1270:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[1] = '0' + i;
+      fd = open(name, 0);
+    1273:	6a 00                	push   $0x0
+    1275:	57                   	push   %edi
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+    1276:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1279:	e8 64 26 00 00       	call   38e2 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    127e:	89 c1                	mov    %eax,%ecx
+    1280:	83 c4 10             	add    $0x10,%esp
+    1283:	c1 e9 1f             	shr    $0x1f,%ecx
+    1286:	84 c9                	test   %cl,%cl
+    1288:	74 0a                	je     1294 <createdelete+0xa4>
+    128a:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    128e:	0f 85 11 01 00 00    	jne    13a5 <createdelete+0x1b5>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+        exit();
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1294:	83 7d c0 08          	cmpl   $0x8,-0x40(%ebp)
+    1298:	0f 86 44 01 00 00    	jbe    13e2 <createdelete+0x1f2>
+        printf(1, "oops createdelete %s did exist\n", name);
+        exit();
+      }
+      if(fd >= 0)
+    129e:	85 c0                	test   %eax,%eax
+    12a0:	78 0c                	js     12ae <createdelete+0xbe>
+        close(fd);
+    12a2:	83 ec 0c             	sub    $0xc,%esp
+    12a5:	50                   	push   %eax
+    12a6:	e8 1f 26 00 00       	call   38ca <close>
+    12ab:	83 c4 10             	add    $0x10,%esp
+    12ae:	83 c3 01             	add    $0x1,%ebx
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+    12b1:	80 fb 74             	cmp    $0x74,%bl
+    12b4:	75 b3                	jne    1269 <createdelete+0x79>
+  for(pi = 0; pi < 4; pi++){
+    wait();
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    12b6:	83 c6 01             	add    $0x1,%esi
+    12b9:	83 fe 14             	cmp    $0x14,%esi
+    12bc:	75 8a                	jne    1248 <createdelete+0x58>
+    12be:	be 70 00 00 00       	mov    $0x70,%esi
+    12c3:	90                   	nop
+    12c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    12c8:	8d 46 c0             	lea    -0x40(%esi),%eax
+    12cb:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12d0:	88 45 c7             	mov    %al,-0x39(%ebp)
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + i;
+    12d3:	89 f0                	mov    %esi,%eax
+      name[1] = '0' + i;
+      unlink(name);
+    12d5:	83 ec 0c             	sub    $0xc,%esp
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + i;
+    12d8:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    12db:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      unlink(name);
+    12df:	57                   	push   %edi
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + i;
+      name[1] = '0' + i;
+    12e0:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    12e3:	e8 0a 26 00 00       	call   38f2 <unlink>
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < 4; pi++){
+    12e8:	83 c4 10             	add    $0x10,%esp
+    12eb:	83 eb 01             	sub    $0x1,%ebx
+    12ee:	75 e3                	jne    12d3 <createdelete+0xe3>
+    12f0:	83 c6 01             	add    $0x1,%esi
+      if(fd >= 0)
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    12f3:	89 f0                	mov    %esi,%eax
+    12f5:	3c 84                	cmp    $0x84,%al
+    12f7:	75 cf                	jne    12c8 <createdelete+0xd8>
+      name[1] = '0' + i;
+      unlink(name);
+    }
+  }
+
+  printf(1, "createdelete ok\n");
+    12f9:	83 ec 08             	sub    $0x8,%esp
+    12fc:	68 eb 41 00 00       	push   $0x41eb
+    1301:	6a 01                	push   $0x1
+    1303:	e8 f8 26 00 00       	call   3a00 <printf>
+}
+    1308:	83 c4 10             	add    $0x10,%esp
+    130b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    130e:	5b                   	pop    %ebx
+    130f:	5e                   	pop    %esi
+    1310:	5f                   	pop    %edi
+    1311:	5d                   	pop    %ebp
+    1312:	c3                   	ret    
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+    1313:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    1316:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    131a:	be 01 00 00 00       	mov    $0x1,%esi
+      printf(1, "fork failed\n");
+      exit();
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+    131f:	88 5d c8             	mov    %bl,-0x38(%ebp)
+    1322:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[2] = '\0';
+    1325:	31 db                	xor    %ebx,%ebx
+    1327:	eb 12                	jmp    133b <createdelete+0x14b>
+    1329:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    1330:	83 fe 14             	cmp    $0x14,%esi
+    1333:	74 6b                	je     13a0 <createdelete+0x1b0>
+    1335:	83 c3 01             	add    $0x1,%ebx
+    1338:	83 c6 01             	add    $0x1,%esi
+        name[1] = '0' + i;
+        fd = open(name, O_CREATE | O_RDWR);
+    133b:	83 ec 08             	sub    $0x8,%esp
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+        name[1] = '0' + i;
+    133e:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    1341:	68 02 02 00 00       	push   $0x202
+    1346:	57                   	push   %edi
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+        name[1] = '0' + i;
+    1347:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    134a:	e8 93 25 00 00       	call   38e2 <open>
+        if(fd < 0){
+    134f:	83 c4 10             	add    $0x10,%esp
+    1352:	85 c0                	test   %eax,%eax
+    1354:	78 64                	js     13ba <createdelete+0x1ca>
+          printf(1, "create failed\n");
+          exit();
+        }
+        close(fd);
+    1356:	83 ec 0c             	sub    $0xc,%esp
+    1359:	50                   	push   %eax
+    135a:	e8 6b 25 00 00       	call   38ca <close>
+        if(i > 0 && (i % 2 ) == 0){
+    135f:	83 c4 10             	add    $0x10,%esp
+    1362:	85 db                	test   %ebx,%ebx
+    1364:	74 cf                	je     1335 <createdelete+0x145>
+    1366:	f6 c3 01             	test   $0x1,%bl
+    1369:	75 c5                	jne    1330 <createdelete+0x140>
+          name[1] = '0' + (i / 2);
+          if(unlink(name) < 0){
+    136b:	83 ec 0c             	sub    $0xc,%esp
+          printf(1, "create failed\n");
+          exit();
+        }
+        close(fd);
+        if(i > 0 && (i % 2 ) == 0){
+          name[1] = '0' + (i / 2);
+    136e:	89 d8                	mov    %ebx,%eax
+    1370:	d1 f8                	sar    %eax
+          if(unlink(name) < 0){
+    1372:	57                   	push   %edi
+          printf(1, "create failed\n");
+          exit();
+        }
+        close(fd);
+        if(i > 0 && (i % 2 ) == 0){
+          name[1] = '0' + (i / 2);
+    1373:	83 c0 30             	add    $0x30,%eax
+    1376:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    1379:	e8 74 25 00 00       	call   38f2 <unlink>
+    137e:	83 c4 10             	add    $0x10,%esp
+    1381:	85 c0                	test   %eax,%eax
+    1383:	79 ab                	jns    1330 <createdelete+0x140>
+            printf(1, "unlink failed\n");
+    1385:	83 ec 08             	sub    $0x8,%esp
+    1388:	68 d9 3d 00 00       	push   $0x3dd9
+    138d:	6a 01                	push   $0x1
+    138f:	e8 6c 26 00 00       	call   3a00 <printf>
+            exit();
+    1394:	e8 09 25 00 00       	call   38a2 <exit>
+    1399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+          }
+        }
+      }
+      exit();
+    13a0:	e8 fd 24 00 00       	call   38a2 <exit>
+    for(pi = 0; pi < 4; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+      fd = open(name, 0);
+      if((i == 0 || i >= N/2) && fd < 0){
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13a5:	83 ec 04             	sub    $0x4,%esp
+    13a8:	57                   	push   %edi
+    13a9:	68 98 4e 00 00       	push   $0x4e98
+    13ae:	6a 01                	push   $0x1
+    13b0:	e8 4b 26 00 00       	call   3a00 <printf>
+        exit();
+    13b5:	e8 e8 24 00 00       	call   38a2 <exit>
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+        name[1] = '0' + i;
+        fd = open(name, O_CREATE | O_RDWR);
+        if(fd < 0){
+          printf(1, "create failed\n");
+    13ba:	83 ec 08             	sub    $0x8,%esp
+    13bd:	68 27 44 00 00       	push   $0x4427
+    13c2:	6a 01                	push   $0x1
+    13c4:	e8 37 26 00 00       	call   3a00 <printf>
+          exit();
+    13c9:	e8 d4 24 00 00       	call   38a2 <exit>
+  printf(1, "createdelete test\n");
+
+  for(pi = 0; pi < 4; pi++){
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+    13ce:	83 ec 08             	sub    $0x8,%esp
+    13d1:	68 61 4c 00 00       	push   $0x4c61
+    13d6:	6a 01                	push   $0x1
+    13d8:	e8 23 26 00 00       	call   3a00 <printf>
+      exit();
+    13dd:	e8 c0 24 00 00       	call   38a2 <exit>
+      name[1] = '0' + i;
+      fd = open(name, 0);
+      if((i == 0 || i >= N/2) && fd < 0){
+        printf(1, "oops createdelete %s didn't exist\n", name);
+        exit();
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    13e2:	85 c0                	test   %eax,%eax
+    13e4:	0f 88 c4 fe ff ff    	js     12ae <createdelete+0xbe>
+        printf(1, "oops createdelete %s did exist\n", name);
+    13ea:	83 ec 04             	sub    $0x4,%esp
+    13ed:	57                   	push   %edi
+    13ee:	68 bc 4e 00 00       	push   $0x4ebc
+    13f3:	6a 01                	push   $0x1
+    13f5:	e8 06 26 00 00       	call   3a00 <printf>
+        exit();
+    13fa:	e8 a3 24 00 00       	call   38a2 <exit>
+    13ff:	90                   	nop
+
+00001400 <unlinkread>:
+}
+
+// can I unlink a file and still read it?
+void
+unlinkread(void)
+{
+    1400:	55                   	push   %ebp
+    1401:	89 e5                	mov    %esp,%ebp
+    1403:	56                   	push   %esi
+    1404:	53                   	push   %ebx
+  int fd, fd1;
+
+  printf(1, "unlinkread test\n");
+    1405:	83 ec 08             	sub    $0x8,%esp
+    1408:	68 fc 41 00 00       	push   $0x41fc
+    140d:	6a 01                	push   $0x1
+    140f:	e8 ec 25 00 00       	call   3a00 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1414:	5b                   	pop    %ebx
+    1415:	5e                   	pop    %esi
+    1416:	68 02 02 00 00       	push   $0x202
+    141b:	68 0d 42 00 00       	push   $0x420d
+    1420:	e8 bd 24 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1425:	83 c4 10             	add    $0x10,%esp
+    1428:	85 c0                	test   %eax,%eax
+    142a:	0f 88 e6 00 00 00    	js     1516 <unlinkread+0x116>
+    printf(1, "create unlinkread failed\n");
+    exit();
+  }
+  write(fd, "hello", 5);
+    1430:	83 ec 04             	sub    $0x4,%esp
+    1433:	89 c3                	mov    %eax,%ebx
+    1435:	6a 05                	push   $0x5
+    1437:	68 32 42 00 00       	push   $0x4232
+    143c:	50                   	push   %eax
+    143d:	e8 80 24 00 00       	call   38c2 <write>
+  close(fd);
+    1442:	89 1c 24             	mov    %ebx,(%esp)
+    1445:	e8 80 24 00 00       	call   38ca <close>
+
+  fd = open("unlinkread", O_RDWR);
+    144a:	58                   	pop    %eax
+    144b:	5a                   	pop    %edx
+    144c:	6a 02                	push   $0x2
+    144e:	68 0d 42 00 00       	push   $0x420d
+    1453:	e8 8a 24 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1458:	83 c4 10             	add    $0x10,%esp
+    145b:	85 c0                	test   %eax,%eax
+    exit();
+  }
+  write(fd, "hello", 5);
+  close(fd);
+
+  fd = open("unlinkread", O_RDWR);
+    145d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    145f:	0f 88 10 01 00 00    	js     1575 <unlinkread+0x175>
+    printf(1, "open unlinkread failed\n");
+    exit();
+  }
+  if(unlink("unlinkread") != 0){
+    1465:	83 ec 0c             	sub    $0xc,%esp
+    1468:	68 0d 42 00 00       	push   $0x420d
+    146d:	e8 80 24 00 00       	call   38f2 <unlink>
+    1472:	83 c4 10             	add    $0x10,%esp
+    1475:	85 c0                	test   %eax,%eax
+    1477:	0f 85 e5 00 00 00    	jne    1562 <unlinkread+0x162>
+    printf(1, "unlink unlinkread failed\n");
+    exit();
+  }
+
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    147d:	83 ec 08             	sub    $0x8,%esp
+    1480:	68 02 02 00 00       	push   $0x202
+    1485:	68 0d 42 00 00       	push   $0x420d
+    148a:	e8 53 24 00 00       	call   38e2 <open>
+  write(fd1, "yyy", 3);
+    148f:	83 c4 0c             	add    $0xc,%esp
+  if(unlink("unlinkread") != 0){
+    printf(1, "unlink unlinkread failed\n");
+    exit();
+  }
+
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1492:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    1494:	6a 03                	push   $0x3
+    1496:	68 6a 42 00 00       	push   $0x426a
+    149b:	50                   	push   %eax
+    149c:	e8 21 24 00 00       	call   38c2 <write>
+  close(fd1);
+    14a1:	89 34 24             	mov    %esi,(%esp)
+    14a4:	e8 21 24 00 00       	call   38ca <close>
+
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14a9:	83 c4 0c             	add    $0xc,%esp
+    14ac:	68 00 20 00 00       	push   $0x2000
+    14b1:	68 a0 85 00 00       	push   $0x85a0
+    14b6:	53                   	push   %ebx
+    14b7:	e8 fe 23 00 00       	call   38ba <read>
+    14bc:	83 c4 10             	add    $0x10,%esp
+    14bf:	83 f8 05             	cmp    $0x5,%eax
+    14c2:	0f 85 87 00 00 00    	jne    154f <unlinkread+0x14f>
+    printf(1, "unlinkread read failed");
+    exit();
+  }
+  if(buf[0] != 'h'){
+    14c8:	80 3d a0 85 00 00 68 	cmpb   $0x68,0x85a0
+    14cf:	75 6b                	jne    153c <unlinkread+0x13c>
+    printf(1, "unlinkread wrong data\n");
+    exit();
+  }
+  if(write(fd, buf, 10) != 10){
+    14d1:	83 ec 04             	sub    $0x4,%esp
+    14d4:	6a 0a                	push   $0xa
+    14d6:	68 a0 85 00 00       	push   $0x85a0
+    14db:	53                   	push   %ebx
+    14dc:	e8 e1 23 00 00       	call   38c2 <write>
+    14e1:	83 c4 10             	add    $0x10,%esp
+    14e4:	83 f8 0a             	cmp    $0xa,%eax
+    14e7:	75 40                	jne    1529 <unlinkread+0x129>
+    printf(1, "unlinkread write failed\n");
+    exit();
+  }
+  close(fd);
+    14e9:	83 ec 0c             	sub    $0xc,%esp
+    14ec:	53                   	push   %ebx
+    14ed:	e8 d8 23 00 00       	call   38ca <close>
+  unlink("unlinkread");
+    14f2:	c7 04 24 0d 42 00 00 	movl   $0x420d,(%esp)
+    14f9:	e8 f4 23 00 00       	call   38f2 <unlink>
+  printf(1, "unlinkread ok\n");
+    14fe:	58                   	pop    %eax
+    14ff:	5a                   	pop    %edx
+    1500:	68 b5 42 00 00       	push   $0x42b5
+    1505:	6a 01                	push   $0x1
+    1507:	e8 f4 24 00 00       	call   3a00 <printf>
+}
+    150c:	83 c4 10             	add    $0x10,%esp
+    150f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1512:	5b                   	pop    %ebx
+    1513:	5e                   	pop    %esi
+    1514:	5d                   	pop    %ebp
+    1515:	c3                   	ret    
+  int fd, fd1;
+
+  printf(1, "unlinkread test\n");
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create unlinkread failed\n");
+    1516:	51                   	push   %ecx
+    1517:	51                   	push   %ecx
+    1518:	68 18 42 00 00       	push   $0x4218
+    151d:	6a 01                	push   $0x1
+    151f:	e8 dc 24 00 00       	call   3a00 <printf>
+    exit();
+    1524:	e8 79 23 00 00       	call   38a2 <exit>
+  if(buf[0] != 'h'){
+    printf(1, "unlinkread wrong data\n");
+    exit();
+  }
+  if(write(fd, buf, 10) != 10){
+    printf(1, "unlinkread write failed\n");
+    1529:	51                   	push   %ecx
+    152a:	51                   	push   %ecx
+    152b:	68 9c 42 00 00       	push   $0x429c
+    1530:	6a 01                	push   $0x1
+    1532:	e8 c9 24 00 00       	call   3a00 <printf>
+    exit();
+    1537:	e8 66 23 00 00       	call   38a2 <exit>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "unlinkread read failed");
+    exit();
+  }
+  if(buf[0] != 'h'){
+    printf(1, "unlinkread wrong data\n");
+    153c:	53                   	push   %ebx
+    153d:	53                   	push   %ebx
+    153e:	68 85 42 00 00       	push   $0x4285
+    1543:	6a 01                	push   $0x1
+    1545:	e8 b6 24 00 00       	call   3a00 <printf>
+    exit();
+    154a:	e8 53 23 00 00       	call   38a2 <exit>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+  write(fd1, "yyy", 3);
+  close(fd1);
+
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "unlinkread read failed");
+    154f:	56                   	push   %esi
+    1550:	56                   	push   %esi
+    1551:	68 6e 42 00 00       	push   $0x426e
+    1556:	6a 01                	push   $0x1
+    1558:	e8 a3 24 00 00       	call   3a00 <printf>
+    exit();
+    155d:	e8 40 23 00 00       	call   38a2 <exit>
+  if(fd < 0){
+    printf(1, "open unlinkread failed\n");
+    exit();
+  }
+  if(unlink("unlinkread") != 0){
+    printf(1, "unlink unlinkread failed\n");
+    1562:	50                   	push   %eax
+    1563:	50                   	push   %eax
+    1564:	68 50 42 00 00       	push   $0x4250
+    1569:	6a 01                	push   $0x1
+    156b:	e8 90 24 00 00       	call   3a00 <printf>
+    exit();
+    1570:	e8 2d 23 00 00       	call   38a2 <exit>
+  write(fd, "hello", 5);
+  close(fd);
+
+  fd = open("unlinkread", O_RDWR);
+  if(fd < 0){
+    printf(1, "open unlinkread failed\n");
+    1575:	50                   	push   %eax
+    1576:	50                   	push   %eax
+    1577:	68 38 42 00 00       	push   $0x4238
+    157c:	6a 01                	push   $0x1
+    157e:	e8 7d 24 00 00       	call   3a00 <printf>
+    exit();
+    1583:	e8 1a 23 00 00       	call   38a2 <exit>
+    1588:	90                   	nop
+    1589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001590 <linktest>:
+  printf(1, "unlinkread ok\n");
+}
+
+void
+linktest(void)
+{
+    1590:	55                   	push   %ebp
+    1591:	89 e5                	mov    %esp,%ebp
+    1593:	53                   	push   %ebx
+    1594:	83 ec 0c             	sub    $0xc,%esp
+  int fd;
+
+  printf(1, "linktest\n");
+    1597:	68 c4 42 00 00       	push   $0x42c4
+    159c:	6a 01                	push   $0x1
+    159e:	e8 5d 24 00 00       	call   3a00 <printf>
+
+  unlink("lf1");
+    15a3:	c7 04 24 ce 42 00 00 	movl   $0x42ce,(%esp)
+    15aa:	e8 43 23 00 00       	call   38f2 <unlink>
+  unlink("lf2");
+    15af:	c7 04 24 d2 42 00 00 	movl   $0x42d2,(%esp)
+    15b6:	e8 37 23 00 00       	call   38f2 <unlink>
+
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15bb:	58                   	pop    %eax
+    15bc:	5a                   	pop    %edx
+    15bd:	68 02 02 00 00       	push   $0x202
+    15c2:	68 ce 42 00 00       	push   $0x42ce
+    15c7:	e8 16 23 00 00       	call   38e2 <open>
+  if(fd < 0){
+    15cc:	83 c4 10             	add    $0x10,%esp
+    15cf:	85 c0                	test   %eax,%eax
+    15d1:	0f 88 1e 01 00 00    	js     16f5 <linktest+0x165>
+    printf(1, "create lf1 failed\n");
+    exit();
+  }
+  if(write(fd, "hello", 5) != 5){
+    15d7:	83 ec 04             	sub    $0x4,%esp
+    15da:	89 c3                	mov    %eax,%ebx
+    15dc:	6a 05                	push   $0x5
+    15de:	68 32 42 00 00       	push   $0x4232
+    15e3:	50                   	push   %eax
+    15e4:	e8 d9 22 00 00       	call   38c2 <write>
+    15e9:	83 c4 10             	add    $0x10,%esp
+    15ec:	83 f8 05             	cmp    $0x5,%eax
+    15ef:	0f 85 98 01 00 00    	jne    178d <linktest+0x1fd>
+    printf(1, "write lf1 failed\n");
+    exit();
+  }
+  close(fd);
+    15f5:	83 ec 0c             	sub    $0xc,%esp
+    15f8:	53                   	push   %ebx
+    15f9:	e8 cc 22 00 00       	call   38ca <close>
+
+  if(link("lf1", "lf2") < 0){
+    15fe:	5b                   	pop    %ebx
+    15ff:	58                   	pop    %eax
+    1600:	68 d2 42 00 00       	push   $0x42d2
+    1605:	68 ce 42 00 00       	push   $0x42ce
+    160a:	e8 f3 22 00 00       	call   3902 <link>
+    160f:	83 c4 10             	add    $0x10,%esp
+    1612:	85 c0                	test   %eax,%eax
+    1614:	0f 88 60 01 00 00    	js     177a <linktest+0x1ea>
+    printf(1, "link lf1 lf2 failed\n");
+    exit();
+  }
+  unlink("lf1");
+    161a:	83 ec 0c             	sub    $0xc,%esp
+    161d:	68 ce 42 00 00       	push   $0x42ce
+    1622:	e8 cb 22 00 00       	call   38f2 <unlink>
+
+  if(open("lf1", 0) >= 0){
+    1627:	58                   	pop    %eax
+    1628:	5a                   	pop    %edx
+    1629:	6a 00                	push   $0x0
+    162b:	68 ce 42 00 00       	push   $0x42ce
+    1630:	e8 ad 22 00 00       	call   38e2 <open>
+    1635:	83 c4 10             	add    $0x10,%esp
+    1638:	85 c0                	test   %eax,%eax
+    163a:	0f 89 27 01 00 00    	jns    1767 <linktest+0x1d7>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    exit();
+  }
+
+  fd = open("lf2", 0);
+    1640:	83 ec 08             	sub    $0x8,%esp
+    1643:	6a 00                	push   $0x0
+    1645:	68 d2 42 00 00       	push   $0x42d2
+    164a:	e8 93 22 00 00       	call   38e2 <open>
+  if(fd < 0){
+    164f:	83 c4 10             	add    $0x10,%esp
+    1652:	85 c0                	test   %eax,%eax
+  if(open("lf1", 0) >= 0){
+    printf(1, "unlinked lf1 but it is still there!\n");
+    exit();
+  }
+
+  fd = open("lf2", 0);
+    1654:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1656:	0f 88 f8 00 00 00    	js     1754 <linktest+0x1c4>
+    printf(1, "open lf2 failed\n");
+    exit();
+  }
+  if(read(fd, buf, sizeof(buf)) != 5){
+    165c:	83 ec 04             	sub    $0x4,%esp
+    165f:	68 00 20 00 00       	push   $0x2000
+    1664:	68 a0 85 00 00       	push   $0x85a0
+    1669:	50                   	push   %eax
+    166a:	e8 4b 22 00 00       	call   38ba <read>
+    166f:	83 c4 10             	add    $0x10,%esp
+    1672:	83 f8 05             	cmp    $0x5,%eax
+    1675:	0f 85 c6 00 00 00    	jne    1741 <linktest+0x1b1>
+    printf(1, "read lf2 failed\n");
+    exit();
+  }
+  close(fd);
+    167b:	83 ec 0c             	sub    $0xc,%esp
+    167e:	53                   	push   %ebx
+    167f:	e8 46 22 00 00       	call   38ca <close>
+
+  if(link("lf2", "lf2") >= 0){
+    1684:	58                   	pop    %eax
+    1685:	5a                   	pop    %edx
+    1686:	68 d2 42 00 00       	push   $0x42d2
+    168b:	68 d2 42 00 00       	push   $0x42d2
+    1690:	e8 6d 22 00 00       	call   3902 <link>
+    1695:	83 c4 10             	add    $0x10,%esp
+    1698:	85 c0                	test   %eax,%eax
+    169a:	0f 89 8e 00 00 00    	jns    172e <linktest+0x19e>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    exit();
+  }
+
+  unlink("lf2");
+    16a0:	83 ec 0c             	sub    $0xc,%esp
+    16a3:	68 d2 42 00 00       	push   $0x42d2
+    16a8:	e8 45 22 00 00       	call   38f2 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16ad:	59                   	pop    %ecx
+    16ae:	5b                   	pop    %ebx
+    16af:	68 ce 42 00 00       	push   $0x42ce
+    16b4:	68 d2 42 00 00       	push   $0x42d2
+    16b9:	e8 44 22 00 00       	call   3902 <link>
+    16be:	83 c4 10             	add    $0x10,%esp
+    16c1:	85 c0                	test   %eax,%eax
+    16c3:	79 56                	jns    171b <linktest+0x18b>
+    printf(1, "link non-existant succeeded! oops\n");
+    exit();
+  }
+
+  if(link(".", "lf1") >= 0){
+    16c5:	83 ec 08             	sub    $0x8,%esp
+    16c8:	68 ce 42 00 00       	push   $0x42ce
+    16cd:	68 96 45 00 00       	push   $0x4596
+    16d2:	e8 2b 22 00 00       	call   3902 <link>
+    16d7:	83 c4 10             	add    $0x10,%esp
+    16da:	85 c0                	test   %eax,%eax
+    16dc:	79 2a                	jns    1708 <linktest+0x178>
+    printf(1, "link . lf1 succeeded! oops\n");
+    exit();
+  }
+
+  printf(1, "linktest ok\n");
+    16de:	83 ec 08             	sub    $0x8,%esp
+    16e1:	68 6c 43 00 00       	push   $0x436c
+    16e6:	6a 01                	push   $0x1
+    16e8:	e8 13 23 00 00       	call   3a00 <printf>
+}
+    16ed:	83 c4 10             	add    $0x10,%esp
+    16f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    16f3:	c9                   	leave  
+    16f4:	c3                   	ret    
+  unlink("lf1");
+  unlink("lf2");
+
+  fd = open("lf1", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf(1, "create lf1 failed\n");
+    16f5:	50                   	push   %eax
+    16f6:	50                   	push   %eax
+    16f7:	68 d6 42 00 00       	push   $0x42d6
+    16fc:	6a 01                	push   $0x1
+    16fe:	e8 fd 22 00 00       	call   3a00 <printf>
+    exit();
+    1703:	e8 9a 21 00 00       	call   38a2 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    exit();
+  }
+
+  if(link(".", "lf1") >= 0){
+    printf(1, "link . lf1 succeeded! oops\n");
+    1708:	50                   	push   %eax
+    1709:	50                   	push   %eax
+    170a:	68 50 43 00 00       	push   $0x4350
+    170f:	6a 01                	push   $0x1
+    1711:	e8 ea 22 00 00       	call   3a00 <printf>
+    exit();
+    1716:	e8 87 21 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  unlink("lf2");
+  if(link("lf2", "lf1") >= 0){
+    printf(1, "link non-existant succeeded! oops\n");
+    171b:	52                   	push   %edx
+    171c:	52                   	push   %edx
+    171d:	68 04 4f 00 00       	push   $0x4f04
+    1722:	6a 01                	push   $0x1
+    1724:	e8 d7 22 00 00       	call   3a00 <printf>
+    exit();
+    1729:	e8 74 21 00 00       	call   38a2 <exit>
+    exit();
+  }
+  close(fd);
+
+  if(link("lf2", "lf2") >= 0){
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    172e:	50                   	push   %eax
+    172f:	50                   	push   %eax
+    1730:	68 32 43 00 00       	push   $0x4332
+    1735:	6a 01                	push   $0x1
+    1737:	e8 c4 22 00 00       	call   3a00 <printf>
+    exit();
+    173c:	e8 61 21 00 00       	call   38a2 <exit>
+  if(fd < 0){
+    printf(1, "open lf2 failed\n");
+    exit();
+  }
+  if(read(fd, buf, sizeof(buf)) != 5){
+    printf(1, "read lf2 failed\n");
+    1741:	51                   	push   %ecx
+    1742:	51                   	push   %ecx
+    1743:	68 21 43 00 00       	push   $0x4321
+    1748:	6a 01                	push   $0x1
+    174a:	e8 b1 22 00 00       	call   3a00 <printf>
+    exit();
+    174f:	e8 4e 21 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  fd = open("lf2", 0);
+  if(fd < 0){
+    printf(1, "open lf2 failed\n");
+    1754:	53                   	push   %ebx
+    1755:	53                   	push   %ebx
+    1756:	68 10 43 00 00       	push   $0x4310
+    175b:	6a 01                	push   $0x1
+    175d:	e8 9e 22 00 00       	call   3a00 <printf>
+    exit();
+    1762:	e8 3b 21 00 00       	call   38a2 <exit>
+    exit();
+  }
+  unlink("lf1");
+
+  if(open("lf1", 0) >= 0){
+    printf(1, "unlinked lf1 but it is still there!\n");
+    1767:	50                   	push   %eax
+    1768:	50                   	push   %eax
+    1769:	68 dc 4e 00 00       	push   $0x4edc
+    176e:	6a 01                	push   $0x1
+    1770:	e8 8b 22 00 00       	call   3a00 <printf>
+    exit();
+    1775:	e8 28 21 00 00       	call   38a2 <exit>
+    exit();
+  }
+  close(fd);
+
+  if(link("lf1", "lf2") < 0){
+    printf(1, "link lf1 lf2 failed\n");
+    177a:	51                   	push   %ecx
+    177b:	51                   	push   %ecx
+    177c:	68 fb 42 00 00       	push   $0x42fb
+    1781:	6a 01                	push   $0x1
+    1783:	e8 78 22 00 00       	call   3a00 <printf>
+    exit();
+    1788:	e8 15 21 00 00       	call   38a2 <exit>
+  if(fd < 0){
+    printf(1, "create lf1 failed\n");
+    exit();
+  }
+  if(write(fd, "hello", 5) != 5){
+    printf(1, "write lf1 failed\n");
+    178d:	50                   	push   %eax
+    178e:	50                   	push   %eax
+    178f:	68 e9 42 00 00       	push   $0x42e9
+    1794:	6a 01                	push   $0x1
+    1796:	e8 65 22 00 00       	call   3a00 <printf>
+    exit();
+    179b:	e8 02 21 00 00       	call   38a2 <exit>
+
+000017a0 <concreate>:
+}
+
+// test concurrent create/link/unlink of the same file
+void
+concreate(void)
+{
+    17a0:	55                   	push   %ebp
+    17a1:	89 e5                	mov    %esp,%ebp
+    17a3:	57                   	push   %edi
+    17a4:	56                   	push   %esi
+    17a5:	53                   	push   %ebx
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    17a6:	31 f6                	xor    %esi,%esi
+    17a8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+    17ab:	bf 56 55 55 55       	mov    $0x55555556,%edi
+}
+
+// test concurrent create/link/unlink of the same file
+void
+concreate(void)
+{
+    17b0:	83 ec 64             	sub    $0x64,%esp
+  struct {
+    ushort inum;
+    char name[14];
+  } de;
+
+  printf(1, "concreate test\n");
+    17b3:	68 79 43 00 00       	push   $0x4379
+    17b8:	6a 01                	push   $0x1
+    17ba:	e8 41 22 00 00       	call   3a00 <printf>
+  file[0] = 'C';
+    17bf:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    17c3:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+    17c7:	83 c4 10             	add    $0x10,%esp
+    17ca:	eb 51                	jmp    181d <concreate+0x7d>
+    17cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+    17d0:	89 f0                	mov    %esi,%eax
+    17d2:	89 f1                	mov    %esi,%ecx
+    17d4:	f7 ef                	imul   %edi
+    17d6:	89 f0                	mov    %esi,%eax
+    17d8:	c1 f8 1f             	sar    $0x1f,%eax
+    17db:	29 c2                	sub    %eax,%edx
+    17dd:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    17e0:	29 c1                	sub    %eax,%ecx
+    17e2:	83 f9 01             	cmp    $0x1,%ecx
+    17e5:	0f 84 b5 00 00 00    	je     18a0 <concreate+0x100>
+      link("C0", file);
+    } else if(pid == 0 && (i % 5) == 1){
+      link("C0", file);
+    } else {
+      fd = open(file, O_CREATE | O_RDWR);
+    17eb:	83 ec 08             	sub    $0x8,%esp
+    17ee:	68 02 02 00 00       	push   $0x202
+    17f3:	53                   	push   %ebx
+    17f4:	e8 e9 20 00 00       	call   38e2 <open>
+      if(fd < 0){
+    17f9:	83 c4 10             	add    $0x10,%esp
+    17fc:	85 c0                	test   %eax,%eax
+    17fe:	78 6d                	js     186d <concreate+0xcd>
+        printf(1, "concreate create %s failed\n", file);
+        exit();
+      }
+      close(fd);
+    1800:	83 ec 0c             	sub    $0xc,%esp
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    1803:	83 c6 01             	add    $0x1,%esi
+      fd = open(file, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "concreate create %s failed\n", file);
+        exit();
+      }
+      close(fd);
+    1806:	50                   	push   %eax
+    1807:	e8 be 20 00 00       	call   38ca <close>
+    180c:	83 c4 10             	add    $0x10,%esp
+    }
+    if(pid == 0)
+      exit();
+    else
+      wait();
+    180f:	e8 96 20 00 00       	call   38aa <wait>
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    1814:	83 fe 28             	cmp    $0x28,%esi
+    1817:	0f 84 ab 00 00 00    	je     18c8 <concreate+0x128>
+    file[1] = '0' + i;
+    unlink(file);
+    181d:	83 ec 0c             	sub    $0xc,%esp
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    1820:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    1823:	53                   	push   %ebx
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    1824:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    1827:	e8 c6 20 00 00       	call   38f2 <unlink>
+    pid = fork();
+    182c:	e8 69 20 00 00       	call   389a <fork>
+    if(pid && (i % 3) == 1){
+    1831:	83 c4 10             	add    $0x10,%esp
+    1834:	85 c0                	test   %eax,%eax
+    1836:	75 98                	jne    17d0 <concreate+0x30>
+      link("C0", file);
+    } else if(pid == 0 && (i % 5) == 1){
+    1838:	89 f0                	mov    %esi,%eax
+    183a:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    183f:	f7 ea                	imul   %edx
+    1841:	89 f0                	mov    %esi,%eax
+    1843:	c1 f8 1f             	sar    $0x1f,%eax
+    1846:	d1 fa                	sar    %edx
+    1848:	29 c2                	sub    %eax,%edx
+    184a:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    184d:	29 c6                	sub    %eax,%esi
+    184f:	83 fe 01             	cmp    $0x1,%esi
+    1852:	74 34                	je     1888 <concreate+0xe8>
+      link("C0", file);
+    } else {
+      fd = open(file, O_CREATE | O_RDWR);
+    1854:	83 ec 08             	sub    $0x8,%esp
+    1857:	68 02 02 00 00       	push   $0x202
+    185c:	53                   	push   %ebx
+    185d:	e8 80 20 00 00       	call   38e2 <open>
+      if(fd < 0){
+    1862:	83 c4 10             	add    $0x10,%esp
+    1865:	85 c0                	test   %eax,%eax
+    1867:	0f 89 32 02 00 00    	jns    1a9f <concreate+0x2ff>
+        printf(1, "concreate create %s failed\n", file);
+    186d:	83 ec 04             	sub    $0x4,%esp
+    1870:	53                   	push   %ebx
+    1871:	68 8c 43 00 00       	push   $0x438c
+    1876:	6a 01                	push   $0x1
+    1878:	e8 83 21 00 00       	call   3a00 <printf>
+        exit();
+    187d:	e8 20 20 00 00       	call   38a2 <exit>
+    1882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+      link("C0", file);
+    } else if(pid == 0 && (i % 5) == 1){
+      link("C0", file);
+    1888:	83 ec 08             	sub    $0x8,%esp
+    188b:	53                   	push   %ebx
+    188c:	68 89 43 00 00       	push   $0x4389
+    1891:	e8 6c 20 00 00       	call   3902 <link>
+    1896:	83 c4 10             	add    $0x10,%esp
+        exit();
+      }
+      close(fd);
+    }
+    if(pid == 0)
+      exit();
+    1899:	e8 04 20 00 00       	call   38a2 <exit>
+    189e:	66 90                	xchg   %ax,%ax
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+      link("C0", file);
+    18a0:	83 ec 08             	sub    $0x8,%esp
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    18a3:	83 c6 01             	add    $0x1,%esi
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+      link("C0", file);
+    18a6:	53                   	push   %ebx
+    18a7:	68 89 43 00 00       	push   $0x4389
+    18ac:	e8 51 20 00 00       	call   3902 <link>
+    18b1:	83 c4 10             	add    $0x10,%esp
+      close(fd);
+    }
+    if(pid == 0)
+      exit();
+    else
+      wait();
+    18b4:	e8 f1 1f 00 00       	call   38aa <wait>
+  } de;
+
+  printf(1, "concreate test\n");
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < 40; i++){
+    18b9:	83 fe 28             	cmp    $0x28,%esi
+    18bc:	0f 85 5b ff ff ff    	jne    181d <concreate+0x7d>
+    18c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+    else
+      wait();
+  }
+
+  memset(fa, 0, sizeof(fa));
+    18c8:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    18cb:	83 ec 04             	sub    $0x4,%esp
+    18ce:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    18d1:	6a 28                	push   $0x28
+    18d3:	6a 00                	push   $0x0
+    18d5:	50                   	push   %eax
+    18d6:	e8 35 1e 00 00       	call   3710 <memset>
+  fd = open(".", 0);
+    18db:	59                   	pop    %ecx
+    18dc:	5e                   	pop    %esi
+    18dd:	6a 00                	push   $0x0
+    18df:	68 96 45 00 00       	push   $0x4596
+    18e4:	e8 f9 1f 00 00       	call   38e2 <open>
+  n = 0;
+  while(read(fd, &de, sizeof(de)) > 0){
+    18e9:	83 c4 10             	add    $0x10,%esp
+    else
+      wait();
+  }
+
+  memset(fa, 0, sizeof(fa));
+  fd = open(".", 0);
+    18ec:	89 c6                	mov    %eax,%esi
+  n = 0;
+    18ee:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+    18f5:	8d 76 00             	lea    0x0(%esi),%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    18f8:	83 ec 04             	sub    $0x4,%esp
+    18fb:	6a 10                	push   $0x10
+    18fd:	57                   	push   %edi
+    18fe:	56                   	push   %esi
+    18ff:	e8 b6 1f 00 00       	call   38ba <read>
+    1904:	83 c4 10             	add    $0x10,%esp
+    1907:	85 c0                	test   %eax,%eax
+    1909:	7e 3d                	jle    1948 <concreate+0x1a8>
+    if(de.inum == 0)
+    190b:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1910:	74 e6                	je     18f8 <concreate+0x158>
+      continue;
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    1912:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    1916:	75 e0                	jne    18f8 <concreate+0x158>
+    1918:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    191c:	75 da                	jne    18f8 <concreate+0x158>
+      i = de.name[1] - '0';
+    191e:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    1922:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    1925:	83 f8 27             	cmp    $0x27,%eax
+    1928:	0f 87 59 01 00 00    	ja     1a87 <concreate+0x2e7>
+        printf(1, "concreate weird file %s\n", de.name);
+        exit();
+      }
+      if(fa[i]){
+    192e:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    1933:	0f 85 36 01 00 00    	jne    1a6f <concreate+0x2cf>
+        printf(1, "concreate duplicate file %s\n", de.name);
+        exit();
+      }
+      fa[i] = 1;
+    1939:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    193e:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+    1942:	eb b4                	jmp    18f8 <concreate+0x158>
+    1944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  close(fd);
+    1948:	83 ec 0c             	sub    $0xc,%esp
+    194b:	56                   	push   %esi
+    194c:	e8 79 1f 00 00       	call   38ca <close>
+
+  if(n != 40){
+    1951:	83 c4 10             	add    $0x10,%esp
+    1954:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1958:	0f 85 fd 00 00 00    	jne    1a5b <concreate+0x2bb>
+    195e:	31 f6                	xor    %esi,%esi
+    1960:	eb 70                	jmp    19d2 <concreate+0x232>
+    1962:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid < 0){
+      printf(1, "fork failed\n");
+      exit();
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+       ((i % 3) == 1 && pid != 0)){
+    1968:	83 fa 01             	cmp    $0x1,%edx
+    196b:	0f 85 99 00 00 00    	jne    1a0a <concreate+0x26a>
+      close(open(file, 0));
+    1971:	83 ec 08             	sub    $0x8,%esp
+    1974:	6a 00                	push   $0x0
+    1976:	53                   	push   %ebx
+    1977:	e8 66 1f 00 00       	call   38e2 <open>
+    197c:	89 04 24             	mov    %eax,(%esp)
+    197f:	e8 46 1f 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1984:	58                   	pop    %eax
+    1985:	5a                   	pop    %edx
+    1986:	6a 00                	push   $0x0
+    1988:	53                   	push   %ebx
+    1989:	e8 54 1f 00 00       	call   38e2 <open>
+    198e:	89 04 24             	mov    %eax,(%esp)
+    1991:	e8 34 1f 00 00       	call   38ca <close>
+      close(open(file, 0));
+    1996:	59                   	pop    %ecx
+    1997:	58                   	pop    %eax
+    1998:	6a 00                	push   $0x0
+    199a:	53                   	push   %ebx
+    199b:	e8 42 1f 00 00       	call   38e2 <open>
+    19a0:	89 04 24             	mov    %eax,(%esp)
+    19a3:	e8 22 1f 00 00       	call   38ca <close>
+      close(open(file, 0));
+    19a8:	58                   	pop    %eax
+    19a9:	5a                   	pop    %edx
+    19aa:	6a 00                	push   $0x0
+    19ac:	53                   	push   %ebx
+    19ad:	e8 30 1f 00 00       	call   38e2 <open>
+    19b2:	89 04 24             	mov    %eax,(%esp)
+    19b5:	e8 10 1f 00 00       	call   38ca <close>
+    19ba:	83 c4 10             	add    $0x10,%esp
+      unlink(file);
+      unlink(file);
+      unlink(file);
+      unlink(file);
+    }
+    if(pid == 0)
+    19bd:	85 ff                	test   %edi,%edi
+    19bf:	0f 84 d4 fe ff ff    	je     1899 <concreate+0xf9>
+  if(n != 40){
+    printf(1, "concreate not enough files in directory listing\n");
+    exit();
+  }
+
+  for(i = 0; i < 40; i++){
+    19c5:	83 c6 01             	add    $0x1,%esi
+      unlink(file);
+    }
+    if(pid == 0)
+      exit();
+    else
+      wait();
+    19c8:	e8 dd 1e 00 00       	call   38aa <wait>
+  if(n != 40){
+    printf(1, "concreate not enough files in directory listing\n");
+    exit();
+  }
+
+  for(i = 0; i < 40; i++){
+    19cd:	83 fe 28             	cmp    $0x28,%esi
+    19d0:	74 5e                	je     1a30 <concreate+0x290>
+    file[1] = '0' + i;
+    19d2:	8d 46 30             	lea    0x30(%esi),%eax
+    19d5:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19d8:	e8 bd 1e 00 00       	call   389a <fork>
+    if(pid < 0){
+    19dd:	85 c0                	test   %eax,%eax
+    exit();
+  }
+
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    pid = fork();
+    19df:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19e1:	78 64                	js     1a47 <concreate+0x2a7>
+      printf(1, "fork failed\n");
+      exit();
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+    19e3:	b8 56 55 55 55       	mov    $0x55555556,%eax
+    19e8:	f7 ee                	imul   %esi
+    19ea:	89 f0                	mov    %esi,%eax
+    19ec:	c1 f8 1f             	sar    $0x1f,%eax
+    19ef:	29 c2                	sub    %eax,%edx
+    19f1:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    19f4:	89 f2                	mov    %esi,%edx
+    19f6:	29 c2                	sub    %eax,%edx
+    19f8:	89 f8                	mov    %edi,%eax
+    19fa:	09 d0                	or     %edx,%eax
+    19fc:	0f 84 6f ff ff ff    	je     1971 <concreate+0x1d1>
+       ((i % 3) == 1 && pid != 0)){
+    1a02:	85 ff                	test   %edi,%edi
+    1a04:	0f 85 5e ff ff ff    	jne    1968 <concreate+0x1c8>
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+    } else {
+      unlink(file);
+    1a0a:	83 ec 0c             	sub    $0xc,%esp
+    1a0d:	53                   	push   %ebx
+    1a0e:	e8 df 1e 00 00       	call   38f2 <unlink>
+      unlink(file);
+    1a13:	89 1c 24             	mov    %ebx,(%esp)
+    1a16:	e8 d7 1e 00 00       	call   38f2 <unlink>
+      unlink(file);
+    1a1b:	89 1c 24             	mov    %ebx,(%esp)
+    1a1e:	e8 cf 1e 00 00       	call   38f2 <unlink>
+      unlink(file);
+    1a23:	89 1c 24             	mov    %ebx,(%esp)
+    1a26:	e8 c7 1e 00 00       	call   38f2 <unlink>
+    1a2b:	83 c4 10             	add    $0x10,%esp
+    1a2e:	eb 8d                	jmp    19bd <concreate+0x21d>
+      exit();
+    else
+      wait();
+  }
+
+  printf(1, "concreate ok\n");
+    1a30:	83 ec 08             	sub    $0x8,%esp
+    1a33:	68 de 43 00 00       	push   $0x43de
+    1a38:	6a 01                	push   $0x1
+    1a3a:	e8 c1 1f 00 00       	call   3a00 <printf>
+}
+    1a3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a42:	5b                   	pop    %ebx
+    1a43:	5e                   	pop    %esi
+    1a44:	5f                   	pop    %edi
+    1a45:	5d                   	pop    %ebp
+    1a46:	c3                   	ret    
+
+  for(i = 0; i < 40; i++){
+    file[1] = '0' + i;
+    pid = fork();
+    if(pid < 0){
+      printf(1, "fork failed\n");
+    1a47:	83 ec 08             	sub    $0x8,%esp
+    1a4a:	68 61 4c 00 00       	push   $0x4c61
+    1a4f:	6a 01                	push   $0x1
+    1a51:	e8 aa 1f 00 00       	call   3a00 <printf>
+      exit();
+    1a56:	e8 47 1e 00 00       	call   38a2 <exit>
+    }
+  }
+  close(fd);
+
+  if(n != 40){
+    printf(1, "concreate not enough files in directory listing\n");
+    1a5b:	83 ec 08             	sub    $0x8,%esp
+    1a5e:	68 28 4f 00 00       	push   $0x4f28
+    1a63:	6a 01                	push   $0x1
+    1a65:	e8 96 1f 00 00       	call   3a00 <printf>
+    exit();
+    1a6a:	e8 33 1e 00 00       	call   38a2 <exit>
+      if(i < 0 || i >= sizeof(fa)){
+        printf(1, "concreate weird file %s\n", de.name);
+        exit();
+      }
+      if(fa[i]){
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a6f:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1a72:	83 ec 04             	sub    $0x4,%esp
+    1a75:	50                   	push   %eax
+    1a76:	68 c1 43 00 00       	push   $0x43c1
+    1a7b:	6a 01                	push   $0x1
+    1a7d:	e8 7e 1f 00 00       	call   3a00 <printf>
+        exit();
+    1a82:	e8 1b 1e 00 00       	call   38a2 <exit>
+    if(de.inum == 0)
+      continue;
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+      i = de.name[1] - '0';
+      if(i < 0 || i >= sizeof(fa)){
+        printf(1, "concreate weird file %s\n", de.name);
+    1a87:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1a8a:	83 ec 04             	sub    $0x4,%esp
+    1a8d:	50                   	push   %eax
+    1a8e:	68 a8 43 00 00       	push   $0x43a8
+    1a93:	6a 01                	push   $0x1
+    1a95:	e8 66 1f 00 00       	call   3a00 <printf>
+        exit();
+    1a9a:	e8 03 1e 00 00       	call   38a2 <exit>
+      fd = open(file, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf(1, "concreate create %s failed\n", file);
+        exit();
+      }
+      close(fd);
+    1a9f:	83 ec 0c             	sub    $0xc,%esp
+    1aa2:	50                   	push   %eax
+    1aa3:	e8 22 1e 00 00       	call   38ca <close>
+    1aa8:	83 c4 10             	add    $0x10,%esp
+    1aab:	e9 e9 fd ff ff       	jmp    1899 <concreate+0xf9>
+
+00001ab0 <linkunlink>:
+
+// another concurrent link/unlink/create test,
+// to look for deadlocks.
+void
+linkunlink()
+{
+    1ab0:	55                   	push   %ebp
+    1ab1:	89 e5                	mov    %esp,%ebp
+    1ab3:	57                   	push   %edi
+    1ab4:	56                   	push   %esi
+    1ab5:	53                   	push   %ebx
+    1ab6:	83 ec 24             	sub    $0x24,%esp
+  int pid, i;
+
+  printf(1, "linkunlink test\n");
+    1ab9:	68 ec 43 00 00       	push   $0x43ec
+    1abe:	6a 01                	push   $0x1
+    1ac0:	e8 3b 1f 00 00       	call   3a00 <printf>
+
+  unlink("x");
+    1ac5:	c7 04 24 79 46 00 00 	movl   $0x4679,(%esp)
+    1acc:	e8 21 1e 00 00       	call   38f2 <unlink>
+  pid = fork();
+    1ad1:	e8 c4 1d 00 00       	call   389a <fork>
+  if(pid < 0){
+    1ad6:	83 c4 10             	add    $0x10,%esp
+    1ad9:	85 c0                	test   %eax,%eax
+  int pid, i;
+
+  printf(1, "linkunlink test\n");
+
+  unlink("x");
+  pid = fork();
+    1adb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1ade:	0f 88 b6 00 00 00    	js     1b9a <linkunlink+0xea>
+    printf(1, "fork failed\n");
+    exit();
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+    1ae4:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1ae8:	bb 64 00 00 00       	mov    $0x64,%ebx
+  for(i = 0; i < 100; i++){
+    x = x * 1103515245 + 12345;
+    if((x % 3) == 0){
+    1aed:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  if(pid < 0){
+    printf(1, "fork failed\n");
+    exit();
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+    1af2:	19 ff                	sbb    %edi,%edi
+    1af4:	83 e7 60             	and    $0x60,%edi
+    1af7:	83 c7 01             	add    $0x1,%edi
+    1afa:	eb 1e                	jmp    1b1a <linkunlink+0x6a>
+    1afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  for(i = 0; i < 100; i++){
+    x = x * 1103515245 + 12345;
+    if((x % 3) == 0){
+      close(open("x", O_RDWR | O_CREATE));
+    } else if((x % 3) == 1){
+    1b00:	83 fa 01             	cmp    $0x1,%edx
+    1b03:	74 7b                	je     1b80 <linkunlink+0xd0>
+      link("cat", "x");
+    } else {
+      unlink("x");
+    1b05:	83 ec 0c             	sub    $0xc,%esp
+    1b08:	68 79 46 00 00       	push   $0x4679
+    1b0d:	e8 e0 1d 00 00       	call   38f2 <unlink>
+    1b12:	83 c4 10             	add    $0x10,%esp
+    printf(1, "fork failed\n");
+    exit();
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+  for(i = 0; i < 100; i++){
+    1b15:	83 eb 01             	sub    $0x1,%ebx
+    1b18:	74 3d                	je     1b57 <linkunlink+0xa7>
+    x = x * 1103515245 + 12345;
+    1b1a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b20:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b26:	89 f8                	mov    %edi,%eax
+    1b28:	f7 e6                	mul    %esi
+    1b2a:	d1 ea                	shr    %edx
+    1b2c:	8d 04 52             	lea    (%edx,%edx,2),%eax
+    1b2f:	89 fa                	mov    %edi,%edx
+    1b31:	29 c2                	sub    %eax,%edx
+    1b33:	75 cb                	jne    1b00 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b35:	83 ec 08             	sub    $0x8,%esp
+    1b38:	68 02 02 00 00       	push   $0x202
+    1b3d:	68 79 46 00 00       	push   $0x4679
+    1b42:	e8 9b 1d 00 00       	call   38e2 <open>
+    1b47:	89 04 24             	mov    %eax,(%esp)
+    1b4a:	e8 7b 1d 00 00       	call   38ca <close>
+    1b4f:	83 c4 10             	add    $0x10,%esp
+    printf(1, "fork failed\n");
+    exit();
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+  for(i = 0; i < 100; i++){
+    1b52:	83 eb 01             	sub    $0x1,%ebx
+    1b55:	75 c3                	jne    1b1a <linkunlink+0x6a>
+    } else {
+      unlink("x");
+    }
+  }
+
+  if(pid)
+    1b57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b5a:	85 c0                	test   %eax,%eax
+    1b5c:	74 50                	je     1bae <linkunlink+0xfe>
+    wait();
+    1b5e:	e8 47 1d 00 00       	call   38aa <wait>
+  else
+    exit();
+
+  printf(1, "linkunlink ok\n");
+    1b63:	83 ec 08             	sub    $0x8,%esp
+    1b66:	68 01 44 00 00       	push   $0x4401
+    1b6b:	6a 01                	push   $0x1
+    1b6d:	e8 8e 1e 00 00       	call   3a00 <printf>
+}
+    1b72:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1b75:	5b                   	pop    %ebx
+    1b76:	5e                   	pop    %esi
+    1b77:	5f                   	pop    %edi
+    1b78:	5d                   	pop    %ebp
+    1b79:	c3                   	ret    
+    1b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(i = 0; i < 100; i++){
+    x = x * 1103515245 + 12345;
+    if((x % 3) == 0){
+      close(open("x", O_RDWR | O_CREATE));
+    } else if((x % 3) == 1){
+      link("cat", "x");
+    1b80:	83 ec 08             	sub    $0x8,%esp
+    1b83:	68 79 46 00 00       	push   $0x4679
+    1b88:	68 fd 43 00 00       	push   $0x43fd
+    1b8d:	e8 70 1d 00 00       	call   3902 <link>
+    1b92:	83 c4 10             	add    $0x10,%esp
+    1b95:	e9 7b ff ff ff       	jmp    1b15 <linkunlink+0x65>
+  printf(1, "linkunlink test\n");
+
+  unlink("x");
+  pid = fork();
+  if(pid < 0){
+    printf(1, "fork failed\n");
+    1b9a:	83 ec 08             	sub    $0x8,%esp
+    1b9d:	68 61 4c 00 00       	push   $0x4c61
+    1ba2:	6a 01                	push   $0x1
+    1ba4:	e8 57 1e 00 00       	call   3a00 <printf>
+    exit();
+    1ba9:	e8 f4 1c 00 00       	call   38a2 <exit>
+  }
+
+  if(pid)
+    wait();
+  else
+    exit();
+    1bae:	e8 ef 1c 00 00       	call   38a2 <exit>
+    1bb3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00001bc0 <bigdir>:
+}
+
+// directory that uses indirect blocks
+void
+bigdir(void)
+{
+    1bc0:	55                   	push   %ebp
+    1bc1:	89 e5                	mov    %esp,%ebp
+    1bc3:	56                   	push   %esi
+    1bc4:	53                   	push   %ebx
+    1bc5:	83 ec 18             	sub    $0x18,%esp
+  int i, fd;
+  char name[10];
+
+  printf(1, "bigdir test\n");
+    1bc8:	68 10 44 00 00       	push   $0x4410
+    1bcd:	6a 01                	push   $0x1
+    1bcf:	e8 2c 1e 00 00       	call   3a00 <printf>
+  unlink("bd");
+    1bd4:	c7 04 24 1d 44 00 00 	movl   $0x441d,(%esp)
+    1bdb:	e8 12 1d 00 00       	call   38f2 <unlink>
+
+  fd = open("bd", O_CREATE);
+    1be0:	58                   	pop    %eax
+    1be1:	5a                   	pop    %edx
+    1be2:	68 00 02 00 00       	push   $0x200
+    1be7:	68 1d 44 00 00       	push   $0x441d
+    1bec:	e8 f1 1c 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1bf1:	83 c4 10             	add    $0x10,%esp
+    1bf4:	85 c0                	test   %eax,%eax
+    1bf6:	0f 88 de 00 00 00    	js     1cda <bigdir+0x11a>
+    printf(1, "bigdir create failed\n");
+    exit();
+  }
+  close(fd);
+    1bfc:	83 ec 0c             	sub    $0xc,%esp
+    1bff:	8d 75 ee             	lea    -0x12(%ebp),%esi
+
+  for(i = 0; i < 500; i++){
+    1c02:	31 db                	xor    %ebx,%ebx
+  fd = open("bd", O_CREATE);
+  if(fd < 0){
+    printf(1, "bigdir create failed\n");
+    exit();
+  }
+  close(fd);
+    1c04:	50                   	push   %eax
+    1c05:	e8 c0 1c 00 00       	call   38ca <close>
+    1c0a:	83 c4 10             	add    $0x10,%esp
+    1c0d:	8d 76 00             	lea    0x0(%esi),%esi
+
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    1c10:	89 d8                	mov    %ebx,%eax
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+    1c12:	83 ec 08             	sub    $0x8,%esp
+    exit();
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    1c15:	c6 45 ee 78          	movb   $0x78,-0x12(%ebp)
+    name[1] = '0' + (i / 64);
+    1c19:	c1 f8 06             	sar    $0x6,%eax
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+    1c1c:	56                   	push   %esi
+    1c1d:	68 1d 44 00 00       	push   $0x441d
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    1c22:	83 c0 30             	add    $0x30,%eax
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    1c25:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    1c29:	88 45 ef             	mov    %al,-0x11(%ebp)
+    name[2] = '0' + (i % 64);
+    1c2c:	89 d8                	mov    %ebx,%eax
+    1c2e:	83 e0 3f             	and    $0x3f,%eax
+    1c31:	83 c0 30             	add    $0x30,%eax
+    1c34:	88 45 f0             	mov    %al,-0x10(%ebp)
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+    1c37:	e8 c6 1c 00 00       	call   3902 <link>
+    1c3c:	83 c4 10             	add    $0x10,%esp
+    1c3f:	85 c0                	test   %eax,%eax
+    1c41:	75 6f                	jne    1cb2 <bigdir+0xf2>
+    printf(1, "bigdir create failed\n");
+    exit();
+  }
+  close(fd);
+
+  for(i = 0; i < 500; i++){
+    1c43:	83 c3 01             	add    $0x1,%ebx
+    1c46:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1c4c:	75 c2                	jne    1c10 <bigdir+0x50>
+      printf(1, "bigdir link failed\n");
+      exit();
+    }
+  }
+
+  unlink("bd");
+    1c4e:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1c51:	31 db                	xor    %ebx,%ebx
+      printf(1, "bigdir link failed\n");
+      exit();
+    }
+  }
+
+  unlink("bd");
+    1c53:	68 1d 44 00 00       	push   $0x441d
+    1c58:	e8 95 1c 00 00       	call   38f2 <unlink>
+    1c5d:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    1c60:	89 d8                	mov    %ebx,%eax
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(unlink(name) != 0){
+    1c62:	83 ec 0c             	sub    $0xc,%esp
+    }
+  }
+
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    1c65:	c6 45 ee 78          	movb   $0x78,-0x12(%ebp)
+    name[1] = '0' + (i / 64);
+    1c69:	c1 f8 06             	sar    $0x6,%eax
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(unlink(name) != 0){
+    1c6c:	56                   	push   %esi
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    1c6d:	c6 45 f1 00          	movb   $0x0,-0xf(%ebp)
+  }
+
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    1c71:	83 c0 30             	add    $0x30,%eax
+    1c74:	88 45 ef             	mov    %al,-0x11(%ebp)
+    name[2] = '0' + (i % 64);
+    1c77:	89 d8                	mov    %ebx,%eax
+    1c79:	83 e0 3f             	and    $0x3f,%eax
+    1c7c:	83 c0 30             	add    $0x30,%eax
+    1c7f:	88 45 f0             	mov    %al,-0x10(%ebp)
+    name[3] = '\0';
+    if(unlink(name) != 0){
+    1c82:	e8 6b 1c 00 00       	call   38f2 <unlink>
+    1c87:	83 c4 10             	add    $0x10,%esp
+    1c8a:	85 c0                	test   %eax,%eax
+    1c8c:	75 38                	jne    1cc6 <bigdir+0x106>
+      exit();
+    }
+  }
+
+  unlink("bd");
+  for(i = 0; i < 500; i++){
+    1c8e:	83 c3 01             	add    $0x1,%ebx
+    1c91:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1c97:	75 c7                	jne    1c60 <bigdir+0xa0>
+      printf(1, "bigdir unlink failed");
+      exit();
+    }
+  }
+
+  printf(1, "bigdir ok\n");
+    1c99:	83 ec 08             	sub    $0x8,%esp
+    1c9c:	68 5f 44 00 00       	push   $0x445f
+    1ca1:	6a 01                	push   $0x1
+    1ca3:	e8 58 1d 00 00       	call   3a00 <printf>
+}
+    1ca8:	83 c4 10             	add    $0x10,%esp
+    1cab:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1cae:	5b                   	pop    %ebx
+    1caf:	5e                   	pop    %esi
+    1cb0:	5d                   	pop    %ebp
+    1cb1:	c3                   	ret    
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+      printf(1, "bigdir link failed\n");
+    1cb2:	83 ec 08             	sub    $0x8,%esp
+    1cb5:	68 36 44 00 00       	push   $0x4436
+    1cba:	6a 01                	push   $0x1
+    1cbc:	e8 3f 1d 00 00       	call   3a00 <printf>
+      exit();
+    1cc1:	e8 dc 1b 00 00       	call   38a2 <exit>
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(unlink(name) != 0){
+      printf(1, "bigdir unlink failed");
+    1cc6:	83 ec 08             	sub    $0x8,%esp
+    1cc9:	68 4a 44 00 00       	push   $0x444a
+    1cce:	6a 01                	push   $0x1
+    1cd0:	e8 2b 1d 00 00       	call   3a00 <printf>
+      exit();
+    1cd5:	e8 c8 1b 00 00       	call   38a2 <exit>
+  printf(1, "bigdir test\n");
+  unlink("bd");
+
+  fd = open("bd", O_CREATE);
+  if(fd < 0){
+    printf(1, "bigdir create failed\n");
+    1cda:	83 ec 08             	sub    $0x8,%esp
+    1cdd:	68 20 44 00 00       	push   $0x4420
+    1ce2:	6a 01                	push   $0x1
+    1ce4:	e8 17 1d 00 00       	call   3a00 <printf>
+    exit();
+    1ce9:	e8 b4 1b 00 00       	call   38a2 <exit>
+    1cee:	66 90                	xchg   %ax,%ax
+
+00001cf0 <subdir>:
+  printf(1, "bigdir ok\n");
+}
+
+void
+subdir(void)
+{
+    1cf0:	55                   	push   %ebp
+    1cf1:	89 e5                	mov    %esp,%ebp
+    1cf3:	53                   	push   %ebx
+    1cf4:	83 ec 0c             	sub    $0xc,%esp
+  int fd, cc;
+
+  printf(1, "subdir test\n");
+    1cf7:	68 6a 44 00 00       	push   $0x446a
+    1cfc:	6a 01                	push   $0x1
+    1cfe:	e8 fd 1c 00 00       	call   3a00 <printf>
+
+  unlink("ff");
+    1d03:	c7 04 24 f3 44 00 00 	movl   $0x44f3,(%esp)
+    1d0a:	e8 e3 1b 00 00       	call   38f2 <unlink>
+  if(mkdir("dd") != 0){
+    1d0f:	c7 04 24 90 45 00 00 	movl   $0x4590,(%esp)
+    1d16:	e8 ef 1b 00 00       	call   390a <mkdir>
+    1d1b:	83 c4 10             	add    $0x10,%esp
+    1d1e:	85 c0                	test   %eax,%eax
+    1d20:	0f 85 b3 05 00 00    	jne    22d9 <subdir+0x5e9>
+    printf(1, "subdir mkdir dd failed\n");
+    exit();
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d26:	83 ec 08             	sub    $0x8,%esp
+    1d29:	68 02 02 00 00       	push   $0x202
+    1d2e:	68 c9 44 00 00       	push   $0x44c9
+    1d33:	e8 aa 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1d38:	83 c4 10             	add    $0x10,%esp
+    1d3b:	85 c0                	test   %eax,%eax
+  if(mkdir("dd") != 0){
+    printf(1, "subdir mkdir dd failed\n");
+    exit();
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d3d:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d3f:	0f 88 81 05 00 00    	js     22c6 <subdir+0x5d6>
+    printf(1, "create dd/ff failed\n");
+    exit();
+  }
+  write(fd, "ff", 2);
+    1d45:	83 ec 04             	sub    $0x4,%esp
+    1d48:	6a 02                	push   $0x2
+    1d4a:	68 f3 44 00 00       	push   $0x44f3
+    1d4f:	50                   	push   %eax
+    1d50:	e8 6d 1b 00 00       	call   38c2 <write>
+  close(fd);
+    1d55:	89 1c 24             	mov    %ebx,(%esp)
+    1d58:	e8 6d 1b 00 00       	call   38ca <close>
+
+  if(unlink("dd") >= 0){
+    1d5d:	c7 04 24 90 45 00 00 	movl   $0x4590,(%esp)
+    1d64:	e8 89 1b 00 00       	call   38f2 <unlink>
+    1d69:	83 c4 10             	add    $0x10,%esp
+    1d6c:	85 c0                	test   %eax,%eax
+    1d6e:	0f 89 3f 05 00 00    	jns    22b3 <subdir+0x5c3>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    exit();
+  }
+
+  if(mkdir("/dd/dd") != 0){
+    1d74:	83 ec 0c             	sub    $0xc,%esp
+    1d77:	68 a4 44 00 00       	push   $0x44a4
+    1d7c:	e8 89 1b 00 00       	call   390a <mkdir>
+    1d81:	83 c4 10             	add    $0x10,%esp
+    1d84:	85 c0                	test   %eax,%eax
+    1d86:	0f 85 14 05 00 00    	jne    22a0 <subdir+0x5b0>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    exit();
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1d8c:	83 ec 08             	sub    $0x8,%esp
+    1d8f:	68 02 02 00 00       	push   $0x202
+    1d94:	68 c6 44 00 00       	push   $0x44c6
+    1d99:	e8 44 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1d9e:	83 c4 10             	add    $0x10,%esp
+    1da1:	85 c0                	test   %eax,%eax
+  if(mkdir("/dd/dd") != 0){
+    printf(1, "subdir mkdir dd/dd failed\n");
+    exit();
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1da3:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1da5:	0f 88 24 04 00 00    	js     21cf <subdir+0x4df>
+    printf(1, "create dd/dd/ff failed\n");
+    exit();
+  }
+  write(fd, "FF", 2);
+    1dab:	83 ec 04             	sub    $0x4,%esp
+    1dae:	6a 02                	push   $0x2
+    1db0:	68 e7 44 00 00       	push   $0x44e7
+    1db5:	50                   	push   %eax
+    1db6:	e8 07 1b 00 00       	call   38c2 <write>
+  close(fd);
+    1dbb:	89 1c 24             	mov    %ebx,(%esp)
+    1dbe:	e8 07 1b 00 00       	call   38ca <close>
+
+  fd = open("dd/dd/../ff", 0);
+    1dc3:	58                   	pop    %eax
+    1dc4:	5a                   	pop    %edx
+    1dc5:	6a 00                	push   $0x0
+    1dc7:	68 ea 44 00 00       	push   $0x44ea
+    1dcc:	e8 11 1b 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1dd1:	83 c4 10             	add    $0x10,%esp
+    1dd4:	85 c0                	test   %eax,%eax
+    exit();
+  }
+  write(fd, "FF", 2);
+  close(fd);
+
+  fd = open("dd/dd/../ff", 0);
+    1dd6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dd8:	0f 88 de 03 00 00    	js     21bc <subdir+0x4cc>
+    printf(1, "open dd/dd/../ff failed\n");
+    exit();
+  }
+  cc = read(fd, buf, sizeof(buf));
+    1dde:	83 ec 04             	sub    $0x4,%esp
+    1de1:	68 00 20 00 00       	push   $0x2000
+    1de6:	68 a0 85 00 00       	push   $0x85a0
+    1deb:	50                   	push   %eax
+    1dec:	e8 c9 1a 00 00       	call   38ba <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1df1:	83 c4 10             	add    $0x10,%esp
+    1df4:	83 f8 02             	cmp    $0x2,%eax
+    1df7:	0f 85 3a 03 00 00    	jne    2137 <subdir+0x447>
+    1dfd:	80 3d a0 85 00 00 66 	cmpb   $0x66,0x85a0
+    1e04:	0f 85 2d 03 00 00    	jne    2137 <subdir+0x447>
+    printf(1, "dd/dd/../ff wrong content\n");
+    exit();
+  }
+  close(fd);
+    1e0a:	83 ec 0c             	sub    $0xc,%esp
+    1e0d:	53                   	push   %ebx
+    1e0e:	e8 b7 1a 00 00       	call   38ca <close>
+
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e13:	5b                   	pop    %ebx
+    1e14:	58                   	pop    %eax
+    1e15:	68 2a 45 00 00       	push   $0x452a
+    1e1a:	68 c6 44 00 00       	push   $0x44c6
+    1e1f:	e8 de 1a 00 00       	call   3902 <link>
+    1e24:	83 c4 10             	add    $0x10,%esp
+    1e27:	85 c0                	test   %eax,%eax
+    1e29:	0f 85 c6 03 00 00    	jne    21f5 <subdir+0x505>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    exit();
+  }
+
+  if(unlink("dd/dd/ff") != 0){
+    1e2f:	83 ec 0c             	sub    $0xc,%esp
+    1e32:	68 c6 44 00 00       	push   $0x44c6
+    1e37:	e8 b6 1a 00 00       	call   38f2 <unlink>
+    1e3c:	83 c4 10             	add    $0x10,%esp
+    1e3f:	85 c0                	test   %eax,%eax
+    1e41:	0f 85 16 03 00 00    	jne    215d <subdir+0x46d>
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit();
+  }
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e47:	83 ec 08             	sub    $0x8,%esp
+    1e4a:	6a 00                	push   $0x0
+    1e4c:	68 c6 44 00 00       	push   $0x44c6
+    1e51:	e8 8c 1a 00 00       	call   38e2 <open>
+    1e56:	83 c4 10             	add    $0x10,%esp
+    1e59:	85 c0                	test   %eax,%eax
+    1e5b:	0f 89 2c 04 00 00    	jns    228d <subdir+0x59d>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    exit();
+  }
+
+  if(chdir("dd") != 0){
+    1e61:	83 ec 0c             	sub    $0xc,%esp
+    1e64:	68 90 45 00 00       	push   $0x4590
+    1e69:	e8 a4 1a 00 00       	call   3912 <chdir>
+    1e6e:	83 c4 10             	add    $0x10,%esp
+    1e71:	85 c0                	test   %eax,%eax
+    1e73:	0f 85 01 04 00 00    	jne    227a <subdir+0x58a>
+    printf(1, "chdir dd failed\n");
+    exit();
+  }
+  if(chdir("dd/../../dd") != 0){
+    1e79:	83 ec 0c             	sub    $0xc,%esp
+    1e7c:	68 5e 45 00 00       	push   $0x455e
+    1e81:	e8 8c 1a 00 00       	call   3912 <chdir>
+    1e86:	83 c4 10             	add    $0x10,%esp
+    1e89:	85 c0                	test   %eax,%eax
+    1e8b:	0f 85 b9 02 00 00    	jne    214a <subdir+0x45a>
+    printf(1, "chdir dd/../../dd failed\n");
+    exit();
+  }
+  if(chdir("dd/../../../dd") != 0){
+    1e91:	83 ec 0c             	sub    $0xc,%esp
+    1e94:	68 84 45 00 00       	push   $0x4584
+    1e99:	e8 74 1a 00 00       	call   3912 <chdir>
+    1e9e:	83 c4 10             	add    $0x10,%esp
+    1ea1:	85 c0                	test   %eax,%eax
+    1ea3:	0f 85 a1 02 00 00    	jne    214a <subdir+0x45a>
+    printf(1, "chdir dd/../../dd failed\n");
+    exit();
+  }
+  if(chdir("./..") != 0){
+    1ea9:	83 ec 0c             	sub    $0xc,%esp
+    1eac:	68 93 45 00 00       	push   $0x4593
+    1eb1:	e8 5c 1a 00 00       	call   3912 <chdir>
+    1eb6:	83 c4 10             	add    $0x10,%esp
+    1eb9:	85 c0                	test   %eax,%eax
+    1ebb:	0f 85 21 03 00 00    	jne    21e2 <subdir+0x4f2>
+    printf(1, "chdir ./.. failed\n");
+    exit();
+  }
+
+  fd = open("dd/dd/ffff", 0);
+    1ec1:	83 ec 08             	sub    $0x8,%esp
+    1ec4:	6a 00                	push   $0x0
+    1ec6:	68 2a 45 00 00       	push   $0x452a
+    1ecb:	e8 12 1a 00 00       	call   38e2 <open>
+  if(fd < 0){
+    1ed0:	83 c4 10             	add    $0x10,%esp
+    1ed3:	85 c0                	test   %eax,%eax
+  if(chdir("./..") != 0){
+    printf(1, "chdir ./.. failed\n");
+    exit();
+  }
+
+  fd = open("dd/dd/ffff", 0);
+    1ed5:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1ed7:	0f 88 e0 04 00 00    	js     23bd <subdir+0x6cd>
+    printf(1, "open dd/dd/ffff failed\n");
+    exit();
+  }
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1edd:	83 ec 04             	sub    $0x4,%esp
+    1ee0:	68 00 20 00 00       	push   $0x2000
+    1ee5:	68 a0 85 00 00       	push   $0x85a0
+    1eea:	50                   	push   %eax
+    1eeb:	e8 ca 19 00 00       	call   38ba <read>
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	83 f8 02             	cmp    $0x2,%eax
+    1ef6:	0f 85 ae 04 00 00    	jne    23aa <subdir+0x6ba>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    exit();
+  }
+  close(fd);
+    1efc:	83 ec 0c             	sub    $0xc,%esp
+    1eff:	53                   	push   %ebx
+    1f00:	e8 c5 19 00 00       	call   38ca <close>
+
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f05:	59                   	pop    %ecx
+    1f06:	5b                   	pop    %ebx
+    1f07:	6a 00                	push   $0x0
+    1f09:	68 c6 44 00 00       	push   $0x44c6
+    1f0e:	e8 cf 19 00 00       	call   38e2 <open>
+    1f13:	83 c4 10             	add    $0x10,%esp
+    1f16:	85 c0                	test   %eax,%eax
+    1f18:	0f 89 65 02 00 00    	jns    2183 <subdir+0x493>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    exit();
+  }
+
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f1e:	83 ec 08             	sub    $0x8,%esp
+    1f21:	68 02 02 00 00       	push   $0x202
+    1f26:	68 de 45 00 00       	push   $0x45de
+    1f2b:	e8 b2 19 00 00       	call   38e2 <open>
+    1f30:	83 c4 10             	add    $0x10,%esp
+    1f33:	85 c0                	test   %eax,%eax
+    1f35:	0f 89 35 02 00 00    	jns    2170 <subdir+0x480>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f3b:	83 ec 08             	sub    $0x8,%esp
+    1f3e:	68 02 02 00 00       	push   $0x202
+    1f43:	68 03 46 00 00       	push   $0x4603
+    1f48:	e8 95 19 00 00       	call   38e2 <open>
+    1f4d:	83 c4 10             	add    $0x10,%esp
+    1f50:	85 c0                	test   %eax,%eax
+    1f52:	0f 89 0f 03 00 00    	jns    2267 <subdir+0x577>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_CREATE) >= 0){
+    1f58:	83 ec 08             	sub    $0x8,%esp
+    1f5b:	68 00 02 00 00       	push   $0x200
+    1f60:	68 90 45 00 00       	push   $0x4590
+    1f65:	e8 78 19 00 00       	call   38e2 <open>
+    1f6a:	83 c4 10             	add    $0x10,%esp
+    1f6d:	85 c0                	test   %eax,%eax
+    1f6f:	0f 89 df 02 00 00    	jns    2254 <subdir+0x564>
+    printf(1, "create dd succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_RDWR) >= 0){
+    1f75:	83 ec 08             	sub    $0x8,%esp
+    1f78:	6a 02                	push   $0x2
+    1f7a:	68 90 45 00 00       	push   $0x4590
+    1f7f:	e8 5e 19 00 00       	call   38e2 <open>
+    1f84:	83 c4 10             	add    $0x10,%esp
+    1f87:	85 c0                	test   %eax,%eax
+    1f89:	0f 89 b2 02 00 00    	jns    2241 <subdir+0x551>
+    printf(1, "open dd rdwr succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_WRONLY) >= 0){
+    1f8f:	83 ec 08             	sub    $0x8,%esp
+    1f92:	6a 01                	push   $0x1
+    1f94:	68 90 45 00 00       	push   $0x4590
+    1f99:	e8 44 19 00 00       	call   38e2 <open>
+    1f9e:	83 c4 10             	add    $0x10,%esp
+    1fa1:	85 c0                	test   %eax,%eax
+    1fa3:	0f 89 85 02 00 00    	jns    222e <subdir+0x53e>
+    printf(1, "open dd wronly succeeded!\n");
+    exit();
+  }
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fa9:	83 ec 08             	sub    $0x8,%esp
+    1fac:	68 72 46 00 00       	push   $0x4672
+    1fb1:	68 de 45 00 00       	push   $0x45de
+    1fb6:	e8 47 19 00 00       	call   3902 <link>
+    1fbb:	83 c4 10             	add    $0x10,%esp
+    1fbe:	85 c0                	test   %eax,%eax
+    1fc0:	0f 84 55 02 00 00    	je     221b <subdir+0x52b>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    exit();
+  }
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1fc6:	83 ec 08             	sub    $0x8,%esp
+    1fc9:	68 72 46 00 00       	push   $0x4672
+    1fce:	68 03 46 00 00       	push   $0x4603
+    1fd3:	e8 2a 19 00 00       	call   3902 <link>
+    1fd8:	83 c4 10             	add    $0x10,%esp
+    1fdb:	85 c0                	test   %eax,%eax
+    1fdd:	0f 84 25 02 00 00    	je     2208 <subdir+0x518>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    exit();
+  }
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    1fe3:	83 ec 08             	sub    $0x8,%esp
+    1fe6:	68 2a 45 00 00       	push   $0x452a
+    1feb:	68 c9 44 00 00       	push   $0x44c9
+    1ff0:	e8 0d 19 00 00       	call   3902 <link>
+    1ff5:	83 c4 10             	add    $0x10,%esp
+    1ff8:	85 c0                	test   %eax,%eax
+    1ffa:	0f 84 a9 01 00 00    	je     21a9 <subdir+0x4b9>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/ff/ff") == 0){
+    2000:	83 ec 0c             	sub    $0xc,%esp
+    2003:	68 de 45 00 00       	push   $0x45de
+    2008:	e8 fd 18 00 00       	call   390a <mkdir>
+    200d:	83 c4 10             	add    $0x10,%esp
+    2010:	85 c0                	test   %eax,%eax
+    2012:	0f 84 7e 01 00 00    	je     2196 <subdir+0x4a6>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/xx/ff") == 0){
+    2018:	83 ec 0c             	sub    $0xc,%esp
+    201b:	68 03 46 00 00       	push   $0x4603
+    2020:	e8 e5 18 00 00       	call   390a <mkdir>
+    2025:	83 c4 10             	add    $0x10,%esp
+    2028:	85 c0                	test   %eax,%eax
+    202a:	0f 84 67 03 00 00    	je     2397 <subdir+0x6a7>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/dd/ffff") == 0){
+    2030:	83 ec 0c             	sub    $0xc,%esp
+    2033:	68 2a 45 00 00       	push   $0x452a
+    2038:	e8 cd 18 00 00       	call   390a <mkdir>
+    203d:	83 c4 10             	add    $0x10,%esp
+    2040:	85 c0                	test   %eax,%eax
+    2042:	0f 84 3c 03 00 00    	je     2384 <subdir+0x694>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/xx/ff") == 0){
+    2048:	83 ec 0c             	sub    $0xc,%esp
+    204b:	68 03 46 00 00       	push   $0x4603
+    2050:	e8 9d 18 00 00       	call   38f2 <unlink>
+    2055:	83 c4 10             	add    $0x10,%esp
+    2058:	85 c0                	test   %eax,%eax
+    205a:	0f 84 11 03 00 00    	je     2371 <subdir+0x681>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/ff/ff") == 0){
+    2060:	83 ec 0c             	sub    $0xc,%esp
+    2063:	68 de 45 00 00       	push   $0x45de
+    2068:	e8 85 18 00 00       	call   38f2 <unlink>
+    206d:	83 c4 10             	add    $0x10,%esp
+    2070:	85 c0                	test   %eax,%eax
+    2072:	0f 84 e6 02 00 00    	je     235e <subdir+0x66e>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(chdir("dd/ff") == 0){
+    2078:	83 ec 0c             	sub    $0xc,%esp
+    207b:	68 c9 44 00 00       	push   $0x44c9
+    2080:	e8 8d 18 00 00       	call   3912 <chdir>
+    2085:	83 c4 10             	add    $0x10,%esp
+    2088:	85 c0                	test   %eax,%eax
+    208a:	0f 84 bb 02 00 00    	je     234b <subdir+0x65b>
+    printf(1, "chdir dd/ff succeeded!\n");
+    exit();
+  }
+  if(chdir("dd/xx") == 0){
+    2090:	83 ec 0c             	sub    $0xc,%esp
+    2093:	68 75 46 00 00       	push   $0x4675
+    2098:	e8 75 18 00 00       	call   3912 <chdir>
+    209d:	83 c4 10             	add    $0x10,%esp
+    20a0:	85 c0                	test   %eax,%eax
+    20a2:	0f 84 90 02 00 00    	je     2338 <subdir+0x648>
+    printf(1, "chdir dd/xx succeeded!\n");
+    exit();
+  }
+
+  if(unlink("dd/dd/ffff") != 0){
+    20a8:	83 ec 0c             	sub    $0xc,%esp
+    20ab:	68 2a 45 00 00       	push   $0x452a
+    20b0:	e8 3d 18 00 00       	call   38f2 <unlink>
+    20b5:	83 c4 10             	add    $0x10,%esp
+    20b8:	85 c0                	test   %eax,%eax
+    20ba:	0f 85 9d 00 00 00    	jne    215d <subdir+0x46d>
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit();
+  }
+  if(unlink("dd/ff") != 0){
+    20c0:	83 ec 0c             	sub    $0xc,%esp
+    20c3:	68 c9 44 00 00       	push   $0x44c9
+    20c8:	e8 25 18 00 00       	call   38f2 <unlink>
+    20cd:	83 c4 10             	add    $0x10,%esp
+    20d0:	85 c0                	test   %eax,%eax
+    20d2:	0f 85 4d 02 00 00    	jne    2325 <subdir+0x635>
+    printf(1, "unlink dd/ff failed\n");
+    exit();
+  }
+  if(unlink("dd") == 0){
+    20d8:	83 ec 0c             	sub    $0xc,%esp
+    20db:	68 90 45 00 00       	push   $0x4590
+    20e0:	e8 0d 18 00 00       	call   38f2 <unlink>
+    20e5:	83 c4 10             	add    $0x10,%esp
+    20e8:	85 c0                	test   %eax,%eax
+    20ea:	0f 84 22 02 00 00    	je     2312 <subdir+0x622>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/dd") < 0){
+    20f0:	83 ec 0c             	sub    $0xc,%esp
+    20f3:	68 a5 44 00 00       	push   $0x44a5
+    20f8:	e8 f5 17 00 00       	call   38f2 <unlink>
+    20fd:	83 c4 10             	add    $0x10,%esp
+    2100:	85 c0                	test   %eax,%eax
+    2102:	0f 88 f7 01 00 00    	js     22ff <subdir+0x60f>
+    printf(1, "unlink dd/dd failed\n");
+    exit();
+  }
+  if(unlink("dd") < 0){
+    2108:	83 ec 0c             	sub    $0xc,%esp
+    210b:	68 90 45 00 00       	push   $0x4590
+    2110:	e8 dd 17 00 00       	call   38f2 <unlink>
+    2115:	83 c4 10             	add    $0x10,%esp
+    2118:	85 c0                	test   %eax,%eax
+    211a:	0f 88 cc 01 00 00    	js     22ec <subdir+0x5fc>
+    printf(1, "unlink dd failed\n");
+    exit();
+  }
+
+  printf(1, "subdir ok\n");
+    2120:	83 ec 08             	sub    $0x8,%esp
+    2123:	68 72 47 00 00       	push   $0x4772
+    2128:	6a 01                	push   $0x1
+    212a:	e8 d1 18 00 00       	call   3a00 <printf>
+}
+    212f:	83 c4 10             	add    $0x10,%esp
+    2132:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2135:	c9                   	leave  
+    2136:	c3                   	ret    
+    printf(1, "open dd/dd/../ff failed\n");
+    exit();
+  }
+  cc = read(fd, buf, sizeof(buf));
+  if(cc != 2 || buf[0] != 'f'){
+    printf(1, "dd/dd/../ff wrong content\n");
+    2137:	50                   	push   %eax
+    2138:	50                   	push   %eax
+    2139:	68 0f 45 00 00       	push   $0x450f
+    213e:	6a 01                	push   $0x1
+    2140:	e8 bb 18 00 00       	call   3a00 <printf>
+    exit();
+    2145:	e8 58 17 00 00       	call   38a2 <exit>
+  if(chdir("dd") != 0){
+    printf(1, "chdir dd failed\n");
+    exit();
+  }
+  if(chdir("dd/../../dd") != 0){
+    printf(1, "chdir dd/../../dd failed\n");
+    214a:	50                   	push   %eax
+    214b:	50                   	push   %eax
+    214c:	68 6a 45 00 00       	push   $0x456a
+    2151:	6a 01                	push   $0x1
+    2153:	e8 a8 18 00 00       	call   3a00 <printf>
+    exit();
+    2158:	e8 45 17 00 00       	call   38a2 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    exit();
+  }
+
+  if(unlink("dd/dd/ff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    215d:	52                   	push   %edx
+    215e:	52                   	push   %edx
+    215f:	68 35 45 00 00       	push   $0x4535
+    2164:	6a 01                	push   $0x1
+    2166:	e8 95 18 00 00       	call   3a00 <printf>
+    exit();
+    216b:	e8 32 17 00 00       	call   38a2 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    exit();
+  }
+
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2170:	50                   	push   %eax
+    2171:	50                   	push   %eax
+    2172:	68 e7 45 00 00       	push   $0x45e7
+    2177:	6a 01                	push   $0x1
+    2179:	e8 82 18 00 00       	call   3a00 <printf>
+    exit();
+    217e:	e8 1f 17 00 00       	call   38a2 <exit>
+    exit();
+  }
+  close(fd);
+
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    2183:	52                   	push   %edx
+    2184:	52                   	push   %edx
+    2185:	68 cc 4f 00 00       	push   $0x4fcc
+    218a:	6a 01                	push   $0x1
+    218c:	e8 6f 18 00 00       	call   3a00 <printf>
+    exit();
+    2191:	e8 0c 17 00 00       	call   38a2 <exit>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/ff/ff") == 0){
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    2196:	52                   	push   %edx
+    2197:	52                   	push   %edx
+    2198:	68 7b 46 00 00       	push   $0x467b
+    219d:	6a 01                	push   $0x1
+    219f:	e8 5c 18 00 00       	call   3a00 <printf>
+    exit();
+    21a4:	e8 f9 16 00 00       	call   38a2 <exit>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    exit();
+  }
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21a9:	51                   	push   %ecx
+    21aa:	51                   	push   %ecx
+    21ab:	68 3c 50 00 00       	push   $0x503c
+    21b0:	6a 01                	push   $0x1
+    21b2:	e8 49 18 00 00       	call   3a00 <printf>
+    exit();
+    21b7:	e8 e6 16 00 00       	call   38a2 <exit>
+  write(fd, "FF", 2);
+  close(fd);
+
+  fd = open("dd/dd/../ff", 0);
+  if(fd < 0){
+    printf(1, "open dd/dd/../ff failed\n");
+    21bc:	50                   	push   %eax
+    21bd:	50                   	push   %eax
+    21be:	68 f6 44 00 00       	push   $0x44f6
+    21c3:	6a 01                	push   $0x1
+    21c5:	e8 36 18 00 00       	call   3a00 <printf>
+    exit();
+    21ca:	e8 d3 16 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create dd/dd/ff failed\n");
+    21cf:	51                   	push   %ecx
+    21d0:	51                   	push   %ecx
+    21d1:	68 cf 44 00 00       	push   $0x44cf
+    21d6:	6a 01                	push   $0x1
+    21d8:	e8 23 18 00 00       	call   3a00 <printf>
+    exit();
+    21dd:	e8 c0 16 00 00       	call   38a2 <exit>
+  if(chdir("dd/../../../dd") != 0){
+    printf(1, "chdir dd/../../dd failed\n");
+    exit();
+  }
+  if(chdir("./..") != 0){
+    printf(1, "chdir ./.. failed\n");
+    21e2:	50                   	push   %eax
+    21e3:	50                   	push   %eax
+    21e4:	68 98 45 00 00       	push   $0x4598
+    21e9:	6a 01                	push   $0x1
+    21eb:	e8 10 18 00 00       	call   3a00 <printf>
+    exit();
+    21f0:	e8 ad 16 00 00       	call   38a2 <exit>
+    exit();
+  }
+  close(fd);
+
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    21f5:	51                   	push   %ecx
+    21f6:	51                   	push   %ecx
+    21f7:	68 84 4f 00 00       	push   $0x4f84
+    21fc:	6a 01                	push   $0x1
+    21fe:	e8 fd 17 00 00       	call   3a00 <printf>
+    exit();
+    2203:	e8 9a 16 00 00       	call   38a2 <exit>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    exit();
+  }
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2208:	53                   	push   %ebx
+    2209:	53                   	push   %ebx
+    220a:	68 18 50 00 00       	push   $0x5018
+    220f:	6a 01                	push   $0x1
+    2211:	e8 ea 17 00 00       	call   3a00 <printf>
+    exit();
+    2216:	e8 87 16 00 00       	call   38a2 <exit>
+  if(open("dd", O_WRONLY) >= 0){
+    printf(1, "open dd wronly succeeded!\n");
+    exit();
+  }
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    221b:	50                   	push   %eax
+    221c:	50                   	push   %eax
+    221d:	68 f4 4f 00 00       	push   $0x4ff4
+    2222:	6a 01                	push   $0x1
+    2224:	e8 d7 17 00 00       	call   3a00 <printf>
+    exit();
+    2229:	e8 74 16 00 00       	call   38a2 <exit>
+  if(open("dd", O_RDWR) >= 0){
+    printf(1, "open dd rdwr succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_WRONLY) >= 0){
+    printf(1, "open dd wronly succeeded!\n");
+    222e:	50                   	push   %eax
+    222f:	50                   	push   %eax
+    2230:	68 57 46 00 00       	push   $0x4657
+    2235:	6a 01                	push   $0x1
+    2237:	e8 c4 17 00 00       	call   3a00 <printf>
+    exit();
+    223c:	e8 61 16 00 00       	call   38a2 <exit>
+  if(open("dd", O_CREATE) >= 0){
+    printf(1, "create dd succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_RDWR) >= 0){
+    printf(1, "open dd rdwr succeeded!\n");
+    2241:	50                   	push   %eax
+    2242:	50                   	push   %eax
+    2243:	68 3e 46 00 00       	push   $0x463e
+    2248:	6a 01                	push   $0x1
+    224a:	e8 b1 17 00 00       	call   3a00 <printf>
+    exit();
+    224f:	e8 4e 16 00 00       	call   38a2 <exit>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(open("dd", O_CREATE) >= 0){
+    printf(1, "create dd succeeded!\n");
+    2254:	50                   	push   %eax
+    2255:	50                   	push   %eax
+    2256:	68 28 46 00 00       	push   $0x4628
+    225b:	6a 01                	push   $0x1
+    225d:	e8 9e 17 00 00       	call   3a00 <printf>
+    exit();
+    2262:	e8 3b 16 00 00       	call   38a2 <exit>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2267:	50                   	push   %eax
+    2268:	50                   	push   %eax
+    2269:	68 0c 46 00 00       	push   $0x460c
+    226e:	6a 01                	push   $0x1
+    2270:	e8 8b 17 00 00       	call   3a00 <printf>
+    exit();
+    2275:	e8 28 16 00 00       	call   38a2 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    exit();
+  }
+
+  if(chdir("dd") != 0){
+    printf(1, "chdir dd failed\n");
+    227a:	50                   	push   %eax
+    227b:	50                   	push   %eax
+    227c:	68 4d 45 00 00       	push   $0x454d
+    2281:	6a 01                	push   $0x1
+    2283:	e8 78 17 00 00       	call   3a00 <printf>
+    exit();
+    2288:	e8 15 16 00 00       	call   38a2 <exit>
+  if(unlink("dd/dd/ff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit();
+  }
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    228d:	50                   	push   %eax
+    228e:	50                   	push   %eax
+    228f:	68 a8 4f 00 00       	push   $0x4fa8
+    2294:	6a 01                	push   $0x1
+    2296:	e8 65 17 00 00       	call   3a00 <printf>
+    exit();
+    229b:	e8 02 16 00 00       	call   38a2 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    exit();
+  }
+
+  if(mkdir("/dd/dd") != 0){
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22a0:	53                   	push   %ebx
+    22a1:	53                   	push   %ebx
+    22a2:	68 ab 44 00 00       	push   $0x44ab
+    22a7:	6a 01                	push   $0x1
+    22a9:	e8 52 17 00 00       	call   3a00 <printf>
+    exit();
+    22ae:	e8 ef 15 00 00       	call   38a2 <exit>
+  }
+  write(fd, "ff", 2);
+  close(fd);
+
+  if(unlink("dd") >= 0){
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22b3:	50                   	push   %eax
+    22b4:	50                   	push   %eax
+    22b5:	68 5c 4f 00 00       	push   $0x4f5c
+    22ba:	6a 01                	push   $0x1
+    22bc:	e8 3f 17 00 00       	call   3a00 <printf>
+    exit();
+    22c1:	e8 dc 15 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "create dd/ff failed\n");
+    22c6:	50                   	push   %eax
+    22c7:	50                   	push   %eax
+    22c8:	68 8f 44 00 00       	push   $0x448f
+    22cd:	6a 01                	push   $0x1
+    22cf:	e8 2c 17 00 00       	call   3a00 <printf>
+    exit();
+    22d4:	e8 c9 15 00 00       	call   38a2 <exit>
+
+  printf(1, "subdir test\n");
+
+  unlink("ff");
+  if(mkdir("dd") != 0){
+    printf(1, "subdir mkdir dd failed\n");
+    22d9:	50                   	push   %eax
+    22da:	50                   	push   %eax
+    22db:	68 77 44 00 00       	push   $0x4477
+    22e0:	6a 01                	push   $0x1
+    22e2:	e8 19 17 00 00       	call   3a00 <printf>
+    exit();
+    22e7:	e8 b6 15 00 00       	call   38a2 <exit>
+  if(unlink("dd/dd") < 0){
+    printf(1, "unlink dd/dd failed\n");
+    exit();
+  }
+  if(unlink("dd") < 0){
+    printf(1, "unlink dd failed\n");
+    22ec:	50                   	push   %eax
+    22ed:	50                   	push   %eax
+    22ee:	68 60 47 00 00       	push   $0x4760
+    22f3:	6a 01                	push   $0x1
+    22f5:	e8 06 17 00 00       	call   3a00 <printf>
+    exit();
+    22fa:	e8 a3 15 00 00       	call   38a2 <exit>
+  if(unlink("dd") == 0){
+    printf(1, "unlink non-empty dd succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/dd") < 0){
+    printf(1, "unlink dd/dd failed\n");
+    22ff:	52                   	push   %edx
+    2300:	52                   	push   %edx
+    2301:	68 4b 47 00 00       	push   $0x474b
+    2306:	6a 01                	push   $0x1
+    2308:	e8 f3 16 00 00       	call   3a00 <printf>
+    exit();
+    230d:	e8 90 15 00 00       	call   38a2 <exit>
+  if(unlink("dd/ff") != 0){
+    printf(1, "unlink dd/ff failed\n");
+    exit();
+  }
+  if(unlink("dd") == 0){
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2312:	51                   	push   %ecx
+    2313:	51                   	push   %ecx
+    2314:	68 60 50 00 00       	push   $0x5060
+    2319:	6a 01                	push   $0x1
+    231b:	e8 e0 16 00 00       	call   3a00 <printf>
+    exit();
+    2320:	e8 7d 15 00 00       	call   38a2 <exit>
+  if(unlink("dd/dd/ffff") != 0){
+    printf(1, "unlink dd/dd/ff failed\n");
+    exit();
+  }
+  if(unlink("dd/ff") != 0){
+    printf(1, "unlink dd/ff failed\n");
+    2325:	53                   	push   %ebx
+    2326:	53                   	push   %ebx
+    2327:	68 36 47 00 00       	push   $0x4736
+    232c:	6a 01                	push   $0x1
+    232e:	e8 cd 16 00 00       	call   3a00 <printf>
+    exit();
+    2333:	e8 6a 15 00 00       	call   38a2 <exit>
+  if(chdir("dd/ff") == 0){
+    printf(1, "chdir dd/ff succeeded!\n");
+    exit();
+  }
+  if(chdir("dd/xx") == 0){
+    printf(1, "chdir dd/xx succeeded!\n");
+    2338:	50                   	push   %eax
+    2339:	50                   	push   %eax
+    233a:	68 1e 47 00 00       	push   $0x471e
+    233f:	6a 01                	push   $0x1
+    2341:	e8 ba 16 00 00       	call   3a00 <printf>
+    exit();
+    2346:	e8 57 15 00 00       	call   38a2 <exit>
+  if(unlink("dd/ff/ff") == 0){
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(chdir("dd/ff") == 0){
+    printf(1, "chdir dd/ff succeeded!\n");
+    234b:	50                   	push   %eax
+    234c:	50                   	push   %eax
+    234d:	68 06 47 00 00       	push   $0x4706
+    2352:	6a 01                	push   $0x1
+    2354:	e8 a7 16 00 00       	call   3a00 <printf>
+    exit();
+    2359:	e8 44 15 00 00       	call   38a2 <exit>
+  if(unlink("dd/xx/ff") == 0){
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/ff/ff") == 0){
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    235e:	50                   	push   %eax
+    235f:	50                   	push   %eax
+    2360:	68 ea 46 00 00       	push   $0x46ea
+    2365:	6a 01                	push   $0x1
+    2367:	e8 94 16 00 00       	call   3a00 <printf>
+    exit();
+    236c:	e8 31 15 00 00       	call   38a2 <exit>
+  if(mkdir("dd/dd/ffff") == 0){
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    exit();
+  }
+  if(unlink("dd/xx/ff") == 0){
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2371:	50                   	push   %eax
+    2372:	50                   	push   %eax
+    2373:	68 ce 46 00 00       	push   $0x46ce
+    2378:	6a 01                	push   $0x1
+    237a:	e8 81 16 00 00       	call   3a00 <printf>
+    exit();
+    237f:	e8 1e 15 00 00       	call   38a2 <exit>
+  if(mkdir("dd/xx/ff") == 0){
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/dd/ffff") == 0){
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    2384:	50                   	push   %eax
+    2385:	50                   	push   %eax
+    2386:	68 b1 46 00 00       	push   $0x46b1
+    238b:	6a 01                	push   $0x1
+    238d:	e8 6e 16 00 00       	call   3a00 <printf>
+    exit();
+    2392:	e8 0b 15 00 00       	call   38a2 <exit>
+  if(mkdir("dd/ff/ff") == 0){
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    exit();
+  }
+  if(mkdir("dd/xx/ff") == 0){
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    2397:	50                   	push   %eax
+    2398:	50                   	push   %eax
+    2399:	68 96 46 00 00       	push   $0x4696
+    239e:	6a 01                	push   $0x1
+    23a0:	e8 5b 16 00 00       	call   3a00 <printf>
+    exit();
+    23a5:	e8 f8 14 00 00       	call   38a2 <exit>
+  if(fd < 0){
+    printf(1, "open dd/dd/ffff failed\n");
+    exit();
+  }
+  if(read(fd, buf, sizeof(buf)) != 2){
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23aa:	50                   	push   %eax
+    23ab:	50                   	push   %eax
+    23ac:	68 c3 45 00 00       	push   $0x45c3
+    23b1:	6a 01                	push   $0x1
+    23b3:	e8 48 16 00 00       	call   3a00 <printf>
+    exit();
+    23b8:	e8 e5 14 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  fd = open("dd/dd/ffff", 0);
+  if(fd < 0){
+    printf(1, "open dd/dd/ffff failed\n");
+    23bd:	50                   	push   %eax
+    23be:	50                   	push   %eax
+    23bf:	68 ab 45 00 00       	push   $0x45ab
+    23c4:	6a 01                	push   $0x1
+    23c6:	e8 35 16 00 00       	call   3a00 <printf>
+    exit();
+    23cb:	e8 d2 14 00 00       	call   38a2 <exit>
+
+000023d0 <bigwrite>:
+}
+
+// test writes that are larger than the log.
+void
+bigwrite(void)
+{
+    23d0:	55                   	push   %ebp
+    23d1:	89 e5                	mov    %esp,%ebp
+    23d3:	56                   	push   %esi
+    23d4:	53                   	push   %ebx
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    23d5:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+void
+bigwrite(void)
+{
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+    23da:	83 ec 08             	sub    $0x8,%esp
+    23dd:	68 7d 47 00 00       	push   $0x477d
+    23e2:	6a 01                	push   $0x1
+    23e4:	e8 17 16 00 00       	call   3a00 <printf>
+
+  unlink("bigwrite");
+    23e9:	c7 04 24 8c 47 00 00 	movl   $0x478c,(%esp)
+    23f0:	e8 fd 14 00 00       	call   38f2 <unlink>
+    23f5:	83 c4 10             	add    $0x10,%esp
+    23f8:	90                   	nop
+    23f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(sz = 499; sz < 12*512; sz += 471){
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2400:	83 ec 08             	sub    $0x8,%esp
+    2403:	68 02 02 00 00       	push   $0x202
+    2408:	68 8c 47 00 00       	push   $0x478c
+    240d:	e8 d0 14 00 00       	call   38e2 <open>
+    if(fd < 0){
+    2412:	83 c4 10             	add    $0x10,%esp
+    2415:	85 c0                	test   %eax,%eax
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2417:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2419:	78 7e                	js     2499 <bigwrite+0xc9>
+      printf(1, "cannot create bigwrite\n");
+      exit();
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+      int cc = write(fd, buf, sz);
+    241b:	83 ec 04             	sub    $0x4,%esp
+    241e:	53                   	push   %ebx
+    241f:	68 a0 85 00 00       	push   $0x85a0
+    2424:	50                   	push   %eax
+    2425:	e8 98 14 00 00       	call   38c2 <write>
+      if(cc != sz){
+    242a:	83 c4 10             	add    $0x10,%esp
+    242d:	39 c3                	cmp    %eax,%ebx
+    242f:	75 55                	jne    2486 <bigwrite+0xb6>
+      printf(1, "cannot create bigwrite\n");
+      exit();
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+      int cc = write(fd, buf, sz);
+    2431:	83 ec 04             	sub    $0x4,%esp
+    2434:	53                   	push   %ebx
+    2435:	68 a0 85 00 00       	push   $0x85a0
+    243a:	56                   	push   %esi
+    243b:	e8 82 14 00 00       	call   38c2 <write>
+      if(cc != sz){
+    2440:	83 c4 10             	add    $0x10,%esp
+    2443:	39 c3                	cmp    %eax,%ebx
+    2445:	75 3f                	jne    2486 <bigwrite+0xb6>
+        printf(1, "write(%d) ret %d\n", sz, cc);
+        exit();
+      }
+    }
+    close(fd);
+    2447:	83 ec 0c             	sub    $0xc,%esp
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    244a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+      if(cc != sz){
+        printf(1, "write(%d) ret %d\n", sz, cc);
+        exit();
+      }
+    }
+    close(fd);
+    2450:	56                   	push   %esi
+    2451:	e8 74 14 00 00       	call   38ca <close>
+    unlink("bigwrite");
+    2456:	c7 04 24 8c 47 00 00 	movl   $0x478c,(%esp)
+    245d:	e8 90 14 00 00       	call   38f2 <unlink>
+  int fd, sz;
+
+  printf(1, "bigwrite test\n");
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    2462:	83 c4 10             	add    $0x10,%esp
+    2465:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    246b:	75 93                	jne    2400 <bigwrite+0x30>
+    }
+    close(fd);
+    unlink("bigwrite");
+  }
+
+  printf(1, "bigwrite ok\n");
+    246d:	83 ec 08             	sub    $0x8,%esp
+    2470:	68 bf 47 00 00       	push   $0x47bf
+    2475:	6a 01                	push   $0x1
+    2477:	e8 84 15 00 00       	call   3a00 <printf>
+}
+    247c:	83 c4 10             	add    $0x10,%esp
+    247f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    2482:	5b                   	pop    %ebx
+    2483:	5e                   	pop    %esi
+    2484:	5d                   	pop    %ebp
+    2485:	c3                   	ret    
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+      int cc = write(fd, buf, sz);
+      if(cc != sz){
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    2486:	50                   	push   %eax
+    2487:	53                   	push   %ebx
+    2488:	68 ad 47 00 00       	push   $0x47ad
+    248d:	6a 01                	push   $0x1
+    248f:	e8 6c 15 00 00       	call   3a00 <printf>
+        exit();
+    2494:	e8 09 14 00 00       	call   38a2 <exit>
+
+  unlink("bigwrite");
+  for(sz = 499; sz < 12*512; sz += 471){
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    if(fd < 0){
+      printf(1, "cannot create bigwrite\n");
+    2499:	83 ec 08             	sub    $0x8,%esp
+    249c:	68 95 47 00 00       	push   $0x4795
+    24a1:	6a 01                	push   $0x1
+    24a3:	e8 58 15 00 00       	call   3a00 <printf>
+      exit();
+    24a8:	e8 f5 13 00 00       	call   38a2 <exit>
+    24ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024b0 <bigfile>:
+  printf(1, "bigwrite ok\n");
+}
+
+void
+bigfile(void)
+{
+    24b0:	55                   	push   %ebp
+    24b1:	89 e5                	mov    %esp,%ebp
+    24b3:	57                   	push   %edi
+    24b4:	56                   	push   %esi
+    24b5:	53                   	push   %ebx
+    24b6:	83 ec 14             	sub    $0x14,%esp
+  int fd, i, total, cc;
+
+  printf(1, "bigfile test\n");
+    24b9:	68 cc 47 00 00       	push   $0x47cc
+    24be:	6a 01                	push   $0x1
+    24c0:	e8 3b 15 00 00       	call   3a00 <printf>
+
+  unlink("bigfile");
+    24c5:	c7 04 24 e8 47 00 00 	movl   $0x47e8,(%esp)
+    24cc:	e8 21 14 00 00       	call   38f2 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    24d1:	5e                   	pop    %esi
+    24d2:	5f                   	pop    %edi
+    24d3:	68 02 02 00 00       	push   $0x202
+    24d8:	68 e8 47 00 00       	push   $0x47e8
+    24dd:	e8 00 14 00 00       	call   38e2 <open>
+  if(fd < 0){
+    24e2:	83 c4 10             	add    $0x10,%esp
+    24e5:	85 c0                	test   %eax,%eax
+    24e7:	0f 88 5f 01 00 00    	js     264c <bigfile+0x19c>
+    24ed:	89 c6                	mov    %eax,%esi
+    24ef:	31 db                	xor    %ebx,%ebx
+    24f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    printf(1, "cannot create bigfile");
+    exit();
+  }
+  for(i = 0; i < 20; i++){
+    memset(buf, i, 600);
+    24f8:	83 ec 04             	sub    $0x4,%esp
+    24fb:	68 58 02 00 00       	push   $0x258
+    2500:	53                   	push   %ebx
+    2501:	68 a0 85 00 00       	push   $0x85a0
+    2506:	e8 05 12 00 00       	call   3710 <memset>
+    if(write(fd, buf, 600) != 600){
+    250b:	83 c4 0c             	add    $0xc,%esp
+    250e:	68 58 02 00 00       	push   $0x258
+    2513:	68 a0 85 00 00       	push   $0x85a0
+    2518:	56                   	push   %esi
+    2519:	e8 a4 13 00 00       	call   38c2 <write>
+    251e:	83 c4 10             	add    $0x10,%esp
+    2521:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2526:	0f 85 f8 00 00 00    	jne    2624 <bigfile+0x174>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "cannot create bigfile");
+    exit();
+  }
+  for(i = 0; i < 20; i++){
+    252c:	83 c3 01             	add    $0x1,%ebx
+    252f:	83 fb 14             	cmp    $0x14,%ebx
+    2532:	75 c4                	jne    24f8 <bigfile+0x48>
+    if(write(fd, buf, 600) != 600){
+      printf(1, "write bigfile failed\n");
+      exit();
+    }
+  }
+  close(fd);
+    2534:	83 ec 0c             	sub    $0xc,%esp
+    2537:	56                   	push   %esi
+    2538:	e8 8d 13 00 00       	call   38ca <close>
+
+  fd = open("bigfile", 0);
+    253d:	59                   	pop    %ecx
+    253e:	5b                   	pop    %ebx
+    253f:	6a 00                	push   $0x0
+    2541:	68 e8 47 00 00       	push   $0x47e8
+    2546:	e8 97 13 00 00       	call   38e2 <open>
+  if(fd < 0){
+    254b:	83 c4 10             	add    $0x10,%esp
+    254e:	85 c0                	test   %eax,%eax
+      exit();
+    }
+  }
+  close(fd);
+
+  fd = open("bigfile", 0);
+    2550:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2552:	0f 88 e0 00 00 00    	js     2638 <bigfile+0x188>
+    2558:	31 db                	xor    %ebx,%ebx
+    255a:	31 ff                	xor    %edi,%edi
+    255c:	eb 30                	jmp    258e <bigfile+0xde>
+    255e:	66 90                	xchg   %ax,%ax
+      printf(1, "read bigfile failed\n");
+      exit();
+    }
+    if(cc == 0)
+      break;
+    if(cc != 300){
+    2560:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2565:	0f 85 91 00 00 00    	jne    25fc <bigfile+0x14c>
+      printf(1, "short read bigfile\n");
+      exit();
+    }
+    if(buf[0] != i/2 || buf[299] != i/2){
+    256b:	0f be 05 a0 85 00 00 	movsbl 0x85a0,%eax
+    2572:	89 fa                	mov    %edi,%edx
+    2574:	d1 fa                	sar    %edx
+    2576:	39 d0                	cmp    %edx,%eax
+    2578:	75 6e                	jne    25e8 <bigfile+0x138>
+    257a:	0f be 15 cb 86 00 00 	movsbl 0x86cb,%edx
+    2581:	39 d0                	cmp    %edx,%eax
+    2583:	75 63                	jne    25e8 <bigfile+0x138>
+      printf(1, "read bigfile wrong data\n");
+      exit();
+    }
+    total += cc;
+    2585:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  if(fd < 0){
+    printf(1, "cannot open bigfile\n");
+    exit();
+  }
+  total = 0;
+  for(i = 0; ; i++){
+    258b:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    258e:	83 ec 04             	sub    $0x4,%esp
+    2591:	68 2c 01 00 00       	push   $0x12c
+    2596:	68 a0 85 00 00       	push   $0x85a0
+    259b:	56                   	push   %esi
+    259c:	e8 19 13 00 00       	call   38ba <read>
+    if(cc < 0){
+    25a1:	83 c4 10             	add    $0x10,%esp
+    25a4:	85 c0                	test   %eax,%eax
+    25a6:	78 68                	js     2610 <bigfile+0x160>
+      printf(1, "read bigfile failed\n");
+      exit();
+    }
+    if(cc == 0)
+    25a8:	75 b6                	jne    2560 <bigfile+0xb0>
+      printf(1, "read bigfile wrong data\n");
+      exit();
+    }
+    total += cc;
+  }
+  close(fd);
+    25aa:	83 ec 0c             	sub    $0xc,%esp
+    25ad:	56                   	push   %esi
+    25ae:	e8 17 13 00 00       	call   38ca <close>
+  if(total != 20*600){
+    25b3:	83 c4 10             	add    $0x10,%esp
+    25b6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25bc:	0f 85 9e 00 00 00    	jne    2660 <bigfile+0x1b0>
+    printf(1, "read bigfile wrong total\n");
+    exit();
+  }
+  unlink("bigfile");
+    25c2:	83 ec 0c             	sub    $0xc,%esp
+    25c5:	68 e8 47 00 00       	push   $0x47e8
+    25ca:	e8 23 13 00 00       	call   38f2 <unlink>
+
+  printf(1, "bigfile test ok\n");
+    25cf:	58                   	pop    %eax
+    25d0:	5a                   	pop    %edx
+    25d1:	68 77 48 00 00       	push   $0x4877
+    25d6:	6a 01                	push   $0x1
+    25d8:	e8 23 14 00 00       	call   3a00 <printf>
+}
+    25dd:	83 c4 10             	add    $0x10,%esp
+    25e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    25e3:	5b                   	pop    %ebx
+    25e4:	5e                   	pop    %esi
+    25e5:	5f                   	pop    %edi
+    25e6:	5d                   	pop    %ebp
+    25e7:	c3                   	ret    
+    if(cc != 300){
+      printf(1, "short read bigfile\n");
+      exit();
+    }
+    if(buf[0] != i/2 || buf[299] != i/2){
+      printf(1, "read bigfile wrong data\n");
+    25e8:	83 ec 08             	sub    $0x8,%esp
+    25eb:	68 44 48 00 00       	push   $0x4844
+    25f0:	6a 01                	push   $0x1
+    25f2:	e8 09 14 00 00       	call   3a00 <printf>
+      exit();
+    25f7:	e8 a6 12 00 00       	call   38a2 <exit>
+      exit();
+    }
+    if(cc == 0)
+      break;
+    if(cc != 300){
+      printf(1, "short read bigfile\n");
+    25fc:	83 ec 08             	sub    $0x8,%esp
+    25ff:	68 30 48 00 00       	push   $0x4830
+    2604:	6a 01                	push   $0x1
+    2606:	e8 f5 13 00 00       	call   3a00 <printf>
+      exit();
+    260b:	e8 92 12 00 00       	call   38a2 <exit>
+  }
+  total = 0;
+  for(i = 0; ; i++){
+    cc = read(fd, buf, 300);
+    if(cc < 0){
+      printf(1, "read bigfile failed\n");
+    2610:	83 ec 08             	sub    $0x8,%esp
+    2613:	68 1b 48 00 00       	push   $0x481b
+    2618:	6a 01                	push   $0x1
+    261a:	e8 e1 13 00 00       	call   3a00 <printf>
+      exit();
+    261f:	e8 7e 12 00 00       	call   38a2 <exit>
+    exit();
+  }
+  for(i = 0; i < 20; i++){
+    memset(buf, i, 600);
+    if(write(fd, buf, 600) != 600){
+      printf(1, "write bigfile failed\n");
+    2624:	83 ec 08             	sub    $0x8,%esp
+    2627:	68 f0 47 00 00       	push   $0x47f0
+    262c:	6a 01                	push   $0x1
+    262e:	e8 cd 13 00 00       	call   3a00 <printf>
+      exit();
+    2633:	e8 6a 12 00 00       	call   38a2 <exit>
+  }
+  close(fd);
+
+  fd = open("bigfile", 0);
+  if(fd < 0){
+    printf(1, "cannot open bigfile\n");
+    2638:	83 ec 08             	sub    $0x8,%esp
+    263b:	68 06 48 00 00       	push   $0x4806
+    2640:	6a 01                	push   $0x1
+    2642:	e8 b9 13 00 00       	call   3a00 <printf>
+    exit();
+    2647:	e8 56 12 00 00       	call   38a2 <exit>
+  printf(1, "bigfile test\n");
+
+  unlink("bigfile");
+  fd = open("bigfile", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf(1, "cannot create bigfile");
+    264c:	83 ec 08             	sub    $0x8,%esp
+    264f:	68 da 47 00 00       	push   $0x47da
+    2654:	6a 01                	push   $0x1
+    2656:	e8 a5 13 00 00       	call   3a00 <printf>
+    exit();
+    265b:	e8 42 12 00 00       	call   38a2 <exit>
+    }
+    total += cc;
+  }
+  close(fd);
+  if(total != 20*600){
+    printf(1, "read bigfile wrong total\n");
+    2660:	83 ec 08             	sub    $0x8,%esp
+    2663:	68 5d 48 00 00       	push   $0x485d
+    2668:	6a 01                	push   $0x1
+    266a:	e8 91 13 00 00       	call   3a00 <printf>
+    exit();
+    266f:	e8 2e 12 00 00       	call   38a2 <exit>
+    2674:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    267a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00002680 <fourteen>:
+  printf(1, "bigfile test ok\n");
+}
+
+void
+fourteen(void)
+{
+    2680:	55                   	push   %ebp
+    2681:	89 e5                	mov    %esp,%ebp
+    2683:	83 ec 10             	sub    $0x10,%esp
+  int fd;
+
+  // DIRSIZ is 14.
+  printf(1, "fourteen test\n");
+    2686:	68 88 48 00 00       	push   $0x4888
+    268b:	6a 01                	push   $0x1
+    268d:	e8 6e 13 00 00       	call   3a00 <printf>
+
+  if(mkdir("12345678901234") != 0){
+    2692:	c7 04 24 c3 48 00 00 	movl   $0x48c3,(%esp)
+    2699:	e8 6c 12 00 00       	call   390a <mkdir>
+    269e:	83 c4 10             	add    $0x10,%esp
+    26a1:	85 c0                	test   %eax,%eax
+    26a3:	0f 85 97 00 00 00    	jne    2740 <fourteen+0xc0>
+    printf(1, "mkdir 12345678901234 failed\n");
+    exit();
+  }
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26a9:	83 ec 0c             	sub    $0xc,%esp
+    26ac:	68 80 50 00 00       	push   $0x5080
+    26b1:	e8 54 12 00 00       	call   390a <mkdir>
+    26b6:	83 c4 10             	add    $0x10,%esp
+    26b9:	85 c0                	test   %eax,%eax
+    26bb:	0f 85 de 00 00 00    	jne    279f <fourteen+0x11f>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    exit();
+  }
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26c1:	83 ec 08             	sub    $0x8,%esp
+    26c4:	68 00 02 00 00       	push   $0x200
+    26c9:	68 d0 50 00 00       	push   $0x50d0
+    26ce:	e8 0f 12 00 00       	call   38e2 <open>
+  if(fd < 0){
+    26d3:	83 c4 10             	add    $0x10,%esp
+    26d6:	85 c0                	test   %eax,%eax
+    26d8:	0f 88 ae 00 00 00    	js     278c <fourteen+0x10c>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    exit();
+  }
+  close(fd);
+    26de:	83 ec 0c             	sub    $0xc,%esp
+    26e1:	50                   	push   %eax
+    26e2:	e8 e3 11 00 00       	call   38ca <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    26e7:	58                   	pop    %eax
+    26e8:	5a                   	pop    %edx
+    26e9:	6a 00                	push   $0x0
+    26eb:	68 40 51 00 00       	push   $0x5140
+    26f0:	e8 ed 11 00 00       	call   38e2 <open>
+  if(fd < 0){
+    26f5:	83 c4 10             	add    $0x10,%esp
+    26f8:	85 c0                	test   %eax,%eax
+    26fa:	78 7d                	js     2779 <fourteen+0xf9>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    exit();
+  }
+  close(fd);
+    26fc:	83 ec 0c             	sub    $0xc,%esp
+    26ff:	50                   	push   %eax
+    2700:	e8 c5 11 00 00       	call   38ca <close>
+
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2705:	c7 04 24 b4 48 00 00 	movl   $0x48b4,(%esp)
+    270c:	e8 f9 11 00 00       	call   390a <mkdir>
+    2711:	83 c4 10             	add    $0x10,%esp
+    2714:	85 c0                	test   %eax,%eax
+    2716:	74 4e                	je     2766 <fourteen+0xe6>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    exit();
+  }
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2718:	83 ec 0c             	sub    $0xc,%esp
+    271b:	68 dc 51 00 00       	push   $0x51dc
+    2720:	e8 e5 11 00 00       	call   390a <mkdir>
+    2725:	83 c4 10             	add    $0x10,%esp
+    2728:	85 c0                	test   %eax,%eax
+    272a:	74 27                	je     2753 <fourteen+0xd3>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    exit();
+  }
+
+  printf(1, "fourteen ok\n");
+    272c:	83 ec 08             	sub    $0x8,%esp
+    272f:	68 d2 48 00 00       	push   $0x48d2
+    2734:	6a 01                	push   $0x1
+    2736:	e8 c5 12 00 00       	call   3a00 <printf>
+}
+    273b:	83 c4 10             	add    $0x10,%esp
+    273e:	c9                   	leave  
+    273f:	c3                   	ret    
+
+  // DIRSIZ is 14.
+  printf(1, "fourteen test\n");
+
+  if(mkdir("12345678901234") != 0){
+    printf(1, "mkdir 12345678901234 failed\n");
+    2740:	50                   	push   %eax
+    2741:	50                   	push   %eax
+    2742:	68 97 48 00 00       	push   $0x4897
+    2747:	6a 01                	push   $0x1
+    2749:	e8 b2 12 00 00       	call   3a00 <printf>
+    exit();
+    274e:	e8 4f 11 00 00       	call   38a2 <exit>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    exit();
+  }
+  if(mkdir("123456789012345/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2753:	50                   	push   %eax
+    2754:	50                   	push   %eax
+    2755:	68 fc 51 00 00       	push   $0x51fc
+    275a:	6a 01                	push   $0x1
+    275c:	e8 9f 12 00 00       	call   3a00 <printf>
+    exit();
+    2761:	e8 3c 11 00 00       	call   38a2 <exit>
+    exit();
+  }
+  close(fd);
+
+  if(mkdir("12345678901234/12345678901234") == 0){
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2766:	52                   	push   %edx
+    2767:	52                   	push   %edx
+    2768:	68 ac 51 00 00       	push   $0x51ac
+    276d:	6a 01                	push   $0x1
+    276f:	e8 8c 12 00 00       	call   3a00 <printf>
+    exit();
+    2774:	e8 29 11 00 00       	call   38a2 <exit>
+    exit();
+  }
+  close(fd);
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+  if(fd < 0){
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    2779:	51                   	push   %ecx
+    277a:	51                   	push   %ecx
+    277b:	68 70 51 00 00       	push   $0x5170
+    2780:	6a 01                	push   $0x1
+    2782:	e8 79 12 00 00       	call   3a00 <printf>
+    exit();
+    2787:	e8 16 11 00 00       	call   38a2 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    exit();
+  }
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+  if(fd < 0){
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    278c:	51                   	push   %ecx
+    278d:	51                   	push   %ecx
+    278e:	68 00 51 00 00       	push   $0x5100
+    2793:	6a 01                	push   $0x1
+    2795:	e8 66 12 00 00       	call   3a00 <printf>
+    exit();
+    279a:	e8 03 11 00 00       	call   38a2 <exit>
+  if(mkdir("12345678901234") != 0){
+    printf(1, "mkdir 12345678901234 failed\n");
+    exit();
+  }
+  if(mkdir("12345678901234/123456789012345") != 0){
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    279f:	50                   	push   %eax
+    27a0:	50                   	push   %eax
+    27a1:	68 a0 50 00 00       	push   $0x50a0
+    27a6:	6a 01                	push   $0x1
+    27a8:	e8 53 12 00 00       	call   3a00 <printf>
+    exit();
+    27ad:	e8 f0 10 00 00       	call   38a2 <exit>
+    27b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+000027c0 <rmdot>:
+  printf(1, "fourteen ok\n");
+}
+
+void
+rmdot(void)
+{
+    27c0:	55                   	push   %ebp
+    27c1:	89 e5                	mov    %esp,%ebp
+    27c3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27c6:	68 df 48 00 00       	push   $0x48df
+    27cb:	6a 01                	push   $0x1
+    27cd:	e8 2e 12 00 00       	call   3a00 <printf>
+  if(mkdir("dots") != 0){
+    27d2:	c7 04 24 eb 48 00 00 	movl   $0x48eb,(%esp)
+    27d9:	e8 2c 11 00 00       	call   390a <mkdir>
+    27de:	83 c4 10             	add    $0x10,%esp
+    27e1:	85 c0                	test   %eax,%eax
+    27e3:	0f 85 b0 00 00 00    	jne    2899 <rmdot+0xd9>
+    printf(1, "mkdir dots failed\n");
+    exit();
+  }
+  if(chdir("dots") != 0){
+    27e9:	83 ec 0c             	sub    $0xc,%esp
+    27ec:	68 eb 48 00 00       	push   $0x48eb
+    27f1:	e8 1c 11 00 00       	call   3912 <chdir>
+    27f6:	83 c4 10             	add    $0x10,%esp
+    27f9:	85 c0                	test   %eax,%eax
+    27fb:	0f 85 1d 01 00 00    	jne    291e <rmdot+0x15e>
+    printf(1, "chdir dots failed\n");
+    exit();
+  }
+  if(unlink(".") == 0){
+    2801:	83 ec 0c             	sub    $0xc,%esp
+    2804:	68 96 45 00 00       	push   $0x4596
+    2809:	e8 e4 10 00 00       	call   38f2 <unlink>
+    280e:	83 c4 10             	add    $0x10,%esp
+    2811:	85 c0                	test   %eax,%eax
+    2813:	0f 84 f2 00 00 00    	je     290b <rmdot+0x14b>
+    printf(1, "rm . worked!\n");
+    exit();
+  }
+  if(unlink("..") == 0){
+    2819:	83 ec 0c             	sub    $0xc,%esp
+    281c:	68 95 45 00 00       	push   $0x4595
+    2821:	e8 cc 10 00 00       	call   38f2 <unlink>
+    2826:	83 c4 10             	add    $0x10,%esp
+    2829:	85 c0                	test   %eax,%eax
+    282b:	0f 84 c7 00 00 00    	je     28f8 <rmdot+0x138>
+    printf(1, "rm .. worked!\n");
+    exit();
+  }
+  if(chdir("/") != 0){
+    2831:	83 ec 0c             	sub    $0xc,%esp
+    2834:	68 69 3d 00 00       	push   $0x3d69
+    2839:	e8 d4 10 00 00       	call   3912 <chdir>
+    283e:	83 c4 10             	add    $0x10,%esp
+    2841:	85 c0                	test   %eax,%eax
+    2843:	0f 85 9c 00 00 00    	jne    28e5 <rmdot+0x125>
+    printf(1, "chdir / failed\n");
+    exit();
+  }
+  if(unlink("dots/.") == 0){
+    2849:	83 ec 0c             	sub    $0xc,%esp
+    284c:	68 33 49 00 00       	push   $0x4933
+    2851:	e8 9c 10 00 00       	call   38f2 <unlink>
+    2856:	83 c4 10             	add    $0x10,%esp
+    2859:	85 c0                	test   %eax,%eax
+    285b:	74 75                	je     28d2 <rmdot+0x112>
+    printf(1, "unlink dots/. worked!\n");
+    exit();
+  }
+  if(unlink("dots/..") == 0){
+    285d:	83 ec 0c             	sub    $0xc,%esp
+    2860:	68 51 49 00 00       	push   $0x4951
+    2865:	e8 88 10 00 00       	call   38f2 <unlink>
+    286a:	83 c4 10             	add    $0x10,%esp
+    286d:	85 c0                	test   %eax,%eax
+    286f:	74 4e                	je     28bf <rmdot+0xff>
+    printf(1, "unlink dots/.. worked!\n");
+    exit();
+  }
+  if(unlink("dots") != 0){
+    2871:	83 ec 0c             	sub    $0xc,%esp
+    2874:	68 eb 48 00 00       	push   $0x48eb
+    2879:	e8 74 10 00 00       	call   38f2 <unlink>
+    287e:	83 c4 10             	add    $0x10,%esp
+    2881:	85 c0                	test   %eax,%eax
+    2883:	75 27                	jne    28ac <rmdot+0xec>
+    printf(1, "unlink dots failed!\n");
+    exit();
+  }
+  printf(1, "rmdot ok\n");
+    2885:	83 ec 08             	sub    $0x8,%esp
+    2888:	68 86 49 00 00       	push   $0x4986
+    288d:	6a 01                	push   $0x1
+    288f:	e8 6c 11 00 00       	call   3a00 <printf>
+}
+    2894:	83 c4 10             	add    $0x10,%esp
+    2897:	c9                   	leave  
+    2898:	c3                   	ret    
+void
+rmdot(void)
+{
+  printf(1, "rmdot test\n");
+  if(mkdir("dots") != 0){
+    printf(1, "mkdir dots failed\n");
+    2899:	50                   	push   %eax
+    289a:	50                   	push   %eax
+    289b:	68 f0 48 00 00       	push   $0x48f0
+    28a0:	6a 01                	push   $0x1
+    28a2:	e8 59 11 00 00       	call   3a00 <printf>
+    exit();
+    28a7:	e8 f6 0f 00 00       	call   38a2 <exit>
+  if(unlink("dots/..") == 0){
+    printf(1, "unlink dots/.. worked!\n");
+    exit();
+  }
+  if(unlink("dots") != 0){
+    printf(1, "unlink dots failed!\n");
+    28ac:	50                   	push   %eax
+    28ad:	50                   	push   %eax
+    28ae:	68 71 49 00 00       	push   $0x4971
+    28b3:	6a 01                	push   $0x1
+    28b5:	e8 46 11 00 00       	call   3a00 <printf>
+    exit();
+    28ba:	e8 e3 0f 00 00       	call   38a2 <exit>
+  if(unlink("dots/.") == 0){
+    printf(1, "unlink dots/. worked!\n");
+    exit();
+  }
+  if(unlink("dots/..") == 0){
+    printf(1, "unlink dots/.. worked!\n");
+    28bf:	52                   	push   %edx
+    28c0:	52                   	push   %edx
+    28c1:	68 59 49 00 00       	push   $0x4959
+    28c6:	6a 01                	push   $0x1
+    28c8:	e8 33 11 00 00       	call   3a00 <printf>
+    exit();
+    28cd:	e8 d0 0f 00 00       	call   38a2 <exit>
+  if(chdir("/") != 0){
+    printf(1, "chdir / failed\n");
+    exit();
+  }
+  if(unlink("dots/.") == 0){
+    printf(1, "unlink dots/. worked!\n");
+    28d2:	51                   	push   %ecx
+    28d3:	51                   	push   %ecx
+    28d4:	68 3a 49 00 00       	push   $0x493a
+    28d9:	6a 01                	push   $0x1
+    28db:	e8 20 11 00 00       	call   3a00 <printf>
+    exit();
+    28e0:	e8 bd 0f 00 00       	call   38a2 <exit>
+  if(unlink("..") == 0){
+    printf(1, "rm .. worked!\n");
+    exit();
+  }
+  if(chdir("/") != 0){
+    printf(1, "chdir / failed\n");
+    28e5:	50                   	push   %eax
+    28e6:	50                   	push   %eax
+    28e7:	68 6b 3d 00 00       	push   $0x3d6b
+    28ec:	6a 01                	push   $0x1
+    28ee:	e8 0d 11 00 00       	call   3a00 <printf>
+    exit();
+    28f3:	e8 aa 0f 00 00       	call   38a2 <exit>
+  if(unlink(".") == 0){
+    printf(1, "rm . worked!\n");
+    exit();
+  }
+  if(unlink("..") == 0){
+    printf(1, "rm .. worked!\n");
+    28f8:	50                   	push   %eax
+    28f9:	50                   	push   %eax
+    28fa:	68 24 49 00 00       	push   $0x4924
+    28ff:	6a 01                	push   $0x1
+    2901:	e8 fa 10 00 00       	call   3a00 <printf>
+    exit();
+    2906:	e8 97 0f 00 00       	call   38a2 <exit>
+  if(chdir("dots") != 0){
+    printf(1, "chdir dots failed\n");
+    exit();
+  }
+  if(unlink(".") == 0){
+    printf(1, "rm . worked!\n");
+    290b:	50                   	push   %eax
+    290c:	50                   	push   %eax
+    290d:	68 16 49 00 00       	push   $0x4916
+    2912:	6a 01                	push   $0x1
+    2914:	e8 e7 10 00 00       	call   3a00 <printf>
+    exit();
+    2919:	e8 84 0f 00 00       	call   38a2 <exit>
+  if(mkdir("dots") != 0){
+    printf(1, "mkdir dots failed\n");
+    exit();
+  }
+  if(chdir("dots") != 0){
+    printf(1, "chdir dots failed\n");
+    291e:	50                   	push   %eax
+    291f:	50                   	push   %eax
+    2920:	68 03 49 00 00       	push   $0x4903
+    2925:	6a 01                	push   $0x1
+    2927:	e8 d4 10 00 00       	call   3a00 <printf>
+    exit();
+    292c:	e8 71 0f 00 00       	call   38a2 <exit>
+    2931:	eb 0d                	jmp    2940 <dirfile>
+    2933:	90                   	nop
+    2934:	90                   	nop
+    2935:	90                   	nop
+    2936:	90                   	nop
+    2937:	90                   	nop
+    2938:	90                   	nop
+    2939:	90                   	nop
+    293a:	90                   	nop
+    293b:	90                   	nop
+    293c:	90                   	nop
+    293d:	90                   	nop
+    293e:	90                   	nop
+    293f:	90                   	nop
+
+00002940 <dirfile>:
+  printf(1, "rmdot ok\n");
+}
+
+void
+dirfile(void)
+{
+    2940:	55                   	push   %ebp
+    2941:	89 e5                	mov    %esp,%ebp
+    2943:	53                   	push   %ebx
+    2944:	83 ec 0c             	sub    $0xc,%esp
+  int fd;
+
+  printf(1, "dir vs file\n");
+    2947:	68 90 49 00 00       	push   $0x4990
+    294c:	6a 01                	push   $0x1
+    294e:	e8 ad 10 00 00       	call   3a00 <printf>
+
+  fd = open("dirfile", O_CREATE);
+    2953:	59                   	pop    %ecx
+    2954:	5b                   	pop    %ebx
+    2955:	68 00 02 00 00       	push   $0x200
+    295a:	68 9d 49 00 00       	push   $0x499d
+    295f:	e8 7e 0f 00 00       	call   38e2 <open>
+  if(fd < 0){
+    2964:	83 c4 10             	add    $0x10,%esp
+    2967:	85 c0                	test   %eax,%eax
+    2969:	0f 88 43 01 00 00    	js     2ab2 <dirfile+0x172>
+    printf(1, "create dirfile failed\n");
+    exit();
+  }
+  close(fd);
+    296f:	83 ec 0c             	sub    $0xc,%esp
+    2972:	50                   	push   %eax
+    2973:	e8 52 0f 00 00       	call   38ca <close>
+  if(chdir("dirfile") == 0){
+    2978:	c7 04 24 9d 49 00 00 	movl   $0x499d,(%esp)
+    297f:	e8 8e 0f 00 00       	call   3912 <chdir>
+    2984:	83 c4 10             	add    $0x10,%esp
+    2987:	85 c0                	test   %eax,%eax
+    2989:	0f 84 10 01 00 00    	je     2a9f <dirfile+0x15f>
+    printf(1, "chdir dirfile succeeded!\n");
+    exit();
+  }
+  fd = open("dirfile/xx", 0);
+    298f:	83 ec 08             	sub    $0x8,%esp
+    2992:	6a 00                	push   $0x0
+    2994:	68 d6 49 00 00       	push   $0x49d6
+    2999:	e8 44 0f 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    299e:	83 c4 10             	add    $0x10,%esp
+    29a1:	85 c0                	test   %eax,%eax
+    29a3:	0f 89 e3 00 00 00    	jns    2a8c <dirfile+0x14c>
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit();
+  }
+  fd = open("dirfile/xx", O_CREATE);
+    29a9:	83 ec 08             	sub    $0x8,%esp
+    29ac:	68 00 02 00 00       	push   $0x200
+    29b1:	68 d6 49 00 00       	push   $0x49d6
+    29b6:	e8 27 0f 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    29bb:	83 c4 10             	add    $0x10,%esp
+    29be:	85 c0                	test   %eax,%eax
+    29c0:	0f 89 c6 00 00 00    	jns    2a8c <dirfile+0x14c>
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(mkdir("dirfile/xx") == 0){
+    29c6:	83 ec 0c             	sub    $0xc,%esp
+    29c9:	68 d6 49 00 00       	push   $0x49d6
+    29ce:	e8 37 0f 00 00       	call   390a <mkdir>
+    29d3:	83 c4 10             	add    $0x10,%esp
+    29d6:	85 c0                	test   %eax,%eax
+    29d8:	0f 84 46 01 00 00    	je     2b24 <dirfile+0x1e4>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(unlink("dirfile/xx") == 0){
+    29de:	83 ec 0c             	sub    $0xc,%esp
+    29e1:	68 d6 49 00 00       	push   $0x49d6
+    29e6:	e8 07 0f 00 00       	call   38f2 <unlink>
+    29eb:	83 c4 10             	add    $0x10,%esp
+    29ee:	85 c0                	test   %eax,%eax
+    29f0:	0f 84 1b 01 00 00    	je     2b11 <dirfile+0x1d1>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(link("README", "dirfile/xx") == 0){
+    29f6:	83 ec 08             	sub    $0x8,%esp
+    29f9:	68 d6 49 00 00       	push   $0x49d6
+    29fe:	68 3a 4a 00 00       	push   $0x4a3a
+    2a03:	e8 fa 0e 00 00       	call   3902 <link>
+    2a08:	83 c4 10             	add    $0x10,%esp
+    2a0b:	85 c0                	test   %eax,%eax
+    2a0d:	0f 84 eb 00 00 00    	je     2afe <dirfile+0x1be>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(unlink("dirfile") != 0){
+    2a13:	83 ec 0c             	sub    $0xc,%esp
+    2a16:	68 9d 49 00 00       	push   $0x499d
+    2a1b:	e8 d2 0e 00 00       	call   38f2 <unlink>
+    2a20:	83 c4 10             	add    $0x10,%esp
+    2a23:	85 c0                	test   %eax,%eax
+    2a25:	0f 85 c0 00 00 00    	jne    2aeb <dirfile+0x1ab>
+    printf(1, "unlink dirfile failed!\n");
+    exit();
+  }
+
+  fd = open(".", O_RDWR);
+    2a2b:	83 ec 08             	sub    $0x8,%esp
+    2a2e:	6a 02                	push   $0x2
+    2a30:	68 96 45 00 00       	push   $0x4596
+    2a35:	e8 a8 0e 00 00       	call   38e2 <open>
+  if(fd >= 0){
+    2a3a:	83 c4 10             	add    $0x10,%esp
+    2a3d:	85 c0                	test   %eax,%eax
+    2a3f:	0f 89 93 00 00 00    	jns    2ad8 <dirfile+0x198>
+    printf(1, "open . for writing succeeded!\n");
+    exit();
+  }
+  fd = open(".", 0);
+    2a45:	83 ec 08             	sub    $0x8,%esp
+    2a48:	6a 00                	push   $0x0
+    2a4a:	68 96 45 00 00       	push   $0x4596
+    2a4f:	e8 8e 0e 00 00       	call   38e2 <open>
+  if(write(fd, "x", 1) > 0){
+    2a54:	83 c4 0c             	add    $0xc,%esp
+  fd = open(".", O_RDWR);
+  if(fd >= 0){
+    printf(1, "open . for writing succeeded!\n");
+    exit();
+  }
+  fd = open(".", 0);
+    2a57:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a59:	6a 01                	push   $0x1
+    2a5b:	68 79 46 00 00       	push   $0x4679
+    2a60:	50                   	push   %eax
+    2a61:	e8 5c 0e 00 00       	call   38c2 <write>
+    2a66:	83 c4 10             	add    $0x10,%esp
+    2a69:	85 c0                	test   %eax,%eax
+    2a6b:	7f 58                	jg     2ac5 <dirfile+0x185>
+    printf(1, "write . succeeded!\n");
+    exit();
+  }
+  close(fd);
+    2a6d:	83 ec 0c             	sub    $0xc,%esp
+    2a70:	53                   	push   %ebx
+    2a71:	e8 54 0e 00 00       	call   38ca <close>
+
+  printf(1, "dir vs file OK\n");
+    2a76:	58                   	pop    %eax
+    2a77:	5a                   	pop    %edx
+    2a78:	68 6d 4a 00 00       	push   $0x4a6d
+    2a7d:	6a 01                	push   $0x1
+    2a7f:	e8 7c 0f 00 00       	call   3a00 <printf>
+}
+    2a84:	83 c4 10             	add    $0x10,%esp
+    2a87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2a8a:	c9                   	leave  
+    2a8b:	c3                   	ret    
+    printf(1, "chdir dirfile succeeded!\n");
+    exit();
+  }
+  fd = open("dirfile/xx", 0);
+  if(fd >= 0){
+    printf(1, "create dirfile/xx succeeded!\n");
+    2a8c:	50                   	push   %eax
+    2a8d:	50                   	push   %eax
+    2a8e:	68 e1 49 00 00       	push   $0x49e1
+    2a93:	6a 01                	push   $0x1
+    2a95:	e8 66 0f 00 00       	call   3a00 <printf>
+    exit();
+    2a9a:	e8 03 0e 00 00       	call   38a2 <exit>
+    printf(1, "create dirfile failed\n");
+    exit();
+  }
+  close(fd);
+  if(chdir("dirfile") == 0){
+    printf(1, "chdir dirfile succeeded!\n");
+    2a9f:	50                   	push   %eax
+    2aa0:	50                   	push   %eax
+    2aa1:	68 bc 49 00 00       	push   $0x49bc
+    2aa6:	6a 01                	push   $0x1
+    2aa8:	e8 53 0f 00 00       	call   3a00 <printf>
+    exit();
+    2aad:	e8 f0 0d 00 00       	call   38a2 <exit>
+
+  printf(1, "dir vs file\n");
+
+  fd = open("dirfile", O_CREATE);
+  if(fd < 0){
+    printf(1, "create dirfile failed\n");
+    2ab2:	52                   	push   %edx
+    2ab3:	52                   	push   %edx
+    2ab4:	68 a5 49 00 00       	push   $0x49a5
+    2ab9:	6a 01                	push   $0x1
+    2abb:	e8 40 0f 00 00       	call   3a00 <printf>
+    exit();
+    2ac0:	e8 dd 0d 00 00       	call   38a2 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    exit();
+  }
+  fd = open(".", 0);
+  if(write(fd, "x", 1) > 0){
+    printf(1, "write . succeeded!\n");
+    2ac5:	51                   	push   %ecx
+    2ac6:	51                   	push   %ecx
+    2ac7:	68 59 4a 00 00       	push   $0x4a59
+    2acc:	6a 01                	push   $0x1
+    2ace:	e8 2d 0f 00 00       	call   3a00 <printf>
+    exit();
+    2ad3:	e8 ca 0d 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  fd = open(".", O_RDWR);
+  if(fd >= 0){
+    printf(1, "open . for writing succeeded!\n");
+    2ad8:	53                   	push   %ebx
+    2ad9:	53                   	push   %ebx
+    2ada:	68 50 52 00 00       	push   $0x5250
+    2adf:	6a 01                	push   $0x1
+    2ae1:	e8 1a 0f 00 00       	call   3a00 <printf>
+    exit();
+    2ae6:	e8 b7 0d 00 00       	call   38a2 <exit>
+  if(link("README", "dirfile/xx") == 0){
+    printf(1, "link to dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(unlink("dirfile") != 0){
+    printf(1, "unlink dirfile failed!\n");
+    2aeb:	50                   	push   %eax
+    2aec:	50                   	push   %eax
+    2aed:	68 41 4a 00 00       	push   $0x4a41
+    2af2:	6a 01                	push   $0x1
+    2af4:	e8 07 0f 00 00       	call   3a00 <printf>
+    exit();
+    2af9:	e8 a4 0d 00 00       	call   38a2 <exit>
+  if(unlink("dirfile/xx") == 0){
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(link("README", "dirfile/xx") == 0){
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2afe:	50                   	push   %eax
+    2aff:	50                   	push   %eax
+    2b00:	68 30 52 00 00       	push   $0x5230
+    2b05:	6a 01                	push   $0x1
+    2b07:	e8 f4 0e 00 00       	call   3a00 <printf>
+    exit();
+    2b0c:	e8 91 0d 00 00       	call   38a2 <exit>
+  if(mkdir("dirfile/xx") == 0){
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(unlink("dirfile/xx") == 0){
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b11:	50                   	push   %eax
+    2b12:	50                   	push   %eax
+    2b13:	68 1c 4a 00 00       	push   $0x4a1c
+    2b18:	6a 01                	push   $0x1
+    2b1a:	e8 e1 0e 00 00       	call   3a00 <printf>
+    exit();
+    2b1f:	e8 7e 0d 00 00       	call   38a2 <exit>
+  if(fd >= 0){
+    printf(1, "create dirfile/xx succeeded!\n");
+    exit();
+  }
+  if(mkdir("dirfile/xx") == 0){
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b24:	50                   	push   %eax
+    2b25:	50                   	push   %eax
+    2b26:	68 ff 49 00 00       	push   $0x49ff
+    2b2b:	6a 01                	push   $0x1
+    2b2d:	e8 ce 0e 00 00       	call   3a00 <printf>
+    exit();
+    2b32:	e8 6b 0d 00 00       	call   38a2 <exit>
+    2b37:	89 f6                	mov    %esi,%esi
+    2b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00002b40 <iref>:
+}
+
+// test that iput() is called at the end of _namei()
+void
+iref(void)
+{
+    2b40:	55                   	push   %ebp
+    2b41:	89 e5                	mov    %esp,%ebp
+    2b43:	53                   	push   %ebx
+  int i, fd;
+
+  printf(1, "empty file name\n");
+    2b44:	bb 33 00 00 00       	mov    $0x33,%ebx
+}
+
+// test that iput() is called at the end of _namei()
+void
+iref(void)
+{
+    2b49:	83 ec 0c             	sub    $0xc,%esp
+  int i, fd;
+
+  printf(1, "empty file name\n");
+    2b4c:	68 7d 4a 00 00       	push   $0x4a7d
+    2b51:	6a 01                	push   $0x1
+    2b53:	e8 a8 0e 00 00       	call   3a00 <printf>
+    2b58:	83 c4 10             	add    $0x10,%esp
+    2b5b:	90                   	nop
+    2b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    if(mkdir("irefd") != 0){
+    2b60:	83 ec 0c             	sub    $0xc,%esp
+    2b63:	68 8e 4a 00 00       	push   $0x4a8e
+    2b68:	e8 9d 0d 00 00       	call   390a <mkdir>
+    2b6d:	83 c4 10             	add    $0x10,%esp
+    2b70:	85 c0                	test   %eax,%eax
+    2b72:	0f 85 bb 00 00 00    	jne    2c33 <iref+0xf3>
+      printf(1, "mkdir irefd failed\n");
+      exit();
+    }
+    if(chdir("irefd") != 0){
+    2b78:	83 ec 0c             	sub    $0xc,%esp
+    2b7b:	68 8e 4a 00 00       	push   $0x4a8e
+    2b80:	e8 8d 0d 00 00       	call   3912 <chdir>
+    2b85:	83 c4 10             	add    $0x10,%esp
+    2b88:	85 c0                	test   %eax,%eax
+    2b8a:	0f 85 b7 00 00 00    	jne    2c47 <iref+0x107>
+      printf(1, "chdir irefd failed\n");
+      exit();
+    }
+
+    mkdir("");
+    2b90:	83 ec 0c             	sub    $0xc,%esp
+    2b93:	68 43 41 00 00       	push   $0x4143
+    2b98:	e8 6d 0d 00 00       	call   390a <mkdir>
+    link("README", "");
+    2b9d:	59                   	pop    %ecx
+    2b9e:	58                   	pop    %eax
+    2b9f:	68 43 41 00 00       	push   $0x4143
+    2ba4:	68 3a 4a 00 00       	push   $0x4a3a
+    2ba9:	e8 54 0d 00 00       	call   3902 <link>
+    fd = open("", O_CREATE);
+    2bae:	58                   	pop    %eax
+    2baf:	5a                   	pop    %edx
+    2bb0:	68 00 02 00 00       	push   $0x200
+    2bb5:	68 43 41 00 00       	push   $0x4143
+    2bba:	e8 23 0d 00 00       	call   38e2 <open>
+    if(fd >= 0)
+    2bbf:	83 c4 10             	add    $0x10,%esp
+    2bc2:	85 c0                	test   %eax,%eax
+    2bc4:	78 0c                	js     2bd2 <iref+0x92>
+      close(fd);
+    2bc6:	83 ec 0c             	sub    $0xc,%esp
+    2bc9:	50                   	push   %eax
+    2bca:	e8 fb 0c 00 00       	call   38ca <close>
+    2bcf:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2bd2:	83 ec 08             	sub    $0x8,%esp
+    2bd5:	68 00 02 00 00       	push   $0x200
+    2bda:	68 78 46 00 00       	push   $0x4678
+    2bdf:	e8 fe 0c 00 00       	call   38e2 <open>
+    if(fd >= 0)
+    2be4:	83 c4 10             	add    $0x10,%esp
+    2be7:	85 c0                	test   %eax,%eax
+    2be9:	78 0c                	js     2bf7 <iref+0xb7>
+      close(fd);
+    2beb:	83 ec 0c             	sub    $0xc,%esp
+    2bee:	50                   	push   %eax
+    2bef:	e8 d6 0c 00 00       	call   38ca <close>
+    2bf4:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2bf7:	83 ec 0c             	sub    $0xc,%esp
+    2bfa:	68 78 46 00 00       	push   $0x4678
+    2bff:	e8 ee 0c 00 00       	call   38f2 <unlink>
+  int i, fd;
+
+  printf(1, "empty file name\n");
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    2c04:	83 c4 10             	add    $0x10,%esp
+    2c07:	83 eb 01             	sub    $0x1,%ebx
+    2c0a:	0f 85 50 ff ff ff    	jne    2b60 <iref+0x20>
+    if(fd >= 0)
+      close(fd);
+    unlink("xx");
+  }
+
+  chdir("/");
+    2c10:	83 ec 0c             	sub    $0xc,%esp
+    2c13:	68 69 3d 00 00       	push   $0x3d69
+    2c18:	e8 f5 0c 00 00       	call   3912 <chdir>
+  printf(1, "empty file name OK\n");
+    2c1d:	58                   	pop    %eax
+    2c1e:	5a                   	pop    %edx
+    2c1f:	68 bc 4a 00 00       	push   $0x4abc
+    2c24:	6a 01                	push   $0x1
+    2c26:	e8 d5 0d 00 00       	call   3a00 <printf>
+}
+    2c2b:	83 c4 10             	add    $0x10,%esp
+    2c2e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c31:	c9                   	leave  
+    2c32:	c3                   	ret    
+  printf(1, "empty file name\n");
+
+  // the 50 is NINODE
+  for(i = 0; i < 50 + 1; i++){
+    if(mkdir("irefd") != 0){
+      printf(1, "mkdir irefd failed\n");
+    2c33:	83 ec 08             	sub    $0x8,%esp
+    2c36:	68 94 4a 00 00       	push   $0x4a94
+    2c3b:	6a 01                	push   $0x1
+    2c3d:	e8 be 0d 00 00       	call   3a00 <printf>
+      exit();
+    2c42:	e8 5b 0c 00 00       	call   38a2 <exit>
+    }
+    if(chdir("irefd") != 0){
+      printf(1, "chdir irefd failed\n");
+    2c47:	83 ec 08             	sub    $0x8,%esp
+    2c4a:	68 a8 4a 00 00       	push   $0x4aa8
+    2c4f:	6a 01                	push   $0x1
+    2c51:	e8 aa 0d 00 00       	call   3a00 <printf>
+      exit();
+    2c56:	e8 47 0c 00 00       	call   38a2 <exit>
+    2c5b:	90                   	nop
+    2c5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002c60 <forktest>:
+// test that fork fails gracefully
+// the forktest binary also does this, but it runs out of proc entries first.
+// inside the bigger usertests binary, we run out of memory first.
+void
+forktest(void)
+{
+    2c60:	55                   	push   %ebp
+    2c61:	89 e5                	mov    %esp,%ebp
+    2c63:	53                   	push   %ebx
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<1000; n++){
+    2c64:	31 db                	xor    %ebx,%ebx
+// test that fork fails gracefully
+// the forktest binary also does this, but it runs out of proc entries first.
+// inside the bigger usertests binary, we run out of memory first.
+void
+forktest(void)
+{
+    2c66:	83 ec 0c             	sub    $0xc,%esp
+  int n, pid;
+
+  printf(1, "fork test\n");
+    2c69:	68 d0 4a 00 00       	push   $0x4ad0
+    2c6e:	6a 01                	push   $0x1
+    2c70:	e8 8b 0d 00 00       	call   3a00 <printf>
+    2c75:	83 c4 10             	add    $0x10,%esp
+    2c78:	eb 13                	jmp    2c8d <forktest+0x2d>
+    2c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(n=0; n<1000; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+    2c80:	74 62                	je     2ce4 <forktest+0x84>
+{
+  int n, pid;
+
+  printf(1, "fork test\n");
+
+  for(n=0; n<1000; n++){
+    2c82:	83 c3 01             	add    $0x1,%ebx
+    2c85:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2c8b:	74 43                	je     2cd0 <forktest+0x70>
+    pid = fork();
+    2c8d:	e8 08 0c 00 00       	call   389a <fork>
+    if(pid < 0)
+    2c92:	85 c0                	test   %eax,%eax
+    2c94:	79 ea                	jns    2c80 <forktest+0x20>
+  if(n == 1000){
+    printf(1, "fork claimed to work 1000 times!\n");
+    exit();
+  }
+
+  for(; n > 0; n--){
+    2c96:	85 db                	test   %ebx,%ebx
+    2c98:	74 14                	je     2cae <forktest+0x4e>
+    2c9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2ca0:	e8 05 0c 00 00       	call   38aa <wait>
+    2ca5:	85 c0                	test   %eax,%eax
+    2ca7:	78 40                	js     2ce9 <forktest+0x89>
+  if(n == 1000){
+    printf(1, "fork claimed to work 1000 times!\n");
+    exit();
+  }
+
+  for(; n > 0; n--){
+    2ca9:	83 eb 01             	sub    $0x1,%ebx
+    2cac:	75 f2                	jne    2ca0 <forktest+0x40>
+      printf(1, "wait stopped early\n");
+      exit();
+    }
+  }
+
+  if(wait() != -1){
+    2cae:	e8 f7 0b 00 00       	call   38aa <wait>
+    2cb3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2cb6:	75 45                	jne    2cfd <forktest+0x9d>
+    printf(1, "wait got too many\n");
+    exit();
+  }
+
+  printf(1, "fork test OK\n");
+    2cb8:	83 ec 08             	sub    $0x8,%esp
+    2cbb:	68 02 4b 00 00       	push   $0x4b02
+    2cc0:	6a 01                	push   $0x1
+    2cc2:	e8 39 0d 00 00       	call   3a00 <printf>
+}
+    2cc7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cca:	c9                   	leave  
+    2ccb:	c3                   	ret    
+    2ccc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+      exit();
+  }
+
+  if(n == 1000){
+    printf(1, "fork claimed to work 1000 times!\n");
+    2cd0:	83 ec 08             	sub    $0x8,%esp
+    2cd3:	68 70 52 00 00       	push   $0x5270
+    2cd8:	6a 01                	push   $0x1
+    2cda:	e8 21 0d 00 00       	call   3a00 <printf>
+    exit();
+    2cdf:	e8 be 0b 00 00       	call   38a2 <exit>
+  for(n=0; n<1000; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit();
+    2ce4:	e8 b9 0b 00 00       	call   38a2 <exit>
+    exit();
+  }
+
+  for(; n > 0; n--){
+    if(wait() < 0){
+      printf(1, "wait stopped early\n");
+    2ce9:	83 ec 08             	sub    $0x8,%esp
+    2cec:	68 db 4a 00 00       	push   $0x4adb
+    2cf1:	6a 01                	push   $0x1
+    2cf3:	e8 08 0d 00 00       	call   3a00 <printf>
+      exit();
+    2cf8:	e8 a5 0b 00 00       	call   38a2 <exit>
+    }
+  }
+
+  if(wait() != -1){
+    printf(1, "wait got too many\n");
+    2cfd:	83 ec 08             	sub    $0x8,%esp
+    2d00:	68 ef 4a 00 00       	push   $0x4aef
+    2d05:	6a 01                	push   $0x1
+    2d07:	e8 f4 0c 00 00       	call   3a00 <printf>
+    exit();
+    2d0c:	e8 91 0b 00 00       	call   38a2 <exit>
+    2d11:	eb 0d                	jmp    2d20 <sbrktest>
+    2d13:	90                   	nop
+    2d14:	90                   	nop
+    2d15:	90                   	nop
+    2d16:	90                   	nop
+    2d17:	90                   	nop
+    2d18:	90                   	nop
+    2d19:	90                   	nop
+    2d1a:	90                   	nop
+    2d1b:	90                   	nop
+    2d1c:	90                   	nop
+    2d1d:	90                   	nop
+    2d1e:	90                   	nop
+    2d1f:	90                   	nop
+
+00002d20 <sbrktest>:
+  printf(1, "fork test OK\n");
+}
+
+void
+sbrktest(void)
+{
+    2d20:	55                   	push   %ebp
+    2d21:	89 e5                	mov    %esp,%ebp
+    2d23:	57                   	push   %edi
+    2d24:	56                   	push   %esi
+    2d25:	53                   	push   %ebx
+  oldbrk = sbrk(0);
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){
+    2d26:	31 ff                	xor    %edi,%edi
+  printf(1, "fork test OK\n");
+}
+
+void
+sbrktest(void)
+{
+    2d28:	83 ec 64             	sub    $0x64,%esp
+  int fds[2], pid, pids[10], ppid;
+  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  uint amt;
+
+  printf(stdout, "sbrk test\n");
+    2d2b:	68 10 4b 00 00       	push   $0x4b10
+    2d30:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    2d36:	e8 c5 0c 00 00       	call   3a00 <printf>
+  oldbrk = sbrk(0);
+    2d3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d42:	e8 e3 0b 00 00       	call   392a <sbrk>
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+    2d47:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  int fds[2], pid, pids[10], ppid;
+  char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
+  uint amt;
+
+  printf(stdout, "sbrk test\n");
+  oldbrk = sbrk(0);
+    2d4e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+    2d51:	e8 d4 0b 00 00       	call   392a <sbrk>
+    2d56:	83 c4 10             	add    $0x10,%esp
+    2d59:	89 c3                	mov    %eax,%ebx
+    2d5b:	90                   	nop
+    2d5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  int i;
+  for(i = 0; i < 5000; i++){
+    b = sbrk(1);
+    2d60:	83 ec 0c             	sub    $0xc,%esp
+    2d63:	6a 01                	push   $0x1
+    2d65:	e8 c0 0b 00 00       	call   392a <sbrk>
+    if(b != a){
+    2d6a:	83 c4 10             	add    $0x10,%esp
+    2d6d:	39 d8                	cmp    %ebx,%eax
+    2d6f:	0f 85 85 02 00 00    	jne    2ffa <sbrktest+0x2da>
+  oldbrk = sbrk(0);
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){
+    2d75:	83 c7 01             	add    $0x1,%edi
+    b = sbrk(1);
+    if(b != a){
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+      exit();
+    }
+    *b = 1;
+    2d78:	c6 03 01             	movb   $0x1,(%ebx)
+    a = b + 1;
+    2d7b:	83 c3 01             	add    $0x1,%ebx
+  oldbrk = sbrk(0);
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){
+    2d7e:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2d84:	75 da                	jne    2d60 <sbrktest+0x40>
+      exit();
+    }
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+    2d86:	e8 0f 0b 00 00       	call   389a <fork>
+  if(pid < 0){
+    2d8b:	85 c0                	test   %eax,%eax
+      exit();
+    }
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+    2d8d:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2d8f:	0f 88 93 03 00 00    	js     3128 <sbrktest+0x408>
+    printf(stdout, "sbrk test fork failed\n");
+    exit();
+  }
+  c = sbrk(1);
+    2d95:	83 ec 0c             	sub    $0xc,%esp
+  c = sbrk(1);
+  if(c != a + 1){
+    2d98:	83 c3 01             	add    $0x1,%ebx
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "sbrk test fork failed\n");
+    exit();
+  }
+  c = sbrk(1);
+    2d9b:	6a 01                	push   $0x1
+    2d9d:	e8 88 0b 00 00       	call   392a <sbrk>
+  c = sbrk(1);
+    2da2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2da9:	e8 7c 0b 00 00       	call   392a <sbrk>
+  if(c != a + 1){
+    2dae:	83 c4 10             	add    $0x10,%esp
+    2db1:	39 d8                	cmp    %ebx,%eax
+    2db3:	0f 85 57 03 00 00    	jne    3110 <sbrktest+0x3f0>
+    printf(stdout, "sbrk test failed post-fork\n");
+    exit();
+  }
+  if(pid == 0)
+    2db9:	85 ff                	test   %edi,%edi
+    2dbb:	0f 84 4a 03 00 00    	je     310b <sbrktest+0x3eb>
+    exit();
+  wait();
+    2dc1:	e8 e4 0a 00 00       	call   38aa <wait>
+
+  // can one grow address space to something big?
+#define BIG (100*1024*1024)
+  a = sbrk(0);
+    2dc6:	83 ec 0c             	sub    $0xc,%esp
+    2dc9:	6a 00                	push   $0x0
+    2dcb:	e8 5a 0b 00 00       	call   392a <sbrk>
+    2dd0:	89 c3                	mov    %eax,%ebx
+  amt = (BIG) - (uint)a;
+  p = sbrk(amt);
+    2dd2:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2dd7:	29 d8                	sub    %ebx,%eax
+    2dd9:	89 04 24             	mov    %eax,(%esp)
+    2ddc:	e8 49 0b 00 00       	call   392a <sbrk>
+  if (p != a) {
+    2de1:	83 c4 10             	add    $0x10,%esp
+    2de4:	39 c3                	cmp    %eax,%ebx
+    2de6:	0f 85 07 03 00 00    	jne    30f3 <sbrktest+0x3d3>
+  }
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
+
+  // can one de-allocate?
+  a = sbrk(0);
+    2dec:	83 ec 0c             	sub    $0xc,%esp
+  if (p != a) {
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    exit();
+  }
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
+    2def:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+
+  // can one de-allocate?
+  a = sbrk(0);
+    2df6:	6a 00                	push   $0x0
+    2df8:	e8 2d 0b 00 00       	call   392a <sbrk>
+  c = sbrk(-4096);
+    2dfd:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  }
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
+
+  // can one de-allocate?
+  a = sbrk(0);
+    2e04:	89 c3                	mov    %eax,%ebx
+  c = sbrk(-4096);
+    2e06:	e8 1f 0b 00 00       	call   392a <sbrk>
+  if(c == (char*)0xffffffff){
+    2e0b:	83 c4 10             	add    $0x10,%esp
+    2e0e:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e11:	0f 84 c4 02 00 00    	je     30db <sbrktest+0x3bb>
+    printf(stdout, "sbrk could not deallocate\n");
+    exit();
+  }
+  c = sbrk(0);
+    2e17:	83 ec 0c             	sub    $0xc,%esp
+    2e1a:	6a 00                	push   $0x0
+    2e1c:	e8 09 0b 00 00       	call   392a <sbrk>
+  if(c != a - 4096){
+    2e21:	8d 93 00 f0 ff ff    	lea    -0x1000(%ebx),%edx
+    2e27:	83 c4 10             	add    $0x10,%esp
+    2e2a:	39 d0                	cmp    %edx,%eax
+    2e2c:	0f 85 92 02 00 00    	jne    30c4 <sbrktest+0x3a4>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    exit();
+  }
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+    2e32:	83 ec 0c             	sub    $0xc,%esp
+    2e35:	6a 00                	push   $0x0
+    2e37:	e8 ee 0a 00 00       	call   392a <sbrk>
+    2e3c:	89 c3                	mov    %eax,%ebx
+  c = sbrk(4096);
+    2e3e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+    2e45:	e8 e0 0a 00 00       	call   392a <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e4a:	83 c4 10             	add    $0x10,%esp
+    2e4d:	39 c3                	cmp    %eax,%ebx
+    exit();
+  }
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+  c = sbrk(4096);
+    2e4f:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2e51:	0f 85 56 02 00 00    	jne    30ad <sbrktest+0x38d>
+    2e57:	83 ec 0c             	sub    $0xc,%esp
+    2e5a:	6a 00                	push   $0x0
+    2e5c:	e8 c9 0a 00 00       	call   392a <sbrk>
+    2e61:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
+    2e67:	83 c4 10             	add    $0x10,%esp
+    2e6a:	39 d0                	cmp    %edx,%eax
+    2e6c:	0f 85 3b 02 00 00    	jne    30ad <sbrktest+0x38d>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    exit();
+  }
+  if(*lastaddr == 99){
+    2e72:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2e79:	0f 84 16 02 00 00    	je     3095 <sbrktest+0x375>
+    // should be zero
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    exit();
+  }
+
+  a = sbrk(0);
+    2e7f:	83 ec 0c             	sub    $0xc,%esp
+    2e82:	6a 00                	push   $0x0
+    2e84:	e8 a1 0a 00 00       	call   392a <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2e89:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    // should be zero
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    exit();
+  }
+
+  a = sbrk(0);
+    2e90:	89 c3                	mov    %eax,%ebx
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2e92:	e8 93 0a 00 00       	call   392a <sbrk>
+    2e97:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
+    2e9a:	29 c1                	sub    %eax,%ecx
+    2e9c:	89 0c 24             	mov    %ecx,(%esp)
+    2e9f:	e8 86 0a 00 00       	call   392a <sbrk>
+  if(c != a){
+    2ea4:	83 c4 10             	add    $0x10,%esp
+    2ea7:	39 c3                	cmp    %eax,%ebx
+    2ea9:	0f 85 cf 01 00 00    	jne    307e <sbrktest+0x35e>
+    2eaf:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    2eb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+  }
+
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    ppid = getpid();
+    2eb8:	e8 65 0a 00 00       	call   3922 <getpid>
+    2ebd:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2ebf:	e8 d6 09 00 00       	call   389a <fork>
+    if(pid < 0){
+    2ec4:	85 c0                	test   %eax,%eax
+    2ec6:	0f 88 9a 01 00 00    	js     3066 <sbrktest+0x346>
+      printf(stdout, "fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+    2ecc:	0f 84 72 01 00 00    	je     3044 <sbrktest+0x324>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    exit();
+  }
+
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ed2:	81 c3 50 c3 00 00    	add    $0xc350,%ebx
+    if(pid == 0){
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+      kill(ppid);
+      exit();
+    }
+    wait();
+    2ed8:	e8 cd 09 00 00       	call   38aa <wait>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    exit();
+  }
+
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2edd:	81 fb 80 84 1e 80    	cmp    $0x801e8480,%ebx
+    2ee3:	75 d3                	jne    2eb8 <sbrktest+0x198>
+    wait();
+  }
+
+  // if we run the system out of memory, does it clean up the last
+  // failed allocation?
+  if(pipe(fds) != 0){
+    2ee5:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2ee8:	83 ec 0c             	sub    $0xc,%esp
+    2eeb:	50                   	push   %eax
+    2eec:	e8 c1 09 00 00       	call   38b2 <pipe>
+    2ef1:	83 c4 10             	add    $0x10,%esp
+    2ef4:	85 c0                	test   %eax,%eax
+    2ef6:	0f 85 34 01 00 00    	jne    3030 <sbrktest+0x310>
+    2efc:	8d 5d c0             	lea    -0x40(%ebp),%ebx
+    2eff:	8d 7d e8             	lea    -0x18(%ebp),%edi
+    2f02:	89 de                	mov    %ebx,%esi
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if((pids[i] = fork()) == 0){
+    2f04:	e8 91 09 00 00       	call   389a <fork>
+    2f09:	85 c0                	test   %eax,%eax
+    2f0b:	89 06                	mov    %eax,(%esi)
+    2f0d:	0f 84 a1 00 00 00    	je     2fb4 <sbrktest+0x294>
+      sbrk(BIG - (uint)sbrk(0));
+      write(fds[1], "x", 1);
+      // sit around until killed
+      for(;;) sleep(1000);
+    }
+    if(pids[i] != -1)
+    2f13:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f16:	74 14                	je     2f2c <sbrktest+0x20c>
+      read(fds[0], &scratch, 1);
+    2f18:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f1b:	83 ec 04             	sub    $0x4,%esp
+    2f1e:	6a 01                	push   $0x1
+    2f20:	50                   	push   %eax
+    2f21:	ff 75 b8             	pushl  -0x48(%ebp)
+    2f24:	e8 91 09 00 00       	call   38ba <read>
+    2f29:	83 c4 10             	add    $0x10,%esp
+    2f2c:	83 c6 04             	add    $0x4,%esi
+  // failed allocation?
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    exit();
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f2f:	39 f7                	cmp    %esi,%edi
+    2f31:	75 d1                	jne    2f04 <sbrktest+0x1e4>
+    if(pids[i] != -1)
+      read(fds[0], &scratch, 1);
+  }
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+    2f33:	83 ec 0c             	sub    $0xc,%esp
+    2f36:	68 00 10 00 00       	push   $0x1000
+    2f3b:	e8 ea 09 00 00       	call   392a <sbrk>
+    2f40:	83 c4 10             	add    $0x10,%esp
+    2f43:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if(pids[i] == -1)
+    2f45:	8b 03                	mov    (%ebx),%eax
+    2f47:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f4a:	74 11                	je     2f5d <sbrktest+0x23d>
+      continue;
+    kill(pids[i]);
+    2f4c:	83 ec 0c             	sub    $0xc,%esp
+    2f4f:	50                   	push   %eax
+    2f50:	e8 7d 09 00 00       	call   38d2 <kill>
+    wait();
+    2f55:	e8 50 09 00 00       	call   38aa <wait>
+    2f5a:	83 c4 10             	add    $0x10,%esp
+    2f5d:	83 c3 04             	add    $0x4,%ebx
+      read(fds[0], &scratch, 1);
+  }
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(4096);
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f60:	39 fb                	cmp    %edi,%ebx
+    2f62:	75 e1                	jne    2f45 <sbrktest+0x225>
+    if(pids[i] == -1)
+      continue;
+    kill(pids[i]);
+    wait();
+  }
+  if(c == (char*)0xffffffff){
+    2f64:	83 fe ff             	cmp    $0xffffffff,%esi
+    2f67:	0f 84 ab 00 00 00    	je     3018 <sbrktest+0x2f8>
+    printf(stdout, "failed sbrk leaked memory\n");
+    exit();
+  }
+
+  if(sbrk(0) > oldbrk)
+    2f6d:	83 ec 0c             	sub    $0xc,%esp
+    2f70:	6a 00                	push   $0x0
+    2f72:	e8 b3 09 00 00       	call   392a <sbrk>
+    2f77:	83 c4 10             	add    $0x10,%esp
+    2f7a:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+    2f7d:	73 1a                	jae    2f99 <sbrktest+0x279>
+    sbrk(-(sbrk(0) - oldbrk));
+    2f7f:	83 ec 0c             	sub    $0xc,%esp
+    2f82:	6a 00                	push   $0x0
+    2f84:	e8 a1 09 00 00       	call   392a <sbrk>
+    2f89:	8b 75 a4             	mov    -0x5c(%ebp),%esi
+    2f8c:	29 c6                	sub    %eax,%esi
+    2f8e:	89 34 24             	mov    %esi,(%esp)
+    2f91:	e8 94 09 00 00       	call   392a <sbrk>
+    2f96:	83 c4 10             	add    $0x10,%esp
+
+  printf(stdout, "sbrk test OK\n");
+    2f99:	83 ec 08             	sub    $0x8,%esp
+    2f9c:	68 b8 4b 00 00       	push   $0x4bb8
+    2fa1:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    2fa7:	e8 54 0a 00 00       	call   3a00 <printf>
+}
+    2fac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2faf:	5b                   	pop    %ebx
+    2fb0:	5e                   	pop    %esi
+    2fb1:	5f                   	pop    %edi
+    2fb2:	5d                   	pop    %ebp
+    2fb3:	c3                   	ret    
+    exit();
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if((pids[i] = fork()) == 0){
+      // allocate a lot of memory
+      sbrk(BIG - (uint)sbrk(0));
+    2fb4:	83 ec 0c             	sub    $0xc,%esp
+    2fb7:	6a 00                	push   $0x0
+    2fb9:	e8 6c 09 00 00       	call   392a <sbrk>
+    2fbe:	ba 00 00 40 06       	mov    $0x6400000,%edx
+    2fc3:	29 c2                	sub    %eax,%edx
+    2fc5:	89 14 24             	mov    %edx,(%esp)
+    2fc8:	e8 5d 09 00 00       	call   392a <sbrk>
+      write(fds[1], "x", 1);
+    2fcd:	83 c4 0c             	add    $0xc,%esp
+    2fd0:	6a 01                	push   $0x1
+    2fd2:	68 79 46 00 00       	push   $0x4679
+    2fd7:	ff 75 bc             	pushl  -0x44(%ebp)
+    2fda:	e8 e3 08 00 00       	call   38c2 <write>
+    2fdf:	83 c4 10             	add    $0x10,%esp
+    2fe2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      // sit around until killed
+      for(;;) sleep(1000);
+    2fe8:	83 ec 0c             	sub    $0xc,%esp
+    2feb:	68 e8 03 00 00       	push   $0x3e8
+    2ff0:	e8 3d 09 00 00       	call   3932 <sleep>
+    2ff5:	83 c4 10             	add    $0x10,%esp
+    2ff8:	eb ee                	jmp    2fe8 <sbrktest+0x2c8>
+  a = sbrk(0);
+  int i;
+  for(i = 0; i < 5000; i++){
+    b = sbrk(1);
+    if(b != a){
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    2ffa:	83 ec 0c             	sub    $0xc,%esp
+    2ffd:	50                   	push   %eax
+    2ffe:	53                   	push   %ebx
+    2fff:	57                   	push   %edi
+    3000:	68 1b 4b 00 00       	push   $0x4b1b
+    3005:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    300b:	e8 f0 09 00 00       	call   3a00 <printf>
+      exit();
+    3010:	83 c4 20             	add    $0x20,%esp
+    3013:	e8 8a 08 00 00       	call   38a2 <exit>
+      continue;
+    kill(pids[i]);
+    wait();
+  }
+  if(c == (char*)0xffffffff){
+    printf(stdout, "failed sbrk leaked memory\n");
+    3018:	83 ec 08             	sub    $0x8,%esp
+    301b:	68 9d 4b 00 00       	push   $0x4b9d
+    3020:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3026:	e8 d5 09 00 00       	call   3a00 <printf>
+    exit();
+    302b:	e8 72 08 00 00       	call   38a2 <exit>
+  }
+
+  // if we run the system out of memory, does it clean up the last
+  // failed allocation?
+  if(pipe(fds) != 0){
+    printf(1, "pipe() failed\n");
+    3030:	83 ec 08             	sub    $0x8,%esp
+    3033:	68 59 40 00 00       	push   $0x4059
+    3038:	6a 01                	push   $0x1
+    303a:	e8 c1 09 00 00       	call   3a00 <printf>
+    exit();
+    303f:	e8 5e 08 00 00       	call   38a2 <exit>
+    if(pid < 0){
+      printf(stdout, "fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    3044:	0f be 03             	movsbl (%ebx),%eax
+    3047:	50                   	push   %eax
+    3048:	53                   	push   %ebx
+    3049:	68 84 4b 00 00       	push   $0x4b84
+    304e:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3054:	e8 a7 09 00 00       	call   3a00 <printf>
+      kill(ppid);
+    3059:	89 3c 24             	mov    %edi,(%esp)
+    305c:	e8 71 08 00 00       	call   38d2 <kill>
+      exit();
+    3061:	e8 3c 08 00 00       	call   38a2 <exit>
+  // can we read the kernel's memory?
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    ppid = getpid();
+    pid = fork();
+    if(pid < 0){
+      printf(stdout, "fork failed\n");
+    3066:	83 ec 08             	sub    $0x8,%esp
+    3069:	68 61 4c 00 00       	push   $0x4c61
+    306e:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3074:	e8 87 09 00 00       	call   3a00 <printf>
+      exit();
+    3079:	e8 24 08 00 00       	call   38a2 <exit>
+  }
+
+  a = sbrk(0);
+  c = sbrk(-(sbrk(0) - oldbrk));
+  if(c != a){
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    307e:	50                   	push   %eax
+    307f:	53                   	push   %ebx
+    3080:	68 64 53 00 00       	push   $0x5364
+    3085:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    308b:	e8 70 09 00 00       	call   3a00 <printf>
+    exit();
+    3090:	e8 0d 08 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    exit();
+  }
+  if(*lastaddr == 99){
+    // should be zero
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    3095:	83 ec 08             	sub    $0x8,%esp
+    3098:	68 34 53 00 00       	push   $0x5334
+    309d:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    30a3:	e8 58 09 00 00       	call   3a00 <printf>
+    exit();
+    30a8:	e8 f5 07 00 00       	call   38a2 <exit>
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+  c = sbrk(4096);
+  if(c != a || sbrk(0) != a + 4096){
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    30ad:	57                   	push   %edi
+    30ae:	53                   	push   %ebx
+    30af:	68 0c 53 00 00       	push   $0x530c
+    30b4:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    30ba:	e8 41 09 00 00       	call   3a00 <printf>
+    exit();
+    30bf:	e8 de 07 00 00       	call   38a2 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    exit();
+  }
+  c = sbrk(0);
+  if(c != a - 4096){
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    30c4:	50                   	push   %eax
+    30c5:	53                   	push   %ebx
+    30c6:	68 d4 52 00 00       	push   $0x52d4
+    30cb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    30d1:	e8 2a 09 00 00       	call   3a00 <printf>
+    exit();
+    30d6:	e8 c7 07 00 00       	call   38a2 <exit>
+
+  // can one de-allocate?
+  a = sbrk(0);
+  c = sbrk(-4096);
+  if(c == (char*)0xffffffff){
+    printf(stdout, "sbrk could not deallocate\n");
+    30db:	83 ec 08             	sub    $0x8,%esp
+    30de:	68 69 4b 00 00       	push   $0x4b69
+    30e3:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    30e9:	e8 12 09 00 00       	call   3a00 <printf>
+    exit();
+    30ee:	e8 af 07 00 00       	call   38a2 <exit>
+#define BIG (100*1024*1024)
+  a = sbrk(0);
+  amt = (BIG) - (uint)a;
+  p = sbrk(amt);
+  if (p != a) {
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    30f3:	83 ec 08             	sub    $0x8,%esp
+    30f6:	68 94 52 00 00       	push   $0x5294
+    30fb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3101:	e8 fa 08 00 00       	call   3a00 <printf>
+    exit();
+    3106:	e8 97 07 00 00       	call   38a2 <exit>
+  if(c != a + 1){
+    printf(stdout, "sbrk test failed post-fork\n");
+    exit();
+  }
+  if(pid == 0)
+    exit();
+    310b:	e8 92 07 00 00       	call   38a2 <exit>
+    exit();
+  }
+  c = sbrk(1);
+  c = sbrk(1);
+  if(c != a + 1){
+    printf(stdout, "sbrk test failed post-fork\n");
+    3110:	83 ec 08             	sub    $0x8,%esp
+    3113:	68 4d 4b 00 00       	push   $0x4b4d
+    3118:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    311e:	e8 dd 08 00 00       	call   3a00 <printf>
+    exit();
+    3123:	e8 7a 07 00 00       	call   38a2 <exit>
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+  if(pid < 0){
+    printf(stdout, "sbrk test fork failed\n");
+    3128:	83 ec 08             	sub    $0x8,%esp
+    312b:	68 36 4b 00 00       	push   $0x4b36
+    3130:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3136:	e8 c5 08 00 00       	call   3a00 <printf>
+    exit();
+    313b:	e8 62 07 00 00       	call   38a2 <exit>
+
+00003140 <validateint>:
+  printf(stdout, "sbrk test OK\n");
+}
+
+void
+validateint(int *p)
+{
+    3140:	55                   	push   %ebp
+    3141:	89 e5                	mov    %esp,%ebp
+      "int %2\n\t"
+      "mov %%ebx, %%esp" :
+      "=a" (res) :
+      "a" (SYS_sleep), "n" (T_SYSCALL), "c" (p) :
+      "ebx");
+}
+    3143:	5d                   	pop    %ebp
+    3144:	c3                   	ret    
+    3145:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3149:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003150 <validatetest>:
+
+void
+validatetest(void)
+{
+    3150:	55                   	push   %ebp
+    3151:	89 e5                	mov    %esp,%ebp
+    3153:	56                   	push   %esi
+    3154:	53                   	push   %ebx
+  uint p;
+
+  printf(stdout, "validate test\n");
+  hi = 1100*1024;
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3155:	31 db                	xor    %ebx,%ebx
+validatetest(void)
+{
+  int hi, pid;
+  uint p;
+
+  printf(stdout, "validate test\n");
+    3157:	83 ec 08             	sub    $0x8,%esp
+    315a:	68 c6 4b 00 00       	push   $0x4bc6
+    315f:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3165:	e8 96 08 00 00       	call   3a00 <printf>
+    316a:	83 c4 10             	add    $0x10,%esp
+    316d:	8d 76 00             	lea    0x0(%esi),%esi
+  hi = 1100*1024;
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    if((pid = fork()) == 0){
+    3170:	e8 25 07 00 00       	call   389a <fork>
+    3175:	85 c0                	test   %eax,%eax
+    3177:	89 c6                	mov    %eax,%esi
+    3179:	74 63                	je     31de <validatetest+0x8e>
+      // try to crash the kernel by passing in a badly placed integer
+      validateint((int*)p);
+      exit();
+    }
+    sleep(0);
+    317b:	83 ec 0c             	sub    $0xc,%esp
+    317e:	6a 00                	push   $0x0
+    3180:	e8 ad 07 00 00       	call   3932 <sleep>
+    sleep(0);
+    3185:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    318c:	e8 a1 07 00 00       	call   3932 <sleep>
+    kill(pid);
+    3191:	89 34 24             	mov    %esi,(%esp)
+    3194:	e8 39 07 00 00       	call   38d2 <kill>
+    wait();
+    3199:	e8 0c 07 00 00       	call   38aa <wait>
+
+    // try to crash the kernel by passing in a bad string pointer
+    if(link("nosuchfile", (char*)p) != -1){
+    319e:	58                   	pop    %eax
+    319f:	5a                   	pop    %edx
+    31a0:	53                   	push   %ebx
+    31a1:	68 d5 4b 00 00       	push   $0x4bd5
+    31a6:	e8 57 07 00 00       	call   3902 <link>
+    31ab:	83 c4 10             	add    $0x10,%esp
+    31ae:	83 f8 ff             	cmp    $0xffffffff,%eax
+    31b1:	75 30                	jne    31e3 <validatetest+0x93>
+  uint p;
+
+  printf(stdout, "validate test\n");
+  hi = 1100*1024;
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    31b3:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    31b9:	81 fb 00 40 11 00    	cmp    $0x114000,%ebx
+    31bf:	75 af                	jne    3170 <validatetest+0x20>
+      printf(stdout, "link should not succeed\n");
+      exit();
+    }
+  }
+
+  printf(stdout, "validate ok\n");
+    31c1:	83 ec 08             	sub    $0x8,%esp
+    31c4:	68 f9 4b 00 00       	push   $0x4bf9
+    31c9:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    31cf:	e8 2c 08 00 00       	call   3a00 <printf>
+}
+    31d4:	83 c4 10             	add    $0x10,%esp
+    31d7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    31da:	5b                   	pop    %ebx
+    31db:	5e                   	pop    %esi
+    31dc:	5d                   	pop    %ebp
+    31dd:	c3                   	ret    
+
+  for(p = 0; p <= (uint)hi; p += 4096){
+    if((pid = fork()) == 0){
+      // try to crash the kernel by passing in a badly placed integer
+      validateint((int*)p);
+      exit();
+    31de:	e8 bf 06 00 00       	call   38a2 <exit>
+    kill(pid);
+    wait();
+
+    // try to crash the kernel by passing in a bad string pointer
+    if(link("nosuchfile", (char*)p) != -1){
+      printf(stdout, "link should not succeed\n");
+    31e3:	83 ec 08             	sub    $0x8,%esp
+    31e6:	68 e0 4b 00 00       	push   $0x4be0
+    31eb:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    31f1:	e8 0a 08 00 00       	call   3a00 <printf>
+      exit();
+    31f6:	e8 a7 06 00 00       	call   38a2 <exit>
+    31fb:	90                   	nop
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <bsstest>:
+
+// does unintialized data start out zero?
+char uninit[10000];
+void
+bsstest(void)
+{
+    3200:	55                   	push   %ebp
+    3201:	89 e5                	mov    %esp,%ebp
+    3203:	83 ec 10             	sub    $0x10,%esp
+  int i;
+
+  printf(stdout, "bss test\n");
+    3206:	68 06 4c 00 00       	push   $0x4c06
+    320b:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3211:	e8 ea 07 00 00       	call   3a00 <printf>
+  for(i = 0; i < sizeof(uninit); i++){
+    if(uninit[i] != '\0'){
+    3216:	83 c4 10             	add    $0x10,%esp
+    3219:	80 3d 80 5e 00 00 00 	cmpb   $0x0,0x5e80
+    3220:	75 35                	jne    3257 <bsstest+0x57>
+    3222:	b8 81 5e 00 00       	mov    $0x5e81,%eax
+    3227:	89 f6                	mov    %esi,%esi
+    3229:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3230:	80 38 00             	cmpb   $0x0,(%eax)
+    3233:	75 22                	jne    3257 <bsstest+0x57>
+    3235:	83 c0 01             	add    $0x1,%eax
+bsstest(void)
+{
+  int i;
+
+  printf(stdout, "bss test\n");
+  for(i = 0; i < sizeof(uninit); i++){
+    3238:	3d 90 85 00 00       	cmp    $0x8590,%eax
+    323d:	75 f1                	jne    3230 <bsstest+0x30>
+    if(uninit[i] != '\0'){
+      printf(stdout, "bss test failed\n");
+      exit();
+    }
+  }
+  printf(stdout, "bss test ok\n");
+    323f:	83 ec 08             	sub    $0x8,%esp
+    3242:	68 21 4c 00 00       	push   $0x4c21
+    3247:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    324d:	e8 ae 07 00 00       	call   3a00 <printf>
+}
+    3252:	83 c4 10             	add    $0x10,%esp
+    3255:	c9                   	leave  
+    3256:	c3                   	ret    
+  int i;
+
+  printf(stdout, "bss test\n");
+  for(i = 0; i < sizeof(uninit); i++){
+    if(uninit[i] != '\0'){
+      printf(stdout, "bss test failed\n");
+    3257:	83 ec 08             	sub    $0x8,%esp
+    325a:	68 10 4c 00 00       	push   $0x4c10
+    325f:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3265:	e8 96 07 00 00       	call   3a00 <printf>
+      exit();
+    326a:	e8 33 06 00 00       	call   38a2 <exit>
+    326f:	90                   	nop
+
+00003270 <bigargtest>:
+// does exec return an error if the arguments
+// are larger than a page? or does it write
+// below the stack and wreck the instructions/data?
+void
+bigargtest(void)
+{
+    3270:	55                   	push   %ebp
+    3271:	89 e5                	mov    %esp,%ebp
+    3273:	83 ec 14             	sub    $0x14,%esp
+  int pid, fd;
+
+  unlink("bigarg-ok");
+    3276:	68 2e 4c 00 00       	push   $0x4c2e
+    327b:	e8 72 06 00 00       	call   38f2 <unlink>
+  pid = fork();
+    3280:	e8 15 06 00 00       	call   389a <fork>
+  if(pid == 0){
+    3285:	83 c4 10             	add    $0x10,%esp
+    3288:	85 c0                	test   %eax,%eax
+    328a:	74 3f                	je     32cb <bigargtest+0x5b>
+    exec("echo", args);
+    printf(stdout, "bigarg test ok\n");
+    fd = open("bigarg-ok", O_CREATE);
+    close(fd);
+    exit();
+  } else if(pid < 0){
+    328c:	0f 88 c2 00 00 00    	js     3354 <bigargtest+0xe4>
+    printf(stdout, "bigargtest: fork failed\n");
+    exit();
+  }
+  wait();
+    3292:	e8 13 06 00 00       	call   38aa <wait>
+  fd = open("bigarg-ok", 0);
+    3297:	83 ec 08             	sub    $0x8,%esp
+    329a:	6a 00                	push   $0x0
+    329c:	68 2e 4c 00 00       	push   $0x4c2e
+    32a1:	e8 3c 06 00 00       	call   38e2 <open>
+  if(fd < 0){
+    32a6:	83 c4 10             	add    $0x10,%esp
+    32a9:	85 c0                	test   %eax,%eax
+    32ab:	0f 88 8c 00 00 00    	js     333d <bigargtest+0xcd>
+    printf(stdout, "bigarg test failed!\n");
+    exit();
+  }
+  close(fd);
+    32b1:	83 ec 0c             	sub    $0xc,%esp
+    32b4:	50                   	push   %eax
+    32b5:	e8 10 06 00 00       	call   38ca <close>
+  unlink("bigarg-ok");
+    32ba:	c7 04 24 2e 4c 00 00 	movl   $0x4c2e,(%esp)
+    32c1:	e8 2c 06 00 00       	call   38f2 <unlink>
+}
+    32c6:	83 c4 10             	add    $0x10,%esp
+    32c9:	c9                   	leave  
+    32ca:	c3                   	ret    
+    32cb:	b8 e0 5d 00 00       	mov    $0x5de0,%eax
+  pid = fork();
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    32d0:	c7 00 88 53 00 00    	movl   $0x5388,(%eax)
+    32d6:	83 c0 04             	add    $0x4,%eax
+  unlink("bigarg-ok");
+  pid = fork();
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+    32d9:	3d 5c 5e 00 00       	cmp    $0x5e5c,%eax
+    32de:	75 f0                	jne    32d0 <bigargtest+0x60>
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    args[MAXARG-1] = 0;
+    printf(stdout, "bigarg test\n");
+    32e0:	51                   	push   %ecx
+    32e1:	51                   	push   %ecx
+    32e2:	68 38 4c 00 00       	push   $0x4c38
+    32e7:	ff 35 b4 5d 00 00    	pushl  0x5db4
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    for(i = 0; i < MAXARG-1; i++)
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    args[MAXARG-1] = 0;
+    32ed:	c7 05 5c 5e 00 00 00 	movl   $0x0,0x5e5c
+    32f4:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    32f7:	e8 04 07 00 00       	call   3a00 <printf>
+    exec("echo", args);
+    32fc:	58                   	pop    %eax
+    32fd:	5a                   	pop    %edx
+    32fe:	68 e0 5d 00 00       	push   $0x5de0
+    3303:	68 05 3e 00 00       	push   $0x3e05
+    3308:	e8 cd 05 00 00       	call   38da <exec>
+    printf(stdout, "bigarg test ok\n");
+    330d:	59                   	pop    %ecx
+    330e:	58                   	pop    %eax
+    330f:	68 45 4c 00 00       	push   $0x4c45
+    3314:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    331a:	e8 e1 06 00 00       	call   3a00 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    331f:	58                   	pop    %eax
+    3320:	5a                   	pop    %edx
+    3321:	68 00 02 00 00       	push   $0x200
+    3326:	68 2e 4c 00 00       	push   $0x4c2e
+    332b:	e8 b2 05 00 00       	call   38e2 <open>
+    close(fd);
+    3330:	89 04 24             	mov    %eax,(%esp)
+    3333:	e8 92 05 00 00       	call   38ca <close>
+    exit();
+    3338:	e8 65 05 00 00       	call   38a2 <exit>
+    exit();
+  }
+  wait();
+  fd = open("bigarg-ok", 0);
+  if(fd < 0){
+    printf(stdout, "bigarg test failed!\n");
+    333d:	50                   	push   %eax
+    333e:	50                   	push   %eax
+    333f:	68 6e 4c 00 00       	push   $0x4c6e
+    3344:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    334a:	e8 b1 06 00 00       	call   3a00 <printf>
+    exit();
+    334f:	e8 4e 05 00 00       	call   38a2 <exit>
+    printf(stdout, "bigarg test ok\n");
+    fd = open("bigarg-ok", O_CREATE);
+    close(fd);
+    exit();
+  } else if(pid < 0){
+    printf(stdout, "bigargtest: fork failed\n");
+    3354:	52                   	push   %edx
+    3355:	52                   	push   %edx
+    3356:	68 55 4c 00 00       	push   $0x4c55
+    335b:	ff 35 b4 5d 00 00    	pushl  0x5db4
+    3361:	e8 9a 06 00 00       	call   3a00 <printf>
+    exit();
+    3366:	e8 37 05 00 00       	call   38a2 <exit>
+    336b:	90                   	nop
+    336c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003370 <fsfull>:
+
+// what happens when the file system runs out of blocks?
+// answer: balloc panics, so this test is not useful.
+void
+fsfull()
+{
+    3370:	55                   	push   %ebp
+    3371:	89 e5                	mov    %esp,%ebp
+    3373:	57                   	push   %edi
+    3374:	56                   	push   %esi
+    3375:	53                   	push   %ebx
+  int nfiles;
+  int fsblocks = 0;
+
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    3376:	31 db                	xor    %ebx,%ebx
+
+// what happens when the file system runs out of blocks?
+// answer: balloc panics, so this test is not useful.
+void
+fsfull()
+{
+    3378:	83 ec 54             	sub    $0x54,%esp
+  int nfiles;
+  int fsblocks = 0;
+
+  printf(1, "fsfull test\n");
+    337b:	68 83 4c 00 00       	push   $0x4c83
+    3380:	6a 01                	push   $0x1
+    3382:	e8 79 06 00 00       	call   3a00 <printf>
+    3387:	83 c4 10             	add    $0x10,%esp
+    338a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    3390:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    3395:	89 de                	mov    %ebx,%esi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3397:	89 d9                	mov    %ebx,%ecx
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    3399:	f7 eb                	imul   %ebx
+    339b:	c1 fe 1f             	sar    $0x1f,%esi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    339e:	89 df                	mov    %ebx,%edi
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    printf(1, "writing %s\n", name);
+    33a0:	83 ec 04             	sub    $0x4,%esp
+
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    33a3:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    33a7:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    33ab:	c1 fa 06             	sar    $0x6,%edx
+    33ae:	29 f2                	sub    %esi,%edx
+    33b0:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33b3:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    33b9:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33bc:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33c1:	29 d1                	sub    %edx,%ecx
+    33c3:	f7 e9                	imul   %ecx
+    33c5:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[3] = '0' + (nfiles % 100) / 10;
+    33c8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33cd:	c1 fa 05             	sar    $0x5,%edx
+    33d0:	29 ca                	sub    %ecx,%edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    33d2:	b9 67 66 66 66       	mov    $0x66666667,%ecx
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33d7:	83 c2 30             	add    $0x30,%edx
+    33da:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    33dd:	f7 eb                	imul   %ebx
+    33df:	c1 fa 05             	sar    $0x5,%edx
+    33e2:	29 f2                	sub    %esi,%edx
+    33e4:	6b d2 64             	imul   $0x64,%edx,%edx
+    33e7:	29 d7                	sub    %edx,%edi
+    33e9:	89 f8                	mov    %edi,%eax
+    33eb:	c1 ff 1f             	sar    $0x1f,%edi
+    33ee:	f7 e9                	imul   %ecx
+    name[4] = '0' + (nfiles % 10);
+    33f0:	89 d8                	mov    %ebx,%eax
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    33f2:	c1 fa 02             	sar    $0x2,%edx
+    33f5:	29 fa                	sub    %edi,%edx
+    33f7:	83 c2 30             	add    $0x30,%edx
+    33fa:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    33fd:	f7 e9                	imul   %ecx
+    33ff:	89 d9                	mov    %ebx,%ecx
+    3401:	c1 fa 02             	sar    $0x2,%edx
+    3404:	29 f2                	sub    %esi,%edx
+    3406:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3409:	01 c0                	add    %eax,%eax
+    340b:	29 c1                	sub    %eax,%ecx
+    340d:	89 c8                	mov    %ecx,%eax
+    340f:	83 c0 30             	add    $0x30,%eax
+    3412:	88 45 ac             	mov    %al,-0x54(%ebp)
+    name[5] = '\0';
+    printf(1, "writing %s\n", name);
+    3415:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3418:	50                   	push   %eax
+    3419:	68 90 4c 00 00       	push   $0x4c90
+    341e:	6a 01                	push   $0x1
+    3420:	e8 db 05 00 00       	call   3a00 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    3425:	58                   	pop    %eax
+    3426:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3429:	5a                   	pop    %edx
+    342a:	68 02 02 00 00       	push   $0x202
+    342f:	50                   	push   %eax
+    3430:	e8 ad 04 00 00       	call   38e2 <open>
+    if(fd < 0){
+    3435:	83 c4 10             	add    $0x10,%esp
+    3438:	85 c0                	test   %eax,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    printf(1, "writing %s\n", name);
+    int fd = open(name, O_CREATE|O_RDWR);
+    343a:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    343c:	78 50                	js     348e <fsfull+0x11e>
+    343e:	31 f6                	xor    %esi,%esi
+    3440:	eb 08                	jmp    344a <fsfull+0xda>
+    3442:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    int total = 0;
+    while(1){
+      int cc = write(fd, buf, 512);
+      if(cc < 512)
+        break;
+      total += cc;
+    3448:	01 c6                	add    %eax,%esi
+      printf(1, "open %s failed\n", name);
+      break;
+    }
+    int total = 0;
+    while(1){
+      int cc = write(fd, buf, 512);
+    344a:	83 ec 04             	sub    $0x4,%esp
+    344d:	68 00 02 00 00       	push   $0x200
+    3452:	68 a0 85 00 00       	push   $0x85a0
+    3457:	57                   	push   %edi
+    3458:	e8 65 04 00 00       	call   38c2 <write>
+      if(cc < 512)
+    345d:	83 c4 10             	add    $0x10,%esp
+    3460:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    3465:	7f e1                	jg     3448 <fsfull+0xd8>
+        break;
+      total += cc;
+      fsblocks++;
+    }
+    printf(1, "wrote %d bytes\n", total);
+    3467:	83 ec 04             	sub    $0x4,%esp
+    346a:	56                   	push   %esi
+    346b:	68 ac 4c 00 00       	push   $0x4cac
+    3470:	6a 01                	push   $0x1
+    3472:	e8 89 05 00 00       	call   3a00 <printf>
+    close(fd);
+    3477:	89 3c 24             	mov    %edi,(%esp)
+    347a:	e8 4b 04 00 00       	call   38ca <close>
+    if(total == 0)
+    347f:	83 c4 10             	add    $0x10,%esp
+    3482:	85 f6                	test   %esi,%esi
+    3484:	74 22                	je     34a8 <fsfull+0x138>
+  int nfiles;
+  int fsblocks = 0;
+
+  printf(1, "fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    3486:	83 c3 01             	add    $0x1,%ebx
+    }
+    printf(1, "wrote %d bytes\n", total);
+    close(fd);
+    if(total == 0)
+      break;
+  }
+    3489:	e9 02 ff ff ff       	jmp    3390 <fsfull+0x20>
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    printf(1, "writing %s\n", name);
+    int fd = open(name, O_CREATE|O_RDWR);
+    if(fd < 0){
+      printf(1, "open %s failed\n", name);
+    348e:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3491:	83 ec 04             	sub    $0x4,%esp
+    3494:	50                   	push   %eax
+    3495:	68 9c 4c 00 00       	push   $0x4c9c
+    349a:	6a 01                	push   $0x1
+    349c:	e8 5f 05 00 00       	call   3a00 <printf>
+      break;
+    34a1:	83 c4 10             	add    $0x10,%esp
+    34a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    34a8:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    34ad:	89 de                	mov    %ebx,%esi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34af:	89 d9                	mov    %ebx,%ecx
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    34b1:	f7 eb                	imul   %ebx
+    34b3:	c1 fe 1f             	sar    $0x1f,%esi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    34b6:	89 df                	mov    %ebx,%edi
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    unlink(name);
+    34b8:	83 ec 0c             	sub    $0xc,%esp
+      break;
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    34bb:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    34bf:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    34c3:	c1 fa 06             	sar    $0x6,%edx
+    34c6:	29 f2                	sub    %esi,%edx
+    34c8:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34cb:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    34d1:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34d4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    34d9:	29 d1                	sub    %edx,%ecx
+    34db:	f7 e9                	imul   %ecx
+    34dd:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[3] = '0' + (nfiles % 100) / 10;
+    34e0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34e5:	c1 fa 05             	sar    $0x5,%edx
+    34e8:	29 ca                	sub    %ecx,%edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    34ea:	b9 67 66 66 66       	mov    $0x66666667,%ecx
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34ef:	83 c2 30             	add    $0x30,%edx
+    34f2:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    34f5:	f7 eb                	imul   %ebx
+    34f7:	c1 fa 05             	sar    $0x5,%edx
+    34fa:	29 f2                	sub    %esi,%edx
+    34fc:	6b d2 64             	imul   $0x64,%edx,%edx
+    34ff:	29 d7                	sub    %edx,%edi
+    3501:	89 f8                	mov    %edi,%eax
+    3503:	c1 ff 1f             	sar    $0x1f,%edi
+    3506:	f7 e9                	imul   %ecx
+    name[4] = '0' + (nfiles % 10);
+    3508:	89 d8                	mov    %ebx,%eax
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    350a:	c1 fa 02             	sar    $0x2,%edx
+    350d:	29 fa                	sub    %edi,%edx
+    350f:	83 c2 30             	add    $0x30,%edx
+    3512:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    3515:	f7 e9                	imul   %ecx
+    3517:	89 d9                	mov    %ebx,%ecx
+    name[5] = '\0';
+    unlink(name);
+    nfiles--;
+    3519:	83 eb 01             	sub    $0x1,%ebx
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    351c:	c1 fa 02             	sar    $0x2,%edx
+    351f:	29 f2                	sub    %esi,%edx
+    3521:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    3524:	01 c0                	add    %eax,%eax
+    3526:	29 c1                	sub    %eax,%ecx
+    3528:	89 c8                	mov    %ecx,%eax
+    352a:	83 c0 30             	add    $0x30,%eax
+    352d:	88 45 ac             	mov    %al,-0x54(%ebp)
+    name[5] = '\0';
+    unlink(name);
+    3530:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3533:	50                   	push   %eax
+    3534:	e8 b9 03 00 00       	call   38f2 <unlink>
+    close(fd);
+    if(total == 0)
+      break;
+  }
+
+  while(nfiles >= 0){
+    3539:	83 c4 10             	add    $0x10,%esp
+    353c:	83 fb ff             	cmp    $0xffffffff,%ebx
+    353f:	0f 85 63 ff ff ff    	jne    34a8 <fsfull+0x138>
+    name[5] = '\0';
+    unlink(name);
+    nfiles--;
+  }
+
+  printf(1, "fsfull test finished\n");
+    3545:	83 ec 08             	sub    $0x8,%esp
+    3548:	68 bc 4c 00 00       	push   $0x4cbc
+    354d:	6a 01                	push   $0x1
+    354f:	e8 ac 04 00 00       	call   3a00 <printf>
+}
+    3554:	83 c4 10             	add    $0x10,%esp
+    3557:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    355a:	5b                   	pop    %ebx
+    355b:	5e                   	pop    %esi
+    355c:	5f                   	pop    %edi
+    355d:	5d                   	pop    %ebp
+    355e:	c3                   	ret    
+    355f:	90                   	nop
+
+00003560 <uio>:
+
+void
+uio()
+{
+    3560:	55                   	push   %ebp
+    3561:	89 e5                	mov    %esp,%ebp
+    3563:	83 ec 10             	sub    $0x10,%esp
+
+  ushort port = 0;
+  uchar val = 0;
+  int pid;
+
+  printf(1, "uio test\n");
+    3566:	68 d2 4c 00 00       	push   $0x4cd2
+    356b:	6a 01                	push   $0x1
+    356d:	e8 8e 04 00 00       	call   3a00 <printf>
+  pid = fork();
+    3572:	e8 23 03 00 00       	call   389a <fork>
+  if(pid == 0){
+    3577:	83 c4 10             	add    $0x10,%esp
+    357a:	85 c0                	test   %eax,%eax
+    357c:	74 1b                	je     3599 <uio+0x39>
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    port = RTC_DATA;
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    exit();
+  } else if(pid < 0){
+    357e:	78 3d                	js     35bd <uio+0x5d>
+    printf (1, "fork failed\n");
+    exit();
+  }
+  wait();
+    3580:	e8 25 03 00 00       	call   38aa <wait>
+  printf(1, "uio test done\n");
+    3585:	83 ec 08             	sub    $0x8,%esp
+    3588:	68 dc 4c 00 00       	push   $0x4cdc
+    358d:	6a 01                	push   $0x1
+    358f:	e8 6c 04 00 00       	call   3a00 <printf>
+}
+    3594:	83 c4 10             	add    $0x10,%esp
+    3597:	c9                   	leave  
+    3598:	c3                   	ret    
+  pid = fork();
+  if(pid == 0){
+    port = RTC_ADDR;
+    val = 0x09;  /* year */
+    /* http://wiki.osdev.org/Inline_Assembly/Examples */
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    3599:	ba 70 00 00 00       	mov    $0x70,%edx
+    359e:	b8 09 00 00 00       	mov    $0x9,%eax
+    35a3:	ee                   	out    %al,(%dx)
+    port = RTC_DATA;
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    35a4:	ba 71 00 00 00       	mov    $0x71,%edx
+    35a9:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    35aa:	52                   	push   %edx
+    35ab:	52                   	push   %edx
+    35ac:	68 68 54 00 00       	push   $0x5468
+    35b1:	6a 01                	push   $0x1
+    35b3:	e8 48 04 00 00       	call   3a00 <printf>
+    exit();
+    35b8:	e8 e5 02 00 00       	call   38a2 <exit>
+  } else if(pid < 0){
+    printf (1, "fork failed\n");
+    35bd:	50                   	push   %eax
+    35be:	50                   	push   %eax
+    35bf:	68 61 4c 00 00       	push   $0x4c61
+    35c4:	6a 01                	push   $0x1
+    35c6:	e8 35 04 00 00       	call   3a00 <printf>
+    exit();
+    35cb:	e8 d2 02 00 00       	call   38a2 <exit>
+
+000035d0 <argptest>:
+  wait();
+  printf(1, "uio test done\n");
+}
+
+void argptest()
+{
+    35d0:	55                   	push   %ebp
+    35d1:	89 e5                	mov    %esp,%ebp
+    35d3:	53                   	push   %ebx
+    35d4:	83 ec 0c             	sub    $0xc,%esp
+  int fd;
+  fd = open("init", O_RDONLY);
+    35d7:	6a 00                	push   $0x0
+    35d9:	68 eb 4c 00 00       	push   $0x4ceb
+    35de:	e8 ff 02 00 00       	call   38e2 <open>
+  if (fd < 0) {
+    35e3:	83 c4 10             	add    $0x10,%esp
+    35e6:	85 c0                	test   %eax,%eax
+    35e8:	78 39                	js     3623 <argptest+0x53>
+    printf(2, "open failed\n");
+    exit();
+  }
+  read(fd, sbrk(0) - 1, -1);
+    35ea:	83 ec 0c             	sub    $0xc,%esp
+    35ed:	89 c3                	mov    %eax,%ebx
+    35ef:	6a 00                	push   $0x0
+    35f1:	e8 34 03 00 00       	call   392a <sbrk>
+    35f6:	83 c4 0c             	add    $0xc,%esp
+    35f9:	83 e8 01             	sub    $0x1,%eax
+    35fc:	6a ff                	push   $0xffffffff
+    35fe:	50                   	push   %eax
+    35ff:	53                   	push   %ebx
+    3600:	e8 b5 02 00 00       	call   38ba <read>
+  close(fd);
+    3605:	89 1c 24             	mov    %ebx,(%esp)
+    3608:	e8 bd 02 00 00       	call   38ca <close>
+  printf(1, "arg test passed\n");
+    360d:	58                   	pop    %eax
+    360e:	5a                   	pop    %edx
+    360f:	68 fd 4c 00 00       	push   $0x4cfd
+    3614:	6a 01                	push   $0x1
+    3616:	e8 e5 03 00 00       	call   3a00 <printf>
+}
+    361b:	83 c4 10             	add    $0x10,%esp
+    361e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3621:	c9                   	leave  
+    3622:	c3                   	ret    
+void argptest()
+{
+  int fd;
+  fd = open("init", O_RDONLY);
+  if (fd < 0) {
+    printf(2, "open failed\n");
+    3623:	51                   	push   %ecx
+    3624:	51                   	push   %ecx
+    3625:	68 f0 4c 00 00       	push   $0x4cf0
+    362a:	6a 02                	push   $0x2
+    362c:	e8 cf 03 00 00       	call   3a00 <printf>
+    exit();
+    3631:	e8 6c 02 00 00       	call   38a2 <exit>
+    3636:	8d 76 00             	lea    0x0(%esi),%esi
+    3639:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003640 <rand>:
+
+unsigned long randstate = 1;
+unsigned int
+rand()
+{
+  randstate = randstate * 1664525 + 1013904223;
+    3640:	69 05 b0 5d 00 00 0d 	imul   $0x19660d,0x5db0,%eax
+    3647:	66 19 00 
+}
+
+unsigned long randstate = 1;
+unsigned int
+rand()
+{
+    364a:	55                   	push   %ebp
+    364b:	89 e5                	mov    %esp,%ebp
+  randstate = randstate * 1664525 + 1013904223;
+  return randstate;
+}
+    364d:	5d                   	pop    %ebp
+
+unsigned long randstate = 1;
+unsigned int
+rand()
+{
+  randstate = randstate * 1664525 + 1013904223;
+    364e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3653:	a3 b0 5d 00 00       	mov    %eax,0x5db0
+  return randstate;
+}
+    3658:	c3                   	ret    
+    3659:	66 90                	xchg   %ax,%ax
+    365b:	66 90                	xchg   %ax,%ax
+    365d:	66 90                	xchg   %ax,%ax
+    365f:	90                   	nop
+
+00003660 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3660:	55                   	push   %ebp
+    3661:	89 e5                	mov    %esp,%ebp
+    3663:	53                   	push   %ebx
+    3664:	8b 45 08             	mov    0x8(%ebp),%eax
+    3667:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    366a:	89 c2                	mov    %eax,%edx
+    366c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3670:	83 c1 01             	add    $0x1,%ecx
+    3673:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+    3677:	83 c2 01             	add    $0x1,%edx
+    367a:	84 db                	test   %bl,%bl
+    367c:	88 5a ff             	mov    %bl,-0x1(%edx)
+    367f:	75 ef                	jne    3670 <strcpy+0x10>
+    ;
+  return os;
+}
+    3681:	5b                   	pop    %ebx
+    3682:	5d                   	pop    %ebp
+    3683:	c3                   	ret    
+    3684:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    368a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00003690 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3690:	55                   	push   %ebp
+    3691:	89 e5                	mov    %esp,%ebp
+    3693:	56                   	push   %esi
+    3694:	53                   	push   %ebx
+    3695:	8b 55 08             	mov    0x8(%ebp),%edx
+    3698:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+    369b:	0f b6 02             	movzbl (%edx),%eax
+    369e:	0f b6 19             	movzbl (%ecx),%ebx
+    36a1:	84 c0                	test   %al,%al
+    36a3:	75 1e                	jne    36c3 <strcmp+0x33>
+    36a5:	eb 29                	jmp    36d0 <strcmp+0x40>
+    36a7:	89 f6                	mov    %esi,%esi
+    36a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+    36b0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    36b3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+    36b6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    36b9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+    36bd:	84 c0                	test   %al,%al
+    36bf:	74 0f                	je     36d0 <strcmp+0x40>
+    36c1:	89 f1                	mov    %esi,%ecx
+    36c3:	38 d8                	cmp    %bl,%al
+    36c5:	74 e9                	je     36b0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+    36c7:	29 d8                	sub    %ebx,%eax
+}
+    36c9:	5b                   	pop    %ebx
+    36ca:	5e                   	pop    %esi
+    36cb:	5d                   	pop    %ebp
+    36cc:	c3                   	ret    
+    36cd:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    36d0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+    36d2:	29 d8                	sub    %ebx,%eax
+}
+    36d4:	5b                   	pop    %ebx
+    36d5:	5e                   	pop    %esi
+    36d6:	5d                   	pop    %ebp
+    36d7:	c3                   	ret    
+    36d8:	90                   	nop
+    36d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000036e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    36e0:	55                   	push   %ebp
+    36e1:	89 e5                	mov    %esp,%ebp
+    36e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    36e6:	80 39 00             	cmpb   $0x0,(%ecx)
+    36e9:	74 12                	je     36fd <strlen+0x1d>
+    36eb:	31 d2                	xor    %edx,%edx
+    36ed:	8d 76 00             	lea    0x0(%esi),%esi
+    36f0:	83 c2 01             	add    $0x1,%edx
+    36f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+    36f7:	89 d0                	mov    %edx,%eax
+    36f9:	75 f5                	jne    36f0 <strlen+0x10>
+    ;
+  return n;
+}
+    36fb:	5d                   	pop    %ebp
+    36fc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+    36fd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+    36ff:	5d                   	pop    %ebp
+    3700:	c3                   	ret    
+    3701:	eb 0d                	jmp    3710 <memset>
+    3703:	90                   	nop
+    3704:	90                   	nop
+    3705:	90                   	nop
+    3706:	90                   	nop
+    3707:	90                   	nop
+    3708:	90                   	nop
+    3709:	90                   	nop
+    370a:	90                   	nop
+    370b:	90                   	nop
+    370c:	90                   	nop
+    370d:	90                   	nop
+    370e:	90                   	nop
+    370f:	90                   	nop
+
+00003710 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3710:	55                   	push   %ebp
+    3711:	89 e5                	mov    %esp,%ebp
+    3713:	57                   	push   %edi
+    3714:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    3717:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    371a:	8b 45 0c             	mov    0xc(%ebp),%eax
+    371d:	89 d7                	mov    %edx,%edi
+    371f:	fc                   	cld    
+    3720:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    3722:	89 d0                	mov    %edx,%eax
+    3724:	5f                   	pop    %edi
+    3725:	5d                   	pop    %ebp
+    3726:	c3                   	ret    
+    3727:	89 f6                	mov    %esi,%esi
+    3729:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003730 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3730:	55                   	push   %ebp
+    3731:	89 e5                	mov    %esp,%ebp
+    3733:	53                   	push   %ebx
+    3734:	8b 45 08             	mov    0x8(%ebp),%eax
+    3737:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+    373a:	0f b6 10             	movzbl (%eax),%edx
+    373d:	84 d2                	test   %dl,%dl
+    373f:	74 1d                	je     375e <strchr+0x2e>
+    if(*s == c)
+    3741:	38 d3                	cmp    %dl,%bl
+    3743:	89 d9                	mov    %ebx,%ecx
+    3745:	75 0d                	jne    3754 <strchr+0x24>
+    3747:	eb 17                	jmp    3760 <strchr+0x30>
+    3749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3750:	38 ca                	cmp    %cl,%dl
+    3752:	74 0c                	je     3760 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+    3754:	83 c0 01             	add    $0x1,%eax
+    3757:	0f b6 10             	movzbl (%eax),%edx
+    375a:	84 d2                	test   %dl,%dl
+    375c:	75 f2                	jne    3750 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+    375e:	31 c0                	xor    %eax,%eax
+}
+    3760:	5b                   	pop    %ebx
+    3761:	5d                   	pop    %ebp
+    3762:	c3                   	ret    
+    3763:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3769:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003770 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3770:	55                   	push   %ebp
+    3771:	89 e5                	mov    %esp,%ebp
+    3773:	57                   	push   %edi
+    3774:	56                   	push   %esi
+    3775:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3776:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+    3778:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+    377b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    377e:	eb 29                	jmp    37a9 <gets+0x39>
+    cc = read(0, &c, 1);
+    3780:	83 ec 04             	sub    $0x4,%esp
+    3783:	6a 01                	push   $0x1
+    3785:	57                   	push   %edi
+    3786:	6a 00                	push   $0x0
+    3788:	e8 2d 01 00 00       	call   38ba <read>
+    if(cc < 1)
+    378d:	83 c4 10             	add    $0x10,%esp
+    3790:	85 c0                	test   %eax,%eax
+    3792:	7e 1d                	jle    37b1 <gets+0x41>
+      break;
+    buf[i++] = c;
+    3794:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    3798:	8b 55 08             	mov    0x8(%ebp),%edx
+    379b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+    379d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    379f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+    37a3:	74 1b                	je     37c0 <gets+0x50>
+    37a5:	3c 0d                	cmp    $0xd,%al
+    37a7:	74 17                	je     37c0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    37a9:	8d 5e 01             	lea    0x1(%esi),%ebx
+    37ac:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    37af:	7c cf                	jl     3780 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+    37b1:	8b 45 08             	mov    0x8(%ebp),%eax
+    37b4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+    37b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37bb:	5b                   	pop    %ebx
+    37bc:	5e                   	pop    %esi
+    37bd:	5f                   	pop    %edi
+    37be:	5d                   	pop    %ebp
+    37bf:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+    37c0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    37c3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+    37c5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+    37c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37cc:	5b                   	pop    %ebx
+    37cd:	5e                   	pop    %esi
+    37ce:	5f                   	pop    %edi
+    37cf:	5d                   	pop    %ebp
+    37d0:	c3                   	ret    
+    37d1:	eb 0d                	jmp    37e0 <stat>
+    37d3:	90                   	nop
+    37d4:	90                   	nop
+    37d5:	90                   	nop
+    37d6:	90                   	nop
+    37d7:	90                   	nop
+    37d8:	90                   	nop
+    37d9:	90                   	nop
+    37da:	90                   	nop
+    37db:	90                   	nop
+    37dc:	90                   	nop
+    37dd:	90                   	nop
+    37de:	90                   	nop
+    37df:	90                   	nop
+
+000037e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    37e0:	55                   	push   %ebp
+    37e1:	89 e5                	mov    %esp,%ebp
+    37e3:	56                   	push   %esi
+    37e4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    37e5:	83 ec 08             	sub    $0x8,%esp
+    37e8:	6a 00                	push   $0x0
+    37ea:	ff 75 08             	pushl  0x8(%ebp)
+    37ed:	e8 f0 00 00 00       	call   38e2 <open>
+  if(fd < 0)
+    37f2:	83 c4 10             	add    $0x10,%esp
+    37f5:	85 c0                	test   %eax,%eax
+    37f7:	78 27                	js     3820 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    37f9:	83 ec 08             	sub    $0x8,%esp
+    37fc:	ff 75 0c             	pushl  0xc(%ebp)
+    37ff:	89 c3                	mov    %eax,%ebx
+    3801:	50                   	push   %eax
+    3802:	e8 f3 00 00 00       	call   38fa <fstat>
+    3807:	89 c6                	mov    %eax,%esi
+  close(fd);
+    3809:	89 1c 24             	mov    %ebx,(%esp)
+    380c:	e8 b9 00 00 00       	call   38ca <close>
+  return r;
+    3811:	83 c4 10             	add    $0x10,%esp
+    3814:	89 f0                	mov    %esi,%eax
+}
+    3816:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3819:	5b                   	pop    %ebx
+    381a:	5e                   	pop    %esi
+    381b:	5d                   	pop    %ebp
+    381c:	c3                   	ret    
+    381d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+    3820:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    3825:	eb ef                	jmp    3816 <stat+0x36>
+    3827:	89 f6                	mov    %esi,%esi
+    3829:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00003830 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+    3830:	55                   	push   %ebp
+    3831:	89 e5                	mov    %esp,%ebp
+    3833:	53                   	push   %ebx
+    3834:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3837:	0f be 11             	movsbl (%ecx),%edx
+    383a:	8d 42 d0             	lea    -0x30(%edx),%eax
+    383d:	3c 09                	cmp    $0x9,%al
+    383f:	b8 00 00 00 00       	mov    $0x0,%eax
+    3844:	77 1f                	ja     3865 <atoi+0x35>
+    3846:	8d 76 00             	lea    0x0(%esi),%esi
+    3849:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+    3850:	8d 04 80             	lea    (%eax,%eax,4),%eax
+    3853:	83 c1 01             	add    $0x1,%ecx
+    3856:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    385a:	0f be 11             	movsbl (%ecx),%edx
+    385d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+    3860:	80 fb 09             	cmp    $0x9,%bl
+    3863:	76 eb                	jbe    3850 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+    3865:	5b                   	pop    %ebx
+    3866:	5d                   	pop    %ebp
+    3867:	c3                   	ret    
+    3868:	90                   	nop
+    3869:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003870 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3870:	55                   	push   %ebp
+    3871:	89 e5                	mov    %esp,%ebp
+    3873:	56                   	push   %esi
+    3874:	53                   	push   %ebx
+    3875:	8b 5d 10             	mov    0x10(%ebp),%ebx
+    3878:	8b 45 08             	mov    0x8(%ebp),%eax
+    387b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    387e:	85 db                	test   %ebx,%ebx
+    3880:	7e 14                	jle    3896 <memmove+0x26>
+    3882:	31 d2                	xor    %edx,%edx
+    3884:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+    3888:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+    388c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+    388f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    3892:	39 da                	cmp    %ebx,%edx
+    3894:	75 f2                	jne    3888 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+    3896:	5b                   	pop    %ebx
+    3897:	5e                   	pop    %esi
+    3898:	5d                   	pop    %ebp
+    3899:	c3                   	ret    
+
+0000389a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    389a:	b8 01 00 00 00       	mov    $0x1,%eax
+    389f:	cd 40                	int    $0x40
+    38a1:	c3                   	ret    
+
+000038a2 <exit>:
+SYSCALL(exit)
+    38a2:	b8 02 00 00 00       	mov    $0x2,%eax
+    38a7:	cd 40                	int    $0x40
+    38a9:	c3                   	ret    
+
+000038aa <wait>:
+SYSCALL(wait)
+    38aa:	b8 03 00 00 00       	mov    $0x3,%eax
+    38af:	cd 40                	int    $0x40
+    38b1:	c3                   	ret    
+
+000038b2 <pipe>:
+SYSCALL(pipe)
+    38b2:	b8 04 00 00 00       	mov    $0x4,%eax
+    38b7:	cd 40                	int    $0x40
+    38b9:	c3                   	ret    
+
+000038ba <read>:
+SYSCALL(read)
+    38ba:	b8 05 00 00 00       	mov    $0x5,%eax
+    38bf:	cd 40                	int    $0x40
+    38c1:	c3                   	ret    
+
+000038c2 <write>:
+SYSCALL(write)
+    38c2:	b8 10 00 00 00       	mov    $0x10,%eax
+    38c7:	cd 40                	int    $0x40
+    38c9:	c3                   	ret    
+
+000038ca <close>:
+SYSCALL(close)
+    38ca:	b8 15 00 00 00       	mov    $0x15,%eax
+    38cf:	cd 40                	int    $0x40
+    38d1:	c3                   	ret    
+
+000038d2 <kill>:
+SYSCALL(kill)
+    38d2:	b8 06 00 00 00       	mov    $0x6,%eax
+    38d7:	cd 40                	int    $0x40
+    38d9:	c3                   	ret    
+
+000038da <exec>:
+SYSCALL(exec)
+    38da:	b8 07 00 00 00       	mov    $0x7,%eax
+    38df:	cd 40                	int    $0x40
+    38e1:	c3                   	ret    
+
+000038e2 <open>:
+SYSCALL(open)
+    38e2:	b8 0f 00 00 00       	mov    $0xf,%eax
+    38e7:	cd 40                	int    $0x40
+    38e9:	c3                   	ret    
+
+000038ea <mknod>:
+SYSCALL(mknod)
+    38ea:	b8 11 00 00 00       	mov    $0x11,%eax
+    38ef:	cd 40                	int    $0x40
+    38f1:	c3                   	ret    
+
+000038f2 <unlink>:
+SYSCALL(unlink)
+    38f2:	b8 12 00 00 00       	mov    $0x12,%eax
+    38f7:	cd 40                	int    $0x40
+    38f9:	c3                   	ret    
+
+000038fa <fstat>:
+SYSCALL(fstat)
+    38fa:	b8 08 00 00 00       	mov    $0x8,%eax
+    38ff:	cd 40                	int    $0x40
+    3901:	c3                   	ret    
+
+00003902 <link>:
+SYSCALL(link)
+    3902:	b8 13 00 00 00       	mov    $0x13,%eax
+    3907:	cd 40                	int    $0x40
+    3909:	c3                   	ret    
+
+0000390a <mkdir>:
+SYSCALL(mkdir)
+    390a:	b8 14 00 00 00       	mov    $0x14,%eax
+    390f:	cd 40                	int    $0x40
+    3911:	c3                   	ret    
+
+00003912 <chdir>:
+SYSCALL(chdir)
+    3912:	b8 09 00 00 00       	mov    $0x9,%eax
+    3917:	cd 40                	int    $0x40
+    3919:	c3                   	ret    
+
+0000391a <dup>:
+SYSCALL(dup)
+    391a:	b8 0a 00 00 00       	mov    $0xa,%eax
+    391f:	cd 40                	int    $0x40
+    3921:	c3                   	ret    
+
+00003922 <getpid>:
+SYSCALL(getpid)
+    3922:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3927:	cd 40                	int    $0x40
+    3929:	c3                   	ret    
+
+0000392a <sbrk>:
+SYSCALL(sbrk)
+    392a:	b8 0c 00 00 00       	mov    $0xc,%eax
+    392f:	cd 40                	int    $0x40
+    3931:	c3                   	ret    
+
+00003932 <sleep>:
+SYSCALL(sleep)
+    3932:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3937:	cd 40                	int    $0x40
+    3939:	c3                   	ret    
+
+0000393a <uptime>:
+SYSCALL(uptime)
+    393a:	b8 0e 00 00 00       	mov    $0xe,%eax
+    393f:	cd 40                	int    $0x40
+    3941:	c3                   	ret    
+
+00003942 <readcount>:
+SYSCALL(readcount)
+    3942:	b8 16 00 00 00       	mov    $0x16,%eax
+    3947:	cd 40                	int    $0x40
+    3949:	c3                   	ret    
+
+0000394a <callcount>:
+SYSCALL(callcount)
+    394a:	b8 17 00 00 00       	mov    $0x17,%eax
+    394f:	cd 40                	int    $0x40
+    3951:	c3                   	ret    
+    3952:	66 90                	xchg   %ax,%ax
+    3954:	66 90                	xchg   %ax,%ax
+    3956:	66 90                	xchg   %ax,%ax
+    3958:	66 90                	xchg   %ax,%ax
+    395a:	66 90                	xchg   %ax,%ax
+    395c:	66 90                	xchg   %ax,%ax
+    395e:	66 90                	xchg   %ax,%ax
+
+00003960 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3960:	55                   	push   %ebp
+    3961:	89 e5                	mov    %esp,%ebp
+    3963:	57                   	push   %edi
+    3964:	56                   	push   %esi
+    3965:	53                   	push   %ebx
+    3966:	89 c6                	mov    %eax,%esi
+    3968:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    396b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    396e:	85 db                	test   %ebx,%ebx
+    3970:	74 7e                	je     39f0 <printint+0x90>
+    3972:	89 d0                	mov    %edx,%eax
+    3974:	c1 e8 1f             	shr    $0x1f,%eax
+    3977:	84 c0                	test   %al,%al
+    3979:	74 75                	je     39f0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+    397b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    397d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+    3984:	f7 d8                	neg    %eax
+    3986:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3989:	31 ff                	xor    %edi,%edi
+    398b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+    398e:	89 ce                	mov    %ecx,%esi
+    3990:	eb 08                	jmp    399a <printint+0x3a>
+    3992:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    3998:	89 cf                	mov    %ecx,%edi
+    399a:	31 d2                	xor    %edx,%edx
+    399c:	8d 4f 01             	lea    0x1(%edi),%ecx
+    399f:	f7 f6                	div    %esi
+    39a1:	0f b6 92 c0 54 00 00 	movzbl 0x54c0(%edx),%edx
+  }while((x /= base) != 0);
+    39a8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+    39aa:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+    39ad:	75 e9                	jne    3998 <printint+0x38>
+  if(neg)
+    39af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+    39b2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+    39b5:	85 c0                	test   %eax,%eax
+    39b7:	74 08                	je     39c1 <printint+0x61>
+    buf[i++] = '-';
+    39b9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+    39be:	8d 4f 02             	lea    0x2(%edi),%ecx
+    39c1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+    39c5:	8d 76 00             	lea    0x0(%esi),%esi
+    39c8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    39cb:	83 ec 04             	sub    $0x4,%esp
+    39ce:	83 ef 01             	sub    $0x1,%edi
+    39d1:	6a 01                	push   $0x1
+    39d3:	53                   	push   %ebx
+    39d4:	56                   	push   %esi
+    39d5:	88 45 d7             	mov    %al,-0x29(%ebp)
+    39d8:	e8 e5 fe ff ff       	call   38c2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    39dd:	83 c4 10             	add    $0x10,%esp
+    39e0:	39 df                	cmp    %ebx,%edi
+    39e2:	75 e4                	jne    39c8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+    39e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    39e7:	5b                   	pop    %ebx
+    39e8:	5e                   	pop    %esi
+    39e9:	5f                   	pop    %edi
+    39ea:	5d                   	pop    %ebp
+    39eb:	c3                   	ret    
+    39ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+    39f0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+    39f2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+    39f9:	eb 8b                	jmp    3986 <printint+0x26>
+    39fb:	90                   	nop
+    39fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003a00 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a00:	55                   	push   %ebp
+    3a01:	89 e5                	mov    %esp,%ebp
+    3a03:	57                   	push   %edi
+    3a04:	56                   	push   %esi
+    3a05:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a06:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a09:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a0c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a0f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a12:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3a15:	0f b6 1e             	movzbl (%esi),%ebx
+    3a18:	83 c6 01             	add    $0x1,%esi
+    3a1b:	84 db                	test   %bl,%bl
+    3a1d:	0f 84 b0 00 00 00    	je     3ad3 <printf+0xd3>
+    3a23:	31 d2                	xor    %edx,%edx
+    3a25:	eb 39                	jmp    3a60 <printf+0x60>
+    3a27:	89 f6                	mov    %esi,%esi
+    3a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+    3a30:	83 f8 25             	cmp    $0x25,%eax
+    3a33:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+    3a36:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+    3a3b:	74 18                	je     3a55 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3a3d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+    3a40:	83 ec 04             	sub    $0x4,%esp
+    3a43:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+    3a46:	6a 01                	push   $0x1
+    3a48:	50                   	push   %eax
+    3a49:	57                   	push   %edi
+    3a4a:	e8 73 fe ff ff       	call   38c2 <write>
+    3a4f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+    3a52:	83 c4 10             	add    $0x10,%esp
+    3a55:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a58:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+    3a5c:	84 db                	test   %bl,%bl
+    3a5e:	74 73                	je     3ad3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+    3a60:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    3a62:	0f be cb             	movsbl %bl,%ecx
+    3a65:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3a68:	74 c6                	je     3a30 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+    3a6a:	83 fa 25             	cmp    $0x25,%edx
+    3a6d:	75 e6                	jne    3a55 <printf+0x55>
+      if(c == 'd'){
+    3a6f:	83 f8 64             	cmp    $0x64,%eax
+    3a72:	0f 84 f8 00 00 00    	je     3b70 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3a78:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3a7e:	83 f9 70             	cmp    $0x70,%ecx
+    3a81:	74 5d                	je     3ae0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3a83:	83 f8 73             	cmp    $0x73,%eax
+    3a86:	0f 84 84 00 00 00    	je     3b10 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3a8c:	83 f8 63             	cmp    $0x63,%eax
+    3a8f:	0f 84 ea 00 00 00    	je     3b7f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3a95:	83 f8 25             	cmp    $0x25,%eax
+    3a98:	0f 84 c2 00 00 00    	je     3b60 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3a9e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3aa1:	83 ec 04             	sub    $0x4,%esp
+    3aa4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3aa8:	6a 01                	push   $0x1
+    3aaa:	50                   	push   %eax
+    3aab:	57                   	push   %edi
+    3aac:	e8 11 fe ff ff       	call   38c2 <write>
+    3ab1:	83 c4 0c             	add    $0xc,%esp
+    3ab4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+    3ab7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+    3aba:	6a 01                	push   $0x1
+    3abc:	50                   	push   %eax
+    3abd:	57                   	push   %edi
+    3abe:	83 c6 01             	add    $0x1,%esi
+    3ac1:	e8 fc fd ff ff       	call   38c2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3ac6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3aca:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    3acd:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3acf:	84 db                	test   %bl,%bl
+    3ad1:	75 8d                	jne    3a60 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    3ad3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3ad6:	5b                   	pop    %ebx
+    3ad7:	5e                   	pop    %esi
+    3ad8:	5f                   	pop    %edi
+    3ad9:	5d                   	pop    %ebp
+    3ada:	c3                   	ret    
+    3adb:	90                   	nop
+    3adc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+    3ae0:	83 ec 0c             	sub    $0xc,%esp
+    3ae3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3ae8:	6a 00                	push   $0x0
+    3aea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3aed:	89 f8                	mov    %edi,%eax
+    3aef:	8b 13                	mov    (%ebx),%edx
+    3af1:	e8 6a fe ff ff       	call   3960 <printint>
+        ap++;
+    3af6:	89 d8                	mov    %ebx,%eax
+    3af8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    3afb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+    3afd:	83 c0 04             	add    $0x4,%eax
+    3b00:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b03:	e9 4d ff ff ff       	jmp    3a55 <printf+0x55>
+    3b08:	90                   	nop
+    3b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+    3b10:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3b13:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    3b15:	83 c0 04             	add    $0x4,%eax
+    3b18:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+    3b1b:	b8 b8 54 00 00       	mov    $0x54b8,%eax
+    3b20:	85 db                	test   %ebx,%ebx
+    3b22:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+    3b25:	0f b6 03             	movzbl (%ebx),%eax
+    3b28:	84 c0                	test   %al,%al
+    3b2a:	74 23                	je     3b4f <printf+0x14f>
+    3b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b30:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3b33:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+    3b36:	83 ec 04             	sub    $0x4,%esp
+    3b39:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+    3b3b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3b3e:	50                   	push   %eax
+    3b3f:	57                   	push   %edi
+    3b40:	e8 7d fd ff ff       	call   38c2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+    3b45:	0f b6 03             	movzbl (%ebx),%eax
+    3b48:	83 c4 10             	add    $0x10,%esp
+    3b4b:	84 c0                	test   %al,%al
+    3b4d:	75 e1                	jne    3b30 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+    3b4f:	31 d2                	xor    %edx,%edx
+    3b51:	e9 ff fe ff ff       	jmp    3a55 <printf+0x55>
+    3b56:	8d 76 00             	lea    0x0(%esi),%esi
+    3b59:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3b60:	83 ec 04             	sub    $0x4,%esp
+    3b63:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+    3b66:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+    3b69:	6a 01                	push   $0x1
+    3b6b:	e9 4c ff ff ff       	jmp    3abc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+    3b70:	83 ec 0c             	sub    $0xc,%esp
+    3b73:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3b78:	6a 01                	push   $0x1
+    3b7a:	e9 6b ff ff ff       	jmp    3aea <printf+0xea>
+    3b7f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+    3b82:	83 ec 04             	sub    $0x4,%esp
+    3b85:	8b 03                	mov    (%ebx),%eax
+    3b87:	6a 01                	push   $0x1
+    3b89:	88 45 e4             	mov    %al,-0x1c(%ebp)
+    3b8c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+    3b8f:	50                   	push   %eax
+    3b90:	57                   	push   %edi
+    3b91:	e8 2c fd ff ff       	call   38c2 <write>
+    3b96:	e9 5b ff ff ff       	jmp    3af6 <printf+0xf6>
+    3b9b:	66 90                	xchg   %ax,%ax
+    3b9d:	66 90                	xchg   %ax,%ax
+    3b9f:	90                   	nop
+
+00003ba0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3ba0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3ba1:	a1 60 5e 00 00       	mov    0x5e60,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3ba6:	89 e5                	mov    %esp,%ebp
+    3ba8:	57                   	push   %edi
+    3ba9:	56                   	push   %esi
+    3baa:	53                   	push   %ebx
+    3bab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bae:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    3bb0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bb3:	39 c8                	cmp    %ecx,%eax
+    3bb5:	73 19                	jae    3bd0 <free+0x30>
+    3bb7:	89 f6                	mov    %esi,%esi
+    3bb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    3bc0:	39 d1                	cmp    %edx,%ecx
+    3bc2:	72 1c                	jb     3be0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bc4:	39 d0                	cmp    %edx,%eax
+    3bc6:	73 18                	jae    3be0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3bc8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bca:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bcc:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bce:	72 f0                	jb     3bc0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3bd0:	39 d0                	cmp    %edx,%eax
+    3bd2:	72 f4                	jb     3bc8 <free+0x28>
+    3bd4:	39 d1                	cmp    %edx,%ecx
+    3bd6:	73 f0                	jae    3bc8 <free+0x28>
+    3bd8:	90                   	nop
+    3bd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3be0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3be3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3be6:	39 d7                	cmp    %edx,%edi
+    3be8:	74 19                	je     3c03 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3bea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3bed:	8b 50 04             	mov    0x4(%eax),%edx
+    3bf0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3bf3:	39 f1                	cmp    %esi,%ecx
+    3bf5:	74 23                	je     3c1a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3bf7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+    3bf9:	a3 60 5e 00 00       	mov    %eax,0x5e60
+}
+    3bfe:	5b                   	pop    %ebx
+    3bff:	5e                   	pop    %esi
+    3c00:	5f                   	pop    %edi
+    3c01:	5d                   	pop    %ebp
+    3c02:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    3c03:	03 72 04             	add    0x4(%edx),%esi
+    3c06:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c09:	8b 10                	mov    (%eax),%edx
+    3c0b:	8b 12                	mov    (%edx),%edx
+    3c0d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    3c10:	8b 50 04             	mov    0x4(%eax),%edx
+    3c13:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3c16:	39 f1                	cmp    %esi,%ecx
+    3c18:	75 dd                	jne    3bf7 <free+0x57>
+    p->s.size += bp->s.size;
+    3c1a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    3c1d:	a3 60 5e 00 00       	mov    %eax,0x5e60
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    3c22:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3c25:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3c28:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+    3c2a:	5b                   	pop    %ebx
+    3c2b:	5e                   	pop    %esi
+    3c2c:	5f                   	pop    %edi
+    3c2d:	5d                   	pop    %ebp
+    3c2e:	c3                   	ret    
+    3c2f:	90                   	nop
+
+00003c30 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3c30:	55                   	push   %ebp
+    3c31:	89 e5                	mov    %esp,%ebp
+    3c33:	57                   	push   %edi
+    3c34:	56                   	push   %esi
+    3c35:	53                   	push   %ebx
+    3c36:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c39:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3c3c:	8b 15 60 5e 00 00    	mov    0x5e60,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c42:	8d 78 07             	lea    0x7(%eax),%edi
+    3c45:	c1 ef 03             	shr    $0x3,%edi
+    3c48:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+    3c4b:	85 d2                	test   %edx,%edx
+    3c4d:	0f 84 a3 00 00 00    	je     3cf6 <malloc+0xc6>
+    3c53:	8b 02                	mov    (%edx),%eax
+    3c55:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+    3c58:	39 cf                	cmp    %ecx,%edi
+    3c5a:	76 74                	jbe    3cd0 <malloc+0xa0>
+    3c5c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+    3c62:	be 00 10 00 00       	mov    $0x1000,%esi
+    3c67:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+    3c6e:	0f 43 f7             	cmovae %edi,%esi
+    3c71:	ba 00 80 00 00       	mov    $0x8000,%edx
+    3c76:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+    3c7c:	0f 46 da             	cmovbe %edx,%ebx
+    3c7f:	eb 10                	jmp    3c91 <malloc+0x61>
+    3c81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3c88:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3c8a:	8b 48 04             	mov    0x4(%eax),%ecx
+    3c8d:	39 cf                	cmp    %ecx,%edi
+    3c8f:	76 3f                	jbe    3cd0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3c91:	39 05 60 5e 00 00    	cmp    %eax,0x5e60
+    3c97:	89 c2                	mov    %eax,%edx
+    3c99:	75 ed                	jne    3c88 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+    3c9b:	83 ec 0c             	sub    $0xc,%esp
+    3c9e:	53                   	push   %ebx
+    3c9f:	e8 86 fc ff ff       	call   392a <sbrk>
+  if(p == (char*)-1)
+    3ca4:	83 c4 10             	add    $0x10,%esp
+    3ca7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3caa:	74 1c                	je     3cc8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+    3cac:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+    3caf:	83 ec 0c             	sub    $0xc,%esp
+    3cb2:	83 c0 08             	add    $0x8,%eax
+    3cb5:	50                   	push   %eax
+    3cb6:	e8 e5 fe ff ff       	call   3ba0 <free>
+  return freep;
+    3cbb:	8b 15 60 5e 00 00    	mov    0x5e60,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+    3cc1:	83 c4 10             	add    $0x10,%esp
+    3cc4:	85 d2                	test   %edx,%edx
+    3cc6:	75 c0                	jne    3c88 <malloc+0x58>
+        return 0;
+    3cc8:	31 c0                	xor    %eax,%eax
+    3cca:	eb 1c                	jmp    3ce8 <malloc+0xb8>
+    3ccc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+    3cd0:	39 cf                	cmp    %ecx,%edi
+    3cd2:	74 1c                	je     3cf0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+    3cd4:	29 f9                	sub    %edi,%ecx
+    3cd6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3cd9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3cdc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+    3cdf:	89 15 60 5e 00 00    	mov    %edx,0x5e60
+      return (void*)(p + 1);
+    3ce5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+    3ce8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3ceb:	5b                   	pop    %ebx
+    3cec:	5e                   	pop    %esi
+    3ced:	5f                   	pop    %edi
+    3cee:	5d                   	pop    %ebp
+    3cef:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+    3cf0:	8b 08                	mov    (%eax),%ecx
+    3cf2:	89 0a                	mov    %ecx,(%edx)
+    3cf4:	eb e9                	jmp    3cdf <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    3cf6:	c7 05 60 5e 00 00 64 	movl   $0x5e64,0x5e60
+    3cfd:	5e 00 00 
+    3d00:	c7 05 64 5e 00 00 64 	movl   $0x5e64,0x5e64
+    3d07:	5e 00 00 
+    base.s.size = 0;
+    3d0a:	b8 64 5e 00 00       	mov    $0x5e64,%eax
+    3d0f:	c7 05 68 5e 00 00 00 	movl   $0x0,0x5e68
+    3d16:	00 00 00 
+    3d19:	e9 3e ff ff ff       	jmp    3c5c <malloc+0x2c>
diff -ruN ./xv6-public-src/usertests.d ./xv6-public/usertests.d
--- ./xv6-public-src/usertests.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/usertests.d	2019-11-28 17:52:28.784267573 +0200
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files ./xv6-public-src/usertests.o and ./xv6-public/usertests.o differ
diff -ruN ./xv6-public-src/usertests.sym ./xv6-public/usertests.sym
--- ./xv6-public-src/usertests.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/usertests.sym	2019-11-28 17:52:28.828294717 +0200
@@ -0,0 +1,105 @@
+00000000 .text
+00003d20 .rodata
+000054d4 .eh_frame
+00005db0 .data
+00005de0 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005de0 args.1475
+00000000 ulib.c
+00000000 printf.c
+00003960 printint
+000054c0 digits.1111
+00000000 umalloc.c
+00005e60 freep
+00005e64 base
+00003660 strcpy
+00000ce0 exitwait
+00003a00 printf
+00005db4 stdout
+00003270 bigargtest
+00003870 memmove
+000002f0 openiputtest
+000038ea mknod
+00003770 gets
+00003922 getpid
+00000a10 pipe1
+00002b40 iref
+00003c30 malloc
+00003932 sleep
+00000200 exitiputtest
+00003370 fsfull
+00001bc0 bigdir
+00002c60 forktest
+00003942 readcount
+00000660 writetest1
+0000394a callcount
+000023d0 bigwrite
+00000e40 sharedfd
+00005db0 randstate
+000038b2 pipe
+00005e80 uninit
+00002940 dirfile
+000038c2 write
+00003200 bsstest
+00005db8 echoargv
+000038fa fstat
+000038d2 kill
+00003150 validatetest
+000027c0 rmdot
+00003912 chdir
+000009c0 exectest
+000038da exec
+000038aa wait
+00003640 rand
+000038ba read
+00000ba0 preempt
+000038f2 unlink
+000035d0 argptest
+00000d70 mem
+0000389a fork
+0000392a sbrk
+0000393a uptime
+00005dcc __bss_start
+00003710 memset
+00000830 createtest
+00000000 main
+000011f0 createdelete
+00003690 strcmp
+00000480 writetest
+0000391a dup
+00002d20 sbrktest
+000003f0 opentest
+00001cf0 subdir
+00003560 uio
+00001590 linktest
+000085a0 buf
+000008e0 dirtest
+00000120 iputtest
+000037e0 stat
+000024b0 bigfile
+00005dcc _edata
+0000a5a4 _end
+00001400 unlinkread
+00003902 link
+000038a2 exit
+00003830 atoi
+00001ab0 linkunlink
+0000a5a0 name
+000036e0 strlen
+000038e2 open
+00003730 strchr
+000017a0 concreate
+00002680 fourteen
+00003140 validateint
+00001000 fourfiles
+0000390a mkdir
+000038ca close
+00003ba0 free
Binary files ./xv6-public-src/usys.o and ./xv6-public/usys.o differ
diff -ruN ./xv6-public-src/usys.S ./xv6-public/usys.S
--- ./xv6-public-src/usys.S	2019-11-27 20:42:25.954688000 +0200
+++ ./xv6-public/usys.S	2019-11-27 23:35:03.162121661 +0200
@@ -29,3 +29,5 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(readcount)
+SYSCALL(callcount)
Binary files ./xv6-public-src/vectors.o and ./xv6-public/vectors.o differ
diff -ruN ./xv6-public-src/vectors.S ./xv6-public/vectors.S
--- ./xv6-public-src/vectors.S	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/vectors.S	2019-11-28 17:52:47.079018728 +0200
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -ruN ./xv6-public-src/vm.d ./xv6-public/vm.d
--- ./xv6-public-src/vm.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/vm.d	2019-11-28 17:52:47.171070614 +0200
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files ./xv6-public-src/vm.o and ./xv6-public/vm.o differ
Binary files ./xv6-public-src/_wc and ./xv6-public/_wc differ
diff -ruN ./xv6-public-src/wc.asm ./xv6-public/wc.asm
--- ./xv6-public-src/wc.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/wc.asm	2019-11-28 17:52:28.876324328 +0200
@@ -0,0 +1,1732 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	be 01 00 00 00       	mov    $0x1,%esi
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  21:	83 f8 01             	cmp    $0x1,%eax
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+  24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+
+  if(argc <= 1){
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 c6 03 00 00       	call   402 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	89 c7                	mov    %eax,%edi
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  if(argc <= 1){
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  4d:	50                   	push   %eax
+  4e:	83 c3 04             	add    $0x4,%ebx
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 8c 03 00 00       	call   3ea <close>
+  if(argc <= 1){
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+      exit();
+    }
+    wc(fd, argv[i]);
+    close(fd);
+  }
+  exit();
+  66:	e8 57 03 00 00       	call   3c2 <exit>
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 63 08 00 00       	push   $0x863
+  73:	6a 01                	push   $0x1
+  75:	e8 a6 04 00 00       	call   520 <printf>
+      exit();
+  7a:	e8 43 03 00 00       	call   3c2 <exit>
+main(int argc, char *argv[])
+{
+  int fd, i;
+
+  if(argc <= 1){
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 55 08 00 00       	push   $0x855
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 30 03 00 00       	call   3c2 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  a6:	31 f6                	xor    %esi,%esi
+wc(int fd, char *name)
+{
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  a8:	31 db                	xor    %ebx,%ebx
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+  aa:	83 ec 1c             	sub    $0x1c,%esp
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  b4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  bb:	90                   	nop
+  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 80 0b 00 00       	push   $0xb80
+  cd:	ff 75 08             	pushl  0x8(%ebp)
+  d0:	e8 05 03 00 00       	call   3da <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	83 f8 00             	cmp    $0x0,%eax
+  db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  de:	7e 5f                	jle    13f <wc+0x9f>
+  e0:	31 ff                	xor    %edi,%edi
+  e2:	eb 0e                	jmp    f2 <wc+0x52>
+  e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    for(i=0; i<n; i++){
+      c++;
+      if(buf[i] == '\n')
+        l++;
+      if(strchr(" \r\t\n\v", buf[i]))
+        inword = 0;
+  e8:	31 f6                	xor    %esi,%esi
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+  ea:	83 c7 01             	add    $0x1,%edi
+  ed:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+  f0:	74 3a                	je     12c <wc+0x8c>
+      c++;
+      if(buf[i] == '\n')
+  f2:	0f be 87 80 0b 00 00 	movsbl 0xb80(%edi),%eax
+        l++;
+  f9:	31 c9                	xor    %ecx,%ecx
+  fb:	3c 0a                	cmp    $0xa,%al
+  fd:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 100:	83 ec 08             	sub    $0x8,%esp
+ 103:	50                   	push   %eax
+ 104:	68 40 08 00 00       	push   $0x840
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+      c++;
+      if(buf[i] == '\n')
+        l++;
+ 109:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10b:	e8 40 01 00 00       	call   250 <strchr>
+ 110:	83 c4 10             	add    $0x10,%esp
+ 113:	85 c0                	test   %eax,%eax
+ 115:	75 d1                	jne    e8 <wc+0x48>
+        inword = 0;
+      else if(!inword){
+ 117:	85 f6                	test   %esi,%esi
+ 119:	75 1d                	jne    138 <wc+0x98>
+        w++;
+ 11b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+ 11f:	83 c7 01             	add    $0x1,%edi
+ 122:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+        l++;
+      if(strchr(" \r\t\n\v", buf[i]))
+        inword = 0;
+      else if(!inword){
+        w++;
+        inword = 1;
+ 125:	be 01 00 00 00       	mov    $0x1,%esi
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+ 12a:	75 c6                	jne    f2 <wc+0x52>
+ 12c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 12f:	01 55 dc             	add    %edx,-0x24(%ebp)
+ 132:	eb 8c                	jmp    c0 <wc+0x20>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 138:	be 01 00 00 00       	mov    $0x1,%esi
+ 13d:	eb ab                	jmp    ea <wc+0x4a>
+        w++;
+        inword = 1;
+      }
+    }
+  }
+  if(n < 0){
+ 13f:	75 24                	jne    165 <wc+0xc5>
+    printf(1, "wc: read error\n");
+    exit();
+  }
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 141:	83 ec 08             	sub    $0x8,%esp
+ 144:	ff 75 0c             	pushl  0xc(%ebp)
+ 147:	ff 75 dc             	pushl  -0x24(%ebp)
+ 14a:	ff 75 e0             	pushl  -0x20(%ebp)
+ 14d:	53                   	push   %ebx
+ 14e:	68 56 08 00 00       	push   $0x856
+ 153:	6a 01                	push   $0x1
+ 155:	e8 c6 03 00 00       	call   520 <printf>
+}
+ 15a:	83 c4 20             	add    $0x20,%esp
+ 15d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 160:	5b                   	pop    %ebx
+ 161:	5e                   	pop    %esi
+ 162:	5f                   	pop    %edi
+ 163:	5d                   	pop    %ebp
+ 164:	c3                   	ret    
+        inword = 1;
+      }
+    }
+  }
+  if(n < 0){
+    printf(1, "wc: read error\n");
+ 165:	83 ec 08             	sub    $0x8,%esp
+ 168:	68 46 08 00 00       	push   $0x846
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 ac 03 00 00       	call   520 <printf>
+    exit();
+ 174:	e8 49 02 00 00       	call   3c2 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
+
+00000180 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	53                   	push   %ebx
+ 184:	8b 45 08             	mov    0x8(%ebp),%eax
+ 187:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 18a:	89 c2                	mov    %eax,%edx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 190:	83 c1 01             	add    $0x1,%ecx
+ 193:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+ 197:	83 c2 01             	add    $0x1,%edx
+ 19a:	84 db                	test   %bl,%bl
+ 19c:	88 5a ff             	mov    %bl,-0x1(%edx)
+ 19f:	75 ef                	jne    190 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1a1:	5b                   	pop    %ebx
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	c3                   	ret    
+ 1a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+000001b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	56                   	push   %esi
+ 1b4:	53                   	push   %ebx
+ 1b5:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1b8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1bb:	0f b6 02             	movzbl (%edx),%eax
+ 1be:	0f b6 19             	movzbl (%ecx),%ebx
+ 1c1:	84 c0                	test   %al,%al
+ 1c3:	75 1e                	jne    1e3 <strcmp+0x33>
+ 1c5:	eb 29                	jmp    1f0 <strcmp+0x40>
+ 1c7:	89 f6                	mov    %esi,%esi
+ 1c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+ 1d0:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1d3:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+ 1d6:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1d9:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1dd:	84 c0                	test   %al,%al
+ 1df:	74 0f                	je     1f0 <strcmp+0x40>
+ 1e1:	89 f1                	mov    %esi,%ecx
+ 1e3:	38 d8                	cmp    %bl,%al
+ 1e5:	74 e9                	je     1d0 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1e7:	29 d8                	sub    %ebx,%eax
+}
+ 1e9:	5b                   	pop    %ebx
+ 1ea:	5e                   	pop    %esi
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+ 1f0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+ 1f2:	29 d8                	sub    %ebx,%eax
+}
+ 1f4:	5b                   	pop    %ebx
+ 1f5:	5e                   	pop    %esi
+ 1f6:	5d                   	pop    %ebp
+ 1f7:	c3                   	ret    
+ 1f8:	90                   	nop
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 206:	80 39 00             	cmpb   $0x0,(%ecx)
+ 209:	74 12                	je     21d <strlen+0x1d>
+ 20b:	31 d2                	xor    %edx,%edx
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+ 210:	83 c2 01             	add    $0x1,%edx
+ 213:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+ 217:	89 d0                	mov    %edx,%eax
+ 219:	75 f5                	jne    210 <strlen+0x10>
+    ;
+  return n;
+}
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 21d:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	eb 0d                	jmp    230 <memset>
+ 223:	90                   	nop
+ 224:	90                   	nop
+ 225:	90                   	nop
+ 226:	90                   	nop
+ 227:	90                   	nop
+ 228:	90                   	nop
+ 229:	90                   	nop
+ 22a:	90                   	nop
+ 22b:	90                   	nop
+ 22c:	90                   	nop
+ 22d:	90                   	nop
+ 22e:	90                   	nop
+ 22f:	90                   	nop
+
+00000230 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 237:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 23a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 23d:	89 d7                	mov    %edx,%edi
+ 23f:	fc                   	cld    
+ 240:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 242:	89 d0                	mov    %edx,%eax
+ 244:	5f                   	pop    %edi
+ 245:	5d                   	pop    %ebp
+ 246:	c3                   	ret    
+ 247:	89 f6                	mov    %esi,%esi
+ 249:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000250 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 45 08             	mov    0x8(%ebp),%eax
+ 257:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 25a:	0f b6 10             	movzbl (%eax),%edx
+ 25d:	84 d2                	test   %dl,%dl
+ 25f:	74 1d                	je     27e <strchr+0x2e>
+    if(*s == c)
+ 261:	38 d3                	cmp    %dl,%bl
+ 263:	89 d9                	mov    %ebx,%ecx
+ 265:	75 0d                	jne    274 <strchr+0x24>
+ 267:	eb 17                	jmp    280 <strchr+0x30>
+ 269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 270:	38 ca                	cmp    %cl,%dl
+ 272:	74 0c                	je     280 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 274:	83 c0 01             	add    $0x1,%eax
+ 277:	0f b6 10             	movzbl (%eax),%edx
+ 27a:	84 d2                	test   %dl,%dl
+ 27c:	75 f2                	jne    270 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 27e:	31 c0                	xor    %eax,%eax
+}
+ 280:	5b                   	pop    %ebx
+ 281:	5d                   	pop    %ebp
+ 282:	c3                   	ret    
+ 283:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 289:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000290 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	56                   	push   %esi
+ 295:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 296:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 298:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 29b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 29e:	eb 29                	jmp    2c9 <gets+0x39>
+    cc = read(0, &c, 1);
+ 2a0:	83 ec 04             	sub    $0x4,%esp
+ 2a3:	6a 01                	push   $0x1
+ 2a5:	57                   	push   %edi
+ 2a6:	6a 00                	push   $0x0
+ 2a8:	e8 2d 01 00 00       	call   3da <read>
+    if(cc < 1)
+ 2ad:	83 c4 10             	add    $0x10,%esp
+ 2b0:	85 c0                	test   %eax,%eax
+ 2b2:	7e 1d                	jle    2d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 2b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2bb:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 2bd:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 2bf:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 2c3:	74 1b                	je     2e0 <gets+0x50>
+ 2c5:	3c 0d                	cmp    $0xd,%al
+ 2c7:	74 17                	je     2e0 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2c9:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 2cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2cf:	7c cf                	jl     2a0 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2db:	5b                   	pop    %ebx
+ 2dc:	5e                   	pop    %esi
+ 2dd:	5f                   	pop    %edi
+ 2de:	5d                   	pop    %ebp
+ 2df:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2e0:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2e3:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 2e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ec:	5b                   	pop    %ebx
+ 2ed:	5e                   	pop    %esi
+ 2ee:	5f                   	pop    %edi
+ 2ef:	5d                   	pop    %ebp
+ 2f0:	c3                   	ret    
+ 2f1:	eb 0d                	jmp    300 <stat>
+ 2f3:	90                   	nop
+ 2f4:	90                   	nop
+ 2f5:	90                   	nop
+ 2f6:	90                   	nop
+ 2f7:	90                   	nop
+ 2f8:	90                   	nop
+ 2f9:	90                   	nop
+ 2fa:	90                   	nop
+ 2fb:	90                   	nop
+ 2fc:	90                   	nop
+ 2fd:	90                   	nop
+ 2fe:	90                   	nop
+ 2ff:	90                   	nop
+
+00000300 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 300:	55                   	push   %ebp
+ 301:	89 e5                	mov    %esp,%ebp
+ 303:	56                   	push   %esi
+ 304:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 305:	83 ec 08             	sub    $0x8,%esp
+ 308:	6a 00                	push   $0x0
+ 30a:	ff 75 08             	pushl  0x8(%ebp)
+ 30d:	e8 f0 00 00 00       	call   402 <open>
+  if(fd < 0)
+ 312:	83 c4 10             	add    $0x10,%esp
+ 315:	85 c0                	test   %eax,%eax
+ 317:	78 27                	js     340 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 319:	83 ec 08             	sub    $0x8,%esp
+ 31c:	ff 75 0c             	pushl  0xc(%ebp)
+ 31f:	89 c3                	mov    %eax,%ebx
+ 321:	50                   	push   %eax
+ 322:	e8 f3 00 00 00       	call   41a <fstat>
+ 327:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 329:	89 1c 24             	mov    %ebx,(%esp)
+ 32c:	e8 b9 00 00 00       	call   3ea <close>
+  return r;
+ 331:	83 c4 10             	add    $0x10,%esp
+ 334:	89 f0                	mov    %esi,%eax
+}
+ 336:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 339:	5b                   	pop    %ebx
+ 33a:	5e                   	pop    %esi
+ 33b:	5d                   	pop    %ebp
+ 33c:	c3                   	ret    
+ 33d:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 340:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 345:	eb ef                	jmp    336 <stat+0x36>
+ 347:	89 f6                	mov    %esi,%esi
+ 349:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000350 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	53                   	push   %ebx
+ 354:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 357:	0f be 11             	movsbl (%ecx),%edx
+ 35a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 35d:	3c 09                	cmp    $0x9,%al
+ 35f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 364:	77 1f                	ja     385 <atoi+0x35>
+ 366:	8d 76 00             	lea    0x0(%esi),%esi
+ 369:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 370:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 373:	83 c1 01             	add    $0x1,%ecx
+ 376:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 37a:	0f be 11             	movsbl (%ecx),%edx
+ 37d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 380:	80 fb 09             	cmp    $0x9,%bl
+ 383:	76 eb                	jbe    370 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 385:	5b                   	pop    %ebx
+ 386:	5d                   	pop    %ebp
+ 387:	c3                   	ret    
+ 388:	90                   	nop
+ 389:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000390 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	56                   	push   %esi
+ 394:	53                   	push   %ebx
+ 395:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 398:	8b 45 08             	mov    0x8(%ebp),%eax
+ 39b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 39e:	85 db                	test   %ebx,%ebx
+ 3a0:	7e 14                	jle    3b6 <memmove+0x26>
+ 3a2:	31 d2                	xor    %edx,%edx
+ 3a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 3a8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 3ac:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 3af:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3b2:	39 da                	cmp    %ebx,%edx
+ 3b4:	75 f2                	jne    3a8 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 3b6:	5b                   	pop    %ebx
+ 3b7:	5e                   	pop    %esi
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+
+000003ba <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ba:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3bf:	cd 40                	int    $0x40
+ 3c1:	c3                   	ret    
+
+000003c2 <exit>:
+SYSCALL(exit)
+ 3c2:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3c7:	cd 40                	int    $0x40
+ 3c9:	c3                   	ret    
+
+000003ca <wait>:
+SYSCALL(wait)
+ 3ca:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3cf:	cd 40                	int    $0x40
+ 3d1:	c3                   	ret    
+
+000003d2 <pipe>:
+SYSCALL(pipe)
+ 3d2:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3d7:	cd 40                	int    $0x40
+ 3d9:	c3                   	ret    
+
+000003da <read>:
+SYSCALL(read)
+ 3da:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3df:	cd 40                	int    $0x40
+ 3e1:	c3                   	ret    
+
+000003e2 <write>:
+SYSCALL(write)
+ 3e2:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3e7:	cd 40                	int    $0x40
+ 3e9:	c3                   	ret    
+
+000003ea <close>:
+SYSCALL(close)
+ 3ea:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3ef:	cd 40                	int    $0x40
+ 3f1:	c3                   	ret    
+
+000003f2 <kill>:
+SYSCALL(kill)
+ 3f2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3f7:	cd 40                	int    $0x40
+ 3f9:	c3                   	ret    
+
+000003fa <exec>:
+SYSCALL(exec)
+ 3fa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3ff:	cd 40                	int    $0x40
+ 401:	c3                   	ret    
+
+00000402 <open>:
+SYSCALL(open)
+ 402:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 407:	cd 40                	int    $0x40
+ 409:	c3                   	ret    
+
+0000040a <mknod>:
+SYSCALL(mknod)
+ 40a:	b8 11 00 00 00       	mov    $0x11,%eax
+ 40f:	cd 40                	int    $0x40
+ 411:	c3                   	ret    
+
+00000412 <unlink>:
+SYSCALL(unlink)
+ 412:	b8 12 00 00 00       	mov    $0x12,%eax
+ 417:	cd 40                	int    $0x40
+ 419:	c3                   	ret    
+
+0000041a <fstat>:
+SYSCALL(fstat)
+ 41a:	b8 08 00 00 00       	mov    $0x8,%eax
+ 41f:	cd 40                	int    $0x40
+ 421:	c3                   	ret    
+
+00000422 <link>:
+SYSCALL(link)
+ 422:	b8 13 00 00 00       	mov    $0x13,%eax
+ 427:	cd 40                	int    $0x40
+ 429:	c3                   	ret    
+
+0000042a <mkdir>:
+SYSCALL(mkdir)
+ 42a:	b8 14 00 00 00       	mov    $0x14,%eax
+ 42f:	cd 40                	int    $0x40
+ 431:	c3                   	ret    
+
+00000432 <chdir>:
+SYSCALL(chdir)
+ 432:	b8 09 00 00 00       	mov    $0x9,%eax
+ 437:	cd 40                	int    $0x40
+ 439:	c3                   	ret    
+
+0000043a <dup>:
+SYSCALL(dup)
+ 43a:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 43f:	cd 40                	int    $0x40
+ 441:	c3                   	ret    
+
+00000442 <getpid>:
+SYSCALL(getpid)
+ 442:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 447:	cd 40                	int    $0x40
+ 449:	c3                   	ret    
+
+0000044a <sbrk>:
+SYSCALL(sbrk)
+ 44a:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 44f:	cd 40                	int    $0x40
+ 451:	c3                   	ret    
+
+00000452 <sleep>:
+SYSCALL(sleep)
+ 452:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 457:	cd 40                	int    $0x40
+ 459:	c3                   	ret    
+
+0000045a <uptime>:
+SYSCALL(uptime)
+ 45a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 45f:	cd 40                	int    $0x40
+ 461:	c3                   	ret    
+
+00000462 <readcount>:
+SYSCALL(readcount)
+ 462:	b8 16 00 00 00       	mov    $0x16,%eax
+ 467:	cd 40                	int    $0x40
+ 469:	c3                   	ret    
+
+0000046a <callcount>:
+SYSCALL(callcount)
+ 46a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 46f:	cd 40                	int    $0x40
+ 471:	c3                   	ret    
+ 472:	66 90                	xchg   %ax,%ax
+ 474:	66 90                	xchg   %ax,%ax
+ 476:	66 90                	xchg   %ax,%ax
+ 478:	66 90                	xchg   %ax,%ax
+ 47a:	66 90                	xchg   %ax,%ax
+ 47c:	66 90                	xchg   %ax,%ax
+ 47e:	66 90                	xchg   %ax,%ax
+
+00000480 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	89 c6                	mov    %eax,%esi
+ 488:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 48b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 48e:	85 db                	test   %ebx,%ebx
+ 490:	74 7e                	je     510 <printint+0x90>
+ 492:	89 d0                	mov    %edx,%eax
+ 494:	c1 e8 1f             	shr    $0x1f,%eax
+ 497:	84 c0                	test   %al,%al
+ 499:	74 75                	je     510 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 49b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 49d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 4a4:	f7 d8                	neg    %eax
+ 4a6:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4a9:	31 ff                	xor    %edi,%edi
+ 4ab:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 4ae:	89 ce                	mov    %ecx,%esi
+ 4b0:	eb 08                	jmp    4ba <printint+0x3a>
+ 4b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4b8:	89 cf                	mov    %ecx,%edi
+ 4ba:	31 d2                	xor    %edx,%edx
+ 4bc:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 4bf:	f7 f6                	div    %esi
+ 4c1:	0f b6 92 80 08 00 00 	movzbl 0x880(%edx),%edx
+  }while((x /= base) != 0);
+ 4c8:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 4ca:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 4cd:	75 e9                	jne    4b8 <printint+0x38>
+  if(neg)
+ 4cf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 4d2:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 4d5:	85 c0                	test   %eax,%eax
+ 4d7:	74 08                	je     4e1 <printint+0x61>
+    buf[i++] = '-';
+ 4d9:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 4de:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 4e1:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 4e5:	8d 76 00             	lea    0x0(%esi),%esi
+ 4e8:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 4eb:	83 ec 04             	sub    $0x4,%esp
+ 4ee:	83 ef 01             	sub    $0x1,%edi
+ 4f1:	6a 01                	push   $0x1
+ 4f3:	53                   	push   %ebx
+ 4f4:	56                   	push   %esi
+ 4f5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 4f8:	e8 e5 fe ff ff       	call   3e2 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 4fd:	83 c4 10             	add    $0x10,%esp
+ 500:	39 df                	cmp    %ebx,%edi
+ 502:	75 e4                	jne    4e8 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 504:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 507:	5b                   	pop    %ebx
+ 508:	5e                   	pop    %esi
+ 509:	5f                   	pop    %edi
+ 50a:	5d                   	pop    %ebp
+ 50b:	c3                   	ret    
+ 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 510:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 512:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 519:	eb 8b                	jmp    4a6 <printint+0x26>
+ 51b:	90                   	nop
+ 51c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000520 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	57                   	push   %edi
+ 524:	56                   	push   %esi
+ 525:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 526:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 529:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 52c:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 52f:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 532:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 535:	0f b6 1e             	movzbl (%esi),%ebx
+ 538:	83 c6 01             	add    $0x1,%esi
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	0f 84 b0 00 00 00    	je     5f3 <printf+0xd3>
+ 543:	31 d2                	xor    %edx,%edx
+ 545:	eb 39                	jmp    580 <printf+0x60>
+ 547:	89 f6                	mov    %esi,%esi
+ 549:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 550:	83 f8 25             	cmp    $0x25,%eax
+ 553:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 556:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 55b:	74 18                	je     575 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 55d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 560:	83 ec 04             	sub    $0x4,%esp
+ 563:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 566:	6a 01                	push   $0x1
+ 568:	50                   	push   %eax
+ 569:	57                   	push   %edi
+ 56a:	e8 73 fe ff ff       	call   3e2 <write>
+ 56f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 572:	83 c4 10             	add    $0x10,%esp
+ 575:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 578:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 57c:	84 db                	test   %bl,%bl
+ 57e:	74 73                	je     5f3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 580:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 582:	0f be cb             	movsbl %bl,%ecx
+ 585:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 588:	74 c6                	je     550 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 58a:	83 fa 25             	cmp    $0x25,%edx
+ 58d:	75 e6                	jne    575 <printf+0x55>
+      if(c == 'd'){
+ 58f:	83 f8 64             	cmp    $0x64,%eax
+ 592:	0f 84 f8 00 00 00    	je     690 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 598:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 59e:	83 f9 70             	cmp    $0x70,%ecx
+ 5a1:	74 5d                	je     600 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5a3:	83 f8 73             	cmp    $0x73,%eax
+ 5a6:	0f 84 84 00 00 00    	je     630 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5ac:	83 f8 63             	cmp    $0x63,%eax
+ 5af:	0f 84 ea 00 00 00    	je     69f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5b5:	83 f8 25             	cmp    $0x25,%eax
+ 5b8:	0f 84 c2 00 00 00    	je     680 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5be:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 5c1:	83 ec 04             	sub    $0x4,%esp
+ 5c4:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	50                   	push   %eax
+ 5cb:	57                   	push   %edi
+ 5cc:	e8 11 fe ff ff       	call   3e2 <write>
+ 5d1:	83 c4 0c             	add    $0xc,%esp
+ 5d4:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 5d7:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 5da:	6a 01                	push   $0x1
+ 5dc:	50                   	push   %eax
+ 5dd:	57                   	push   %edi
+ 5de:	83 c6 01             	add    $0x1,%esi
+ 5e1:	e8 fc fd ff ff       	call   3e2 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5e6:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 5ea:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 5ed:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 5ef:	84 db                	test   %bl,%bl
+ 5f1:	75 8d                	jne    580 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5f6:	5b                   	pop    %ebx
+ 5f7:	5e                   	pop    %esi
+ 5f8:	5f                   	pop    %edi
+ 5f9:	5d                   	pop    %ebp
+ 5fa:	c3                   	ret    
+ 5fb:	90                   	nop
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 608:	6a 00                	push   $0x0
+ 60a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 60d:	89 f8                	mov    %edi,%eax
+ 60f:	8b 13                	mov    (%ebx),%edx
+ 611:	e8 6a fe ff ff       	call   480 <printint>
+        ap++;
+ 616:	89 d8                	mov    %ebx,%eax
+ 618:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 61b:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 61d:	83 c0 04             	add    $0x4,%eax
+ 620:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 623:	e9 4d ff ff ff       	jmp    575 <printf+0x55>
+ 628:	90                   	nop
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 633:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 635:	83 c0 04             	add    $0x4,%eax
+ 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 63b:	b8 77 08 00 00       	mov    $0x877,%eax
+ 640:	85 db                	test   %ebx,%ebx
+ 642:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 645:	0f b6 03             	movzbl (%ebx),%eax
+ 648:	84 c0                	test   %al,%al
+ 64a:	74 23                	je     66f <printf+0x14f>
+ 64c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 650:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 653:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 656:	83 ec 04             	sub    $0x4,%esp
+ 659:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 65b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 65e:	50                   	push   %eax
+ 65f:	57                   	push   %edi
+ 660:	e8 7d fd ff ff       	call   3e2 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 665:	0f b6 03             	movzbl (%ebx),%eax
+ 668:	83 c4 10             	add    $0x10,%esp
+ 66b:	84 c0                	test   %al,%al
+ 66d:	75 e1                	jne    650 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 66f:	31 d2                	xor    %edx,%edx
+ 671:	e9 ff fe ff ff       	jmp    575 <printf+0x55>
+ 676:	8d 76 00             	lea    0x0(%esi),%esi
+ 679:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 680:	83 ec 04             	sub    $0x4,%esp
+ 683:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 686:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 689:	6a 01                	push   $0x1
+ 68b:	e9 4c ff ff ff       	jmp    5dc <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	e9 6b ff ff ff       	jmp    60a <printf+0xea>
+ 69f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 6a2:	83 ec 04             	sub    $0x4,%esp
+ 6a5:	8b 03                	mov    (%ebx),%eax
+ 6a7:	6a 01                	push   $0x1
+ 6a9:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 6ac:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 6af:	50                   	push   %eax
+ 6b0:	57                   	push   %edi
+ 6b1:	e8 2c fd ff ff       	call   3e2 <write>
+ 6b6:	e9 5b ff ff ff       	jmp    616 <printf+0xf6>
+ 6bb:	66 90                	xchg   %ax,%ax
+ 6bd:	66 90                	xchg   %ax,%ax
+ 6bf:	90                   	nop
+
+000006c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c1:	a1 60 0b 00 00       	mov    0xb60,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c6:	89 e5                	mov    %esp,%ebp
+ 6c8:	57                   	push   %edi
+ 6c9:	56                   	push   %esi
+ 6ca:	53                   	push   %ebx
+ 6cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6ce:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6d0:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d3:	39 c8                	cmp    %ecx,%eax
+ 6d5:	73 19                	jae    6f0 <free+0x30>
+ 6d7:	89 f6                	mov    %esi,%esi
+ 6d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 6e0:	39 d1                	cmp    %edx,%ecx
+ 6e2:	72 1c                	jb     700 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e4:	39 d0                	cmp    %edx,%eax
+ 6e6:	73 18                	jae    700 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6e8:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ea:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6ec:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ee:	72 f0                	jb     6e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 d0                	cmp    %edx,%eax
+ 6f2:	72 f4                	jb     6e8 <free+0x28>
+ 6f4:	39 d1                	cmp    %edx,%ecx
+ 6f6:	73 f0                	jae    6e8 <free+0x28>
+ 6f8:	90                   	nop
+ 6f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 700:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 703:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 706:	39 d7                	cmp    %edx,%edi
+ 708:	74 19                	je     723 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70d:	8b 50 04             	mov    0x4(%eax),%edx
+ 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 713:	39 f1                	cmp    %esi,%ecx
+ 715:	74 23                	je     73a <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 717:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 719:	a3 60 0b 00 00       	mov    %eax,0xb60
+}
+ 71e:	5b                   	pop    %ebx
+ 71f:	5e                   	pop    %esi
+ 720:	5f                   	pop    %edi
+ 721:	5d                   	pop    %ebp
+ 722:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 723:	03 72 04             	add    0x4(%edx),%esi
+ 726:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 729:	8b 10                	mov    (%eax),%edx
+ 72b:	8b 12                	mov    (%edx),%edx
+ 72d:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 730:	8b 50 04             	mov    0x4(%eax),%edx
+ 733:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 736:	39 f1                	cmp    %esi,%ecx
+ 738:	75 dd                	jne    717 <free+0x57>
+    p->s.size += bp->s.size;
+ 73a:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 73d:	a3 60 0b 00 00       	mov    %eax,0xb60
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 742:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 745:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 748:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 74a:	5b                   	pop    %ebx
+ 74b:	5e                   	pop    %esi
+ 74c:	5f                   	pop    %edi
+ 74d:	5d                   	pop    %ebp
+ 74e:	c3                   	ret    
+ 74f:	90                   	nop
+
+00000750 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 750:	55                   	push   %ebp
+ 751:	89 e5                	mov    %esp,%ebp
+ 753:	57                   	push   %edi
+ 754:	56                   	push   %esi
+ 755:	53                   	push   %ebx
+ 756:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 759:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 75c:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 762:	8d 78 07             	lea    0x7(%eax),%edi
+ 765:	c1 ef 03             	shr    $0x3,%edi
+ 768:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 76b:	85 d2                	test   %edx,%edx
+ 76d:	0f 84 a3 00 00 00    	je     816 <malloc+0xc6>
+ 773:	8b 02                	mov    (%edx),%eax
+ 775:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 778:	39 cf                	cmp    %ecx,%edi
+ 77a:	76 74                	jbe    7f0 <malloc+0xa0>
+ 77c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 782:	be 00 10 00 00       	mov    $0x1000,%esi
+ 787:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 78e:	0f 43 f7             	cmovae %edi,%esi
+ 791:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 796:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 79c:	0f 46 da             	cmovbe %edx,%ebx
+ 79f:	eb 10                	jmp    7b1 <malloc+0x61>
+ 7a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ad:	39 cf                	cmp    %ecx,%edi
+ 7af:	76 3f                	jbe    7f0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b1:	39 05 60 0b 00 00    	cmp    %eax,0xb60
+ 7b7:	89 c2                	mov    %eax,%edx
+ 7b9:	75 ed                	jne    7a8 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 7bb:	83 ec 0c             	sub    $0xc,%esp
+ 7be:	53                   	push   %ebx
+ 7bf:	e8 86 fc ff ff       	call   44a <sbrk>
+  if(p == (char*)-1)
+ 7c4:	83 c4 10             	add    $0x10,%esp
+ 7c7:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ca:	74 1c                	je     7e8 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 7cc:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 7cf:	83 ec 0c             	sub    $0xc,%esp
+ 7d2:	83 c0 08             	add    $0x8,%eax
+ 7d5:	50                   	push   %eax
+ 7d6:	e8 e5 fe ff ff       	call   6c0 <free>
+  return freep;
+ 7db:	8b 15 60 0b 00 00    	mov    0xb60,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 7e1:	83 c4 10             	add    $0x10,%esp
+ 7e4:	85 d2                	test   %edx,%edx
+ 7e6:	75 c0                	jne    7a8 <malloc+0x58>
+        return 0;
+ 7e8:	31 c0                	xor    %eax,%eax
+ 7ea:	eb 1c                	jmp    808 <malloc+0xb8>
+ 7ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 7f0:	39 cf                	cmp    %ecx,%edi
+ 7f2:	74 1c                	je     810 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 7f4:	29 f9                	sub    %edi,%ecx
+ 7f6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7f9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7fc:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 7ff:	89 15 60 0b 00 00    	mov    %edx,0xb60
+      return (void*)(p + 1);
+ 805:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 808:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 80b:	5b                   	pop    %ebx
+ 80c:	5e                   	pop    %esi
+ 80d:	5f                   	pop    %edi
+ 80e:	5d                   	pop    %ebp
+ 80f:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 810:	8b 08                	mov    (%eax),%ecx
+ 812:	89 0a                	mov    %ecx,(%edx)
+ 814:	eb e9                	jmp    7ff <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 816:	c7 05 60 0b 00 00 64 	movl   $0xb64,0xb60
+ 81d:	0b 00 00 
+ 820:	c7 05 64 0b 00 00 64 	movl   $0xb64,0xb64
+ 827:	0b 00 00 
+    base.s.size = 0;
+ 82a:	b8 64 0b 00 00       	mov    $0xb64,%eax
+ 82f:	c7 05 68 0b 00 00 00 	movl   $0x0,0xb68
+ 836:	00 00 00 
+ 839:	e9 3e ff ff ff       	jmp    77c <malloc+0x2c>
diff -ruN ./xv6-public-src/wc.d ./xv6-public/wc.d
--- ./xv6-public-src/wc.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/wc.d	2019-11-28 17:52:28.856311990 +0200
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/wc.o and ./xv6-public/wc.o differ
diff -ruN ./xv6-public-src/wc.sym ./xv6-public/wc.sym
--- ./xv6-public-src/wc.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/wc.sym	2019-11-28 17:52:28.880326796 +0200
@@ -0,0 +1,61 @@
+00000000 .text
+00000840 .rodata
+00000894 .eh_frame
+00000b60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+00000480 printint
+00000880 digits.1111
+00000000 umalloc.c
+00000b60 freep
+00000b64 base
+00000180 strcpy
+00000520 printf
+00000390 memmove
+0000040a mknod
+00000290 gets
+00000442 getpid
+00000750 malloc
+00000452 sleep
+00000462 readcount
+0000046a callcount
+000003d2 pipe
+000003e2 write
+0000041a fstat
+000003f2 kill
+00000432 chdir
+000003fa exec
+000003ca wait
+000003da read
+00000412 unlink
+000000a0 wc
+000003ba fork
+0000044a sbrk
+0000045a uptime
+00000b54 __bss_start
+00000230 memset
+00000000 main
+000001b0 strcmp
+0000043a dup
+00000b80 buf
+00000300 stat
+00000b54 _edata
+00000d80 _end
+00000422 link
+000003c2 exit
+00000350 atoi
+00000200 strlen
+00000402 open
+00000250 strchr
+0000042a mkdir
+000003ea close
+000006c0 free
Binary files ./xv6-public-src/xv6.img and ./xv6-public/xv6.img differ
Binary files ./xv6-public-src/_zombie and ./xv6-public/_zombie differ
diff -ruN ./xv6-public-src/zombie.asm ./xv6-public/zombie.asm
--- ./xv6-public-src/zombie.asm	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/zombie.asm	2019-11-28 17:52:28.924353940 +0200
@@ -0,0 +1,1464 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	pushl  -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 54 02 00 00       	call   26a <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 de 02 00 00       	call   302 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 46 02 00 00       	call   272 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  31:	89 e5                	mov    %esp,%ebp
+  33:	53                   	push   %ebx
+  34:	8b 45 08             	mov    0x8(%ebp),%eax
+  37:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  3a:	89 c2                	mov    %eax,%edx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  40:	83 c1 01             	add    $0x1,%ecx
+  43:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx
+  47:	83 c2 01             	add    $0x1,%edx
+  4a:	84 db                	test   %bl,%bl
+  4c:	88 5a ff             	mov    %bl,-0x1(%edx)
+  4f:	75 ef                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  51:	5b                   	pop    %ebx
+  52:	5d                   	pop    %ebp
+  53:	c3                   	ret    
+  54:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  5a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 55 08             	mov    0x8(%ebp),%edx
+  68:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6b:	0f b6 02             	movzbl (%edx),%eax
+  6e:	0f b6 19             	movzbl (%ecx),%ebx
+  71:	84 c0                	test   %al,%al
+  73:	75 1e                	jne    93 <strcmp+0x33>
+  75:	eb 29                	jmp    a0 <strcmp+0x40>
+  77:	89 f6                	mov    %esi,%esi
+  79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    p++, q++;
+  80:	83 c2 01             	add    $0x1,%edx
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  83:	0f b6 02             	movzbl (%edx),%eax
+    p++, q++;
+  86:	8d 71 01             	lea    0x1(%ecx),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  89:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	89 f1                	mov    %esi,%ecx
+  93:	38 d8                	cmp    %bl,%al
+  95:	74 e9                	je     80 <strcmp+0x20>
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  97:	29 d8                	sub    %ebx,%eax
+}
+  99:	5b                   	pop    %ebx
+  9a:	5e                   	pop    %esi
+  9b:	5d                   	pop    %ebp
+  9c:	c3                   	ret    
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+  a0:	31 c0                	xor    %eax,%eax
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5e                   	pop    %esi
+  a6:	5d                   	pop    %ebp
+  a7:	c3                   	ret    
+  a8:	90                   	nop
+  a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b6:	80 39 00             	cmpb   $0x0,(%ecx)
+  b9:	74 12                	je     cd <strlen+0x1d>
+  bb:	31 d2                	xor    %edx,%edx
+  bd:	8d 76 00             	lea    0x0(%esi),%esi
+  c0:	83 c2 01             	add    $0x1,%edx
+  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)
+  c7:	89 d0                	mov    %edx,%eax
+  c9:	75 f5                	jne    c0 <strlen+0x10>
+    ;
+  return n;
+}
+  cb:	5d                   	pop    %ebp
+  cc:	c3                   	ret    
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+  cd:	31 c0                	xor    %eax,%eax
+    ;
+  return n;
+}
+  cf:	5d                   	pop    %ebp
+  d0:	c3                   	ret    
+  d1:	eb 0d                	jmp    e0 <memset>
+  d3:	90                   	nop
+  d4:	90                   	nop
+  d5:	90                   	nop
+  d6:	90                   	nop
+  d7:	90                   	nop
+  d8:	90                   	nop
+  d9:	90                   	nop
+  da:	90                   	nop
+  db:	90                   	nop
+  dc:	90                   	nop
+  dd:	90                   	nop
+  de:	90                   	nop
+  df:	90                   	nop
+
+000000e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	57                   	push   %edi
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+  ed:	89 d7                	mov    %edx,%edi
+  ef:	fc                   	cld    
+  f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+  f2:	89 d0                	mov    %edx,%eax
+  f4:	5f                   	pop    %edi
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	89 f6                	mov    %esi,%esi
+  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000100 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	53                   	push   %ebx
+ 104:	8b 45 08             	mov    0x8(%ebp),%eax
+ 107:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  for(; *s; s++)
+ 10a:	0f b6 10             	movzbl (%eax),%edx
+ 10d:	84 d2                	test   %dl,%dl
+ 10f:	74 1d                	je     12e <strchr+0x2e>
+    if(*s == c)
+ 111:	38 d3                	cmp    %dl,%bl
+ 113:	89 d9                	mov    %ebx,%ecx
+ 115:	75 0d                	jne    124 <strchr+0x24>
+ 117:	eb 17                	jmp    130 <strchr+0x30>
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 120:	38 ca                	cmp    %cl,%dl
+ 122:	74 0c                	je     130 <strchr+0x30>
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+ 124:	83 c0 01             	add    $0x1,%eax
+ 127:	0f b6 10             	movzbl (%eax),%edx
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strchr+0x20>
+    if(*s == c)
+      return (char*)s;
+  return 0;
+ 12e:	31 c0                	xor    %eax,%eax
+}
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 139:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000140 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	56                   	push   %esi
+ 145:	53                   	push   %ebx
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 146:	31 f6                	xor    %esi,%esi
+    cc = read(0, &c, 1);
+ 148:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+ 14b:	83 ec 1c             	sub    $0x1c,%esp
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 14e:	eb 29                	jmp    179 <gets+0x39>
+    cc = read(0, &c, 1);
+ 150:	83 ec 04             	sub    $0x4,%esp
+ 153:	6a 01                	push   $0x1
+ 155:	57                   	push   %edi
+ 156:	6a 00                	push   $0x0
+ 158:	e8 2d 01 00 00       	call   28a <read>
+    if(cc < 1)
+ 15d:	83 c4 10             	add    $0x10,%esp
+ 160:	85 c0                	test   %eax,%eax
+ 162:	7e 1d                	jle    181 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 164:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 168:	8b 55 08             	mov    0x8(%ebp),%edx
+ 16b:	89 de                	mov    %ebx,%esi
+    if(c == '\n' || c == '\r')
+ 16d:	3c 0a                	cmp    $0xa,%al
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+ 16f:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 173:	74 1b                	je     190 <gets+0x50>
+ 175:	3c 0d                	cmp    $0xd,%al
+ 177:	74 17                	je     190 <gets+0x50>
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 179:	8d 5e 01             	lea    0x1(%esi),%ebx
+ 17c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 17f:	7c cf                	jl     150 <gets+0x10>
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 181:	8b 45 08             	mov    0x8(%ebp),%eax
+ 184:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 188:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 18b:	5b                   	pop    %ebx
+ 18c:	5e                   	pop    %esi
+ 18d:	5f                   	pop    %edi
+ 18e:	5d                   	pop    %ebp
+ 18f:	c3                   	ret    
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 190:	8b 45 08             	mov    0x8(%ebp),%eax
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 193:	89 de                	mov    %ebx,%esi
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+ 195:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 199:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19c:	5b                   	pop    %ebx
+ 19d:	5e                   	pop    %esi
+ 19e:	5f                   	pop    %edi
+ 19f:	5d                   	pop    %ebp
+ 1a0:	c3                   	ret    
+ 1a1:	eb 0d                	jmp    1b0 <stat>
+ 1a3:	90                   	nop
+ 1a4:	90                   	nop
+ 1a5:	90                   	nop
+ 1a6:	90                   	nop
+ 1a7:	90                   	nop
+ 1a8:	90                   	nop
+ 1a9:	90                   	nop
+ 1aa:	90                   	nop
+ 1ab:	90                   	nop
+ 1ac:	90                   	nop
+ 1ad:	90                   	nop
+ 1ae:	90                   	nop
+ 1af:	90                   	nop
+
+000001b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	56                   	push   %esi
+ 1b4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1b5:	83 ec 08             	sub    $0x8,%esp
+ 1b8:	6a 00                	push   $0x0
+ 1ba:	ff 75 08             	pushl  0x8(%ebp)
+ 1bd:	e8 f0 00 00 00       	call   2b2 <open>
+  if(fd < 0)
+ 1c2:	83 c4 10             	add    $0x10,%esp
+ 1c5:	85 c0                	test   %eax,%eax
+ 1c7:	78 27                	js     1f0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1c9:	83 ec 08             	sub    $0x8,%esp
+ 1cc:	ff 75 0c             	pushl  0xc(%ebp)
+ 1cf:	89 c3                	mov    %eax,%ebx
+ 1d1:	50                   	push   %eax
+ 1d2:	e8 f3 00 00 00       	call   2ca <fstat>
+ 1d7:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1d9:	89 1c 24             	mov    %ebx,(%esp)
+ 1dc:	e8 b9 00 00 00       	call   29a <close>
+  return r;
+ 1e1:	83 c4 10             	add    $0x10,%esp
+ 1e4:	89 f0                	mov    %esi,%eax
+}
+ 1e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1e9:	5b                   	pop    %ebx
+ 1ea:	5e                   	pop    %esi
+ 1eb:	5d                   	pop    %ebp
+ 1ec:	c3                   	ret    
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+ 1f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+ 1f5:	eb ef                	jmp    1e6 <stat+0x36>
+ 1f7:	89 f6                	mov    %esi,%esi
+ 1f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+
+00000200 <atoi>:
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	53                   	push   %ebx
+ 204:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 207:	0f be 11             	movsbl (%ecx),%edx
+ 20a:	8d 42 d0             	lea    -0x30(%edx),%eax
+ 20d:	3c 09                	cmp    $0x9,%al
+ 20f:	b8 00 00 00 00       	mov    $0x0,%eax
+ 214:	77 1f                	ja     235 <atoi+0x35>
+ 216:	8d 76 00             	lea    0x0(%esi),%esi
+ 219:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    n = n*10 + *s++ - '0';
+ 220:	8d 04 80             	lea    (%eax,%eax,4),%eax
+ 223:	83 c1 01             	add    $0x1,%ecx
+ 226:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22a:	0f be 11             	movsbl (%ecx),%edx
+ 22d:	8d 5a d0             	lea    -0x30(%edx),%ebx
+ 230:	80 fb 09             	cmp    $0x9,%bl
+ 233:	76 eb                	jbe    220 <atoi+0x20>
+    n = n*10 + *s++ - '0';
+  return n;
+}
+ 235:	5b                   	pop    %ebx
+ 236:	5d                   	pop    %ebp
+ 237:	c3                   	ret    
+ 238:	90                   	nop
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000240 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	56                   	push   %esi
+ 244:	53                   	push   %ebx
+ 245:	8b 5d 10             	mov    0x10(%ebp),%ebx
+ 248:	8b 45 08             	mov    0x8(%ebp),%eax
+ 24b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 24e:	85 db                	test   %ebx,%ebx
+ 250:	7e 14                	jle    266 <memmove+0x26>
+ 252:	31 d2                	xor    %edx,%edx
+ 254:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    *dst++ = *src++;
+ 258:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx
+ 25c:	88 0c 10             	mov    %cl,(%eax,%edx,1)
+ 25f:	83 c2 01             	add    $0x1,%edx
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 262:	39 da                	cmp    %ebx,%edx
+ 264:	75 f2                	jne    258 <memmove+0x18>
+    *dst++ = *src++;
+  return vdst;
+}
+ 266:	5b                   	pop    %ebx
+ 267:	5e                   	pop    %esi
+ 268:	5d                   	pop    %ebp
+ 269:	c3                   	ret    
+
+0000026a <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 26a:	b8 01 00 00 00       	mov    $0x1,%eax
+ 26f:	cd 40                	int    $0x40
+ 271:	c3                   	ret    
+
+00000272 <exit>:
+SYSCALL(exit)
+ 272:	b8 02 00 00 00       	mov    $0x2,%eax
+ 277:	cd 40                	int    $0x40
+ 279:	c3                   	ret    
+
+0000027a <wait>:
+SYSCALL(wait)
+ 27a:	b8 03 00 00 00       	mov    $0x3,%eax
+ 27f:	cd 40                	int    $0x40
+ 281:	c3                   	ret    
+
+00000282 <pipe>:
+SYSCALL(pipe)
+ 282:	b8 04 00 00 00       	mov    $0x4,%eax
+ 287:	cd 40                	int    $0x40
+ 289:	c3                   	ret    
+
+0000028a <read>:
+SYSCALL(read)
+ 28a:	b8 05 00 00 00       	mov    $0x5,%eax
+ 28f:	cd 40                	int    $0x40
+ 291:	c3                   	ret    
+
+00000292 <write>:
+SYSCALL(write)
+ 292:	b8 10 00 00 00       	mov    $0x10,%eax
+ 297:	cd 40                	int    $0x40
+ 299:	c3                   	ret    
+
+0000029a <close>:
+SYSCALL(close)
+ 29a:	b8 15 00 00 00       	mov    $0x15,%eax
+ 29f:	cd 40                	int    $0x40
+ 2a1:	c3                   	ret    
+
+000002a2 <kill>:
+SYSCALL(kill)
+ 2a2:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2a7:	cd 40                	int    $0x40
+ 2a9:	c3                   	ret    
+
+000002aa <exec>:
+SYSCALL(exec)
+ 2aa:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2af:	cd 40                	int    $0x40
+ 2b1:	c3                   	ret    
+
+000002b2 <open>:
+SYSCALL(open)
+ 2b2:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2b7:	cd 40                	int    $0x40
+ 2b9:	c3                   	ret    
+
+000002ba <mknod>:
+SYSCALL(mknod)
+ 2ba:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2bf:	cd 40                	int    $0x40
+ 2c1:	c3                   	ret    
+
+000002c2 <unlink>:
+SYSCALL(unlink)
+ 2c2:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2c7:	cd 40                	int    $0x40
+ 2c9:	c3                   	ret    
+
+000002ca <fstat>:
+SYSCALL(fstat)
+ 2ca:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2cf:	cd 40                	int    $0x40
+ 2d1:	c3                   	ret    
+
+000002d2 <link>:
+SYSCALL(link)
+ 2d2:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2d7:	cd 40                	int    $0x40
+ 2d9:	c3                   	ret    
+
+000002da <mkdir>:
+SYSCALL(mkdir)
+ 2da:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2df:	cd 40                	int    $0x40
+ 2e1:	c3                   	ret    
+
+000002e2 <chdir>:
+SYSCALL(chdir)
+ 2e2:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2e7:	cd 40                	int    $0x40
+ 2e9:	c3                   	ret    
+
+000002ea <dup>:
+SYSCALL(dup)
+ 2ea:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 2ef:	cd 40                	int    $0x40
+ 2f1:	c3                   	ret    
+
+000002f2 <getpid>:
+SYSCALL(getpid)
+ 2f2:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 2f7:	cd 40                	int    $0x40
+ 2f9:	c3                   	ret    
+
+000002fa <sbrk>:
+SYSCALL(sbrk)
+ 2fa:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 2ff:	cd 40                	int    $0x40
+ 301:	c3                   	ret    
+
+00000302 <sleep>:
+SYSCALL(sleep)
+ 302:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 307:	cd 40                	int    $0x40
+ 309:	c3                   	ret    
+
+0000030a <uptime>:
+SYSCALL(uptime)
+ 30a:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 30f:	cd 40                	int    $0x40
+ 311:	c3                   	ret    
+
+00000312 <readcount>:
+SYSCALL(readcount)
+ 312:	b8 16 00 00 00       	mov    $0x16,%eax
+ 317:	cd 40                	int    $0x40
+ 319:	c3                   	ret    
+
+0000031a <callcount>:
+SYSCALL(callcount)
+ 31a:	b8 17 00 00 00       	mov    $0x17,%eax
+ 31f:	cd 40                	int    $0x40
+ 321:	c3                   	ret    
+ 322:	66 90                	xchg   %ax,%ax
+ 324:	66 90                	xchg   %ax,%ax
+ 326:	66 90                	xchg   %ax,%ax
+ 328:	66 90                	xchg   %ax,%ax
+ 32a:	66 90                	xchg   %ax,%ax
+ 32c:	66 90                	xchg   %ax,%ax
+ 32e:	66 90                	xchg   %ax,%ax
+
+00000330 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	56                   	push   %esi
+ 335:	53                   	push   %ebx
+ 336:	89 c6                	mov    %eax,%esi
+ 338:	83 ec 3c             	sub    $0x3c,%esp
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 33b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 33e:	85 db                	test   %ebx,%ebx
+ 340:	74 7e                	je     3c0 <printint+0x90>
+ 342:	89 d0                	mov    %edx,%eax
+ 344:	c1 e8 1f             	shr    $0x1f,%eax
+ 347:	84 c0                	test   %al,%al
+ 349:	74 75                	je     3c0 <printint+0x90>
+    neg = 1;
+    x = -xx;
+ 34b:	89 d0                	mov    %edx,%eax
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+ 34d:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
+    x = -xx;
+ 354:	f7 d8                	neg    %eax
+ 356:	89 75 c0             	mov    %esi,-0x40(%ebp)
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 359:	31 ff                	xor    %edi,%edi
+ 35b:	8d 5d d7             	lea    -0x29(%ebp),%ebx
+ 35e:	89 ce                	mov    %ecx,%esi
+ 360:	eb 08                	jmp    36a <printint+0x3a>
+ 362:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 368:	89 cf                	mov    %ecx,%edi
+ 36a:	31 d2                	xor    %edx,%edx
+ 36c:	8d 4f 01             	lea    0x1(%edi),%ecx
+ 36f:	f7 f6                	div    %esi
+ 371:	0f b6 92 f8 06 00 00 	movzbl 0x6f8(%edx),%edx
+  }while((x /= base) != 0);
+ 378:	85 c0                	test   %eax,%eax
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+ 37a:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)
+  }while((x /= base) != 0);
+ 37d:	75 e9                	jne    368 <printint+0x38>
+  if(neg)
+ 37f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+ 382:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 385:	85 c0                	test   %eax,%eax
+ 387:	74 08                	je     391 <printint+0x61>
+    buf[i++] = '-';
+ 389:	c6 44 0d d8 2d       	movb   $0x2d,-0x28(%ebp,%ecx,1)
+ 38e:	8d 4f 02             	lea    0x2(%edi),%ecx
+ 391:	8d 7c 0d d7          	lea    -0x29(%ebp,%ecx,1),%edi
+ 395:	8d 76 00             	lea    0x0(%esi),%esi
+ 398:	0f b6 07             	movzbl (%edi),%eax
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 39b:	83 ec 04             	sub    $0x4,%esp
+ 39e:	83 ef 01             	sub    $0x1,%edi
+ 3a1:	6a 01                	push   $0x1
+ 3a3:	53                   	push   %ebx
+ 3a4:	56                   	push   %esi
+ 3a5:	88 45 d7             	mov    %al,-0x29(%ebp)
+ 3a8:	e8 e5 fe ff ff       	call   292 <write>
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+ 3ad:	83 c4 10             	add    $0x10,%esp
+ 3b0:	39 df                	cmp    %ebx,%edi
+ 3b2:	75 e4                	jne    398 <printint+0x68>
+    putc(fd, buf[i]);
+}
+ 3b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5e                   	pop    %esi
+ 3b9:	5f                   	pop    %edi
+ 3ba:	5d                   	pop    %ebp
+ 3bb:	c3                   	ret    
+ 3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3c0:	89 d0                	mov    %edx,%eax
+  static char digits[] = "0123456789ABCDEF";
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+ 3c2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+ 3c9:	eb 8b                	jmp    356 <printint+0x26>
+ 3cb:	90                   	nop
+ 3cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003d0 <printf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3d6:	8d 45 10             	lea    0x10(%ebp),%eax
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3d9:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 3df:	8b 7d 08             	mov    0x8(%ebp),%edi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 3e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 3e5:	0f b6 1e             	movzbl (%esi),%ebx
+ 3e8:	83 c6 01             	add    $0x1,%esi
+ 3eb:	84 db                	test   %bl,%bl
+ 3ed:	0f 84 b0 00 00 00    	je     4a3 <printf+0xd3>
+ 3f3:	31 d2                	xor    %edx,%edx
+ 3f5:	eb 39                	jmp    430 <printf+0x60>
+ 3f7:	89 f6                	mov    %esi,%esi
+ 3f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 400:	83 f8 25             	cmp    $0x25,%eax
+ 403:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+        state = '%';
+ 406:	ba 25 00 00 00       	mov    $0x25,%edx
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+ 40b:	74 18                	je     425 <printf+0x55>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 40d:	8d 45 e2             	lea    -0x1e(%ebp),%eax
+ 410:	83 ec 04             	sub    $0x4,%esp
+ 413:	88 5d e2             	mov    %bl,-0x1e(%ebp)
+ 416:	6a 01                	push   $0x1
+ 418:	50                   	push   %eax
+ 419:	57                   	push   %edi
+ 41a:	e8 73 fe ff ff       	call   292 <write>
+ 41f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+ 422:	83 c4 10             	add    $0x10,%esp
+ 425:	83 c6 01             	add    $0x1,%esi
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 428:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+ 42c:	84 db                	test   %bl,%bl
+ 42e:	74 73                	je     4a3 <printf+0xd3>
+    c = fmt[i] & 0xff;
+    if(state == 0){
+ 430:	85 d2                	test   %edx,%edx
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    c = fmt[i] & 0xff;
+ 432:	0f be cb             	movsbl %bl,%ecx
+ 435:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 438:	74 c6                	je     400 <printf+0x30>
+      if(c == '%'){
+        state = '%';
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+ 43a:	83 fa 25             	cmp    $0x25,%edx
+ 43d:	75 e6                	jne    425 <printf+0x55>
+      if(c == 'd'){
+ 43f:	83 f8 64             	cmp    $0x64,%eax
+ 442:	0f 84 f8 00 00 00    	je     540 <printf+0x170>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 448:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 44e:	83 f9 70             	cmp    $0x70,%ecx
+ 451:	74 5d                	je     4b0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 453:	83 f8 73             	cmp    $0x73,%eax
+ 456:	0f 84 84 00 00 00    	je     4e0 <printf+0x110>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 45c:	83 f8 63             	cmp    $0x63,%eax
+ 45f:	0f 84 ea 00 00 00    	je     54f <printf+0x17f>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 465:	83 f8 25             	cmp    $0x25,%eax
+ 468:	0f 84 c2 00 00 00    	je     530 <printf+0x160>
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 46e:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 471:	83 ec 04             	sub    $0x4,%esp
+ 474:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 478:	6a 01                	push   $0x1
+ 47a:	50                   	push   %eax
+ 47b:	57                   	push   %edi
+ 47c:	e8 11 fe ff ff       	call   292 <write>
+ 481:	83 c4 0c             	add    $0xc,%esp
+ 484:	8d 45 e6             	lea    -0x1a(%ebp),%eax
+ 487:	88 5d e6             	mov    %bl,-0x1a(%ebp)
+ 48a:	6a 01                	push   $0x1
+ 48c:	50                   	push   %eax
+ 48d:	57                   	push   %edi
+ 48e:	83 c6 01             	add    $0x1,%esi
+ 491:	e8 fc fd ff ff       	call   292 <write>
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 496:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 49a:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 49d:	31 d2                	xor    %edx,%edx
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 49f:	84 db                	test   %bl,%bl
+ 4a1:	75 8d                	jne    430 <printf+0x60>
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4a6:	5b                   	pop    %ebx
+ 4a7:	5e                   	pop    %esi
+ 4a8:	5f                   	pop    %edi
+ 4a9:	5d                   	pop    %ebp
+ 4aa:	c3                   	ret    
+ 4ab:	90                   	nop
+ 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+ 4b0:	83 ec 0c             	sub    $0xc,%esp
+ 4b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4b8:	6a 00                	push   $0x0
+ 4ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4bd:	89 f8                	mov    %edi,%eax
+ 4bf:	8b 13                	mov    (%ebx),%edx
+ 4c1:	e8 6a fe ff ff       	call   330 <printint>
+        ap++;
+ 4c6:	89 d8                	mov    %ebx,%eax
+ 4c8:	83 c4 10             	add    $0x10,%esp
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 4cb:	31 d2                	xor    %edx,%edx
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+        printint(fd, *ap, 16, 0);
+        ap++;
+ 4cd:	83 c0 04             	add    $0x4,%eax
+ 4d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4d3:	e9 4d ff ff ff       	jmp    425 <printf+0x55>
+ 4d8:	90                   	nop
+ 4d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      } else if(c == 's'){
+        s = (char*)*ap;
+ 4e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4e3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 4e5:	83 c0 04             	add    $0x4,%eax
+ 4e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+          s = "(null)";
+ 4eb:	b8 f0 06 00 00       	mov    $0x6f0,%eax
+ 4f0:	85 db                	test   %ebx,%ebx
+ 4f2:	0f 44 d8             	cmove  %eax,%ebx
+        while(*s != 0){
+ 4f5:	0f b6 03             	movzbl (%ebx),%eax
+ 4f8:	84 c0                	test   %al,%al
+ 4fa:	74 23                	je     51f <printf+0x14f>
+ 4fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 500:	88 45 e3             	mov    %al,-0x1d(%ebp)
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 503:	8d 45 e3             	lea    -0x1d(%ebp),%eax
+ 506:	83 ec 04             	sub    $0x4,%esp
+ 509:	6a 01                	push   $0x1
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+ 50b:	83 c3 01             	add    $0x1,%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 50e:	50                   	push   %eax
+ 50f:	57                   	push   %edi
+ 510:	e8 7d fd ff ff       	call   292 <write>
+      } else if(c == 's'){
+        s = (char*)*ap;
+        ap++;
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+ 515:	0f b6 03             	movzbl (%ebx),%eax
+ 518:	83 c4 10             	add    $0x10,%esp
+ 51b:	84 c0                	test   %al,%al
+ 51d:	75 e1                	jne    500 <printf+0x130>
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+      state = 0;
+ 51f:	31 d2                	xor    %edx,%edx
+ 521:	e9 ff fe ff ff       	jmp    425 <printf+0x55>
+ 526:	8d 76 00             	lea    0x0(%esi),%esi
+ 529:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 530:	83 ec 04             	sub    $0x4,%esp
+ 533:	88 5d e5             	mov    %bl,-0x1b(%ebp)
+ 536:	8d 45 e5             	lea    -0x1b(%ebp),%eax
+ 539:	6a 01                	push   $0x1
+ 53b:	e9 4c ff ff ff       	jmp    48c <printf+0xbc>
+      } else {
+        putc(fd, c);
+      }
+    } else if(state == '%'){
+      if(c == 'd'){
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	e9 6b ff ff ff       	jmp    4ba <printf+0xea>
+ 54f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+#include "user.h"
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+ 552:	83 ec 04             	sub    $0x4,%esp
+ 555:	8b 03                	mov    (%ebx),%eax
+ 557:	6a 01                	push   $0x1
+ 559:	88 45 e4             	mov    %al,-0x1c(%ebp)
+ 55c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+ 55f:	50                   	push   %eax
+ 560:	57                   	push   %edi
+ 561:	e8 2c fd ff ff       	call   292 <write>
+ 566:	e9 5b ff ff ff       	jmp    4c6 <printf+0xf6>
+ 56b:	66 90                	xchg   %ax,%ax
+ 56d:	66 90                	xchg   %ax,%ax
+ 56f:	90                   	nop
+
+00000570 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 570:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 571:	a1 90 09 00 00       	mov    0x990,%eax
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 576:	89 e5                	mov    %esp,%ebp
+ 578:	57                   	push   %edi
+ 579:	56                   	push   %esi
+ 57a:	53                   	push   %ebx
+ 57b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 57e:	8b 10                	mov    (%eax),%edx
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 580:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 583:	39 c8                	cmp    %ecx,%eax
+ 585:	73 19                	jae    5a0 <free+0x30>
+ 587:	89 f6                	mov    %esi,%esi
+ 589:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi
+ 590:	39 d1                	cmp    %edx,%ecx
+ 592:	72 1c                	jb     5b0 <free+0x40>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 594:	39 d0                	cmp    %edx,%eax
+ 596:	73 18                	jae    5b0 <free+0x40>
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 598:	89 d0                	mov    %edx,%eax
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 59a:	39 c8                	cmp    %ecx,%eax
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 59c:	8b 10                	mov    (%eax),%edx
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 59e:	72 f0                	jb     590 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5a0:	39 d0                	cmp    %edx,%eax
+ 5a2:	72 f4                	jb     598 <free+0x28>
+ 5a4:	39 d1                	cmp    %edx,%ecx
+ 5a6:	73 f0                	jae    598 <free+0x28>
+ 5a8:	90                   	nop
+ 5a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5b0:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5b3:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5b6:	39 d7                	cmp    %edx,%edi
+ 5b8:	74 19                	je     5d3 <free+0x63>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 5ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 5bd:	8b 50 04             	mov    0x4(%eax),%edx
+ 5c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5c3:	39 f1                	cmp    %esi,%ecx
+ 5c5:	74 23                	je     5ea <free+0x7a>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 5c7:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+ 5c9:	a3 90 09 00 00       	mov    %eax,0x990
+}
+ 5ce:	5b                   	pop    %ebx
+ 5cf:	5e                   	pop    %esi
+ 5d0:	5f                   	pop    %edi
+ 5d1:	5d                   	pop    %ebp
+ 5d2:	c3                   	ret    
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 5d3:	03 72 04             	add    0x4(%edx),%esi
+ 5d6:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5d9:	8b 10                	mov    (%eax),%edx
+ 5db:	8b 12                	mov    (%edx),%edx
+ 5dd:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5e0:	8b 50 04             	mov    0x4(%eax),%edx
+ 5e3:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 5e6:	39 f1                	cmp    %esi,%ecx
+ 5e8:	75 dd                	jne    5c7 <free+0x57>
+    p->s.size += bp->s.size;
+ 5ea:	03 53 fc             	add    -0x4(%ebx),%edx
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 5ed:	a3 90 09 00 00       	mov    %eax,0x990
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 5f2:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 5f5:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 5f8:	89 10                	mov    %edx,(%eax)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5fa:	5b                   	pop    %ebx
+ 5fb:	5e                   	pop    %esi
+ 5fc:	5f                   	pop    %edi
+ 5fd:	5d                   	pop    %ebp
+ 5fe:	c3                   	ret    
+ 5ff:	90                   	nop
+
+00000600 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 600:	55                   	push   %ebp
+ 601:	89 e5                	mov    %esp,%ebp
+ 603:	57                   	push   %edi
+ 604:	56                   	push   %esi
+ 605:	53                   	push   %ebx
+ 606:	83 ec 0c             	sub    $0xc,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 609:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 60c:	8b 15 90 09 00 00    	mov    0x990,%edx
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 612:	8d 78 07             	lea    0x7(%eax),%edi
+ 615:	c1 ef 03             	shr    $0x3,%edi
+ 618:	83 c7 01             	add    $0x1,%edi
+  if((prevp = freep) == 0){
+ 61b:	85 d2                	test   %edx,%edx
+ 61d:	0f 84 a3 00 00 00    	je     6c6 <malloc+0xc6>
+ 623:	8b 02                	mov    (%edx),%eax
+ 625:	8b 48 04             	mov    0x4(%eax),%ecx
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+ 628:	39 cf                	cmp    %ecx,%edi
+ 62a:	76 74                	jbe    6a0 <malloc+0xa0>
+ 62c:	81 ff 00 10 00 00    	cmp    $0x1000,%edi
+ 632:	be 00 10 00 00       	mov    $0x1000,%esi
+ 637:	8d 1c fd 00 00 00 00 	lea    0x0(,%edi,8),%ebx
+ 63e:	0f 43 f7             	cmovae %edi,%esi
+ 641:	ba 00 80 00 00       	mov    $0x8000,%edx
+ 646:	81 ff ff 0f 00 00    	cmp    $0xfff,%edi
+ 64c:	0f 46 da             	cmovbe %edx,%ebx
+ 64f:	eb 10                	jmp    661 <malloc+0x61>
+ 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 658:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 65a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 65d:	39 cf                	cmp    %ecx,%edi
+ 65f:	76 3f                	jbe    6a0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 661:	39 05 90 09 00 00    	cmp    %eax,0x990
+ 667:	89 c2                	mov    %eax,%edx
+ 669:	75 ed                	jne    658 <malloc+0x58>
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+ 66b:	83 ec 0c             	sub    $0xc,%esp
+ 66e:	53                   	push   %ebx
+ 66f:	e8 86 fc ff ff       	call   2fa <sbrk>
+  if(p == (char*)-1)
+ 674:	83 c4 10             	add    $0x10,%esp
+ 677:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 67a:	74 1c                	je     698 <malloc+0x98>
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+ 67c:	89 70 04             	mov    %esi,0x4(%eax)
+  free((void*)(hp + 1));
+ 67f:	83 ec 0c             	sub    $0xc,%esp
+ 682:	83 c0 08             	add    $0x8,%eax
+ 685:	50                   	push   %eax
+ 686:	e8 e5 fe ff ff       	call   570 <free>
+  return freep;
+ 68b:	8b 15 90 09 00 00    	mov    0x990,%edx
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+ 691:	83 c4 10             	add    $0x10,%esp
+ 694:	85 d2                	test   %edx,%edx
+ 696:	75 c0                	jne    658 <malloc+0x58>
+        return 0;
+ 698:	31 c0                	xor    %eax,%eax
+ 69a:	eb 1c                	jmp    6b8 <malloc+0xb8>
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+ 6a0:	39 cf                	cmp    %ecx,%edi
+ 6a2:	74 1c                	je     6c0 <malloc+0xc0>
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+ 6a4:	29 f9                	sub    %edi,%ecx
+ 6a6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6a9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6ac:	89 78 04             	mov    %edi,0x4(%eax)
+      }
+      freep = prevp;
+ 6af:	89 15 90 09 00 00    	mov    %edx,0x990
+      return (void*)(p + 1);
+ 6b5:	83 c0 08             	add    $0x8,%eax
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
+ 6b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6bb:	5b                   	pop    %ebx
+ 6bc:	5e                   	pop    %esi
+ 6bd:	5f                   	pop    %edi
+ 6be:	5d                   	pop    %ebp
+ 6bf:	c3                   	ret    
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+ 6c0:	8b 08                	mov    (%eax),%ecx
+ 6c2:	89 0a                	mov    %ecx,(%edx)
+ 6c4:	eb e9                	jmp    6af <malloc+0xaf>
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+ 6c6:	c7 05 90 09 00 00 94 	movl   $0x994,0x990
+ 6cd:	09 00 00 
+ 6d0:	c7 05 94 09 00 00 94 	movl   $0x994,0x994
+ 6d7:	09 00 00 
+    base.s.size = 0;
+ 6da:	b8 94 09 00 00       	mov    $0x994,%eax
+ 6df:	c7 05 98 09 00 00 00 	movl   $0x0,0x998
+ 6e6:	00 00 00 
+ 6e9:	e9 3e ff ff ff       	jmp    62c <malloc+0x2c>
diff -ruN ./xv6-public-src/zombie.d ./xv6-public/zombie.d
--- ./xv6-public-src/zombie.d	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/zombie.d	2019-11-28 17:52:28.892334199 +0200
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files ./xv6-public-src/zombie.o and ./xv6-public/zombie.o differ
diff -ruN ./xv6-public-src/zombie.sym ./xv6-public/zombie.sym
--- ./xv6-public-src/zombie.sym	1970-01-01 02:00:00.000000000 +0200
+++ ./xv6-public/zombie.sym	2019-11-28 17:52:28.928356408 +0200
@@ -0,0 +1,59 @@
+00000000 .text
+000006f0 .rodata
+0000070c .eh_frame
+00000990 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000330 printint
+000006f8 digits.1111
+00000000 umalloc.c
+00000990 freep
+00000994 base
+00000030 strcpy
+000003d0 printf
+00000240 memmove
+000002ba mknod
+00000140 gets
+000002f2 getpid
+00000600 malloc
+00000302 sleep
+00000312 readcount
+0000031a callcount
+00000282 pipe
+00000292 write
+000002ca fstat
+000002a2 kill
+000002e2 chdir
+000002aa exec
+0000027a wait
+0000028a read
+000002c2 unlink
+0000026a fork
+000002fa sbrk
+0000030a uptime
+00000990 __bss_start
+000000e0 memset
+00000000 main
+00000060 strcmp
+000002ea dup
+000001b0 stat
+00000990 _edata
+0000099c _end
+000002d2 link
+00000272 exit
+00000200 atoi
+000000b0 strlen
+000002b2 open
+00000100 strchr
+000002da mkdir
+0000029a close
+00000570 free
